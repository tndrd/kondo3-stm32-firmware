
UART_HUB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a8a4  08015f5c  08015f5c  00025f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08030800  08030800  00040800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08030808  08030808  00040808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803080c  0803080c  0004080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  08030810  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002ea4  240001f4  08030a04  000501f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003098  08030a04  00053098  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032331  00000000  00000000  00050222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c0b  00000000  00000000  00082553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022e8  00000000  00000000  00088160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002080  00000000  00000000  0008a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f36d  00000000  00000000  0008c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003085f  00000000  00000000  000cb835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001726b5  00000000  00000000  000fc094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026e749  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d3c  00000000  00000000  0026e79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015f44 	.word	0x08015f44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08015f44 	.word	0x08015f44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <spi_init>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <spi_init+0x1c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	24000210 	.word	0x24000210

080006a4 <spiTransmit>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <spiTransmit+0x48>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	887a      	ldrh	r2, [r7, #2]
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00d f9df 	bl	800da7c <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 80006be:	bf00      	nop
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <spiTransmit+0x48>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00e f87b 	bl	800e7c0 <HAL_SPI_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d1f7      	bne.n	80006c0 <spiTransmit+0x1c>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <spiTransmit+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf0c      	ite	eq
 80006dc:	2301      	moveq	r3, #1
 80006de:	2300      	movne	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b25b      	sxtb	r3, r3
  }
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	24000210 	.word	0x24000210

080006f0 <spiReceiv>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <spiReceiv+0x48>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	887a      	ldrh	r2, [r7, #2]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f00d fb03 	bl	800dd10 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 800070a:	bf00      	nop
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <spiReceiv+0x48>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f00e f855 	bl	800e7c0 <HAL_SPI_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f7      	bne.n	800070c <spiReceiv+0x1c>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <spiReceiv+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b25b      	sxtb	r3, r3
  }
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	24000210 	.word	0x24000210

0800073c <bhy2_spi_read>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <bhy2_spi_read+0x64>)
 800074e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000752:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000754:	f107 030f 	add.w	r3, r7, #15
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffa2 	bl	80006a4 <spiTransmit>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <bhy2_spi_read+0x30>
    return IMU_ERR_SPI;
 8000766:	f06f 0301 	mvn.w	r3, #1
 800076a:	e014      	b.n	8000796 <bhy2_spi_read+0x5a>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	b29b      	uxth	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f7ff ffbc 	bl	80006f0 <spiReceiv>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <bhy2_spi_read+0x4e>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <bhy2_spi_read+0x64>)
 8000780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000784:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e005      	b.n	8000796 <bhy2_spi_read+0x5a>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <bhy2_spi_read+0x64>)
 800078c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000790:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000792:	f06f 0301 	mvn.w	r3, #1
  }
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58021000 	.word	0x58021000

080007a4 <bhy2_spi_write>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b40      	cmp	r3, #64	; 0x40
 80007b8:	d902      	bls.n	80007c0 <bhy2_spi_write+0x1c>
    return -4;
 80007ba:	f06f 0303 	mvn.w	r3, #3
 80007be:	e023      	b.n	8000808 <bhy2_spi_write+0x64>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <bhy2_spi_write+0x6c>)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <bhy2_spi_write+0x70>)
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f014 fbcb 	bl	8014f68 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <bhy2_spi_write+0x74>)
 80007d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007d8:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <bhy2_spi_write+0x6c>)
 80007e6:	f7ff ff5d 	bl	80006a4 <spiTransmit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <bhy2_spi_write+0x58>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <bhy2_spi_write+0x74>)
 80007f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f6:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e005      	b.n	8000808 <bhy2_spi_write+0x64>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <bhy2_spi_write+0x74>)
 80007fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000802:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000214 	.word	0x24000214
 8000814:	24000215 	.word	0x24000215
 8000818:	58021000 	.word	0x58021000

0800081c <bhy2_delay_us>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082c:	d309      	bcc.n	8000842 <bhy2_delay_us+0x26>
    HAL_Delay( us / 1000 );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <bhy2_delay_us+0x38>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	099b      	lsrs	r3, r3, #6
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fd93 	bl	8005364 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 800083e:	e005      	b.n	800084c <bhy2_delay_us+0x30>
      __NOP();
 8000840:	bf00      	nop
    while( us-- ) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f9      	bne.n	8000840 <bhy2_delay_us+0x24>
  }
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	10624dd3 	.word	0x10624dd3

08000858 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	4613      	mov	r3, r2
 8000868:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d008      	beq.n	8000886 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8000874:	89ba      	ldrh	r2, [r7, #12]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7bf8      	ldrb	r0, [r7, #15]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	f001 f925 	bl	8001aca <bhy2_hif_get_regs>
 8000880:	4603      	mov	r3, r0
 8000882:	75fb      	strb	r3, [r7, #23]
 8000884:	e001      	b.n	800088a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000886:	23ff      	movs	r3, #255	; 0xff
 8000888:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800088a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b08f      	sub	sp, #60	; 0x3c
 800089a:	af02      	add	r7, sp, #8
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <bhy2_get_and_process_fifo+0x1c>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e11b      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 80008be:	f06f 0305 	mvn.w	r3, #5
 80008c2:	e115      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	2100      	movs	r1, #0
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f014 fb5b 	bl	8014f84 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2214      	movs	r2, #20
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f014 fb54 	bl	8014f84 <memset>

    fifos.buffer = work_buffer;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fa5f 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 80008f8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8000900:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000904:	e0f4      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 800090a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000912:	e042      	b.n	800099a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8000914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000918:	f003 0306 	and.w	r3, r3, #6
 800091c:	2b02      	cmp	r3, #2
 800091e:	d00e      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8000920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000924:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8000928:	2b04      	cmp	r3, #4
 800092a:	d008      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 800092c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000930:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8000934:	2b06      	cmp	r3, #6
 8000936:	d002      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d020      	beq.n	8000980 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8000942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8000948:	6a3a      	ldr	r2, [r7, #32]
 800094a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 800094c:	1ad1      	subs	r1, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f107 0214 	add.w	r2, r7, #20
 8000954:	f102 0408 	add.w	r4, r2, #8
 8000958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	4623      	mov	r3, r4
 8000960:	f001 fad7 	bl	8001f12 <bhy2_hif_get_wakeup_fifo>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 800096a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8000972:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000976:	e0bb      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	4413      	add	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4619      	mov	r1, r3
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fbad 	bl	80010e8 <parse_fifo>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 800099a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <bhy2_get_and_process_fifo+0x112>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <bhy2_get_and_process_fifo+0x11a>
 80009a8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0b1      	beq.n	8000914 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80009b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80009bc:	e042      	b.n	8000a44 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	f003 0318 	and.w	r3, r3, #24
 80009c6:	2b08      	cmp	r3, #8
 80009c8:	d00e      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80009d2:	2b10      	cmp	r3, #16
 80009d4:	d008      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80009d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009da:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80009de:	2b18      	cmp	r3, #24
 80009e0:	d002      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d020      	beq.n	8000a2a <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80009f2:	6a3a      	ldr	r2, [r7, #32]
 80009f4:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80009f6:	1ad1      	subs	r1, r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f107 0214 	add.w	r2, r7, #20
 80009fe:	f102 0408 	add.w	r4, r2, #8
 8000a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4623      	mov	r3, r4
 8000a0a:	f001 fa98 	bl	8001f3e <bhy2_hif_get_nonwakeup_fifo>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8000a14:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8000a1c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a20:	e066      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	4413      	add	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4619      	mov	r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fb58 	bl	80010e8 <parse_fifo>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <bhy2_get_and_process_fifo+0x1bc>
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <bhy2_get_and_process_fifo+0x1c4>
 8000a52:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0b1      	beq.n	80009be <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8000a5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000a66:	e036      	b.n	8000ad6 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8000a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <bhy2_get_and_process_fifo+0x1e4>
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d020      	beq.n	8000abc <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8000a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8000a84:	6a3a      	ldr	r2, [r7, #32]
 8000a86:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8000a88:	1ad1      	subs	r1, r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f107 0214 	add.w	r2, r7, #20
 8000a90:	f102 0408 	add.w	r4, r2, #8
 8000a94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	f001 fab0 	bl	8002000 <bhy2_hif_get_status_fifo_async>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8000aa6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8000aae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ab2:	e01d      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	4413      	add	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 fb0f 	bl	80010e8 <parse_fifo>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <bhy2_get_and_process_fifo+0x24e>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <bhy2_get_and_process_fifo+0x256>
 8000ae4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0bd      	beq.n	8000a68 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8000aec:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3734      	adds	r7, #52	; 0x34
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b04:	6079      	str	r1, [r7, #4]
 8000b06:	603a      	str	r2, [r7, #0]
 8000b08:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00a      	beq.n	8000b2a <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fa84 	bl	800202c <bhy2_hif_exec_sensor_conf_cmd>
 8000b24:	4603      	mov	r3, r0
 8000b26:	75fb      	strb	r3, [r7, #23]
 8000b28:	e001      	b.n	8000b2e <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b2a:	23ff      	movs	r3, #255	; 0xff
 8000b2c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f001 f8e8 	bl	8001d28 <bhy2_hif_get_product_id>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b5e:	23ff      	movs	r3, #255	; 0xff
 8000b60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f001 f8de 	bl	8001d48 <bhy2_hif_get_kernel_version>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e001      	b.n	8000b96 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f001 f8e8 	bl	8001d90 <bhy2_hif_get_boot_status>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e001      	b.n	8000bca <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000bc6:	23ff      	movs	r3, #255	; 0xff
 8000bc8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af02      	add	r7, sp, #8
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00d      	beq.n	8000c0a <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f240 101f 	movw	r0, #287	; 0x11f
 8000c00:	f001 f80a 	bl	8001c18 <bhy2_hif_get_parameter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <bhy2_upload_firmware_to_ram+0x1c>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	75fb      	strb	r3, [r7, #23]
 8000c3a:	e007      	b.n	8000c4c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f001 f90d 	bl	8001e62 <bhy2_hif_upload_firmware_to_ram>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e005      	b.n	8000c7c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f932 	bl	8001edc <bhy2_hif_boot_program_ram>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e007      	b.n	8000cb4 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 ff45 	bl	8001b3a <bhy2_hif_set_regs>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8000cd4:	23ff      	movs	r3, #255	; 0xff
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e007      	b.n	8000cea <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f000 fef2 	bl	8001aca <bhy2_hif_get_regs>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e006      	b.n	8000d1e <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f001 f84b 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	6039      	str	r1, [r7, #0]
 8000d34:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e007      	b.n	8000d56 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f000 fef4 	bl	8001b3a <bhy2_hif_set_regs>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e005      	b.n	8000d86 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 f827 	bl	8001dd0 <bhy2_hif_reset>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b08a      	sub	sp, #40	; 0x28
 8000d96:	af04      	add	r7, sp, #16
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d014      	beq.n	8000dd6 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8000dac:	f640 1238 	movw	r2, #2360	; 0x938
 8000db0:	2100      	movs	r1, #0
 8000db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db4:	f014 f8e6 	bl	8014f84 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	7bf8      	ldrb	r0, [r7, #15]
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	f000 fe3e 	bl	8001a4c <bhy2_hif_init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75fb      	strb	r3, [r7, #23]
 8000dd4:	e001      	b.n	8000dda <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <bhy2_register_fifo_parse_callback+0x20>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8000e06:	23ff      	movs	r3, #255	; 0xff
 8000e08:	75fb      	strb	r3, [r7, #23]
 8000e0a:	e013      	b.n	8000e34 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4413      	add	r3, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	3318      	adds	r3, #24
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8000e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b092      	sub	sp, #72	; 0x48
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000e58:	e079      	b.n	8000f4e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff feb8 	bl	8000bd6 <bhy2_get_virt_sensor_list>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8000e6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d16c      	bne.n	8000f4e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000e80:	e041      	b.n	8000f06 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8000e82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8000e8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8000e9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ea2:	3348      	adds	r3, #72	; 0x48
 8000ea4:	443b      	add	r3, r7
 8000ea6:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8000eaa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d022      	beq.n	8000efc <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ebc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 f8e6 	bl	8002092 <bhy2_hif_get_sensor_info>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8000ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d113      	bne.n	8000efc <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8000ed4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8000edc:	23f8      	movs	r3, #248	; 0xf8
 8000ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8000ee2:	e018      	b.n	8000f16 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8000ee4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000ee8:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	331c      	adds	r3, #28
 8000ef8:	4602      	mov	r2, r0
 8000efa:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8000efc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f00:	3301      	adds	r3, #1
 8000f02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f0a:	2bf4      	cmp	r3, #244	; 0xf4
 8000f0c:	d803      	bhi.n	8000f16 <bhy2_update_virtual_sensor_list+0xd2>
 8000f0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0b5      	beq.n	8000e82 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8000f16:	23ff      	movs	r3, #255	; 0xff
 8000f18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f1c:	e013      	b.n	8000f46 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8000f1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f22:	3bf5      	subs	r3, #245	; 0xf5
 8000f24:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <bhy2_update_virtual_sensor_list+0x118>)
 8000f2a:	5cc8      	ldrb	r0, [r1, r3]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	331c      	adds	r3, #28
 8000f38:	4602      	mov	r2, r0
 8000f3a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8000f3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f40:	3b01      	subs	r3, #1
 8000f42:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f4a:	2bf4      	cmp	r3, #244	; 0xf4
 8000f4c:	d8e7      	bhi.n	8000f1e <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8000f4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3748      	adds	r7, #72	; 0x48
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08016038 	.word	0x08016038

08000f60 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <bhy2_get_error_value+0x1a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e007      	b.n	8000f90 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	202e      	movs	r0, #46	; 0x2e
 8000f88:	f7ff fc66 	bl	8000858 <bhy2_get_regs>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d04e      	beq.n	8001052 <get_callback_info+0xb6>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04b      	beq.n	8001052 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3318      	adds	r3, #24
 8000fca:	4602      	mov	r2, r0
 8000fcc:	3304      	adds	r3, #4
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	6010      	str	r0, [r2, #0]
 8000fd4:	6051      	str	r1, [r2, #4]
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
 8000fd8:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2bf4      	cmp	r3, #244	; 0xf4
 8000fde:	d91b      	bls.n	8001018 <get_callback_info+0x7c>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d117      	bne.n	8001018 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2200      	movs	r2, #0
 8000fec:	705a      	strb	r2, [r3, #1]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	709a      	strb	r2, [r3, #2]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	70da      	strb	r2, [r3, #3]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	715a      	strb	r2, [r3, #5]
 8001000:	2200      	movs	r2, #0
 8001002:	719a      	strb	r2, [r3, #6]
 8001004:	2200      	movs	r2, #0
 8001006:	71da      	strb	r2, [r3, #7]
 8001008:	2200      	movs	r2, #0
 800100a:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3bf5      	subs	r3, #245	; 0xf5
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <get_callback_info+0xd0>)
 8001012:	5cd2      	ldrb	r2, [r2, r3]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d11c      	bne.n	8001058 <get_callback_info+0xbc>
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2200      	movs	r2, #0
 800102a:	705a      	strb	r2, [r3, #1]
 800102c:	2200      	movs	r2, #0
 800102e:	709a      	strb	r2, [r3, #2]
 8001030:	2200      	movs	r2, #0
 8001032:	70da      	strb	r2, [r3, #3]
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
 800103e:	2200      	movs	r2, #0
 8001040:	719a      	strb	r2, [r3, #6]
 8001042:	2200      	movs	r2, #0
 8001044:	71da      	strb	r2, [r3, #7]
 8001046:	2200      	movs	r2, #0
 8001048:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8001050:	e002      	b.n	8001058 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	e000      	b.n	800105a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8001058:	bf00      	nop
    }

    return rslt;
 800105a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	08016038 	.word	0x08016038

08001070 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	460b      	mov	r3, r1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	441a      	add	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d803      	bhi.n	8001096 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e002      	b.n	800109c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d808      	bhi.n	80010d4 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	441a      	add	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e001      	b.n	80010d8 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80010d4:	23f9      	movs	r3, #249	; 0xf9
 80010d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	b099      	sub	sp, #100	; 0x64
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80010f4:	627a      	str	r2, [r7, #36]	; 0x24
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8001112:	e16a      	b.n	80013ea <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8001128:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffb9 	bl	80010aa <get_time_stamp>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800113e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <parse_fifo+0x64>
        {
            return rslt;
 8001146:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800114a:	e191      	b.n	8001470 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 800114c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001150:	2b00      	cmp	r3, #0
 8001152:	d025      	beq.n	80011a0 <parse_fifo+0xb8>
 8001154:	2b00      	cmp	r3, #0
 8001156:	f2c0 80f6 	blt.w	8001346 <parse_fifo+0x25e>
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	f300 80f3 	bgt.w	8001346 <parse_fifo+0x25e>
 8001160:	2bf5      	cmp	r3, #245	; 0xf5
 8001162:	f2c0 80f0 	blt.w	8001346 <parse_fifo+0x25e>
 8001166:	3bf5      	subs	r3, #245	; 0xf5
 8001168:	2b0a      	cmp	r3, #10
 800116a:	f200 80ec 	bhi.w	8001346 <parse_fifo+0x25e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <parse_fifo+0x8c>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ad 	.word	0x080011ad
 8001178:	08001215 	.word	0x08001215
 800117c:	08001293 	.word	0x08001293
 8001180:	08001347 	.word	0x08001347
 8001184:	08001347 	.word	0x08001347
 8001188:	08001347 	.word	0x08001347
 800118c:	080011ad 	.word	0x080011ad
 8001190:	08001215 	.word	0x08001215
 8001194:	08001293 	.word	0x08001293
 8001198:	08001347 	.word	0x08001347
 800119c:	080011a1 	.word	0x080011a1
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	601a      	str	r2, [r3, #0]
                break;
 80011aa:	e11e      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80011ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80011b0:	461a      	mov	r2, r3
 80011b2:	2102      	movs	r1, #2
 80011b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b6:	f7ff ff5b 	bl	8001070 <get_buffer_status>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80011c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <parse_fifo+0xe6>
                {
                    return rslt;
 80011c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80011cc:	e150      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80011ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <parse_fifo+0xf0>
                {
                    break;
 80011d6:	e108      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80011d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e4:	3301      	adds	r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	469a      	mov	sl, r3
 80011f0:	4693      	mov	fp, r2
 80011f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f4:	eb10 020a 	adds.w	r2, r0, sl
 80011f8:	61ba      	str	r2, [r7, #24]
 80011fa:	eb41 020b 	adc.w	r2, r1, fp
 80011fe:	61fa      	str	r2, [r7, #28]
 8001200:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001204:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c9a      	adds	r2, r3, #2
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	601a      	str	r2, [r3, #0]
                break;
 8001212:	e0ea      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8001214:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001218:	461a      	mov	r2, r3
 800121a:	2103      	movs	r1, #3
 800121c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800121e:	f7ff ff27 	bl	8001070 <get_buffer_status>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8001228:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <parse_fifo+0x14e>
                {
                    return rslt;
 8001230:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001234:	e11c      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8001236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <parse_fifo+0x158>
                {
                    break;
 800123e:	e0d4      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124c:	3301      	adds	r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b21c      	sxth	r4, r3
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800125a:	3302      	adds	r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461d      	mov	r5, r3
 8001270:	4616      	mov	r6, r2
 8001272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001274:	1942      	adds	r2, r0, r5
 8001276:	613a      	str	r2, [r7, #16]
 8001278:	eb41 0206 	adc.w	r2, r1, r6
 800127c:	617a      	str	r2, [r7, #20]
 800127e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001282:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1cda      	adds	r2, r3, #3
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	601a      	str	r2, [r3, #0]
                break;
 8001290:	e0ab      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 8001292:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001296:	461a      	mov	r2, r3
 8001298:	2106      	movs	r1, #6
 800129a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129c:	f7ff fee8 	bl	8001070 <get_buffer_status>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80012a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <parse_fifo+0x1cc>
                {
                    return rslt;
 80012ae:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80012b2:	e0dd      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80012b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d000      	beq.n	80012be <parse_fifo+0x1d6>
                {
                    break;
 80012bc:	e095      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c4:	3301      	adds	r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d2:	3302      	adds	r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4319      	orrs	r1, r3
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e2:	3303      	adds	r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	4319      	orrs	r1, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f2:	3304      	adds	r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	430b      	orrs	r3, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	4698      	mov	r8, r3
 8001300:	4691      	mov	r9, r2
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001308:	3305      	adds	r3, #5
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2200      	movs	r2, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	60fa      	str	r2, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	000b      	movs	r3, r1
 8001322:	2200      	movs	r2, #0
 8001324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001326:	ea48 0002 	orr.w	r0, r8, r2
 800132a:	6038      	str	r0, [r7, #0]
 800132c:	ea49 0303 	orr.w	r3, r9, r3
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001336:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1d9a      	adds	r2, r3, #6
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	601a      	str	r2, [r3, #0]
                break;
 8001344:	e051      	b.n	80013ea <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8001346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800134a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe23 	bl	8000f9c <get_callback_info>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 800135c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <parse_fifo+0x282>
                {
                    return rslt;
 8001364:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001368:	e082      	b.n	8001470 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 800136a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800136e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001372:	461a      	mov	r2, r3
 8001374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001376:	f7ff fe7b 	bl	8001070 <get_buffer_status>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8001380:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <parse_fifo+0x2a6>
                {
                    return rslt;
 8001388:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800138c:	e070      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800138e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001392:	2b00      	cmp	r3, #0
 8001394:	d000      	beq.n	8001398 <parse_fifo+0x2b0>
                {
                    break;
 8001396:	e028      	b.n	80013ea <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8001398:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01c      	beq.n	80013da <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a6:	3301      	adds	r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80013b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80013b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80013bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 80013c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 80013c8:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 80013cc:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 80013d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013e2:	441a      	add	r2, r3
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	601a      	str	r2, [r3, #0]
                break;
 80013e8:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d204      	bcs.n	8001400 <parse_fifo+0x318>
 80013f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f43f ae8a 	beq.w	8001114 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d031      	beq.n	800146c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d202      	bcs.n	800141a <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8001414:	f06f 0301 	mvn.w	r3, #1
 8001418:	e02a      	b.n	8001470 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01d      	beq.n	800146c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001436:	e013      	b.n	8001460 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001444:	440b      	add	r3, r1
 8001446:	441a      	add	r2, r3
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	6919      	ldr	r1, [r3, #16]
 800144c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001450:	440b      	add	r3, r1
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8001456:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800145a:	3301      	adds	r3, #1
 800145c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001460:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3e5      	bcc.n	8001438 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 800146c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8001470:	4618      	mov	r0, r3
 8001472:	3764      	adds	r7, #100	; 0x64
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop

0800147c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b0cf      	sub	sp, #316	; 0x13c
 8001480:	af00      	add	r7, sp, #0
 8001482:	4604      	mov	r4, r0
 8001484:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001488:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800148c:	6001      	str	r1, [r0, #0]
 800148e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001492:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8001496:	600a      	str	r2, [r1, #0]
 8001498:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800149c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80014aa:	4622      	mov	r2, r4
 80014ac:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80014b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 81af 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
 80014be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <bhy2_hif_exec_cmd_generic+0x60>
 80014cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 81a0 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
 80014dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <bhy2_hif_exec_cmd_generic+0x78>
 80014e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014e8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8194 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80014f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8188 	beq.w	8001810 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8001500:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001504:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001508:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8001514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 800151c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001524:	4413      	add	r3, r2
 8001526:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800152a:	e003      	b.n	8001534 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 800152c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001530:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8001534:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8001540:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3301      	adds	r3, #1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800154e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001552:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800155e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001562:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8001564:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2da      	uxtb	r2, r3
 8001574:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800157c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800157e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001582:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d113      	bne.n	80015b4 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 800158c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001598:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800159c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800159e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015b0:	70da      	strb	r2, [r3, #3]
 80015b2:	e010      	b.n	80015d6 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80015b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c2:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015d4:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80015dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80015e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80015e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015ec:	4413      	add	r3, r2
 80015ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80015f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80015fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001604:	429a      	cmp	r2, r3
 8001606:	f240 80f9 	bls.w	80017fc <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 800160a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8001614:	e0f2      	b.n	80017fc <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8001616:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800161a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161e:	4413      	add	r3, r2
 8001620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001624:	429a      	cmp	r2, r3
 8001626:	d20b      	bcs.n	8001640 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8001628:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800162c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8001630:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001634:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800163e:	e020      	b.n	8001682 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8001640:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001644:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001648:	4413      	add	r3, r2
 800164a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800164e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8001656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8001662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3301      	adds	r3, #1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8001670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d903      	bls.n	8001682 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8001682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001686:	2b00      	cmp	r3, #0
 8001688:	d07e      	beq.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 800168a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001698:	4413      	add	r3, r2
 800169a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800169e:	429a      	cmp	r2, r3
 80016a0:	d315      	bcc.n	80016ce <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80016ba:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80016c6:	4619      	mov	r1, r3
 80016c8:	f013 fc4e 	bl	8014f68 <memcpy>
 80016cc:	e05c      	b.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 80016ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d93b      	bls.n	8001758 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80016e0:	f107 0214 	add.w	r2, r7, #20
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e8:	18d0      	adds	r0, r2, r3
 80016ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80016f8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	18d1      	adds	r1, r2, r3
 8001700:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001704:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001708:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	461a      	mov	r2, r3
 8001712:	f013 fc29 	bl	8014f68 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8001716:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800171a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800171e:	441a      	add	r2, r3
 8001720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f107 0214 	add.w	r2, r7, #20
 8001730:	18d0      	adds	r0, r2, r3
 8001732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001736:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001746:	441a      	add	r2, r3
 8001748:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800174c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	f013 fc09 	bl	8014f68 <memcpy>
 8001756:	e017      	b.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8001758:	f107 0214 	add.w	r2, r7, #20
 800175c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001760:	18d0      	adds	r0, r2, r3
 8001762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001766:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001776:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001782:	4619      	mov	r1, r3
 8001784:	f013 fbf0 	bl	8014f68 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8001788:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800178c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001790:	4413      	add	r3, r2
 8001792:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001796:	429a      	cmp	r2, r3
 8001798:	d012      	beq.n	80017c0 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 800179a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800179e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017a2:	4413      	add	r3, r2
 80017a4:	f107 0214 	add.w	r2, r7, #20
 80017a8:	18d0      	adds	r0, r2, r3
 80017aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017b2:	4413      	add	r3, r2
 80017b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017b8:	461a      	mov	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f013 fbe2 	bl	8014f84 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 80017c0:	f107 0114 	add.w	r1, r7, #20
 80017c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 f9b4 	bl	8001b3a <bhy2_hif_set_regs>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 80017d8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11b      	bne.n	8001818 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 80017e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80017ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 80017f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80017fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00f      	beq.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
 8001804:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8001808:	2b00      	cmp	r3, #0
 800180a:	f43f af04 	beq.w	8001616 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 800180e:	e009      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8001810:	23fe      	movs	r3, #254	; 0xfe
 8001812:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8001816:	e005      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8001818:	bf00      	nop
        if (hif->read_write_len != 0)
 800181a:	e003      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001822:	e000      	b.n	8001826 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8001824:	bf00      	nop
    }

    return rslt;
 8001826:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 800182a:	4618      	mov	r0, r3
 800182c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 800183c:	2300      	movs	r3, #0
 800183e:	81fb      	strh	r3, [r7, #14]
 8001840:	e027      	b.n	8001892 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fab1 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 800184e:	4603      	mov	r3, r0
 8001850:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8001852:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 800185a:	7b3b      	ldrb	r3, [r7, #12]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	737b      	strb	r3, [r7, #13]
                break;
 8001868:	e017      	b.n	800189a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001870:	f000 f99b 	bl	8001baa <bhy2_hif_delay_us>
 8001874:	4603      	mov	r3, r0
 8001876:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8001878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8001880:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001884:	e00b      	b.n	800189e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8001886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800188a:	e008      	b.n	800189e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	3301      	adds	r3, #1
 8001890:	81fb      	strh	r3, [r7, #14]
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001898:	d3d3      	bcc.n	8001842 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 800189a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80018ae:	2300      	movs	r3, #0
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	e02f      	b.n	8001914 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ba:	f000 f976 	bl	8001baa <bhy2_hif_delay_us>
 80018be:	4603      	mov	r3, r0
 80018c0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80018c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da02      	bge.n	80018d0 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 80018ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ce:	e02d      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 80018d0:	f107 010c 	add.w	r1, r7, #12
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	2025      	movs	r0, #37	; 0x25
 80018da:	f000 f8f6 	bl	8001aca <bhy2_hif_get_regs>
 80018de:	4603      	mov	r3, r0
 80018e0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80018e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da02      	bge.n	80018f0 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 80018ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ee:	e01d      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80018f0:	7b3b      	ldrb	r3, [r7, #12]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <bhy2_hif_check_boot_status_ram+0x68>
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	3301      	adds	r3, #1
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	2b63      	cmp	r3, #99	; 0x63
 8001918:	d9cc      	bls.n	80018b4 <bhy2_hif_check_boot_status_ram+0xe>
 800191a:	e000      	b.n	800191e <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 800191c:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	2b64      	cmp	r3, #100	; 0x64
 8001922:	d102      	bne.n	800192a <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8001924:	f06f 0304 	mvn.w	r3, #4
 8001928:	e000      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	2b00      	cmp	r3, #0
 800194e:	d072      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06f      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	2b00      	cmp	r3, #0
 8001960:	d069      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8001970:	f107 0114 	add.w	r1, r7, #20
 8001974:	7bf8      	ldrb	r0, [r7, #15]
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	2202      	movs	r2, #2
 800197a:	f000 f8a6 	bl	8001aca <bhy2_hif_get_regs>
 800197e:	4603      	mov	r3, r0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8001984:	7d3b      	ldrb	r3, [r7, #20]
 8001986:	b21a      	sxth	r2, r3
 8001988:	7d7b      	ldrb	r3, [r7, #21]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04d      	beq.n	8001a3e <bhy2_hif_get_fifo+0x10a>
 80019a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d149      	bne.n	8001a3e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d203      	bcs.n	80019bc <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e003      	b.n	80019c4 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	623b      	str	r3, [r7, #32]
            offset = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80019ce:	e016      	b.n	80019fe <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	18d1      	adds	r1, r2, r3
 80019d6:	7bf8      	ldrb	r0, [r7, #15]
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	f000 f875 	bl	8001aca <bhy2_hif_get_regs>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 80019e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4413      	add	r3, r2
 80019fc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d8e4      	bhi.n	80019d0 <bhy2_hif_get_fifo+0x9c>
 8001a06:	e000      	b.n	8001a0a <bhy2_hif_get_fifo+0xd6>
                    break;
 8001a08:	bf00      	nop
            }

            if (read_len != 0)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00a      	beq.n	8001a26 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	18d1      	adds	r1, r2, r3
 8001a16:	7bf8      	ldrb	r0, [r7, #15]
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	f000 f855 	bl	8001aca <bhy2_hif_get_regs>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8001a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1ad2      	subs	r2, r2, r3
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8001a34:	e003      	b.n	8001a3e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001a36:	23ff      	movs	r3, #255	; 0xff
 8001a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a3c:	e000      	b.n	8001a40 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8001a3e:	bf00      	nop
    }

    return rslt;
 8001a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d027      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d024      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d021      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01e      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8001aac:	e005      	b.n	8001aba <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8001ab4:	e001      	b.n	8001aba <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001ab6:	23ff      	movs	r3, #255	; 0xff
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01e      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01b      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d103      	bne.n	8001b02 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b00:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681c      	ldr	r4, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	7bf8      	ldrb	r0, [r7, #15]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	47a0      	blx	r4
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8001b24:	23fd      	movs	r3, #253	; 0xfd
 8001b26:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b28:	e001      	b.n	8001b2e <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}

08001b3a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001b3a:	b590      	push	{r4, r7, lr}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d022      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01e      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01b      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7b1b      	ldrb	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d103      	bne.n	8001b72 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b70:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685c      	ldr	r4, [r3, #4]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	7bf8      	ldrb	r0, [r7, #15]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	47a0      	blx	r4
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8001b94:	23fd      	movs	r3, #253	; 0xfd
 8001b96:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b98:	e001      	b.n	8001b9e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001b9a:	23ff      	movs	r3, #255	; 0xff
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}

08001baa <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <bhy2_hif_delay_us+0x2c>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6912      	ldr	r2, [r2, #16]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e001      	b.n	8001bda <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001bd6:	23ff      	movs	r3, #255	; 0xff
 8001bd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	af04      	add	r7, sp, #16
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8001bf6:	89f8      	ldrh	r0, [r7, #14]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	f7ff fc37 	bl	800147c <bhy2_hif_exec_cmd_generic>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4603      	mov	r3, r0
 8001c26:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06e      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d06b      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d068      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001c48:	f107 0113 	add.w	r1, r7, #19
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2006      	movs	r0, #6
 8001c52:	f7ff ff3a 	bl	8001aca <bhy2_hif_get_regs>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8001c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d15b      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	7dba      	ldrb	r2, [r7, #22]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d008      	beq.n	8001c8a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001c78:	f107 0113 	add.w	r1, r7, #19
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2006      	movs	r0, #6
 8001c82:	f7ff ff5a 	bl	8001b3a <bhy2_hif_set_regs>
 8001c86:	4603      	mov	r3, r0
 8001c88:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8001c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d143      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f7ff ffa1 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d134      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8001cb0:	6a38      	ldr	r0, [r7, #32]
 8001cb2:	f7ff fdbf 	bl	8001834 <bhy2_wait_status_ready>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8001cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12b      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8001cc2:	f107 0014 	add.w	r0, r7, #20
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	f000 f94b 	bl	8001f6a <bhy2_hif_get_status_fifo>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8001cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d11c      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	7dba      	ldrb	r2, [r7, #22]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d00a      	beq.n	8001cfe <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8001ce8:	7dbb      	ldrb	r3, [r7, #22]
 8001cea:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001cec:	f107 0113 	add.w	r1, r7, #19
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2006      	movs	r0, #6
 8001cf6:	f7ff ff20 	bl	8001b3a <bhy2_hif_set_regs>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8001cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8001d06:	8abb      	ldrh	r3, [r7, #20]
 8001d08:	89fa      	ldrh	r2, [r7, #14]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d005      	beq.n	8001d1a <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8001d0e:	23fb      	movs	r3, #251	; 0xfb
 8001d10:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8001d12:	e002      	b.n	8001d1a <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001d14:	23ff      	movs	r3, #255	; 0xff
 8001d16:	75fb      	strb	r3, [r7, #23]
 8001d18:	e000      	b.n	8001d1c <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8001d1a:	bf00      	nop
    }

    return rslt;
 8001d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	201c      	movs	r0, #28
 8001d3a:	f7ff fec6 	bl	8001aca <bhy2_hif_get_regs>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8001d58:	f107 010c 	add.w	r1, r7, #12
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	2020      	movs	r0, #32
 8001d62:	f7ff feb2 	bl	8001aca <bhy2_hif_get_regs>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8001d6a:	7b3b      	ldrb	r3, [r7, #12]
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	e001      	b.n	8001d84 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001d80:	23ff      	movs	r3, #255	; 0xff
 8001d82:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	2025      	movs	r0, #37	; 0x25
 8001da2:	f7ff fe92 	bl	8001aca <bhy2_hif_get_regs>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	202d      	movs	r0, #45	; 0x2d
 8001dc2:	f7ff fe82 	bl	8001aca <bhy2_hif_get_regs>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8001de0:	230f      	movs	r3, #15
 8001de2:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8001de4:	f107 010b 	add.w	r1, r7, #11
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	2014      	movs	r0, #20
 8001dee:	f7ff fea4 	bl	8001b3a <bhy2_hif_set_regs>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12b      	bne.n	8001e56 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8001dfe:	e01c      	b.n	8001e3a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e06:	f7ff fed0 	bl	8001baa <bhy2_hif_delay_us>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8001e16:	f107 010a 	add.w	r1, r7, #10
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2025      	movs	r0, #37	; 0x25
 8001e20:	f7ff fe53 	bl	8001aca <bhy2_hif_get_regs>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <bhy2_hif_reset+0x76>
        while (count--)
 8001e3a:	89bb      	ldrh	r3, [r7, #12]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	81ba      	strh	r2, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1dd      	bne.n	8001e00 <bhy2_hif_reset+0x30>
 8001e44:	e000      	b.n	8001e48 <bhy2_hif_reset+0x78>
                    {
                        break;
 8001e46:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8001e52:	23fb      	movs	r3, #251	; 0xfb
 8001e54:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d027      	beq.n	8001ec8 <bhy2_hif_upload_firmware_to_ram+0x66>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8001e94:	8abb      	ldrh	r3, [r7, #20]
 8001e96:	f246 622b 	movw	r2, #26155	; 0x662b
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d002      	beq.n	8001ea4 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8001e9e:	23fc      	movs	r3, #252	; 0xfc
 8001ea0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8001ea2:	e014      	b.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fe9b 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8001eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fcf2 	bl	80018a6 <bhy2_hif_check_boot_status_ram>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8001ec6:	e002      	b.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001ec8:	23ff      	movs	r3, #255	; 0xff
 8001eca:	75fb      	strb	r3, [r7, #23]
 8001ecc:	e000      	b.n	8001ed0 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8001ece:	bf00      	nop
    }

    return rslt;
 8001ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2003      	movs	r0, #3
 8001eec:	f7ff fe7b 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fcd2 	bl	80018a6 <bhy2_hif_check_boot_status_ram>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff fd00 	bl	8001934 <bhy2_hif_get_fifo>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7ff fcea 	bl	8001934 <bhy2_hif_get_fifo>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8001f78:	f107 0110 	add.w	r1, r7, #16
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	2003      	movs	r0, #3
 8001f82:	f7ff fda2 	bl	8001aca <bhy2_hif_get_regs>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8001f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d130      	bne.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8001f92:	7c3b      	ldrb	r3, [r7, #16]
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8001fac:	7cbb      	ldrb	r3, [r7, #18]
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d010      	beq.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d202      	bcs.n	8001fe2 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8001fdc:	23fa      	movs	r3, #250	; 0xfa
 8001fde:	75fb      	strb	r3, [r7, #23]
 8001fe0:	e008      	b.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff fd6d 	bl	8001aca <bhy2_hif_get_regs>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8001ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	2003      	movs	r0, #3
 800201e:	f7ff fc89 	bl	8001934 <bhy2_hif_get_fifo>
 8002022:	4603      	mov	r3, r0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	ed87 0a02 	vstr	s0, [r7, #8]
 8002038:	6079      	str	r1, [r7, #4]
 800203a:	603a      	str	r2, [r7, #0]
 800203c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b2db      	uxtb	r3, r3
 8002052:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b2db      	uxtb	r3, r3
 800205a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	b2db      	uxtb	r3, r3
 8002062:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b2db      	uxtb	r3, r3
 8002070:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800207a:	f107 0118 	add.w	r1, r7, #24
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2208      	movs	r2, #8
 8002082:	200d      	movs	r0, #13
 8002084:	f7ff fdaf 	bl	8001be6 <bhy2_hif_exec_cmd>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b090      	sub	sp, #64	; 0x40
 8002096:	af02      	add	r7, sp, #8
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80da 	beq.w	800225c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2bf5      	cmp	r3, #245	; 0xf5
 80020ac:	d903      	bls.n	80020b6 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 80020ae:	23fe      	movs	r3, #254	; 0xfe
 80020b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020b4:	e0d5      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020be:	b298      	uxth	r0, r3
 80020c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020c4:	f107 0114 	add.w	r1, r7, #20
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	221c      	movs	r2, #28
 80020d0:	f7ff fda2 	bl	8001c18 <bhy2_hif_get_parameter>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 80020da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80bf 	bne.w	8002262 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	2b1c      	cmp	r3, #28
 80020e8:	d003      	beq.n	80020f2 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 80020ea:	23fe      	movs	r3, #254	; 0xfe
 80020ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020f0:	e0b7      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 80020f2:	7d3a      	ldrb	r2, [r7, #20]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 80020f8:	7d7a      	ldrb	r2, [r7, #21]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 80020fe:	7dba      	ldrb	r2, [r7, #22]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8002104:	7dfa      	ldrb	r2, [r7, #23]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800210a:	7e3a      	ldrb	r2, [r7, #24]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8002110:	7e7a      	ldrb	r2, [r7, #25]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8002116:	7eba      	ldrb	r2, [r7, #26]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800211c:	7efa      	ldrb	r2, [r7, #27]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8002122:	7f3a      	ldrb	r2, [r7, #28]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8002128:	7f7a      	ldrb	r2, [r7, #29]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800212e:	7fba      	ldrb	r2, [r7, #30]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8002134:	7ffa      	ldrb	r2, [r7, #31]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800213a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8002142:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800214a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8002152:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800215a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 8002162:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800216a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 8002172:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800217a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 8002182:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800218a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 8002192:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800219a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	791b      	ldrb	r3, [r3, #4]
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	799b      	ldrb	r3, [r3, #6]
 80021be:	b21a      	sxth	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	79db      	ldrb	r3, [r3, #7]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	7a1b      	ldrb	r3, [r3, #8]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	7a5b      	ldrb	r3, [r3, #9]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	431a      	orrs	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	7a9b      	ldrb	r3, [r3, #10]
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	7adb      	ldrb	r3, [r3, #11]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	7b1b      	ldrb	r3, [r3, #12]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	431a      	orrs	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	7b9b      	ldrb	r3, [r3, #14]
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	7bdb      	ldrb	r3, [r3, #15]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	7c1b      	ldrb	r3, [r3, #16]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	7c5b      	ldrb	r3, [r3, #17]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	431a      	orrs	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	7c9b      	ldrb	r3, [r3, #18]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	7cdb      	ldrb	r3, [r3, #19]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	431a      	orrs	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	7e5b      	ldrb	r3, [r3, #25]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	431a      	orrs	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	7e9b      	ldrb	r3, [r3, #26]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	7edb      	ldrb	r3, [r3, #27]
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	431a      	orrs	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	619a      	str	r2, [r3, #24]
 800225a:	e002      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800225c:	23ff      	movs	r3, #255	; 0xff
 800225e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002266:	4618      	mov	r0, r3
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b21a      	sxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3301      	adds	r3, #1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b21b      	sxth	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	b21a      	sxth	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3302      	adds	r3, #2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3303      	adds	r3, #3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3305      	adds	r3, #5
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21a      	sxth	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3306      	adds	r3, #6
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3307      	adds	r3, #7
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21a      	sxth	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3308      	adds	r3, #8
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3309      	adds	r3, #9
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	811a      	strh	r2, [r3, #8]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <MX_DMA_Init+0x8c>)
 8002310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <MX_DMA_Init+0x8c>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <MX_DMA_Init+0x8c>)
 8002320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	200b      	movs	r0, #11
 8002332:	f003 f922 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002336:	200b      	movs	r0, #11
 8002338:	f003 f939 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	200c      	movs	r0, #12
 8002342:	f003 f91a 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002346:	200c      	movs	r0, #12
 8002348:	f003 f931 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	200d      	movs	r0, #13
 8002352:	f003 f912 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002356:	200d      	movs	r0, #13
 8002358:	f003 f929 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	200e      	movs	r0, #14
 8002362:	f003 f90a 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002366:	200e      	movs	r0, #14
 8002368:	f003 f921 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	200f      	movs	r0, #15
 8002372:	f003 f902 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002376:	200f      	movs	r0, #15
 8002378:	f003 f919 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2100      	movs	r1, #0
 8002380:	2010      	movs	r0, #16
 8002382:	f003 f8fa 	bl	800557a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002386:	2010      	movs	r0, #16
 8002388:	f003 f911 	bl	80055ae <HAL_NVIC_EnableIRQ>

}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400

08002398 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b4:	4a43      	ldr	r2, [pc, #268]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a3c      	ldr	r2, [pc, #240]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023f2:	f043 0310 	orr.w	r3, r3, #16
 80023f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <MX_GPIO_Init+0x12c>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <MX_GPIO_Init+0x12c>)
 800240a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240e:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <MX_GPIO_Init+0x12c>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <MX_GPIO_Init+0x12c>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <MX_GPIO_Init+0x12c>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <MX_GPIO_Init+0x12c>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <MX_GPIO_Init+0x12c>)
 8002438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	481f      	ldr	r0, [pc, #124]	; (80024c8 <MX_GPIO_Init+0x130>)
 800244a:	f006 f8d1 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2110      	movs	r1, #16
 8002452:	481e      	ldr	r0, [pc, #120]	; (80024cc <MX_GPIO_Init+0x134>)
 8002454:	f006 f8cc 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245e:	481c      	ldr	r0, [pc, #112]	; (80024d0 <MX_GPIO_Init+0x138>)
 8002460:	f006 f8c6 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 8002464:	2301      	movs	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800246c:	2302      	movs	r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4813      	ldr	r0, [pc, #76]	; (80024c8 <MX_GPIO_Init+0x130>)
 800247c:	f005 ff08 	bl	8008290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002480:	2310      	movs	r3, #16
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002488:	2301      	movs	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_GPIO_Init+0x134>)
 8002498:	f005 fefa 	bl	8008290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800249c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4806      	ldr	r0, [pc, #24]	; (80024d0 <MX_GPIO_Init+0x138>)
 80024b6:	f005 feeb 	bl	8008290 <HAL_GPIO_Init>

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58020800 	.word	0x58020800
 80024cc:	58020000 	.word	0x58020000
 80024d0:	58021000 	.word	0x58021000

080024d4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <MX_I2C2_Init+0x74>)
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <MX_I2C2_Init+0x78>)
 80024dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <MX_I2C2_Init+0x74>)
 80024e0:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <MX_I2C2_Init+0x7c>)
 80024e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <MX_I2C2_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <MX_I2C2_Init+0x74>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_I2C2_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <MX_I2C2_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <MX_I2C2_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <MX_I2C2_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <MX_I2C2_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800250e:	480e      	ldr	r0, [pc, #56]	; (8002548 <MX_I2C2_Init+0x74>)
 8002510:	f006 f888 	bl	8008624 <HAL_I2C_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800251a:	f001 f8e5 	bl	80036e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800251e:	2100      	movs	r1, #0
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <MX_I2C2_Init+0x74>)
 8002522:	f007 fbd3 	bl	8009ccc <HAL_I2CEx_ConfigAnalogFilter>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800252c:	f001 f8dc 	bl	80036e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002530:	2100      	movs	r1, #0
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_I2C2_Init+0x74>)
 8002534:	f007 fc15 	bl	8009d62 <HAL_I2CEx_ConfigDigitalFilter>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800253e:	f001 f8d3 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	24000258 	.word	0x24000258
 800254c:	40005800 	.word	0x40005800
 8002550:	00b03fdb 	.word	0x00b03fdb

08002554 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b8      	sub	sp, #224	; 0xe0
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	22bc      	movs	r2, #188	; 0xbc
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f012 fd05 	bl	8014f84 <memset>
  if(i2cHandle->Instance==I2C2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <HAL_I2C_MspInit+0x194>)
 8002580:	4293      	cmp	r3, r2
 8002582:	f040 80ad 	bne.w	80026e0 <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002586:	2308      	movs	r3, #8
 8002588:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	4618      	mov	r0, r3
 8002596:	f009 fe03 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80025a0:	f001 f8a2 	bl	80036e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_I2C_MspInit+0x198>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025aa:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_I2C_MspInit+0x198>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b4:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_I2C_MspInit+0x198>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025dc:	2304      	movs	r3, #4
 80025de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025e6:	4619      	mov	r1, r3
 80025e8:	4841      	ldr	r0, [pc, #260]	; (80026f0 <HAL_I2C_MspInit+0x19c>)
 80025ea:	f005 fe51 	bl	8008290 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_I2C_MspInit+0x198>)
 80025f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f4:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <HAL_I2C_MspInit+0x198>)
 80025f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_I2C_MspInit+0x198>)
 8002600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 800260c:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800260e:	4a3a      	ldr	r2, [pc, #232]	; (80026f8 <HAL_I2C_MspInit+0x1a4>)
 8002610:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002614:	2223      	movs	r2, #35	; 0x23
 8002616:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002618:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800264a:	482a      	ldr	r0, [pc, #168]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800264c:	f002 ffca 	bl	80055e4 <HAL_DMA_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8002656:	f001 f847 	bl	80036e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <HAL_I2C_MspInit+0x1a0>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8002666:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_I2C_MspInit+0x1ac>)
 800266a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80026a4:	4815      	ldr	r0, [pc, #84]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 80026a6:	f002 ff9d 	bl	80055e4 <HAL_DMA_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 80026b0:	f001 f81a 	bl	80036e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_I2C_MspInit+0x1a8>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2100      	movs	r1, #0
 80026c4:	2021      	movs	r0, #33	; 0x21
 80026c6:	f002 ff58 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80026ca:	2021      	movs	r0, #33	; 0x21
 80026cc:	f002 ff6f 	bl	80055ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2022      	movs	r0, #34	; 0x22
 80026d6:	f002 ff50 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80026da:	2022      	movs	r0, #34	; 0x22
 80026dc:	f002 ff67 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80026e0:	bf00      	nop
 80026e2:	37e0      	adds	r7, #224	; 0xe0
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40005800 	.word	0x40005800
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58020400 	.word	0x58020400
 80026f4:	240002a4 	.word	0x240002a4
 80026f8:	40020010 	.word	0x40020010
 80026fc:	2400031c 	.word	0x2400031c
 8002700:	40020028 	.word	0x40020028

08002704 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002708:	f3bf 8f4f 	dsb	sy
}
 800270c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <__NVIC_SystemReset+0x24>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <__NVIC_SystemReset+0x24>)
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_SystemReset+0x28>)
 800271a:	4313      	orrs	r3, r2
 800271c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800271e:	f3bf 8f4f 	dsb	sy
}
 8002722:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <__NVIC_SystemReset+0x20>
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	05fa0004 	.word	0x05fa0004

08002730 <parse_quaternion>:

#define QUATERNION_BYTE_LENGHT 16//!<Длина посылки кватериниона в байтах
uint8_t qt_component_buffer[QUATERNION_BYTE_LENGHT] = { 0 };

static void parse_quaternion(const struct bhy2_fifo_parse_data_info *callback_info, void *callback_ref)
  {
 8002730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002734:	b088      	sub	sp, #32
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
    //Результирующий кватернион
    //struct Quaternion *qt = (Quaternion*)callback_ref;
	struct Quaternion *qt = callback_ref;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	61fb      	str	r3, [r7, #28]
    //struct Quaternion *qt;
    struct bhy2_data_quaternion data;

    if (callback_info->data_size != 11) /* Check for a valid payload size. Includes sensor ID */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	2b0b      	cmp	r3, #11
 8002746:	f040 811f 	bne.w	8002988 <parse_quaternion+0x258>
      {
      return;
      }

    //Парсить фрейм и получить кватернион
    bhy2_parse_quaternion(callback_info->data_ptr, &data);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f107 0210 	add.w	r2, r7, #16
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fd8a 	bl	800226e <bhy2_parse_quaternion>

    //Заполнить выходную структуру
    qt->mSensorId = callback_info->sensor_id;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	771a      	strb	r2, [r3, #28]
    qt->mTimestamp = *callback_info->time_stamp; /* Store the last timestamp */
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	69f9      	ldr	r1, [r7, #28]
 800276c:	e9c1 2300 	strd	r2, r3, [r1]

    qt->mTimestamp *= 15625; /* Timestamp is now in nanoseconds */
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	f04f 0a00 	mov.w	sl, #0
 800277e:	f04f 0b00 	mov.w	fp, #0
 8002782:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002786:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800278a:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800278e:	4652      	mov	r2, sl
 8002790:	465b      	mov	r3, fp
 8002792:	ebb2 0800 	subs.w	r8, r2, r0
 8002796:	eb63 0901 	sbc.w	r9, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ae:	ebb2 0408 	subs.w	r4, r2, r8
 80027b2:	eb63 0509 	sbc.w	r5, r3, r9
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	00eb      	lsls	r3, r5, #3
 80027c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c4:	00e2      	lsls	r2, r4, #3
 80027c6:	4614      	mov	r4, r2
 80027c8:	461d      	mov	r5, r3
 80027ca:	1823      	adds	r3, r4, r0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	eb45 0301 	adc.w	r3, r5, r1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80027da:	e9c3 1200 	strd	r1, r2, [r3]
    qt->mTimeS  = (uint32_t)(qt->mTimestamp / UINT64_C(1000000000));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e4:	a371      	add	r3, pc, #452	; (adr r3, 80029ac <parse_quaternion+0x27c>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd fdc9 	bl	8000380 <__aeabi_uldivmod>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	609a      	str	r2, [r3, #8]
    qt->mTimeNS = (uint32_t)(qt->mTimestamp - (qt->mTimeS * UINT64_C(1000000000)));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	4611      	mov	r1, r2
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4a65      	ldr	r2, [pc, #404]	; (8002998 <parse_quaternion+0x268>)
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	1aca      	subs	r2, r1, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	60da      	str	r2, [r3, #12]
    qt->mY = data.y / 16384.0f;
    qt->mZ = data.z / 16384.0f;
    qt->mW = data.w / 16384.0f;
    */

    qt->mX = data.x;
 800280e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	821a      	strh	r2, [r3, #16]
    qt->mY = data.y;
 8002816:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	825a      	strh	r2, [r3, #18]
    qt->mZ = data.z;
 800281e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	829a      	strh	r2, [r3, #20]
    qt->mW = data.w;
 8002826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	82da      	strh	r2, [r3, #22]

    qt->mAcc = ((data.accuracy * 180.0f) / 16384.0f) / 3.141592653589793f;
 800282e:	8b3b      	ldrh	r3, [r7, #24]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002838:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800299c <parse_quaternion+0x26c>
 800283c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002840:	eddf 6a57 	vldr	s13, [pc, #348]	; 80029a0 <parse_quaternion+0x270>
 8002844:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002848:	eddf 6a56 	vldr	s13, [pc, #344]	; 80029a4 <parse_quaternion+0x274>
 800284c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	edc3 7a06 	vstr	s15, [r3, #24]

    *qt_component_buffer = ((qt->mX)>>8);
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800285c:	121b      	asrs	r3, r3, #8
 800285e:	b21b      	sxth	r3, r3
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b51      	ldr	r3, [pc, #324]	; (80029a8 <parse_quaternion+0x278>)
 8002864:	701a      	strb	r2, [r3, #0]
    *(qt_component_buffer + 1) = (uint8_t)qt->mX;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b4e      	ldr	r3, [pc, #312]	; (80029a8 <parse_quaternion+0x278>)
 8002870:	705a      	strb	r2, [r3, #1]

    *(qt_component_buffer + 2) = ((qt->mY)>>8);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002878:	121b      	asrs	r3, r3, #8
 800287a:	b21b      	sxth	r3, r3
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <parse_quaternion+0x278>)
 8002880:	709a      	strb	r2, [r3, #2]
    *(qt_component_buffer + 3) = (uint8_t)qt->mY;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <parse_quaternion+0x278>)
 800288c:	70da      	strb	r2, [r3, #3]

    *(qt_component_buffer + 4) = ((qt->mZ)>>8);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002894:	121b      	asrs	r3, r3, #8
 8002896:	b21b      	sxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <parse_quaternion+0x278>)
 800289c:	711a      	strb	r2, [r3, #4]
    *(qt_component_buffer + 5) = (uint8_t)qt->mZ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b40      	ldr	r3, [pc, #256]	; (80029a8 <parse_quaternion+0x278>)
 80028a8:	715a      	strb	r2, [r3, #5]

    *(qt_component_buffer + 6) = ((qt->mW)>>8);
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028b0:	121b      	asrs	r3, r3, #8
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <parse_quaternion+0x278>)
 80028b8:	719a      	strb	r2, [r3, #6]
    *(qt_component_buffer + 7) = (uint8_t)qt->mW;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <parse_quaternion+0x278>)
 80028c4:	71da      	strb	r2, [r3, #7]

    *(qt_component_buffer + 8) = ((qt->mTimestamp)>>56);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	0e0a      	lsrs	r2, r1, #24
 80028d6:	2300      	movs	r3, #0
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <parse_quaternion+0x278>)
 80028dc:	721a      	strb	r2, [r3, #8]
    *(qt_component_buffer + 9) = ((qt->mTimestamp)>>48);
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	0c0a      	lsrs	r2, r1, #16
 80028ee:	2300      	movs	r3, #0
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <parse_quaternion+0x278>)
 80028f4:	725a      	strb	r2, [r3, #9]
    *(qt_component_buffer + 10) = ((qt->mTimestamp)>>40);
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	0a0a      	lsrs	r2, r1, #8
 8002906:	2300      	movs	r3, #0
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <parse_quaternion+0x278>)
 800290c:	729a      	strb	r2, [r3, #10]
    *(qt_component_buffer + 11) = ((qt->mTimestamp)>>32);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	000a      	movs	r2, r1
 800291e:	2300      	movs	r3, #0
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <parse_quaternion+0x278>)
 8002924:	72da      	strb	r2, [r3, #11]
    *(qt_component_buffer + 12) = ((qt->mTimestamp)>>24);
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	0e02      	lsrs	r2, r0, #24
 8002936:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800293a:	0e0b      	lsrs	r3, r1, #24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <parse_quaternion+0x278>)
 8002940:	731a      	strb	r2, [r3, #12]
    *(qt_component_buffer + 13) = ((qt->mTimestamp)>>16);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	0c02      	lsrs	r2, r0, #16
 8002952:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002956:	0c0b      	lsrs	r3, r1, #16
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <parse_quaternion+0x278>)
 800295c:	735a      	strb	r2, [r3, #13]
    *(qt_component_buffer + 14) = ((qt->mTimestamp)>>8);
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	0a02      	lsrs	r2, r0, #8
 800296e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002972:	0a0b      	lsrs	r3, r1, #8
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <parse_quaternion+0x278>)
 8002978:	739a      	strb	r2, [r3, #14]
    *(qt_component_buffer + 15) = (uint8_t)qt->mTimestamp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <parse_quaternion+0x278>)
 8002984:	73da      	strb	r2, [r3, #15]
 8002986:	e000      	b.n	800298a <parse_quaternion+0x25a>
      return;
 8002988:	bf00      	nop
    //uint8_t str[100];

    //sprintf(str, "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
    //usbPrintf( "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
    //uartPrintf( "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
  }
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002992:	bf00      	nop
 8002994:	f3af 8000 	nop.w
 8002998:	3b9aca00 	.word	0x3b9aca00
 800299c:	43340000 	.word	0x43340000
 80029a0:	46800000 	.word	0x46800000
 80029a4:	40490fdb 	.word	0x40490fdb
 80029a8:	24000ea4 	.word	0x24000ea4
 80029ac:	3b9aca00 	.word	0x3b9aca00
 80029b0:	00000000 	.word	0x00000000

080029b4 <copy_construct>:



// Creates copy of message
struct Message copy_construct(const struct Message* src)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	assert(src);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <copy_construct+0x1e>
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <copy_construct+0x74>)
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <copy_construct+0x78>)
 80029c8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80029cc:	4818      	ldr	r0, [pc, #96]	; (8002a30 <copy_construct+0x7c>)
 80029ce:	f012 fa61 	bl	8014e94 <__assert_func>

	size_t size = src->size;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	617b      	str	r3, [r7, #20]
	uint8_t* new_buffer = (uint8_t*)calloc(size, sizeof(uint8_t));
 80029d8:	2101      	movs	r1, #1
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f012 fa78 	bl	8014ed0 <calloc>
 80029e0:	4603      	mov	r3, r0
 80029e2:	613b      	str	r3, [r7, #16]

	assert(new_buffer);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <copy_construct+0x44>
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <copy_construct+0x80>)
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <copy_construct+0x78>)
 80029ee:	f240 1109 	movw	r1, #265	; 0x109
 80029f2:	480f      	ldr	r0, [pc, #60]	; (8002a30 <copy_construct+0x7c>)
 80029f4:	f012 fa4e 	bl	8014e94 <__assert_func>
	memcpy(new_buffer, src->buffer, size);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6938      	ldr	r0, [r7, #16]
 8002a02:	f012 fab1 	bl	8014f68 <memcpy>

	struct Message msg = {new_buffer, size};
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	733b      	strb	r3, [r7, #12]
	return msg;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a1c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	08015f5c 	.word	0x08015f5c
 8002a2c:	080306b0 	.word	0x080306b0
 8002a30:	08015f60 	.word	0x08015f60
 8002a34:	08015fa4 	.word	0x08015fa4

08002a38 <destruct>:

// Safely destructs message
void destruct(struct Message* msg)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	assert(msg);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <destruct+0x1c>
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <destruct+0x44>)
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <destruct+0x48>)
 8002a4a:	f240 1113 	movw	r1, #275	; 0x113
 8002a4e:	480d      	ldr	r0, [pc, #52]	; (8002a84 <destruct+0x4c>)
 8002a50:	f012 fa20 	bl	8014e94 <__assert_func>
	assert(msg->buffer);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <destruct+0x32>
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <destruct+0x50>)
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <destruct+0x48>)
 8002a60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002a64:	4807      	ldr	r0, [pc, #28]	; (8002a84 <destruct+0x4c>)
 8002a66:	f012 fa15 	bl	8014e94 <__assert_func>

	free(msg->buffer);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f012 fa72 	bl	8014f58 <free>
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08015fb0 	.word	0x08015fb0
 8002a80:	080306c0 	.word	0x080306c0
 8002a84:	08015f60 	.word	0x08015f60
 8002a88:	08015fb4 	.word	0x08015fb4

08002a8c <send>:

// Sends message to huart
void send(UART_HandleTypeDef *huart, const struct Message* msg, const uint8_t timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	71fb      	strb	r3, [r7, #7]
	assert(msg);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <send+0x22>
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <send+0x54>)
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <send+0x58>)
 8002aa4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8002aa8:	480f      	ldr	r0, [pc, #60]	; (8002ae8 <send+0x5c>)
 8002aaa:	f012 f9f3 	bl	8014e94 <__assert_func>
	assert(msg->buffer);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <send+0x38>
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <send+0x60>)
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <send+0x58>)
 8002aba:	f240 111d 	movw	r1, #285	; 0x11d
 8002abe:	480a      	ldr	r0, [pc, #40]	; (8002ae8 <send+0x5c>)
 8002ac0:	f012 f9e8 	bl	8014e94 <__assert_func>

	HAL_UART_Transmit(huart, msg->buffer, msg->size, timeout);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	791b      	ldrb	r3, [r3, #4]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f00c fd51 	bl	800f578 <HAL_UART_Transmit>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08015fb0 	.word	0x08015fb0
 8002ae4:	080306cc 	.word	0x080306cc
 8002ae8:	08015f60 	.word	0x08015f60
 8002aec:	08015fb4 	.word	0x08015fb4

08002af0 <fifo_add>:
	FIFO_TYPE buf[FIFO_SIZE];
};

// Adds the value to FIFO
void fifo_add(struct FIFO* fifo, FIFO_TYPE value)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	e883 0006 	stmia.w	r3, {r1, r2}
	assert(fifo);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <fifo_add+0x22>
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <fifo_add+0x90>)
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <fifo_add+0x94>)
 8002b08:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002b0c:	481e      	ldr	r0, [pc, #120]	; (8002b88 <fifo_add+0x98>)
 8002b0e:	f012 f9c1 	bl	8014e94 <__assert_func>
	assert(fifo->size < FIFO_SIZE);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b13      	cmp	r3, #19
 8002b18:	d906      	bls.n	8002b28 <fifo_add+0x38>
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <fifo_add+0x9c>)
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <fifo_add+0x94>)
 8002b1e:	f240 1147 	movw	r1, #327	; 0x147
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <fifo_add+0x98>)
 8002b24:	f012 f9b6 	bl	8014e94 <__assert_func>

	FIFO_TYPE value_copy = copy_construct(&value);
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	1d3a      	adds	r2, r7, #4
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff3f 	bl	80029b4 <copy_construct>

	memcpy(&(fifo->buf[fifo->tail]), &value_copy, sizeof(FIFO_TYPE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	f107 0110 	add.w	r1, r7, #16
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f012 fa0c 	bl	8014f68 <memcpy>
	fifo->tail = (fifo->tail + 1) % FIFO_SIZE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	1c59      	adds	r1, r3, #1
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <fifo_add+0xa0>)
 8002b58:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5c:	091a      	lsrs	r2, r3, #4
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	1aca      	subs	r2, r1, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]

	fifo->size++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	08015fc0 	.word	0x08015fc0
 8002b84:	080306d4 	.word	0x080306d4
 8002b88:	08015f60 	.word	0x08015f60
 8002b8c:	08015fc8 	.word	0x08015fc8
 8002b90:	cccccccd 	.word	0xcccccccd

08002b94 <fifo_get>:

// WARNING: don't forget to destruct the value if you use this function instead of fifo_send
FIFO_TYPE fifo_get(struct FIFO* fifo)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	assert(fifo);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <fifo_get+0x1e>
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <fifo_get+0x8c>)
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <fifo_get+0x90>)
 8002ba8:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002bac:	481e      	ldr	r0, [pc, #120]	; (8002c28 <fifo_get+0x94>)
 8002bae:	f012 f971 	bl	8014e94 <__assert_func>
	assert(fifo->size > 0);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <fifo_get+0x34>
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <fifo_get+0x98>)
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <fifo_get+0x90>)
 8002bbe:	f240 1155 	movw	r1, #341	; 0x155
 8002bc2:	4819      	ldr	r0, [pc, #100]	; (8002c28 <fifo_get+0x94>)
 8002bc4:	f012 f966 	bl	8014e94 <__assert_func>

	FIFO_TYPE value = fifo->buf[fifo->head];
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f107 0208 	add.w	r2, r7, #8
 8002bd8:	3304      	adds	r3, #4
 8002bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bde:	e882 0003 	stmia.w	r2, {r0, r1}

	fifo->head = (fifo->head + 1) % FIFO_SIZE;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <fifo_get+0x9c>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	091a      	lsrs	r2, r3, #4
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	1aca      	subs	r2, r1, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	601a      	str	r2, [r3, #0]

	fifo->size--;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	609a      	str	r2, [r3, #8]
	return value;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c14:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08015fc0 	.word	0x08015fc0
 8002c24:	080306e0 	.word	0x080306e0
 8002c28:	08015f60 	.word	0x08015f60
 8002c2c:	08015fe0 	.word	0x08015fe0
 8002c30:	cccccccd 	.word	0xcccccccd

08002c34 <fifo_send>:

// Gets the value from FIFO, sends it to huart and destructs it
void fifo_send(struct FIFO* fifo, UART_HandleTypeDef *huart, const uint8_t timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
	FIFO_TYPE msg = fifo_get(fifo);
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ffa3 	bl	8002b94 <fifo_get>
	send(huart, &msg, timeout);
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	68b8      	ldr	r0, [r7, #8]
 8002c58:	f7ff ff18 	bl	8002a8c <send>
	destruct(&msg);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fee9 	bl	8002a38 <destruct>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <clear_msg_buf>:
	msg->size = kondo_responce.size quaternion.size + 2;
}
*/
//-------------------------------------------------------------------------------------------
void clear_msg_buf(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
	uint32_t j = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
	for (j = 0; j < BUFFERS_LEN; j++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	e007      	b.n	8002c90 <clear_msg_buf+0x20>
		MsgBufRX[j] = 0;
 8002c80:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <clear_msg_buf+0x38>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < BUFFERS_LEN; j++)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2bfe      	cmp	r3, #254	; 0xfe
 8002c94:	d9f4      	bls.n	8002c80 <clear_msg_buf+0x10>
	j = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	24000c9c 	.word	0x24000c9c

08002cac <clear_buf>:

void clear_buf(uint8_t *buff, uint8_t buffNumber)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
	uint8_t j = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
	for (j = 0; j < buffNumber; j++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e007      	b.n	8002cd2 <clear_buf+0x26>
		buff[j] = 0;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < buffNumber; j++)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3f3      	bcc.n	8002cc2 <clear_buf+0x16>
	j = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	f5ad 6d19 	sub.w	sp, sp, #2448	; 0x990
 8002cf2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf4:	f002 faa4 	bl	8005240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cf8:	f000 fb04 	bl	8003304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfc:	f7ff fb4c 	bl	8002398 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d00:	f7ff fb02 	bl	8002308 <MX_DMA_Init>
  MX_I2C2_Init();
 8002d04:	f7ff fbe6 	bl	80024d4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002d08:	f000 fcf4 	bl	80036f4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002d0c:	f001 fcf0 	bl	80046f0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8002d10:	f001 fa1a 	bl	8004148 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002d14:	f001 f92c 	bl	8003f70 <MX_UART4_Init>
  MX_UART7_Init();
 8002d18:	f001 f978 	bl	800400c <MX_UART7_Init>
  MX_UART8_Init();
 8002d1c:	f001 f9c4 	bl	80040a8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002d20:	f001 fa60 	bl	80041e4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002d24:	f001 f824 	bl	8003d70 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002d28:	f000 ffd4 	bl	8003cd4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002d2c:	f001 f86e 	bl	8003e0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, rxBuf, rxbuf_len);
 8002d30:	4ba8      	ldr	r3, [pc, #672]	; (8002fd4 <main+0x2e8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	49a7      	ldr	r1, [pc, #668]	; (8002fd8 <main+0x2ec>)
 8002d3a:	48a8      	ldr	r0, [pc, #672]	; (8002fdc <main+0x2f0>)
 8002d3c:	f00c fcb2 	bl	800f6a4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart8, rxBufKondo, rxbuf_len_kondo);
 8002d40:	4ba7      	ldr	r3, [pc, #668]	; (8002fe0 <main+0x2f4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	49a6      	ldr	r1, [pc, #664]	; (8002fe4 <main+0x2f8>)
 8002d4a:	48a7      	ldr	r0, [pc, #668]	; (8002fe8 <main+0x2fc>)
 8002d4c:	f00c fcaa 	bl	800f6a4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, rxBufRST, rstbuf_len);
 8002d50:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <main+0x300>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	49a5      	ldr	r1, [pc, #660]	; (8002ff0 <main+0x304>)
 8002d5a:	48a6      	ldr	r0, [pc, #664]	; (8002ff4 <main+0x308>)
 8002d5c:	f00c fca2 	bl	800f6a4 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim3);
 8002d60:	48a5      	ldr	r0, [pc, #660]	; (8002ff8 <main+0x30c>)
 8002d62:	f00b ff1d 	bl	800eba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002d66:	48a5      	ldr	r0, [pc, #660]	; (8002ffc <main+0x310>)
 8002d68:	f00b ff1a 	bl	800eba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002d6c:	48a4      	ldr	r0, [pc, #656]	; (8003000 <main+0x314>)
 8002d6e:	f00b ff17 	bl	800eba0 <HAL_TIM_Base_Start_IT>
  static uint8_t product_id = 0;
  struct bhy2_dev bhy2;
  static uint16_t bhy2KernelVersion;

  //i2c_init(&BHY2_I2C, BHY2_ADDR);
  spi_init(&BHY2_SPI);
 8002d72:	48a4      	ldr	r0, [pc, #656]	; (8003004 <main+0x318>)
 8002d74:	f7fd fc86 	bl	8000684 <spi_init>

  //uint8_t sensor_error=0;
  //mError = bhy2_init( BHY2_I2C_INTERFACE, &bhy2_i2c_read, &bhy2_i2c_write, bhy2_delay_us, 64, NULL, &bhy2 );
  mError = bhy2_init( BHY2_SPI_INTERFACE, &bhy2_spi_read, &bhy2_spi_write, bhy2_delay_us, 64, NULL, &bhy2 );
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2340      	movs	r3, #64	; 0x40
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <main+0x31c>)
 8002d88:	4aa0      	ldr	r2, [pc, #640]	; (800300c <main+0x320>)
 8002d8a:	49a1      	ldr	r1, [pc, #644]	; (8003010 <main+0x324>)
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f7fe f800 	bl	8000d92 <bhy2_init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b9f      	ldr	r3, [pc, #636]	; (8003014 <main+0x328>)
 8002d98:	601a      	str	r2, [r3, #0]
  if( mError ) return 1;
 8002d9a:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <main+0x328>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <main+0xba>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e271      	b.n	800328a <main+0x59e>
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  mError = bhy2_soft_reset(&bhy2);
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ffd9 	bl	8000d62 <bhy2_soft_reset>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b97      	ldr	r3, [pc, #604]	; (8003014 <main+0x328>)
 8002db6:	601a      	str	r2, [r3, #0]
  if( mError ) return 2;
 8002db8:	4b96      	ldr	r3, [pc, #600]	; (8003014 <main+0x328>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <main+0xd8>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e262      	b.n	800328a <main+0x59e>


  //bhy2_set_regs(0x05, const uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev);


  mError = bhy2_get_product_id(&product_id, &bhy2);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4893      	ldr	r0, [pc, #588]	; (8003018 <main+0x32c>)
 8002dcc:	f7fd feb5 	bl	8000b3a <bhy2_get_product_id>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b8f      	ldr	r3, [pc, #572]	; (8003014 <main+0x328>)
 8002dd6:	601a      	str	r2, [r3, #0]
  if( mError ) return 3;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <main+0x328>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <main+0xf8>
 8002de0:	2303      	movs	r3, #3
 8002de2:	e252      	b.n	800328a <main+0x59e>

  if( product_id != BHY2_PRODUCT_ID )
 8002de4:	4b8c      	ldr	r3, [pc, #560]	; (8003018 <main+0x32c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b89      	cmp	r3, #137	; 0x89
 8002dea:	d001      	beq.n	8002df0 <main+0x104>
      return 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e24c      	b.n	800328a <main+0x59e>
  /* Check the interrupt pin and FIFO configurations. Disable status and debug */
  uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;// | BHY2_ICTL_EDGE | BHY2_ICTL_ACTIVE_LOW;
 8002df0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002df4:	f6a3 1371 	subw	r3, r3, #2417	; 0x971
 8002df8:	220c      	movs	r2, #12
 8002dfa:	701a      	strb	r2, [r3, #0]

  mError = bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2);
 8002dfc:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002e00:	f6a3 1371 	subw	r3, r3, #2417	; 0x971
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f107 0210 	add.w	r2, r7, #16
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd ff3b 	bl	8000c88 <bhy2_set_host_interrupt_ctrl>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b7f      	ldr	r3, [pc, #508]	; (8003014 <main+0x328>)
 8002e18:	601a      	str	r2, [r3, #0]
  if( mError ) return 4;
 8002e1a:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <main+0x328>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <main+0x13a>
 8002e22:	2304      	movs	r3, #4
 8002e24:	e231      	b.n	800328a <main+0x59e>
  //bhy2_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &ChipControl, 1, &bhy2);
  mError = bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2);
 8002e26:	f107 0210 	add.w	r2, r7, #16
 8002e2a:	f107 030f 	add.w	r3, r7, #15
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd ff45 	bl	8000cc0 <bhy2_get_host_interrupt_ctrl>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b76      	ldr	r3, [pc, #472]	; (8003014 <main+0x328>)
 8002e3c:	601a      	str	r2, [r3, #0]
  if( mError ) return 5;
 8002e3e:	4b75      	ldr	r3, [pc, #468]	; (8003014 <main+0x328>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <main+0x15e>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e21f      	b.n	800328a <main+0x59e>

  uint8_t hif_ctrl = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 397f 	strb.w	r3, [r7, #2431]	; 0x97f
  mError = bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2);
 8002e50:	f107 0210 	add.w	r2, r7, #16
 8002e54:	f897 397f 	ldrb.w	r3, [r7, #2431]	; 0x97f
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd ff65 	bl	8000d2a <bhy2_set_host_intf_ctrl>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b6b      	ldr	r3, [pc, #428]	; (8003014 <main+0x328>)
 8002e66:	601a      	str	r2, [r3, #0]
  if( mError ) return 6;
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <main+0x328>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <main+0x188>
 8002e70:	2306      	movs	r3, #6
 8002e72:	e20a      	b.n	800328a <main+0x59e>

  /* Check if the sensor is ready to load firmware */
  uint8_t boot_status;
  mError = bhy2_get_boot_status(&boot_status, &bhy2);
 8002e74:	f107 0210 	add.w	r2, r7, #16
 8002e78:	f107 030e 	add.w	r3, r7, #14
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fe8f 	bl	8000ba2 <bhy2_get_boot_status>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b62      	ldr	r3, [pc, #392]	; (8003014 <main+0x328>)
 8002e8a:	601a      	str	r2, [r3, #0]
  if( mError ) return 7;
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <main+0x328>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <main+0x1ac>
 8002e94:	2307      	movs	r3, #7
 8002e96:	e1f8      	b.n	800328a <main+0x59e>

  //Проверим готовность микросхемы к загрузке firmware
  if( !(boot_status & BHY2_BST_HOST_INTERFACE_READY) )
 8002e98:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002e9c:	f6a3 1372 	subw	r3, r3, #2418	; 0x972
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <main+0x1c2>
  return 8;
 8002eaa:	2308      	movs	r3, #8
 8002eac:	e1ed      	b.n	800328a <main+0x59e>

  uint8_t sensor_error;
  if( boot_status & BHY2_BST_HOST_INTERFACE_READY )
 8002eae:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002eb2:	f6a3 1372 	subw	r3, r3, #2418	; 0x972
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <main+0x1ea>
  {
  mError = bhy2_upload_firmware_to_ram(bhy2_firmware_image, sizeof(bhy2_firmware_image), &bhy2);
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4955      	ldr	r1, [pc, #340]	; (800301c <main+0x330>)
 8002ec8:	4855      	ldr	r0, [pc, #340]	; (8003020 <main+0x334>)
 8002eca:	f7fd fea6 	bl	8000c1a <bhy2_upload_firmware_to_ram>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b50      	ldr	r3, [pc, #320]	; (8003014 <main+0x328>)
 8002ed4:	601a      	str	r2, [r3, #0]

  }
  if( mError ) return 9;
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <main+0x328>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <main+0x1f6>
 8002ede:	2309      	movs	r3, #9
 8002ee0:	e1d3      	b.n	800328a <main+0x59e>

  mError = bhy2_get_error_value(&sensor_error, &bhy2);
 8002ee2:	f107 0210 	add.w	r2, r7, #16
 8002ee6:	f107 030d 	add.w	r3, r7, #13
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f837 	bl	8000f60 <bhy2_get_error_value>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <main+0x328>)
 8002ef8:	601a      	str	r2, [r3, #0]
  if( mError || sensor_error )
 8002efa:	4b46      	ldr	r3, [pc, #280]	; (8003014 <main+0x328>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <main+0x224>
 8002f02:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002f06:	f6a3 1373 	subw	r3, r3, #2419	; 0x973
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <main+0x228>
    return 10;
 8002f10:	230a      	movs	r3, #10
 8002f12:	e1ba      	b.n	800328a <main+0x59e>

  //Стартуем программу, загруженную в ram
  mError = bhy2_boot_from_ram(&bhy2);
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fe9d 	bl	8000c58 <bhy2_boot_from_ram>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <main+0x328>)
 8002f24:	601a      	str	r2, [r3, #0]
  if( mError ) return 11;
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <main+0x328>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <main+0x246>
 8002f2e:	230b      	movs	r3, #11
 8002f30:	e1ab      	b.n	800328a <main+0x59e>

  mError = bhy2_get_error_value(&sensor_error, &bhy2);
 8002f32:	f107 0210 	add.w	r2, r7, #16
 8002f36:	f107 030d 	add.w	r3, r7, #13
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe f80f 	bl	8000f60 <bhy2_get_error_value>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <main+0x328>)
 8002f48:	601a      	str	r2, [r3, #0]
  if( mError || sensor_error )
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <main+0x328>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <main+0x274>
 8002f52:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8002f56:	f6a3 1373 	subw	r3, r3, #2419	; 0x973
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <main+0x278>
    return 12;
 8002f60:	230c      	movs	r3, #12
 8002f62:	e192      	b.n	800328a <main+0x59e>

  mError = bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2);
 8002f64:	f107 0310 	add.w	r3, r7, #16
 8002f68:	4619      	mov	r1, r3
 8002f6a:	482e      	ldr	r0, [pc, #184]	; (8003024 <main+0x338>)
 8002f6c:	f7fd fdff 	bl	8000b6e <bhy2_get_kernel_version>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <main+0x328>)
 8002f76:	601a      	str	r2, [r3, #0]
  if( mError || bhy2KernelVersion == 0 ) return 13;
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <main+0x328>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <main+0x29c>
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <main+0x338>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <main+0x2a0>
 8002f88:	230d      	movs	r3, #13
 8002f8a:	e17e      	b.n	800328a <main+0x59e>
  //rslt = bhy2_register_fifo_parse_callback(BHY2_SYS_ID_META_EVENT, parse_meta_event, NULL, &bhy2);
  //  print_api_error(rslt, &bhy2);
  //  rslt = bhy2_register_fifo_parse_callback(BHY2_SYS_ID_META_EVENT_WU, parse_meta_event, NULL, &bhy2);
  //  print_api_error(rslt, &bhy2);

  mError = bhy2_register_fifo_parse_callback(QUAT_SENSOR_ID, parse_quaternion, &mQuaternion, &bhy2);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8002f94:	4924      	ldr	r1, [pc, #144]	; (8003028 <main+0x33c>)
 8002f96:	2025      	movs	r0, #37	; 0x25
 8002f98:	f7fd ff25 	bl	8000de6 <bhy2_register_fifo_parse_callback>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <main+0x328>)
 8002fa2:	601a      	str	r2, [r3, #0]
  if( mError ) return 14;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <main+0x328>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <main+0x2c4>
 8002fac:	230e      	movs	r3, #14
 8002fae:	e16c      	b.n	800328a <main+0x59e>

  mError = bhy2_get_and_process_fifo( mWorkBuffer, BFY2_WORK_BUFFER_SIZE, &bhy2);
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fba:	481c      	ldr	r0, [pc, #112]	; (800302c <main+0x340>)
 8002fbc:	f7fd fc6b 	bl	8000896 <bhy2_get_and_process_fifo>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <main+0x328>)
 8002fc6:	601a      	str	r2, [r3, #0]
  if( mError ) return 15;
 8002fc8:	4b12      	ldr	r3, [pc, #72]	; (8003014 <main+0x328>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02f      	beq.n	8003030 <main+0x344>
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	e15a      	b.n	800328a <main+0x59e>
 8002fd4:	24000004 	.word	0x24000004
 8002fd8:	24000b94 	.word	0x24000b94
 8002fdc:	24001408 	.word	0x24001408
 8002fe0:	24000005 	.word	0x24000005
 8002fe4:	24000b98 	.word	0x24000b98
 8002fe8:	240012e8 	.word	0x240012e8
 8002fec:	24000008 	.word	0x24000008
 8002ff0:	24000ea0 	.word	0x24000ea0
 8002ff4:	240011c8 	.word	0x240011c8
 8002ff8:	24001130 	.word	0x24001130
 8002ffc:	240010e4 	.word	0x240010e4
 8003000:	2400117c 	.word	0x2400117c
 8003004:	24000f68 	.word	0x24000f68
 8003008:	0800081d 	.word	0x0800081d
 800300c:	080007a5 	.word	0x080007a5
 8003010:	0800073d 	.word	0x0800073d
 8003014:	24000000 	.word	0x24000000
 8003018:	24000f63 	.word	0x24000f63
 800301c:	0001a66c 	.word	0x0001a66c
 8003020:	08016044 	.word	0x08016044
 8003024:	24000f64 	.word	0x24000f64
 8003028:	08002731 	.word	0x08002731
 800302c:	24000394 	.word	0x24000394

   /*Update the callback table to enable parsing of sensor data*/
  mError = bhy2_update_virtual_sensor_list(&bhy2);
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd ff05 	bl	8000e44 <bhy2_update_virtual_sensor_list>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	4b95      	ldr	r3, [pc, #596]	; (8003294 <main+0x5a8>)
 8003040:	601a      	str	r2, [r3, #0]
  if( mError ) return 16;
 8003042:	4b94      	ldr	r3, [pc, #592]	; (8003294 <main+0x5a8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <main+0x362>
 800304a:	2310      	movs	r3, #16
 800304c:	e11d      	b.n	800328a <main+0x59e>

  float sample_rate = 800.0; /* Read out data measured at 100Hz */
 800304e:	4b92      	ldr	r3, [pc, #584]	; (8003298 <main+0x5ac>)
 8003050:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8003054:	6013      	str	r3, [r2, #0]
  uint32_t report_latency_ms = 0; /* Report immediately */
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
  mError = bhy2_set_virt_sensor_cfg(QUAT_SENSOR_ID, sample_rate, report_latency_ms, &bhy2);
 800305c:	f107 0310 	add.w	r3, r7, #16
 8003060:	461a      	mov	r2, r3
 8003062:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 8003066:	f607 1378 	addw	r3, r7, #2424	; 0x978
 800306a:	ed93 0a00 	vldr	s0, [r3]
 800306e:	2025      	movs	r0, #37	; 0x25
 8003070:	f7fd fd42 	bl	8000af8 <bhy2_set_virt_sensor_cfg>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b86      	ldr	r3, [pc, #536]	; (8003294 <main+0x5a8>)
 800307a:	601a      	str	r2, [r3, #0]
  if( mError ) return 17;
 800307c:	4b85      	ldr	r3, [pc, #532]	; (8003294 <main+0x5a8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <main+0x39c>
 8003084:	2311      	movs	r3, #17
 8003086:	e100      	b.n	800328a <main+0x59e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (TransmitIsReady == 0 && IMU_head_tim)
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <main+0x5b0>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d123      	bne.n	80030d8 <main+0x3ec>
 8003090:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <main+0x5b4>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01f      	beq.n	80030d8 <main+0x3ec>
	  {
		  uint8_t interruptStatus = 0;
 8003098:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800309c:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
		  bhy2_get_interrupt_status( &interruptStatus, &bhy2 );
 80030a4:	f107 0210 	add.w	r2, r7, #16
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fe21 	bl	8000cf6 <bhy2_get_interrupt_status>

		  if( interruptStatus ){
 80030b4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80030b8:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <main+0x3ec>
			  bhy2_get_and_process_fifo( mWorkBuffer, BFY2_WORK_BUFFER_SIZE, &bhy2 );
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	461a      	mov	r2, r3
 80030c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030cc:	4875      	ldr	r0, [pc, #468]	; (80032a4 <main+0x5b8>)
 80030ce:	f7fd fbe2 	bl	8000896 <bhy2_get_and_process_fifo>
			  IMU_head_tim = 0;
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <main+0x5b4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]

		  //HAL_UART_Transmit(&huart3, qt_component_buffer, QUATERNION_BYTE_LENGHT, 10);
	  }


      if (AnswerIsReady)
 80030d8:	4b73      	ldr	r3, [pc, #460]	; (80032a8 <main+0x5bc>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <main+0x416>
      	{
      	 //__disable_irq();
      	 HAL_UART_Transmit(&huart3, txBufForKondo, AnswBufLen, 10);
 80030e0:	4b72      	ldr	r3, [pc, #456]	; (80032ac <main+0x5c0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	230a      	movs	r3, #10
 80030e8:	4971      	ldr	r1, [pc, #452]	; (80032b0 <main+0x5c4>)
 80030ea:	4872      	ldr	r0, [pc, #456]	; (80032b4 <main+0x5c8>)
 80030ec:	f00c fa44 	bl	800f578 <HAL_UART_Transmit>
		    {
		   	  HAL_UART_Transmit_DMA(&huart3, txBufForKondo, AnswBufLen);
		   	  dmaTxCompleted_uart3 = 0;
		    }
         */
         AnswerIsReady = 0;
 80030f0:	4b6d      	ldr	r3, [pc, #436]	; (80032a8 <main+0x5bc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
      	 clear_buf(txBufForKondo, AnswBufLen);
 80030f6:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <main+0x5c0>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	4619      	mov	r1, r3
 80030fc:	486c      	ldr	r0, [pc, #432]	; (80032b0 <main+0x5c4>)
 80030fe:	f7ff fdd5 	bl	8002cac <clear_buf>
      	 //__enable_irq();
      	}

      	  	if (TransmitIsReady)
 8003102:	4b66      	ldr	r3, [pc, #408]	; (800329c <main+0x5b0>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0be      	beq.n	8003088 <main+0x39c>
      		{
      			memcpy(MsgBufTX, MsgBufRX, sizeof(MsgBufRX));
 800310a:	4a6b      	ldr	r2, [pc, #428]	; (80032b8 <main+0x5cc>)
 800310c:	4b6b      	ldr	r3, [pc, #428]	; (80032bc <main+0x5d0>)
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	23ff      	movs	r3, #255	; 0xff
 8003114:	461a      	mov	r2, r3
 8003116:	f011 ff27 	bl	8014f68 <memcpy>
      			clear_msg_buf();
 800311a:	f7ff fda9 	bl	8002c70 <clear_msg_buf>
      			MsgCnt = 0;
 800311e:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <main+0x5d4>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
      			rxBuf[0] = 0;
 8003124:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <main+0x5d8>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]

      			//__disable_irq();
      			switch(Periph_Addr)
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <main+0x5dc>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b07      	cmp	r3, #7
 8003130:	f200 80a7 	bhi.w	8003282 <main+0x596>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <main+0x450>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	0800315d 	.word	0x0800315d
 8003140:	0800317f 	.word	0x0800317f
 8003144:	08003191 	.word	0x08003191
 8003148:	080031a3 	.word	0x080031a3
 800314c:	080031d1 	.word	0x080031d1
 8003150:	0800321b 	.word	0x0800321b
 8003154:	0800323b 	.word	0x0800323b
 8003158:	0800325f 	.word	0x0800325f
      			{
      				case UART2_ADDR:
      					if (dmaTxCompleted_uart2)
 800315c:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <main+0x5e0>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8089 	beq.w	8003278 <main+0x58c>
    				     {
    				    	 HAL_UART_Transmit_DMA(&huart2, &MsgBufTX[Msg_nByte], MsgBufLen);
 8003166:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <main+0x5e4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	4959      	ldr	r1, [pc, #356]	; (80032d4 <main+0x5e8>)
 8003170:	4859      	ldr	r0, [pc, #356]	; (80032d8 <main+0x5ec>)
 8003172:	f00c faed 	bl	800f750 <HAL_UART_Transmit_DMA>
    				    	  dmaTxCompleted_uart2 = 0;
 8003176:	4b55      	ldr	r3, [pc, #340]	; (80032cc <main+0x5e0>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
    				     }
      				break;
 800317c:	e07c      	b.n	8003278 <main+0x58c>

      				case UART4_ADDR:
      					HAL_UART_Transmit(&huart4, &MsgBufTX[Msg_nByte], MsgBufLen, 5);
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <main+0x5e4>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b29a      	uxth	r2, r3
 8003184:	2305      	movs	r3, #5
 8003186:	4953      	ldr	r1, [pc, #332]	; (80032d4 <main+0x5e8>)
 8003188:	4854      	ldr	r0, [pc, #336]	; (80032dc <main+0x5f0>)
 800318a:	f00c f9f5 	bl	800f578 <HAL_UART_Transmit>
      				break;
 800318e:	e078      	b.n	8003282 <main+0x596>

      				case UART7_ADDR:
      					HAL_UART_Transmit(&huart7, &MsgBufTX[Msg_nByte], MsgBufLen, 5);
 8003190:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <main+0x5e4>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b29a      	uxth	r2, r3
 8003196:	2305      	movs	r3, #5
 8003198:	494e      	ldr	r1, [pc, #312]	; (80032d4 <main+0x5e8>)
 800319a:	4851      	ldr	r0, [pc, #324]	; (80032e0 <main+0x5f4>)
 800319c:	f00c f9ec 	bl	800f578 <HAL_UART_Transmit>
      				break;
 80031a0:	e06f      	b.n	8003282 <main+0x596>
      					//for (i = Msg_nByte; i < (Msg_nByte + MsgBufLen); i++)
      					//{
      					//	HAL_UART_Transmit(&huart8, &MsgBufTX[i], 1, 5);
      					//}
      					//HAL_UART_Transmit(&huart8, &MsgBufTX[Msg_nByte], MsgBufLen, 5);
      					struct Message kondo_msg = {&MsgBufTX[Msg_nByte], MsgBufLen};
 80031a2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80031a6:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 80031aa:	4a4a      	ldr	r2, [pc, #296]	; (80032d4 <main+0x5e8>)
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <main+0x5e4>)
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80031b6:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 80031ba:	711a      	strb	r2, [r3, #4]
      					fifo_add(&kondo_fifo, kondo_msg);
 80031bc:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80031c0:	f6a3 137c 	subw	r3, r3, #2428	; 0x97c
 80031c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031c8:	4846      	ldr	r0, [pc, #280]	; (80032e4 <main+0x5f8>)
 80031ca:	f7ff fc91 	bl	8002af0 <fifo_add>

      				}
      				break;
 80031ce:	e058      	b.n	8003282 <main+0x596>

      				case I2C2_ADDR:
      				{
      					HAL_I2C_Master_Transmit(&hi2c2, (MsgBufTX[Msg_nByte] << 1), &MsgBufTX[Msg_nByte+1], 1,  I2C_TIMEOUT);
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <main+0x5cc>)
 80031d2:	795b      	ldrb	r3, [r3, #5]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	b299      	uxth	r1, r3
 80031da:	230a      	movs	r3, #10
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2301      	movs	r3, #1
 80031e0:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <main+0x5fc>)
 80031e2:	4842      	ldr	r0, [pc, #264]	; (80032ec <main+0x600>)
 80031e4:	f005 faae 	bl	8008744 <HAL_I2C_Master_Transmit>
      					HAL_I2C_Master_Receive(&hi2c2, (MsgBufTX[Msg_nByte] << 1), &regData, 1,  I2C_TIMEOUT);
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <main+0x5cc>)
 80031ea:	795b      	ldrb	r3, [r3, #5]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	b299      	uxth	r1, r3
 80031f2:	230a      	movs	r3, #10
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2301      	movs	r3, #1
 80031f8:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <main+0x604>)
 80031fa:	483c      	ldr	r0, [pc, #240]	; (80032ec <main+0x600>)
 80031fc:	f005 fb96 	bl	800892c <HAL_I2C_Master_Receive>
      					if (regData > 0)
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <main+0x604>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d039      	beq.n	800327c <main+0x590>
      						{
      							//HAL_UART_Transmit(&huart3, &regData, 1, 10);

      						HAL_UART_Transmit_DMA(&huart3, &regData, 1);
 8003208:	2201      	movs	r2, #1
 800320a:	4939      	ldr	r1, [pc, #228]	; (80032f0 <main+0x604>)
 800320c:	4829      	ldr	r0, [pc, #164]	; (80032b4 <main+0x5c8>)
 800320e:	f00c fa9f 	bl	800f750 <HAL_UART_Transmit_DMA>
      							regData = 0;
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <main+0x604>)
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
      						}
      				}
      				break;
 8003218:	e030      	b.n	800327c <main+0x590>

      				case SYNC_ADDR:
      					if (MsgBufTX[Msg_nByte] == 1)
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <main+0x5cc>)
 800321c:	795b      	ldrb	r3, [r3, #5]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d105      	bne.n	800322e <main+0x542>
      					{
      						HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_SET);
 8003222:	2201      	movs	r2, #1
 8003224:	2101      	movs	r1, #1
 8003226:	4833      	ldr	r0, [pc, #204]	; (80032f4 <main+0x608>)
 8003228:	f005 f9e2 	bl	80085f0 <HAL_GPIO_WritePin>
      					}
      					else
      						HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
      				break;
 800322c:	e029      	b.n	8003282 <main+0x596>
      						HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 800322e:	2200      	movs	r2, #0
 8003230:	2101      	movs	r1, #1
 8003232:	4830      	ldr	r0, [pc, #192]	; (80032f4 <main+0x608>)
 8003234:	f005 f9dc 	bl	80085f0 <HAL_GPIO_WritePin>
      				break;
 8003238:	e023      	b.n	8003282 <main+0x596>

      				case IMU_CS_ADDR:
      					if (MsgBufTX[Msg_nByte] == 1)
 800323a:	4b1f      	ldr	r3, [pc, #124]	; (80032b8 <main+0x5cc>)
 800323c:	795b      	ldrb	r3, [r3, #5]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <main+0x564>
      					{
      						HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003248:	482b      	ldr	r0, [pc, #172]	; (80032f8 <main+0x60c>)
 800324a:	f005 f9d1 	bl	80085f0 <HAL_GPIO_WritePin>
      					}
      					else
      						HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
      				break;
 800324e:	e018      	b.n	8003282 <main+0x596>
      						HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003256:	4828      	ldr	r0, [pc, #160]	; (80032f8 <main+0x60c>)
 8003258:	f005 f9ca 	bl	80085f0 <HAL_GPIO_WritePin>
      				break;
 800325c:	e011      	b.n	8003282 <main+0x596>

      				case QUATERNION_ADDR:
      					{
      				      if (dmaTxCompleted_uart3)
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <main+0x610>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <main+0x594>
      				      {

      				    	//uint8_t qt_component_buffer[16] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x0A};
      						//HAL_UART_Transmit(&huart3, qt_component_buffer, QUATERNION_BYTE_LENGHT, 10);
      						HAL_UART_Transmit_DMA(&huart3, qt_component_buffer, QUATERNION_BYTE_LENGHT);
 8003266:	2210      	movs	r2, #16
 8003268:	4925      	ldr	r1, [pc, #148]	; (8003300 <main+0x614>)
 800326a:	4812      	ldr	r0, [pc, #72]	; (80032b4 <main+0x5c8>)
 800326c:	f00c fa70 	bl	800f750 <HAL_UART_Transmit_DMA>
      				    	dmaTxCompleted_uart3 = 0;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <main+0x610>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
      				      }
      					}
      				break;
 8003276:	e003      	b.n	8003280 <main+0x594>
      				break;
 8003278:	bf00      	nop
 800327a:	e002      	b.n	8003282 <main+0x596>
      				break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <main+0x596>
      				break;
 8003280:	bf00      	nop
      			}
      			TransmitIsReady = 0;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <main+0x5b0>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
	  if (TransmitIsReady == 0 && IMU_head_tim)
 8003288:	e6fe      	b.n	8003088 <main+0x39c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800328a:	4618      	mov	r0, r3
 800328c:	f507 6718 	add.w	r7, r7, #2432	; 0x980
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	24000000 	.word	0x24000000
 8003298:	44480000 	.word	0x44480000
 800329c:	24000e9e 	.word	0x24000e9e
 80032a0:	2400000b 	.word	0x2400000b
 80032a4:	24000394 	.word	0x24000394
 80032a8:	24000e9c 	.word	0x24000e9c
 80032ac:	24000007 	.word	0x24000007
 80032b0:	24000b9c 	.word	0x24000b9c
 80032b4:	24001408 	.word	0x24001408
 80032b8:	24000d9c 	.word	0x24000d9c
 80032bc:	24000c9c 	.word	0x24000c9c
 80032c0:	24000d9b 	.word	0x24000d9b
 80032c4:	24000b94 	.word	0x24000b94
 80032c8:	24000e9f 	.word	0x24000e9f
 80032cc:	24000009 	.word	0x24000009
 80032d0:	24000006 	.word	0x24000006
 80032d4:	24000da1 	.word	0x24000da1
 80032d8:	24001378 	.word	0x24001378
 80032dc:	240011c8 	.word	0x240011c8
 80032e0:	24001258 	.word	0x24001258
 80032e4:	24000eb4 	.word	0x24000eb4
 80032e8:	24000da2 	.word	0x24000da2
 80032ec:	24000258 	.word	0x24000258
 80032f0:	24000e9d 	.word	0x24000e9d
 80032f4:	58020800 	.word	0x58020800
 80032f8:	58021000 	.word	0x58021000
 80032fc:	2400000a 	.word	0x2400000a
 8003300:	24000ea4 	.word	0x24000ea4

08003304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b09c      	sub	sp, #112	; 0x70
 8003308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330e:	224c      	movs	r2, #76	; 0x4c
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f011 fe36 	bl	8014f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2220      	movs	r2, #32
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f011 fe30 	bl	8014f84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003324:	2002      	movs	r0, #2
 8003326:	f007 ff37 	bl	800b198 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800332a:	2300      	movs	r3, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4b35      	ldr	r3, [pc, #212]	; (8003404 <SystemClock_Config+0x100>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <SystemClock_Config+0x100>)
 8003334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003338:	6193      	str	r3, [r2, #24]
 800333a:	4b32      	ldr	r3, [pc, #200]	; (8003404 <SystemClock_Config+0x100>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <SystemClock_Config+0x104>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <SystemClock_Config+0x104>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <SystemClock_Config+0x104>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800335c:	bf00      	nop
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <SystemClock_Config+0x100>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d1f8      	bne.n	800335e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <SystemClock_Config+0x108>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <SystemClock_Config+0x108>)
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8003378:	2322      	movs	r3, #34	; 0x22
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800337c:	2301      	movs	r3, #1
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003380:	2340      	movs	r3, #64	; 0x40
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003384:	2301      	movs	r3, #1
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003388:	2302      	movs	r3, #2
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800338c:	2300      	movs	r3, #0
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003390:	2304      	movs	r3, #4
 8003392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003394:	233c      	movs	r3, #60	; 0x3c
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003398:	2302      	movs	r3, #2
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800339c:	2305      	movs	r3, #5
 800339e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033a0:	2302      	movs	r3, #2
 80033a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033a4:	230c      	movs	r3, #12
 80033a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f007 ff39 	bl	800b22c <HAL_RCC_OscConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80033c0:	f000 f992 	bl	80036e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033c4:	233f      	movs	r3, #63	; 0x3f
 80033c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033c8:	2303      	movs	r3, #3
 80033ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80033d0:	2308      	movs	r3, #8
 80033d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80033d4:	2340      	movs	r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80033dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80033e2:	2340      	movs	r3, #64	; 0x40
 80033e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	2104      	movs	r1, #4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f008 fb4c 	bl	800ba88 <HAL_RCC_ClockConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80033f6:	f000 f977 	bl	80036e8 <Error_Handler>
  }
}
 80033fa:	bf00      	nop
 80033fc:	3770      	adds	r7, #112	; 0x70
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	58024800 	.word	0x58024800
 8003408:	58000400 	.word	0x58000400
 800340c:	58024400 	.word	0x58024400

08003410 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_UART_TxCpltCallback+0x34>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d102      	bne.n	8003428 <HAL_UART_TxCpltCallback+0x18>
		dmaTxCompleted_uart2 = 1;
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_UART_TxCpltCallback+0x38>)
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
	if (huart->Instance == USART3)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_UART_TxCpltCallback+0x3c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d102      	bne.n	8003438 <HAL_UART_TxCpltCallback+0x28>
		dmaTxCompleted_uart3 = 1;
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_UART_TxCpltCallback+0x40>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	40004400 	.word	0x40004400
 8003448:	24000009 	.word	0x24000009
 800344c:	40004800 	.word	0x40004800
 8003450:	2400000a 	.word	0x2400000a

08003454 <HAL_UART_RxCpltCallback>:
uint8_t flag = 0;
uint8_t SOM1isCirrect = 0;
uint8_t SOM2isCirrect = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a76      	ldr	r2, [pc, #472]	; (800363c <HAL_UART_RxCpltCallback+0x1e8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f040 808d 	bne.w	8003582 <HAL_UART_RxCpltCallback+0x12e>
	{
		MsgBufRX[MsgCnt] = rxBuf[0];
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_UART_RxCpltCallback+0x1f0>)
 8003470:	7819      	ldrb	r1, [r3, #0]
 8003472:	4b75      	ldr	r3, [pc, #468]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 8003474:	5499      	strb	r1, [r3, r2]
		if (MsgBufRX[SOM1_nByte] == SOM1){
 8003476:	4b74      	ldr	r3, [pc, #464]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2bf0      	cmp	r3, #240	; 0xf0
 800347c:	d107      	bne.n	800348e <HAL_UART_RxCpltCallback+0x3a>
			if (MsgCnt == 0){
 800347e:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <HAL_UART_RxCpltCallback+0x5c>
			SOM1isCirrect = 1;
 8003486:	4b71      	ldr	r3, [pc, #452]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e010      	b.n	80034b0 <HAL_UART_RxCpltCallback+0x5c>
			}
		} else {
			clear_msg_buf();
 800348e:	f7ff fbef 	bl	8002c70 <clear_msg_buf>
			MsgCnt = 0;
 8003492:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
			rxBuf[0] = 0;
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_UART_RxCpltCallback+0x1f0>)
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
			SOM1isCirrect = 0;
 800349e:	4b6b      	ldr	r3, [pc, #428]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
			SOM2isCirrect = 0;
 80034a4:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
			flag = 0;
 80034aa:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_UART_RxCpltCallback+0x200>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
		}

		if (SOM1isCirrect)
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d027      	beq.n	8003508 <HAL_UART_RxCpltCallback+0xb4>
			{
			if (MsgCnt == SOM2_nByte)
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d123      	bne.n	8003508 <HAL_UART_RxCpltCallback+0xb4>
				{
				if (MsgBufRX[SOM2_nByte] == SOM2)
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	2baa      	cmp	r3, #170	; 0xaa
 80034c6:	d103      	bne.n	80034d0 <HAL_UART_RxCpltCallback+0x7c>
					{
					SOM2isCirrect = 1;
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e002      	b.n	80034d6 <HAL_UART_RxCpltCallback+0x82>
					} else SOM2isCirrect = 0;
 80034d0:	4b5f      	ldr	r3, [pc, #380]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
				if (!SOM1isCirrect || !SOM2isCirrect)
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_UART_RxCpltCallback+0x92>
 80034de:	4b5c      	ldr	r3, [pc, #368]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d110      	bne.n	8003508 <HAL_UART_RxCpltCallback+0xb4>
					{
							clear_msg_buf();
 80034e6:	f7ff fbc3 	bl	8002c70 <clear_msg_buf>
							MsgCnt = 0;
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
							rxBuf[0] = 0;
 80034f0:	4b54      	ldr	r3, [pc, #336]	; (8003644 <HAL_UART_RxCpltCallback+0x1f0>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
							SOM1isCirrect = 0;
 80034f6:	4b55      	ldr	r3, [pc, #340]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
							SOM2isCirrect = 0;
 80034fc:	4b54      	ldr	r3, [pc, #336]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
							flag = 0;
 8003502:	4b54      	ldr	r3, [pc, #336]	; (8003654 <HAL_UART_RxCpltCallback+0x200>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		if (MsgCnt == MsgLen_nByte)
 8003508:	4b4d      	ldr	r3, [pc, #308]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d107      	bne.n	8003520 <HAL_UART_RxCpltCallback+0xcc>
			{
				if (MsgBufRX[MsgLen_nByte] < 255)
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 8003512:	789b      	ldrb	r3, [r3, #2]
 8003514:	2bff      	cmp	r3, #255	; 0xff
 8003516:	d003      	beq.n	8003520 <HAL_UART_RxCpltCallback+0xcc>
				MsgBufLen = MsgBufRX[MsgLen_nByte];
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 800351a:	789a      	ldrb	r2, [r3, #2]
 800351c:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <HAL_UART_RxCpltCallback+0x204>)
 800351e:	701a      	strb	r2, [r3, #0]
			}
		if (MsgCnt == AnswLen_nByte)
 8003520:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d103      	bne.n	8003530 <HAL_UART_RxCpltCallback+0xdc>
			{
				AnswBufLen = MsgBufRX[AnswLen_nByte];
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 800352a:	78da      	ldrb	r2, [r3, #3]
 800352c:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_UART_RxCpltCallback+0x208>)
 800352e:	701a      	strb	r2, [r3, #0]
			}
		if (SOM1isCirrect)
 8003530:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_UART_RxCpltCallback+0xf0>
			{
				MsgCnt++;
 8003538:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 8003542:	701a      	strb	r2, [r3, #0]
			}
		if (MsgCnt == (MsgBufLen + 5) && (SOM1isCirrect && SOM2isCirrect))
 8003544:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_UART_RxCpltCallback+0x1ec>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	4b43      	ldr	r3, [pc, #268]	; (8003658 <HAL_UART_RxCpltCallback+0x204>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	3305      	adds	r3, #5
 8003550:	429a      	cmp	r2, r3
 8003552:	d10e      	bne.n	8003572 <HAL_UART_RxCpltCallback+0x11e>
 8003554:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_UART_RxCpltCallback+0x1f8>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_UART_RxCpltCallback+0x11e>
 800355c:	4b3c      	ldr	r3, [pc, #240]	; (8003650 <HAL_UART_RxCpltCallback+0x1fc>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <HAL_UART_RxCpltCallback+0x11e>
			{
				TransmitIsReady = 1;
 8003564:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <HAL_UART_RxCpltCallback+0x20c>)
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
				Periph_Addr = MsgBufRX[Addr_nByte];
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_UART_RxCpltCallback+0x1f4>)
 800356c:	791a      	ldrb	r2, [r3, #4]
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_UART_RxCpltCallback+0x210>)
 8003570:	701a      	strb	r2, [r3, #0]
				//if (Periph_Addr == 0xFF) __NVIC_SystemReset();
			}
		HAL_UART_Receive_IT(&huart3, rxBuf, rxbuf_len);
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_UART_RxCpltCallback+0x214>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	4932      	ldr	r1, [pc, #200]	; (8003644 <HAL_UART_RxCpltCallback+0x1f0>)
 800357c:	483b      	ldr	r0, [pc, #236]	; (800366c <HAL_UART_RxCpltCallback+0x218>)
 800357e:	f00c f891 	bl	800f6a4 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_UART_RxCpltCallback+0x21c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d129      	bne.n	80035e0 <HAL_UART_RxCpltCallback+0x18c>
	{
		txBufForKondo[AnswCnt] = rxBufKondo[0];
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_UART_RxCpltCallback+0x224>)
 8003594:	7819      	ldrb	r1, [r3, #0]
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <HAL_UART_RxCpltCallback+0x228>)
 8003598:	5499      	strb	r1, [r3, r2]
		AnswCnt++;
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 80035a4:	701a      	strb	r2, [r3, #0]
		if (AnswCnt == AnswBufLen)
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <HAL_UART_RxCpltCallback+0x208>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d105      	bne.n	80035be <HAL_UART_RxCpltCallback+0x16a>
		{
		 AnswerIsReady = 1;
 80035b2:	4b33      	ldr	r3, [pc, #204]	; (8003680 <HAL_UART_RxCpltCallback+0x22c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
		 AnswCnt = 0;
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		}
		if (AnswCnt > AnswBufLen)
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_UART_RxCpltCallback+0x208>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d902      	bls.n	80035d0 <HAL_UART_RxCpltCallback+0x17c>
			AnswCnt = 0;
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_UART_RxCpltCallback+0x220>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart8, rxBufKondo, rxbuf_len_kondo);
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_UART_RxCpltCallback+0x230>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	4927      	ldr	r1, [pc, #156]	; (8003678 <HAL_UART_RxCpltCallback+0x224>)
 80035da:	482b      	ldr	r0, [pc, #172]	; (8003688 <HAL_UART_RxCpltCallback+0x234>)
 80035dc:	f00c f862 	bl	800f6a4 <HAL_UART_Receive_IT>
	}

	if (huart->Instance == UART4)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_UART_RxCpltCallback+0x238>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d124      	bne.n	8003634 <HAL_UART_RxCpltCallback+0x1e0>
	{
		if ((rxBufRST[0] == 0xF0) & (rxBufRST[1] == 0xAA) & (rxBufRST[2] == 0x0F))
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_UART_RxCpltCallback+0x23c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2bf0      	cmp	r3, #240	; 0xf0
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_UART_RxCpltCallback+0x23c>)
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2baa      	cmp	r3, #170	; 0xaa
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4013      	ands	r3, r2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_UART_RxCpltCallback+0x23c>)
 800360e:	789b      	ldrb	r3, [r3, #2]
 8003610:	2b0f      	cmp	r3, #15
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_RxCpltCallback+0x1d0>
		{
			__NVIC_SystemReset();
 8003620:	f7ff f870 	bl	8002704 <__NVIC_SystemReset>
		}
		HAL_UART_Receive_IT(&huart4, rxBufRST, rstbuf_len);
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_UART_RxCpltCallback+0x240>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	4918      	ldr	r1, [pc, #96]	; (8003690 <HAL_UART_RxCpltCallback+0x23c>)
 800362e:	481a      	ldr	r0, [pc, #104]	; (8003698 <HAL_UART_RxCpltCallback+0x244>)
 8003630:	f00c f838 	bl	800f6a4 <HAL_UART_Receive_IT>
	}
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40004800 	.word	0x40004800
 8003640:	24000d9b 	.word	0x24000d9b
 8003644:	24000b94 	.word	0x24000b94
 8003648:	24000c9c 	.word	0x24000c9c
 800364c:	24000f61 	.word	0x24000f61
 8003650:	24000f62 	.word	0x24000f62
 8003654:	24000f60 	.word	0x24000f60
 8003658:	24000006 	.word	0x24000006
 800365c:	24000007 	.word	0x24000007
 8003660:	24000e9e 	.word	0x24000e9e
 8003664:	24000e9f 	.word	0x24000e9f
 8003668:	24000004 	.word	0x24000004
 800366c:	24001408 	.word	0x24001408
 8003670:	40007c00 	.word	0x40007c00
 8003674:	24000e9b 	.word	0x24000e9b
 8003678:	24000b98 	.word	0x24000b98
 800367c:	24000b9c 	.word	0x24000b9c
 8003680:	24000e9c 	.word	0x24000e9c
 8003684:	24000005 	.word	0x24000005
 8003688:	240012e8 	.word	0x240012e8
 800368c:	40004c00 	.word	0x40004c00
 8003690:	24000ea0 	.word	0x24000ea0
 8003694:	24000008 	.word	0x24000008
 8003698:	240011c8 	.word	0x240011c8

0800369c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d108      	bne.n	80036c0 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    if (kondo_fifo.size > 0)
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
      fifo_send(&kondo_fifo, &huart8, 5);
 80036b6:	2205      	movs	r2, #5
 80036b8:	4909      	ldr	r1, [pc, #36]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80036ba:	4808      	ldr	r0, [pc, #32]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036bc:	f7ff faba 	bl	8002c34 <fifo_send>
    }
  }
  if (htim->Instance == TIM2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d102      	bne.n	80036d0 <HAL_TIM_PeriodElapsedCallback+0x34>
	  IMU_head_tim = 1;
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
/*
  if (htim->Instance == TIM4)
  	  respond();
*/
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40000400 	.word	0x40000400
 80036dc:	24000eb4 	.word	0x24000eb4
 80036e0:	240012e8 	.word	0x240012e8
 80036e4:	2400000b 	.word	0x2400000b

080036e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036ec:	b672      	cpsid	i
}
 80036ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036f0:	e7fe      	b.n	80036f0 <Error_Handler+0x8>
	...

080036f4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <MX_SPI1_Init+0xa8>)
 80036fa:	4a29      	ldr	r2, [pc, #164]	; (80037a0 <MX_SPI1_Init+0xac>)
 80036fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <MX_SPI1_Init+0xa8>)
 8003700:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <MX_SPI1_Init+0xa8>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800370c:	4b23      	ldr	r3, [pc, #140]	; (800379c <MX_SPI1_Init+0xa8>)
 800370e:	2207      	movs	r2, #7
 8003710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <MX_SPI1_Init+0xa8>)
 8003714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <MX_SPI1_Init+0xa8>)
 800371c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <MX_SPI1_Init+0xa8>)
 8003724:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_SPI1_Init+0xa8>)
 800372c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_SPI1_Init+0xa8>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <MX_SPI1_Init+0xa8>)
 800373a:	2200      	movs	r2, #0
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <MX_SPI1_Init+0xa8>)
 8003740:	2200      	movs	r2, #0
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <MX_SPI1_Init+0xa8>)
 8003746:	2200      	movs	r2, #0
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800374a:	4b14      	ldr	r3, [pc, #80]	; (800379c <MX_SPI1_Init+0xa8>)
 800374c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <MX_SPI1_Init+0xa8>)
 8003754:	2200      	movs	r2, #0
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <MX_SPI1_Init+0xa8>)
 800375a:	2200      	movs	r2, #0
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <MX_SPI1_Init+0xa8>)
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <MX_SPI1_Init+0xa8>)
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_SPI1_Init+0xa8>)
 800376c:	2200      	movs	r2, #0
 800376e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <MX_SPI1_Init+0xa8>)
 8003772:	2200      	movs	r2, #0
 8003774:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <MX_SPI1_Init+0xa8>)
 8003778:	2200      	movs	r2, #0
 800377a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800377c:	4b07      	ldr	r3, [pc, #28]	; (800379c <MX_SPI1_Init+0xa8>)
 800377e:	2200      	movs	r2, #0
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_SPI1_Init+0xa8>)
 8003784:	2200      	movs	r2, #0
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <MX_SPI1_Init+0xa8>)
 800378a:	f00a f871 	bl	800d870 <HAL_SPI_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8003794:	f7ff ffa8 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	24000f68 	.word	0x24000f68
 80037a0:	40013000 	.word	0x40013000

080037a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b0b8      	sub	sp, #224	; 0xe0
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	22bc      	movs	r2, #188	; 0xbc
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f011 fbdd 	bl	8014f84 <memset>
  if(spiHandle->Instance==SPI1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a60      	ldr	r2, [pc, #384]	; (8003950 <HAL_SPI_MspInit+0x1ac>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	f040 80b8 	bne.w	8003946 <HAL_SPI_MspInit+0x1a2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80037d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 80037dc:	2320      	movs	r3, #32
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 80037e0:	2381      	movs	r3, #129	; 0x81
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80037e4:	2302      	movs	r3, #2
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80037e8:	2302      	movs	r3, #2
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80037ec:	2302      	movs	r3, #2
 80037ee:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80037f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80037fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003802:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f008 fcc9 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8003814:	f7ff ff68 	bl	80036e8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003818:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 800381a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381e:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 8003820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003824:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 800382a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800382e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 8003838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383c:	4a45      	ldr	r2, [pc, #276]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003846:	4b43      	ldr	r3, [pc, #268]	; (8003954 <HAL_SPI_MspInit+0x1b0>)
 8003848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003854:	23e0      	movs	r3, #224	; 0xe0
 8003856:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800386c:	2305      	movs	r3, #5
 800386e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003876:	4619      	mov	r1, r3
 8003878:	4837      	ldr	r0, [pc, #220]	; (8003958 <HAL_SPI_MspInit+0x1b4>)
 800387a:	f004 fd09 	bl	8008290 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 800387e:	4b37      	ldr	r3, [pc, #220]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 8003880:	4a37      	ldr	r2, [pc, #220]	; (8003960 <HAL_SPI_MspInit+0x1bc>)
 8003882:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 8003886:	2226      	movs	r2, #38	; 0x26
 8003888:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003890:	4b32      	ldr	r3, [pc, #200]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003896:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 8003898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800389e:	4b2f      	ldr	r3, [pc, #188]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a4:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80038aa:	4b2c      	ldr	r3, [pc, #176]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80038b0:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80038be:	4827      	ldr	r0, [pc, #156]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038c0:	f001 fe90 	bl	80055e4 <HAL_DMA_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80038ca:	f7ff ff0d 	bl	80036e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a22      	ldr	r2, [pc, #136]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038d2:	679a      	str	r2, [r3, #120]	; 0x78
 80038d4:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_SPI_MspInit+0x1b8>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_SPI_MspInit+0x1c4>)
 80038de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038e2:	2225      	movs	r2, #37	; 0x25
 80038e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ec:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003900:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 8003908:	2200      	movs	r2, #0
 800390a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 800390e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003912:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 8003916:	2200      	movs	r2, #0
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800391a:	4812      	ldr	r0, [pc, #72]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 800391c:	f001 fe62 	bl	80055e4 <HAL_DMA_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8003926:	f7ff fedf 	bl	80036e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003930:	4a0c      	ldr	r2, [pc, #48]	; (8003964 <HAL_SPI_MspInit+0x1c0>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	2023      	movs	r0, #35	; 0x23
 800393c:	f001 fe1d 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003940:	2023      	movs	r0, #35	; 0x23
 8003942:	f001 fe34 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003946:	bf00      	nop
 8003948:	37e0      	adds	r7, #224	; 0xe0
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40013000 	.word	0x40013000
 8003954:	58024400 	.word	0x58024400
 8003958:	58020000 	.word	0x58020000
 800395c:	24000ff0 	.word	0x24000ff0
 8003960:	40020070 	.word	0x40020070
 8003964:	24001068 	.word	0x24001068
 8003968:	40020088 	.word	0x40020088

0800396c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_MspInit+0x30>)
 8003974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003978:	4a08      	ldr	r2, [pc, #32]	; (800399c <HAL_MspInit+0x30>)
 800397a:	f043 0302 	orr.w	r3, r3, #2
 800397e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_MspInit+0x30>)
 8003984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	58024400 	.word	0x58024400

080039a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039a4:	e7fe      	b.n	80039a4 <NMI_Handler+0x4>

080039a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039aa:	e7fe      	b.n	80039aa <HardFault_Handler+0x4>

080039ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b0:	e7fe      	b.n	80039b0 <MemManage_Handler+0x4>

080039b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <BusFault_Handler+0x4>

080039b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <UsageFault_Handler+0x4>

080039be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039da:	b480      	push	{r7}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ec:	f001 fc9a 	bl	8005324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <DMA1_Stream0_IRQHandler+0x10>)
 80039fa:	f003 f91d 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	240002a4 	.word	0x240002a4

08003a08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream1_IRQHandler+0x10>)
 8003a0e:	f003 f913 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2400031c 	.word	0x2400031c

08003a1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream2_IRQHandler+0x10>)
 8003a22:	f003 f909 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	24001498 	.word	0x24001498

08003a30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream3_IRQHandler+0x10>)
 8003a36:	f003 f8ff 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	24001510 	.word	0x24001510

08003a44 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <DMA1_Stream4_IRQHandler+0x10>)
 8003a4a:	f003 f8f5 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24000ff0 	.word	0x24000ff0

08003a58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <DMA1_Stream5_IRQHandler+0x10>)
 8003a5e:	f003 f8eb 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	24001068 	.word	0x24001068

08003a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <TIM2_IRQHandler+0x10>)
 8003a72:	f00b f90d 	bl	800ec90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	240010e4 	.word	0x240010e4

08003a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <TIM3_IRQHandler+0x10>)
 8003a86:	f00b f903 	bl	800ec90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	24001130 	.word	0x24001130

08003a94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <TIM4_IRQHandler+0x10>)
 8003a9a:	f00b f8f9 	bl	800ec90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2400117c 	.word	0x2400117c

08003aa8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <I2C2_EV_IRQHandler+0x10>)
 8003aae:	f005 f833 	bl	8008b18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	24000258 	.word	0x24000258

08003abc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <I2C2_ER_IRQHandler+0x10>)
 8003ac2:	f005 f843 	bl	8008b4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	24000258 	.word	0x24000258

08003ad0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <SPI1_IRQHandler+0x10>)
 8003ad6:	f00a fc4d 	bl	800e374 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	24000f68 	.word	0x24000f68

08003ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <USART2_IRQHandler+0x10>)
 8003aea:	f00b fec3 	bl	800f874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	24001378 	.word	0x24001378

08003af8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <USART3_IRQHandler+0x10>)
 8003afe:	f00b feb9 	bl	800f874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	24001408 	.word	0x24001408

08003b0c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <UART8_IRQHandler+0x10>)
 8003b12:	f00b feaf 	bl	800f874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	240012e8 	.word	0x240012e8

08003b20 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8003b26:	f006 fabf 	bl	800a0a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	24002a58 	.word	0x24002a58

08003b34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <OTG_FS_IRQHandler+0x10>)
 8003b3a:	f006 fab5 	bl	800a0a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	24002a58 	.word	0x24002a58

08003b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	return 1;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_kill>:

int _kill(int pid, int sig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b62:	f011 f9bd 	bl	8014ee0 <__errno>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2216      	movs	r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_exit>:

void _exit (int status)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe7 	bl	8003b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b8a:	e7fe      	b.n	8003b8a <_exit+0x12>

08003b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b9e:	f3af 8000 	nop.w
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	60ba      	str	r2, [r7, #8]
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf0      	blt.n	8003b9e <_read+0x12>
	}

return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e009      	b.n	8003bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dbf1      	blt.n	8003bd8 <_write+0x12>
	}
	return len;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_close>:

int _close(int file)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
	return -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c26:	605a      	str	r2, [r3, #4]
	return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_isatty>:

int _isatty(int file)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
	return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c98:	f011 f922 	bl	8014ee0 <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	24080000 	.word	0x24080000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	240010e0 	.word	0x240010e0
 8003cd0:	24003098 	.word	0x24003098

08003cd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cda:	f107 0310 	add.w	r3, r7, #16
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003cfc:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d0a:	2264      	movs	r2, #100	; 0x64
 8003d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d1a:	4814      	ldr	r0, [pc, #80]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d1c:	f00a fee9 	bl	800eaf2 <HAL_TIM_Base_Init>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003d26:	f7ff fcdf 	bl	80036e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4619      	mov	r1, r3
 8003d36:	480d      	ldr	r0, [pc, #52]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d38:	f00b f8ca 	bl	800eed0 <HAL_TIM_ConfigClockSource>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003d42:	f7ff fcd1 	bl	80036e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4806      	ldr	r0, [pc, #24]	; (8003d6c <MX_TIM2_Init+0x98>)
 8003d54:	f00b fb14 	bl	800f380 <HAL_TIMEx_MasterConfigSynchronization>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003d5e:	f7ff fcc3 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d62:	bf00      	nop
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	240010e4 	.word	0x240010e4

08003d70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <MX_TIM3_Init+0x98>)
 8003d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003d96:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003d9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003da4:	2264      	movs	r2, #100	; 0x64
 8003da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003db4:	4813      	ldr	r0, [pc, #76]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003db6:	f00a fe9c 	bl	800eaf2 <HAL_TIM_Base_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003dc0:	f7ff fc92 	bl	80036e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dca:	f107 0310 	add.w	r3, r7, #16
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003dd2:	f00b f87d 	bl	800eed0 <HAL_TIM_ConfigClockSource>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003ddc:	f7ff fc84 	bl	80036e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4805      	ldr	r0, [pc, #20]	; (8003e04 <MX_TIM3_Init+0x94>)
 8003dee:	f00b fac7 	bl	800f380 <HAL_TIMEx_MasterConfigSynchronization>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003df8:	f7ff fc76 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	24001130 	.word	0x24001130
 8003e08:	40000400 	.word	0x40000400

08003e0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <MX_TIM4_Init+0x98>)
 8003e2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e32:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e40:	2264      	movs	r2, #100	; 0x64
 8003e42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e50:	4813      	ldr	r0, [pc, #76]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e52:	f00a fe4e 	bl	800eaf2 <HAL_TIM_Base_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e5c:	f7ff fc44 	bl	80036e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e66:	f107 0310 	add.w	r3, r7, #16
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480c      	ldr	r0, [pc, #48]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e6e:	f00b f82f 	bl	800eed0 <HAL_TIM_ConfigClockSource>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e78:	f7ff fc36 	bl	80036e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_TIM4_Init+0x94>)
 8003e8a:	f00b fa79 	bl	800f380 <HAL_TIMEx_MasterConfigSynchronization>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e94:	f7ff fc28 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	2400117c 	.word	0x2400117c
 8003ea4:	40000800 	.word	0x40000800

08003ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d117      	bne.n	8003eea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eba:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec0:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2100      	movs	r1, #0
 8003edc:	201c      	movs	r0, #28
 8003ede:	f001 fb4c 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ee2:	201c      	movs	r0, #28
 8003ee4:	f001 fb63 	bl	80055ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003ee8:	e038      	b.n	8003f5c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_TIM_Base_MspInit+0xc0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d117      	bne.n	8003f24 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f04:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2100      	movs	r1, #0
 8003f16:	201d      	movs	r0, #29
 8003f18:	f001 fb2f 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f1c:	201d      	movs	r0, #29
 8003f1e:	f001 fb46 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 8003f22:	e01b      	b.n	8003f5c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <HAL_TIM_Base_MspInit+0xc4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d116      	bne.n	8003f5c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_TIM_Base_MspInit+0xbc>)
 8003f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2100      	movs	r1, #0
 8003f50:	201e      	movs	r0, #30
 8003f52:	f001 fb12 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f56:	201e      	movs	r0, #30
 8003f58:	f001 fb29 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	58024400 	.word	0x58024400
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800

08003f70 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <MX_UART4_Init+0x90>)
 8003f76:	4a23      	ldr	r2, [pc, #140]	; (8004004 <MX_UART4_Init+0x94>)
 8003f78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <MX_UART4_Init+0x90>)
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <MX_UART4_Init+0x98>)
 8003f7e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f80:	4b1f      	ldr	r3, [pc, #124]	; (8004000 <MX_UART4_Init+0x90>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <MX_UART4_Init+0x90>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <MX_UART4_Init+0x90>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <MX_UART4_Init+0x90>)
 8003f94:	220c      	movs	r2, #12
 8003f96:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <MX_UART4_Init+0x90>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <MX_UART4_Init+0x90>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <MX_UART4_Init+0x90>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <MX_UART4_Init+0x90>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <MX_UART4_Init+0x90>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003fb6:	4812      	ldr	r0, [pc, #72]	; (8004000 <MX_UART4_Init+0x90>)
 8003fb8:	f00b fa8e 	bl	800f4d8 <HAL_UART_Init>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8003fc2:	f7ff fb91 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	480d      	ldr	r0, [pc, #52]	; (8004000 <MX_UART4_Init+0x90>)
 8003fca:	f00d fe8e 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8003fd4:	f7ff fb88 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4809      	ldr	r0, [pc, #36]	; (8004000 <MX_UART4_Init+0x90>)
 8003fdc:	f00d fec3 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8003fe6:	f7ff fb7f 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003fea:	4805      	ldr	r0, [pc, #20]	; (8004000 <MX_UART4_Init+0x90>)
 8003fec:	f00d fe44 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8003ff6:	f7ff fb77 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ffa:	bf00      	nop
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	240011c8 	.word	0x240011c8
 8004004:	40004c00 	.word	0x40004c00
 8004008:	001312d0 	.word	0x001312d0

0800400c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <MX_UART7_Init+0x90>)
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <MX_UART7_Init+0x94>)
 8004014:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <MX_UART7_Init+0x90>)
 8004018:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <MX_UART7_Init+0x98>)
 800401a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <MX_UART7_Init+0x90>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <MX_UART7_Init+0x90>)
 8004024:	2200      	movs	r2, #0
 8004026:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <MX_UART7_Init+0x90>)
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <MX_UART7_Init+0x90>)
 8004030:	220c      	movs	r2, #12
 8004032:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <MX_UART7_Init+0x90>)
 8004036:	2200      	movs	r2, #0
 8004038:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <MX_UART7_Init+0x90>)
 800403c:	2200      	movs	r2, #0
 800403e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <MX_UART7_Init+0x90>)
 8004042:	2200      	movs	r2, #0
 8004044:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_UART7_Init+0x90>)
 8004048:	2200      	movs	r2, #0
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <MX_UART7_Init+0x90>)
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004052:	4812      	ldr	r0, [pc, #72]	; (800409c <MX_UART7_Init+0x90>)
 8004054:	f00b fa40 	bl	800f4d8 <HAL_UART_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800405e:	f7ff fb43 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004062:	2100      	movs	r1, #0
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <MX_UART7_Init+0x90>)
 8004066:	f00d fe40 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8004070:	f7ff fb3a 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004074:	2100      	movs	r1, #0
 8004076:	4809      	ldr	r0, [pc, #36]	; (800409c <MX_UART7_Init+0x90>)
 8004078:	f00d fe75 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8004082:	f7ff fb31 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8004086:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_UART7_Init+0x90>)
 8004088:	f00d fdf6 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8004092:	f7ff fb29 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	24001258 	.word	0x24001258
 80040a0:	40007800 	.word	0x40007800
 80040a4:	001312d0 	.word	0x001312d0

080040a8 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80040ac:	4b23      	ldr	r3, [pc, #140]	; (800413c <MX_UART8_Init+0x94>)
 80040ae:	4a24      	ldr	r2, [pc, #144]	; (8004140 <MX_UART8_Init+0x98>)
 80040b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <MX_UART8_Init+0x94>)
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <MX_UART8_Init+0x9c>)
 80040b6:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <MX_UART8_Init+0x94>)
 80040ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <MX_UART8_Init+0x94>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <MX_UART8_Init+0x94>)
 80040c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040cc:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <MX_UART8_Init+0x94>)
 80040d0:	220c      	movs	r2, #12
 80040d2:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <MX_UART8_Init+0x94>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <MX_UART8_Init+0x94>)
 80040dc:	2200      	movs	r2, #0
 80040de:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <MX_UART8_Init+0x94>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <MX_UART8_Init+0x94>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <MX_UART8_Init+0x94>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80040f2:	4812      	ldr	r0, [pc, #72]	; (800413c <MX_UART8_Init+0x94>)
 80040f4:	f00b f9f0 	bl	800f4d8 <HAL_UART_Init>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_UART8_Init+0x5a>
  {
    Error_Handler();
 80040fe:	f7ff faf3 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004102:	2100      	movs	r1, #0
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <MX_UART8_Init+0x94>)
 8004106:	f00d fdf0 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_UART8_Init+0x6c>
  {
    Error_Handler();
 8004110:	f7ff faea 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004114:	2100      	movs	r1, #0
 8004116:	4809      	ldr	r0, [pc, #36]	; (800413c <MX_UART8_Init+0x94>)
 8004118:	f00d fe25 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_UART8_Init+0x7e>
  {
    Error_Handler();
 8004122:	f7ff fae1 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8004126:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_UART8_Init+0x94>)
 8004128:	f00d fda6 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_UART8_Init+0x8e>
  {
    Error_Handler();
 8004132:	f7ff fad9 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	240012e8 	.word	0x240012e8
 8004140:	40007c00 	.word	0x40007c00
 8004144:	001312d0 	.word	0x001312d0

08004148 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800414c:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 800414e:	4a23      	ldr	r2, [pc, #140]	; (80041dc <MX_USART2_UART_Init+0x94>)
 8004150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1250000;
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <MX_USART2_UART_Init+0x98>)
 8004156:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004160:	2200      	movs	r2, #0
 8004162:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 800416c:	220c      	movs	r2, #12
 800416e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004176:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004178:	2200      	movs	r2, #0
 800417a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800417c:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 800417e:	2200      	movs	r2, #0
 8004180:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004184:	2200      	movs	r2, #0
 8004186:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 800418a:	2200      	movs	r2, #0
 800418c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800418e:	4812      	ldr	r0, [pc, #72]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 8004190:	f00b f9a2 	bl	800f4d8 <HAL_UART_Init>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800419a:	f7ff faa5 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800419e:	2100      	movs	r1, #0
 80041a0:	480d      	ldr	r0, [pc, #52]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 80041a2:	f00d fda2 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80041ac:	f7ff fa9c 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041b0:	2100      	movs	r1, #0
 80041b2:	4809      	ldr	r0, [pc, #36]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 80041b4:	f00d fdd7 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80041be:	f7ff fa93 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80041c2:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_USART2_UART_Init+0x90>)
 80041c4:	f00d fd58 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 80041ce:	f7ff fa8b 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	24001378 	.word	0x24001378
 80041dc:	40004400 	.word	0x40004400
 80041e0:	001312d0 	.word	0x001312d0

080041e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <MX_USART3_UART_Init+0x90>)
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <MX_USART3_UART_Init+0x94>)
 80041ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <MX_USART3_UART_Init+0x90>)
 80041f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041f6:	4b1f      	ldr	r3, [pc, #124]	; (8004274 <MX_USART3_UART_Init+0x90>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <MX_USART3_UART_Init+0x90>)
 80041fe:	2200      	movs	r2, #0
 8004200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004204:	2200      	movs	r2, #0
 8004206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <MX_USART3_UART_Init+0x90>)
 800420a:	220c      	movs	r2, #12
 800420c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <MX_USART3_UART_Init+0x90>)
 800421c:	2200      	movs	r2, #0
 800421e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004222:	2200      	movs	r2, #0
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004228:	2200      	movs	r2, #0
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800422c:	4811      	ldr	r0, [pc, #68]	; (8004274 <MX_USART3_UART_Init+0x90>)
 800422e:	f00b f953 	bl	800f4d8 <HAL_UART_Init>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004238:	f7ff fa56 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800423c:	2100      	movs	r1, #0
 800423e:	480d      	ldr	r0, [pc, #52]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004240:	f00d fd53 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800424a:	f7ff fa4d 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800424e:	2100      	movs	r1, #0
 8004250:	4808      	ldr	r0, [pc, #32]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004252:	f00d fd88 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800425c:	f7ff fa44 	bl	80036e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <MX_USART3_UART_Init+0x90>)
 8004262:	f00d fd09 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800426c:	f7ff fa3c 	bl	80036e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	24001408 	.word	0x24001408
 8004278:	40004800 	.word	0x40004800

0800427c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0c0      	sub	sp, #256	; 0x100
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004298:	22bc      	movs	r2, #188	; 0xbc
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f010 fe71 	bl	8014f84 <memset>
  if(uartHandle->Instance==UART4)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4aae      	ldr	r2, [pc, #696]	; (8004560 <HAL_UART_MspInit+0x2e4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d142      	bne.n	8004332 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80042ac:	2302      	movs	r3, #2
 80042ae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ba:	4618      	mov	r0, r3
 80042bc:	f007 ff70 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80042c6:	f7ff fa0f 	bl	80036e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80042ca:	4ba6      	ldr	r3, [pc, #664]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d0:	4aa4      	ldr	r2, [pc, #656]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042da:	4ba2      	ldr	r3, [pc, #648]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e8:	4b9e      	ldr	r3, [pc, #632]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ee:	4a9d      	ldr	r2, [pc, #628]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f8:	4b9a      	ldr	r3, [pc, #616]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004306:	2303      	movs	r3, #3
 8004308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004318:	2300      	movs	r3, #0
 800431a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800431e:	2308      	movs	r3, #8
 8004320:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004324:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004328:	4619      	mov	r1, r3
 800432a:	488f      	ldr	r0, [pc, #572]	; (8004568 <HAL_UART_MspInit+0x2ec>)
 800432c:	f003 ffb0 	bl	8008290 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004330:	e1a5      	b.n	800467e <HAL_UART_MspInit+0x402>
  else if(uartHandle->Instance==UART7)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a8d      	ldr	r2, [pc, #564]	; (800456c <HAL_UART_MspInit+0x2f0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d143      	bne.n	80043c4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800433c:	2302      	movs	r3, #2
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800434a:	4618      	mov	r0, r3
 800434c:	f007 ff28 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8004356:	f7ff f9c7 	bl	80036e8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800435a:	4b82      	ldr	r3, [pc, #520]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800435c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004360:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 8004362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004366:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800436a:	4b7e      	ldr	r3, [pc, #504]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800436c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004378:	4b7a      	ldr	r3, [pc, #488]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800437a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800437e:	4a79      	ldr	r2, [pc, #484]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004388:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800438a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004396:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800439a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439e:	2302      	movs	r3, #2
 80043a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80043b0:	2307      	movs	r3, #7
 80043b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043ba:	4619      	mov	r1, r3
 80043bc:	486c      	ldr	r0, [pc, #432]	; (8004570 <HAL_UART_MspInit+0x2f4>)
 80043be:	f003 ff67 	bl	8008290 <HAL_GPIO_Init>
}
 80043c2:	e15c      	b.n	800467e <HAL_UART_MspInit+0x402>
  else if(uartHandle->Instance==UART8)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a6a      	ldr	r2, [pc, #424]	; (8004574 <HAL_UART_MspInit+0x2f8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d14a      	bne.n	8004464 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80043ce:	2302      	movs	r3, #2
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043dc:	4618      	mov	r0, r3
 80043de:	f007 fedf 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_MspInit+0x170>
      Error_Handler();
 80043e8:	f7ff f97e 	bl	80036e8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80043ec:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80043ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f2:	4a5c      	ldr	r2, [pc, #368]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80043fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800440c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004410:	4a54      	ldr	r2, [pc, #336]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 8004412:	f043 0310 	orr.w	r3, r3, #16
 8004416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800441a:	4b52      	ldr	r3, [pc, #328]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 800441c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004428:	2303      	movs	r3, #3
 800442a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004440:	2308      	movs	r3, #8
 8004442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004446:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800444a:	4619      	mov	r1, r3
 800444c:	4848      	ldr	r0, [pc, #288]	; (8004570 <HAL_UART_MspInit+0x2f4>)
 800444e:	f003 ff1f 	bl	8008290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004452:	2200      	movs	r2, #0
 8004454:	2100      	movs	r1, #0
 8004456:	2053      	movs	r0, #83	; 0x53
 8004458:	f001 f88f 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800445c:	2053      	movs	r0, #83	; 0x53
 800445e:	f001 f8a6 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 8004462:	e10c      	b.n	800467e <HAL_UART_MspInit+0x402>
  else if(uartHandle->Instance==USART2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a43      	ldr	r2, [pc, #268]	; (8004578 <HAL_UART_MspInit+0x2fc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	f040 808a 	bne.w	8004584 <HAL_UART_MspInit+0x308>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004470:	2302      	movs	r3, #2
 8004472:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004474:	2300      	movs	r3, #0
 8004476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800447a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800447e:	4618      	mov	r0, r3
 8004480:	f007 fe8e 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_UART_MspInit+0x212>
      Error_Handler();
 800448a:	f7ff f92d 	bl	80036e8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800448e:	4b35      	ldr	r3, [pc, #212]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 8004490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004494:	4a33      	ldr	r2, [pc, #204]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 8004496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800449e:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80044a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80044ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044bc:	4b29      	ldr	r3, [pc, #164]	; (8004564 <HAL_UART_MspInit+0x2e8>)
 80044be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044ca:	230c      	movs	r3, #12
 80044cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d0:	2302      	movs	r3, #2
 80044d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044e2:	2307      	movs	r3, #7
 80044e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80044ec:	4619      	mov	r1, r3
 80044ee:	481e      	ldr	r0, [pc, #120]	; (8004568 <HAL_UART_MspInit+0x2ec>)
 80044f0:	f003 fece 	bl	8008290 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_UART_MspInit+0x300>)
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_UART_MspInit+0x304>)
 80044f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_UART_MspInit+0x300>)
 80044fc:	222c      	movs	r2, #44	; 0x2c
 80044fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_UART_MspInit+0x300>)
 8004502:	2240      	movs	r2, #64	; 0x40
 8004504:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_UART_MspInit+0x300>)
 8004508:	2200      	movs	r2, #0
 800450a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_UART_MspInit+0x300>)
 800450e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004512:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_UART_MspInit+0x300>)
 8004516:	2200      	movs	r2, #0
 8004518:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_UART_MspInit+0x300>)
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004520:	4b16      	ldr	r3, [pc, #88]	; (800457c <HAL_UART_MspInit+0x300>)
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_UART_MspInit+0x300>)
 8004528:	2200      	movs	r2, #0
 800452a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_UART_MspInit+0x300>)
 800452e:	2200      	movs	r2, #0
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004532:	4812      	ldr	r0, [pc, #72]	; (800457c <HAL_UART_MspInit+0x300>)
 8004534:	f001 f856 	bl	80055e4 <HAL_DMA_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 800453e:	f7ff f8d3 	bl	80036e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a0d      	ldr	r2, [pc, #52]	; (800457c <HAL_UART_MspInit+0x300>)
 8004546:	679a      	str	r2, [r3, #120]	; 0x78
 8004548:	4a0c      	ldr	r2, [pc, #48]	; (800457c <HAL_UART_MspInit+0x300>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	2026      	movs	r0, #38	; 0x26
 8004554:	f001 f811 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004558:	2026      	movs	r0, #38	; 0x26
 800455a:	f001 f828 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 800455e:	e08e      	b.n	800467e <HAL_UART_MspInit+0x402>
 8004560:	40004c00 	.word	0x40004c00
 8004564:	58024400 	.word	0x58024400
 8004568:	58020000 	.word	0x58020000
 800456c:	40007800 	.word	0x40007800
 8004570:	58021000 	.word	0x58021000
 8004574:	40007c00 	.word	0x40007c00
 8004578:	40004400 	.word	0x40004400
 800457c:	24001498 	.word	0x24001498
 8004580:	40020040 	.word	0x40020040
  else if(uartHandle->Instance==USART3)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3f      	ldr	r2, [pc, #252]	; (8004688 <HAL_UART_MspInit+0x40c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d177      	bne.n	800467e <HAL_UART_MspInit+0x402>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800458e:	2302      	movs	r3, #2
 8004590:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800459c:	4618      	mov	r0, r3
 800459e:	f007 fdff 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_MspInit+0x330>
      Error_Handler();
 80045a8:	f7ff f89e 	bl	80036e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_UART_MspInit+0x410>)
 80045ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045b2:	4a36      	ldr	r2, [pc, #216]	; (800468c <HAL_UART_MspInit+0x410>)
 80045b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_UART_MspInit+0x410>)
 80045be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ca:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_UART_MspInit+0x410>)
 80045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d0:	4a2e      	ldr	r2, [pc, #184]	; (800468c <HAL_UART_MspInit+0x410>)
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <HAL_UART_MspInit+0x410>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2302      	movs	r3, #2
 80045f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004602:	2307      	movs	r3, #7
 8004604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004608:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800460c:	4619      	mov	r1, r3
 800460e:	4820      	ldr	r0, [pc, #128]	; (8004690 <HAL_UART_MspInit+0x414>)
 8004610:	f003 fe3e 	bl	8008290 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004616:	4a20      	ldr	r2, [pc, #128]	; (8004698 <HAL_UART_MspInit+0x41c>)
 8004618:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_UART_MspInit+0x418>)
 800461c:	222e      	movs	r2, #46	; 0x2e
 800461e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004622:	2240      	movs	r2, #64	; 0x40
 8004624:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_UART_MspInit+0x418>)
 800462e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004632:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004636:	2200      	movs	r2, #0
 8004638:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <HAL_UART_MspInit+0x418>)
 800463c:	2200      	movs	r2, #0
 800463e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <HAL_UART_MspInit+0x418>)
 800464e:	2200      	movs	r2, #0
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004652:	4810      	ldr	r0, [pc, #64]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004654:	f000 ffc6 	bl	80055e4 <HAL_DMA_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_UART_MspInit+0x3e6>
      Error_Handler();
 800465e:	f7ff f843 	bl	80036e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <HAL_UART_MspInit+0x418>)
 8004666:	679a      	str	r2, [r3, #120]	; 0x78
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_UART_MspInit+0x418>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	2027      	movs	r0, #39	; 0x27
 8004674:	f000 ff81 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004678:	2027      	movs	r0, #39	; 0x27
 800467a:	f000 ff98 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 800467e:	bf00      	nop
 8004680:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40004800 	.word	0x40004800
 800468c:	58024400 	.word	0x58024400
 8004690:	58020c00 	.word	0x58020c00
 8004694:	24001510 	.word	0x24001510
 8004698:	40020058 	.word	0x40020058

0800469c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800469c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80046a0:	f000 fd46 	bl	8005130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046a6:	490d      	ldr	r1, [pc, #52]	; (80046dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046a8:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046ac:	e002      	b.n	80046b4 <LoopCopyDataInit>

080046ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046b2:	3304      	adds	r3, #4

080046b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b8:	d3f9      	bcc.n	80046ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046bc:	4c0a      	ldr	r4, [pc, #40]	; (80046e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c0:	e001      	b.n	80046c6 <LoopFillZerobss>

080046c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c4:	3204      	adds	r2, #4

080046c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c8:	d3fb      	bcc.n	80046c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ca:	f010 fc21 	bl	8014f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ce:	f7fe fb0d 	bl	8002cec <main>
  bx  lr
 80046d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80046d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80046dc:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 80046e0:	08030810 	.word	0x08030810
  ldr r2, =_sbss
 80046e4:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 80046e8:	24003098 	.word	0x24003098

080046ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046ec:	e7fe      	b.n	80046ec <ADC3_IRQHandler>
	...

080046f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80046f4:	2200      	movs	r2, #0
 80046f6:	4913      	ldr	r1, [pc, #76]	; (8004744 <MX_USB_DEVICE_Init+0x54>)
 80046f8:	4813      	ldr	r0, [pc, #76]	; (8004748 <MX_USB_DEVICE_Init+0x58>)
 80046fa:	f00f fa61 	bl	8013bc0 <USBD_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004704:	f7fe fff0 	bl	80036e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004708:	4910      	ldr	r1, [pc, #64]	; (800474c <MX_USB_DEVICE_Init+0x5c>)
 800470a:	480f      	ldr	r0, [pc, #60]	; (8004748 <MX_USB_DEVICE_Init+0x58>)
 800470c:	f00f fa88 	bl	8013c20 <USBD_RegisterClass>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004716:	f7fe ffe7 	bl	80036e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800471a:	490d      	ldr	r1, [pc, #52]	; (8004750 <MX_USB_DEVICE_Init+0x60>)
 800471c:	480a      	ldr	r0, [pc, #40]	; (8004748 <MX_USB_DEVICE_Init+0x58>)
 800471e:	f00f f9d9 	bl	8013ad4 <USBD_CDC_RegisterInterface>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004728:	f7fe ffde 	bl	80036e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800472c:	4806      	ldr	r0, [pc, #24]	; (8004748 <MX_USB_DEVICE_Init+0x58>)
 800472e:	f00f fa9e 	bl	8013c6e <USBD_Start>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004738:	f7fe ffd6 	bl	80036e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800473c:	f006 fd66 	bl	800b20c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}
 8004744:	24000020 	.word	0x24000020
 8004748:	24001588 	.word	0x24001588
 800474c:	2400008c 	.word	0x2400008c
 8004750:	2400000c 	.word	0x2400000c

08004754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004758:	2200      	movs	r2, #0
 800475a:	4905      	ldr	r1, [pc, #20]	; (8004770 <CDC_Init_FS+0x1c>)
 800475c:	4805      	ldr	r0, [pc, #20]	; (8004774 <CDC_Init_FS+0x20>)
 800475e:	f00f f9ce 	bl	8013afe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004762:	4905      	ldr	r1, [pc, #20]	; (8004778 <CDC_Init_FS+0x24>)
 8004764:	4803      	ldr	r0, [pc, #12]	; (8004774 <CDC_Init_FS+0x20>)
 8004766:	f00f f9e8 	bl	8013b3a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800476a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	24002058 	.word	0x24002058
 8004774:	24001588 	.word	0x24001588
 8004778:	24001858 	.word	0x24001858

0800477c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	71fb      	strb	r3, [r7, #7]
 8004798:	4613      	mov	r3, r2
 800479a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b23      	cmp	r3, #35	; 0x23
 80047a0:	d84a      	bhi.n	8004838 <CDC_Control_FS+0xac>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <CDC_Control_FS+0x1c>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	08004839 	.word	0x08004839
 80047ac:	08004839 	.word	0x08004839
 80047b0:	08004839 	.word	0x08004839
 80047b4:	08004839 	.word	0x08004839
 80047b8:	08004839 	.word	0x08004839
 80047bc:	08004839 	.word	0x08004839
 80047c0:	08004839 	.word	0x08004839
 80047c4:	08004839 	.word	0x08004839
 80047c8:	08004839 	.word	0x08004839
 80047cc:	08004839 	.word	0x08004839
 80047d0:	08004839 	.word	0x08004839
 80047d4:	08004839 	.word	0x08004839
 80047d8:	08004839 	.word	0x08004839
 80047dc:	08004839 	.word	0x08004839
 80047e0:	08004839 	.word	0x08004839
 80047e4:	08004839 	.word	0x08004839
 80047e8:	08004839 	.word	0x08004839
 80047ec:	08004839 	.word	0x08004839
 80047f0:	08004839 	.word	0x08004839
 80047f4:	08004839 	.word	0x08004839
 80047f8:	08004839 	.word	0x08004839
 80047fc:	08004839 	.word	0x08004839
 8004800:	08004839 	.word	0x08004839
 8004804:	08004839 	.word	0x08004839
 8004808:	08004839 	.word	0x08004839
 800480c:	08004839 	.word	0x08004839
 8004810:	08004839 	.word	0x08004839
 8004814:	08004839 	.word	0x08004839
 8004818:	08004839 	.word	0x08004839
 800481c:	08004839 	.word	0x08004839
 8004820:	08004839 	.word	0x08004839
 8004824:	08004839 	.word	0x08004839
 8004828:	08004839 	.word	0x08004839
 800482c:	08004839 	.word	0x08004839
 8004830:	08004839 	.word	0x08004839
 8004834:	08004839 	.word	0x08004839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004838:	bf00      	nop
  }

  return (USBD_OK);
 800483a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4805      	ldr	r0, [pc, #20]	; (800486c <CDC_Receive_FS+0x24>)
 8004856:	f00f f970 	bl	8013b3a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800485a:	4804      	ldr	r0, [pc, #16]	; (800486c <CDC_Receive_FS+0x24>)
 800485c:	f00f f986 	bl	8013b6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004860:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	24001588 	.word	0x24001588

08004870 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8004882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2212      	movs	r2, #18
 80048a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	2400003c 	.word	0x2400003c

080048b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2204      	movs	r2, #4
 80048c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80048ca:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	24000050 	.word	0x24000050

080048dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	4907      	ldr	r1, [pc, #28]	; (8004910 <USBD_FS_ProductStrDescriptor+0x34>)
 80048f2:	4808      	ldr	r0, [pc, #32]	; (8004914 <USBD_FS_ProductStrDescriptor+0x38>)
 80048f4:	f010 f9ed 	bl	8014cd2 <USBD_GetString>
 80048f8:	e004      	b.n	8004904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	4904      	ldr	r1, [pc, #16]	; (8004910 <USBD_FS_ProductStrDescriptor+0x34>)
 80048fe:	4805      	ldr	r0, [pc, #20]	; (8004914 <USBD_FS_ProductStrDescriptor+0x38>)
 8004900:	f010 f9e7 	bl	8014cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004904:	4b02      	ldr	r3, [pc, #8]	; (8004910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	24002858 	.word	0x24002858
 8004914:	08015ff0 	.word	0x08015ff0

08004918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	6039      	str	r1, [r7, #0]
 8004922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	4904      	ldr	r1, [pc, #16]	; (8004938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004928:	4804      	ldr	r0, [pc, #16]	; (800493c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800492a:	f010 f9d2 	bl	8014cd2 <USBD_GetString>
  return USBD_StrDesc;
 800492e:	4b02      	ldr	r3, [pc, #8]	; (8004938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	24002858 	.word	0x24002858
 800493c:	08016008 	.word	0x08016008

08004940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	221a      	movs	r2, #26
 8004950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004952:	f000 f843 	bl	80049dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8004956:	4b02      	ldr	r3, [pc, #8]	; (8004960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	24000054 	.word	0x24000054

08004964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4907      	ldr	r1, [pc, #28]	; (8004998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800497a:	4808      	ldr	r0, [pc, #32]	; (800499c <USBD_FS_ConfigStrDescriptor+0x38>)
 800497c:	f010 f9a9 	bl	8014cd2 <USBD_GetString>
 8004980:	e004      	b.n	800498c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4904      	ldr	r1, [pc, #16]	; (8004998 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004986:	4805      	ldr	r0, [pc, #20]	; (800499c <USBD_FS_ConfigStrDescriptor+0x38>)
 8004988:	f010 f9a3 	bl	8014cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	24002858 	.word	0x24002858
 800499c:	0801601c 	.word	0x0801601c

080049a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	4907      	ldr	r1, [pc, #28]	; (80049d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80049b6:	4808      	ldr	r0, [pc, #32]	; (80049d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80049b8:	f010 f98b 	bl	8014cd2 <USBD_GetString>
 80049bc:	e004      	b.n	80049c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4904      	ldr	r1, [pc, #16]	; (80049d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80049c2:	4805      	ldr	r0, [pc, #20]	; (80049d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80049c4:	f010 f985 	bl	8014cd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80049c8:	4b02      	ldr	r3, [pc, #8]	; (80049d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	24002858 	.word	0x24002858
 80049d8:	08016028 	.word	0x08016028

080049dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <Get_SerialNum+0x44>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <Get_SerialNum+0x48>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80049ee:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <Get_SerialNum+0x4c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004a02:	2208      	movs	r2, #8
 8004a04:	4909      	ldr	r1, [pc, #36]	; (8004a2c <Get_SerialNum+0x50>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f814 	bl	8004a34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	4908      	ldr	r1, [pc, #32]	; (8004a30 <Get_SerialNum+0x54>)
 8004a10:	68b8      	ldr	r0, [r7, #8]
 8004a12:	f000 f80f 	bl	8004a34 <IntToUnicode>
  }
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	1ff1e800 	.word	0x1ff1e800
 8004a24:	1ff1e804 	.word	0x1ff1e804
 8004a28:	1ff1e808 	.word	0x1ff1e808
 8004a2c:	24000056 	.word	0x24000056
 8004a30:	24000066 	.word	0x24000066

08004a34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]
 8004a4a:	e027      	b.n	8004a9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	0f1b      	lsrs	r3, r3, #28
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d80b      	bhi.n	8004a6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	0f1b      	lsrs	r3, r3, #28
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4619      	mov	r1, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	440b      	add	r3, r1
 8004a64:	3230      	adds	r2, #48	; 0x30
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e00a      	b.n	8004a82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	0f1b      	lsrs	r3, r3, #28
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4619      	mov	r1, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3237      	adds	r2, #55	; 0x37
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
 8004a9c:	7dfa      	ldrb	r2, [r7, #23]
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3d3      	bcc.n	8004a4c <IntToUnicode+0x18>
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b0b8      	sub	sp, #224	; 0xe0
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004abc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004acc:	f107 0310 	add.w	r3, r7, #16
 8004ad0:	22bc      	movs	r2, #188	; 0xbc
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f010 fa55 	bl	8014f84 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <HAL_PCD_MspInit+0xe8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d156      	bne.n	8004b92 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ae8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004aea:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8004aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004af2:	f107 0310 	add.w	r3, r7, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f007 fb52 	bl	800c1a0 <HAL_RCCEx_PeriphCLKConfig>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8004b02:	f7fe fdf1 	bl	80036e8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004b06:	f006 fb81 	bl	800b20c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0a:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b10:	4a23      	ldr	r2, [pc, #140]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1a:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004b42:	230a      	movs	r3, #10
 8004b44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4815      	ldr	r0, [pc, #84]	; (8004ba4 <HAL_PCD_MspInit+0xf0>)
 8004b50:	f003 fb9e 	bl	8008290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b5a:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_PCD_MspInit+0xec>)
 8004b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2100      	movs	r1, #0
 8004b76:	2062      	movs	r0, #98	; 0x62
 8004b78:	f000 fcff 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 8004b7c:	2062      	movs	r0, #98	; 0x62
 8004b7e:	f000 fd16 	bl	80055ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	2065      	movs	r0, #101	; 0x65
 8004b88:	f000 fcf7 	bl	800557a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004b8c:	2065      	movs	r0, #101	; 0x65
 8004b8e:	f000 fd0e 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004b92:	bf00      	nop
 8004b94:	37e0      	adds	r7, #224	; 0xe0
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40080000 	.word	0x40080000
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	58020000 	.word	0x58020000

08004ba8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f00f f8a0 	bl	8013d04 <USBD_LL_SetupStage>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f00f f8da 	bl	8013dae <USBD_LL_DataOutStage>
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3348      	adds	r3, #72	; 0x48
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f00f f923 	bl	8013e74 <USBD_LL_DataInStage>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004c44:	4618      	mov	r0, r3
 8004c46:	f00f fa37 	bl	80140b8 <USBD_LL_SOF>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8004c66:	2300      	movs	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
 8004c6a:	e008      	b.n	8004c7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d102      	bne.n	8004c7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e001      	b.n	8004c7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8004c7a:	f7fe fd35 	bl	80036e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004c84:	7bfa      	ldrb	r2, [r7, #15]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f00f f9d7 	bl	801403c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004c94:	4618      	mov	r0, r3
 8004c96:	f00f f983 	bl	8013fa0 <USBD_LL_Reset>
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f00f f9d2 	bl	801405c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <HAL_PCD_SuspendCallback+0x48>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a03      	ldr	r2, [pc, #12]	; (8004cec <HAL_PCD_SuspendCallback+0x48>)
 8004cde:	f043 0306 	orr.w	r3, r3, #6
 8004ce2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f00f f9c2 	bl	8014088 <USBD_LL_Resume>
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f00f fa10 	bl	8014148 <USBD_LL_IsoOUTIncomplete>
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f00f f9d8 	bl	80140fc <USBD_LL_IsoINIncomplete>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d62:	4618      	mov	r0, r3
 8004d64:	f00f fa16 	bl	8014194 <USBD_LL_DevConnected>
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f00f fa13 	bl	80141aa <USBD_LL_DevDisconnected>
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d13e      	bne.n	8004e1a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004d9c:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <USBD_LL_Init+0x98>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <USBD_LL_Init+0x98>)
 8004da8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <USBD_LL_Init+0x9c>)
 8004db0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <USBD_LL_Init+0x98>)
 8004db4:	2209      	movs	r2, #9
 8004db6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dba:	2202      	movs	r2, #2
 8004dbc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <USBD_LL_Init+0x98>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <USBD_LL_Init+0x98>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004dee:	480d      	ldr	r0, [pc, #52]	; (8004e24 <USBD_LL_Init+0x98>)
 8004df0:	f005 f803 	bl	8009dfa <HAL_PCD_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8004dfa:	f7fe fc75 	bl	80036e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	4808      	ldr	r0, [pc, #32]	; (8004e24 <USBD_LL_Init+0x98>)
 8004e02:	f006 f988 	bl	800b116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4806      	ldr	r0, [pc, #24]	; (8004e24 <USBD_LL_Init+0x98>)
 8004e0c:	f006 f93c 	bl	800b088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004e10:	2280      	movs	r2, #128	; 0x80
 8004e12:	2101      	movs	r1, #1
 8004e14:	4803      	ldr	r0, [pc, #12]	; (8004e24 <USBD_LL_Init+0x98>)
 8004e16:	f006 f937 	bl	800b088 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	24002a58 	.word	0x24002a58
 8004e28:	40080000 	.word	0x40080000

08004e2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004e42:	4618      	mov	r0, r3
 8004e44:	f005 f8fd 	bl	800a042 <HAL_PCD_Start>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f942 	bl	80050d8 <USBD_Get_USB_Status>
 8004e54:	4603      	mov	r3, r0
 8004e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	4608      	mov	r0, r1
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4603      	mov	r3, r0
 8004e72:	70fb      	strb	r3, [r7, #3]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70bb      	strb	r3, [r7, #2]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004e8a:	78bb      	ldrb	r3, [r7, #2]
 8004e8c:	883a      	ldrh	r2, [r7, #0]
 8004e8e:	78f9      	ldrb	r1, [r7, #3]
 8004e90:	f005 fd02 	bl	800a898 <HAL_PCD_EP_Open>
 8004e94:	4603      	mov	r3, r0
 8004e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f91c 	bl	80050d8 <USBD_Get_USB_Status>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f005 fd4b 	bl	800a968 <HAL_PCD_EP_Close>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f8fd 	bl	80050d8 <USBD_Get_USB_Status>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f005 fe23 	bl	800ab56 <HAL_PCD_EP_SetStall>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f8de 	bl	80050d8 <USBD_Get_USB_Status>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f005 fe68 	bl	800ac1e <HAL_PCD_EP_ClrStall>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f8bf 	bl	80050d8 <USBD_Get_USB_Status>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da0b      	bge.n	8004f9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	333e      	adds	r3, #62	; 0x3e
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	e00b      	b.n	8004fb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 fc35 	bl	800a84e <HAL_PCD_SetAddress>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f874 	bl	80050d8 <USBD_Get_USB_Status>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b086      	sub	sp, #24
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	460b      	mov	r3, r1
 800500c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800501c:	7af9      	ldrb	r1, [r7, #11]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f005 fd4e 	bl	800aac2 <HAL_PCD_EP_Transmit>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f853 	bl	80050d8 <USBD_Get_USB_Status>
 8005032:	4603      	mov	r3, r0
 8005034:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005036:	7dbb      	ldrb	r3, [r7, #22]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	607a      	str	r2, [r7, #4]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	460b      	mov	r3, r1
 800504e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800505e:	7af9      	ldrb	r1, [r7, #11]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	f005 fcca 	bl	800a9fc <HAL_PCD_EP_Receive>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f832 	bl	80050d8 <USBD_Get_USB_Status>
 8005074:	4603      	mov	r3, r0
 8005076:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005078:	7dbb      	ldrb	r3, [r7, #22]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f005 fcfa 	bl	800aa92 <HAL_PCD_EP_GetRxCount>
 800509e:	4603      	mov	r3, r0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <USBD_static_malloc+0x18>)
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	24002e60 	.word	0x24002e60

080050c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d817      	bhi.n	800511c <USBD_Get_USB_Status+0x44>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <USBD_Get_USB_Status+0x1c>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005105 	.word	0x08005105
 80050f8:	0800510b 	.word	0x0800510b
 80050fc:	08005111 	.word	0x08005111
 8005100:	08005117 	.word	0x08005117
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
    break;
 8005108:	e00b      	b.n	8005122 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
    break;
 800510e:	e008      	b.n	8005122 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
    break;
 8005114:	e005      	b.n	8005122 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005116:	2303      	movs	r3, #3
 8005118:	73fb      	strb	r3, [r7, #15]
    break;
 800511a:	e002      	b.n	8005122 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800511c:	2303      	movs	r3, #3
 800511e:	73fb      	strb	r3, [r7, #15]
    break;
 8005120:	bf00      	nop
  }
  return usb_status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <SystemInit+0xe4>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	4a36      	ldr	r2, [pc, #216]	; (8005214 <SystemInit+0xe4>)
 800513c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005144:	4b34      	ldr	r3, [pc, #208]	; (8005218 <SystemInit+0xe8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2b06      	cmp	r3, #6
 800514e:	d807      	bhi.n	8005160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <SystemInit+0xe8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 030f 	bic.w	r3, r3, #15
 8005158:	4a2f      	ldr	r2, [pc, #188]	; (8005218 <SystemInit+0xe8>)
 800515a:	f043 0307 	orr.w	r3, r3, #7
 800515e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005160:	4b2e      	ldr	r3, [pc, #184]	; (800521c <SystemInit+0xec>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2d      	ldr	r2, [pc, #180]	; (800521c <SystemInit+0xec>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800516c:	4b2b      	ldr	r3, [pc, #172]	; (800521c <SystemInit+0xec>)
 800516e:	2200      	movs	r2, #0
 8005170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <SystemInit+0xec>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <SystemInit+0xec>)
 8005178:	4b29      	ldr	r3, [pc, #164]	; (8005220 <SystemInit+0xf0>)
 800517a:	4013      	ands	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800517e:	4b26      	ldr	r3, [pc, #152]	; (8005218 <SystemInit+0xe8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <SystemInit+0xe8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 030f 	bic.w	r3, r3, #15
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <SystemInit+0xe8>)
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800519a:	4b20      	ldr	r3, [pc, #128]	; (800521c <SystemInit+0xec>)
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80051a0:	4b1e      	ldr	r3, [pc, #120]	; (800521c <SystemInit+0xec>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <SystemInit+0xec>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80051ac:	4b1b      	ldr	r3, [pc, #108]	; (800521c <SystemInit+0xec>)
 80051ae:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <SystemInit+0xf4>)
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <SystemInit+0xec>)
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <SystemInit+0xf8>)
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80051b8:	4b18      	ldr	r3, [pc, #96]	; (800521c <SystemInit+0xec>)
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <SystemInit+0xfc>)
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <SystemInit+0xec>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <SystemInit+0xec>)
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <SystemInit+0xfc>)
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <SystemInit+0xec>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <SystemInit+0xec>)
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <SystemInit+0xfc>)
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <SystemInit+0xec>)
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <SystemInit+0xec>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0e      	ldr	r2, [pc, #56]	; (800521c <SystemInit+0xec>)
 80051e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <SystemInit+0xec>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <SystemInit+0x100>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <SystemInit+0x104>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051fa:	d202      	bcs.n	8005202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <SystemInit+0x108>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005202:	4b0e      	ldr	r3, [pc, #56]	; (800523c <SystemInit+0x10c>)
 8005204:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005208:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000ed00 	.word	0xe000ed00
 8005218:	52002000 	.word	0x52002000
 800521c:	58024400 	.word	0x58024400
 8005220:	eaf6ed7f 	.word	0xeaf6ed7f
 8005224:	02020200 	.word	0x02020200
 8005228:	01ff0000 	.word	0x01ff0000
 800522c:	01010280 	.word	0x01010280
 8005230:	5c001000 	.word	0x5c001000
 8005234:	ffff0000 	.word	0xffff0000
 8005238:	51008108 	.word	0x51008108
 800523c:	52004000 	.word	0x52004000

08005240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005246:	2003      	movs	r0, #3
 8005248:	f000 f98c 	bl	8005564 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800524c:	f006 fdd2 	bl	800bdf4 <HAL_RCC_GetSysClockFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_Init+0x68>)
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	4913      	ldr	r1, [pc, #76]	; (80052ac <HAL_Init+0x6c>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
 8005268:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800526a:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <HAL_Init+0x68>)
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_Init+0x6c>)
 8005274:	5cd3      	ldrb	r3, [r2, r3]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
 8005280:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_Init+0x70>)
 8005282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <HAL_Init+0x74>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800528a:	200f      	movs	r0, #15
 800528c:	f000 f814 	bl	80052b8 <HAL_InitTick>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e002      	b.n	80052a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800529a:	f7fe fb67 	bl	800396c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	58024400 	.word	0x58024400
 80052ac:	080306ec 	.word	0x080306ec
 80052b0:	24000074 	.word	0x24000074
 80052b4:	24000070 	.word	0x24000070

080052b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <HAL_InitTick+0x60>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e021      	b.n	8005310 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <HAL_InitTick+0x64>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_InitTick+0x60>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052da:	fbb3 f3f1 	udiv	r3, r3, r1
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f971 	bl	80055ca <HAL_SYSTICK_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00e      	b.n	8005310 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d80a      	bhi.n	800530e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f8:	2200      	movs	r2, #0
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	f000 f93b 	bl	800557a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005304:	4a06      	ldr	r2, [pc, #24]	; (8005320 <HAL_InitTick+0x68>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	2400007c 	.word	0x2400007c
 800531c:	24000070 	.word	0x24000070
 8005320:	24000078 	.word	0x24000078

08005324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_IncTick+0x20>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_IncTick+0x24>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4413      	add	r3, r2
 8005334:	4a04      	ldr	r2, [pc, #16]	; (8005348 <HAL_IncTick+0x24>)
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2400007c 	.word	0x2400007c
 8005348:	24003080 	.word	0x24003080

0800534c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return uwTick;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_GetTick+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	24003080 	.word	0x24003080

08005364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7ff ffee 	bl	800534c <HAL_GetTick>
 8005370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d005      	beq.n	800538a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <HAL_Delay+0x44>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800538a:	bf00      	nop
 800538c:	f7ff ffde 	bl	800534c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	429a      	cmp	r2, r3
 800539a:	d8f7      	bhi.n	800538c <HAL_Delay+0x28>
  {
  }
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2400007c 	.word	0x2400007c

080053ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_GetREVID+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0c1b      	lsrs	r3, r3, #16
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	5c001000 	.word	0x5c001000

080053c4 <__NVIC_SetPriorityGrouping>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053e0:	4013      	ands	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <__NVIC_SetPriorityGrouping+0x44>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <__NVIC_SetPriorityGrouping+0x40>)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	60d3      	str	r3, [r2, #12]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e000ed00 	.word	0xe000ed00
 8005408:	05fa0000 	.word	0x05fa0000

0800540c <__NVIC_GetPriorityGrouping>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <__NVIC_GetPriorityGrouping+0x18>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 0307 	and.w	r3, r3, #7
}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_EnableIRQ>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db0b      	blt.n	8005452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	4907      	ldr	r1, [pc, #28]	; (8005460 <__NVIC_EnableIRQ+0x38>)
 8005442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2001      	movs	r0, #1
 800544a:	fa00 f202 	lsl.w	r2, r0, r2
 800544e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e100 	.word	0xe000e100

08005464 <__NVIC_SetPriority>:
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	6039      	str	r1, [r7, #0]
 800546e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db0a      	blt.n	800548e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	490c      	ldr	r1, [pc, #48]	; (80054b0 <__NVIC_SetPriority+0x4c>)
 800547e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	440b      	add	r3, r1
 8005488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800548c:	e00a      	b.n	80054a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4908      	ldr	r1, [pc, #32]	; (80054b4 <__NVIC_SetPriority+0x50>)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	3b04      	subs	r3, #4
 800549c:	0112      	lsls	r2, r2, #4
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	440b      	add	r3, r1
 80054a2:	761a      	strb	r2, [r3, #24]
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000e100 	.word	0xe000e100
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <NVIC_EncodePriority>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f1c3 0307 	rsb	r3, r3, #7
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	bf28      	it	cs
 80054d6:	2304      	movcs	r3, #4
 80054d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3304      	adds	r3, #4
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d902      	bls.n	80054e8 <NVIC_EncodePriority+0x30>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3b03      	subs	r3, #3
 80054e6:	e000      	b.n	80054ea <NVIC_EncodePriority+0x32>
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	401a      	ands	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005500:	f04f 31ff 	mov.w	r1, #4294967295
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	43d9      	mvns	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005510:	4313      	orrs	r3, r2
}
 8005512:	4618      	mov	r0, r3
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005530:	d301      	bcc.n	8005536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005532:	2301      	movs	r3, #1
 8005534:	e00f      	b.n	8005556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <SysTick_Config+0x40>)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800553e:	210f      	movs	r1, #15
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	f7ff ff8e 	bl	8005464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <SysTick_Config+0x40>)
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800554e:	4b04      	ldr	r3, [pc, #16]	; (8005560 <SysTick_Config+0x40>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010

08005564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff29 	bl	80053c4 <__NVIC_SetPriorityGrouping>
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005588:	f7ff ff40 	bl	800540c <__NVIC_GetPriorityGrouping>
 800558c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f7ff ff90 	bl	80054b8 <NVIC_EncodePriority>
 8005598:	4602      	mov	r2, r0
 800559a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff5f 	bl	8005464 <__NVIC_SetPriority>
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4603      	mov	r3, r0
 80055b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff33 	bl	8005428 <__NVIC_EnableIRQ>
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ffa4 	bl	8005520 <SysTick_Config>
 80055d8:	4603      	mov	r3, r0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055ec:	f7ff feae 	bl	800534c <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e316      	b.n	8005c2a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a66      	ldr	r2, [pc, #408]	; (800579c <HAL_DMA_Init+0x1b8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04a      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a65      	ldr	r2, [pc, #404]	; (80057a0 <HAL_DMA_Init+0x1bc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d045      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a63      	ldr	r2, [pc, #396]	; (80057a4 <HAL_DMA_Init+0x1c0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d040      	beq.n	800569c <HAL_DMA_Init+0xb8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a62      	ldr	r2, [pc, #392]	; (80057a8 <HAL_DMA_Init+0x1c4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d03b      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a60      	ldr	r2, [pc, #384]	; (80057ac <HAL_DMA_Init+0x1c8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d036      	beq.n	800569c <HAL_DMA_Init+0xb8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5f      	ldr	r2, [pc, #380]	; (80057b0 <HAL_DMA_Init+0x1cc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d031      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5d      	ldr	r2, [pc, #372]	; (80057b4 <HAL_DMA_Init+0x1d0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02c      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a5c      	ldr	r2, [pc, #368]	; (80057b8 <HAL_DMA_Init+0x1d4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d027      	beq.n	800569c <HAL_DMA_Init+0xb8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5a      	ldr	r2, [pc, #360]	; (80057bc <HAL_DMA_Init+0x1d8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d022      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a59      	ldr	r2, [pc, #356]	; (80057c0 <HAL_DMA_Init+0x1dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d01d      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a57      	ldr	r2, [pc, #348]	; (80057c4 <HAL_DMA_Init+0x1e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <HAL_DMA_Init+0xb8>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a56      	ldr	r2, [pc, #344]	; (80057c8 <HAL_DMA_Init+0x1e4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a54      	ldr	r2, [pc, #336]	; (80057cc <HAL_DMA_Init+0x1e8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <HAL_DMA_Init+0xb8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a53      	ldr	r2, [pc, #332]	; (80057d0 <HAL_DMA_Init+0x1ec>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a51      	ldr	r2, [pc, #324]	; (80057d4 <HAL_DMA_Init+0x1f0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_DMA_Init+0xb8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a50      	ldr	r2, [pc, #320]	; (80057d8 <HAL_DMA_Init+0x1f4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <HAL_DMA_Init+0xbc>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <HAL_DMA_Init+0xbe>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 813b 	beq.w	800591e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a37      	ldr	r2, [pc, #220]	; (800579c <HAL_DMA_Init+0x1b8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d04a      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a36      	ldr	r2, [pc, #216]	; (80057a0 <HAL_DMA_Init+0x1bc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d045      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a34      	ldr	r2, [pc, #208]	; (80057a4 <HAL_DMA_Init+0x1c0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d040      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a33      	ldr	r2, [pc, #204]	; (80057a8 <HAL_DMA_Init+0x1c4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d03b      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <HAL_DMA_Init+0x1c8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d036      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a30      	ldr	r2, [pc, #192]	; (80057b0 <HAL_DMA_Init+0x1cc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d031      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <HAL_DMA_Init+0x1d0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d02c      	beq.n	8005758 <HAL_DMA_Init+0x174>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <HAL_DMA_Init+0x1d4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d027      	beq.n	8005758 <HAL_DMA_Init+0x174>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <HAL_DMA_Init+0x1d8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d022      	beq.n	8005758 <HAL_DMA_Init+0x174>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <HAL_DMA_Init+0x1dc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d01d      	beq.n	8005758 <HAL_DMA_Init+0x174>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <HAL_DMA_Init+0x1e0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_DMA_Init+0x174>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <HAL_DMA_Init+0x1e4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_DMA_Init+0x174>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a25      	ldr	r2, [pc, #148]	; (80057cc <HAL_DMA_Init+0x1e8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_DMA_Init+0x174>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a24      	ldr	r2, [pc, #144]	; (80057d0 <HAL_DMA_Init+0x1ec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_DMA_Init+0x174>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <HAL_DMA_Init+0x1f0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_DMA_Init+0x174>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a21      	ldr	r2, [pc, #132]	; (80057d8 <HAL_DMA_Init+0x1f4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <HAL_DMA_Init+0x186>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e007      	b.n	800577a <HAL_DMA_Init+0x196>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800577a:	e02f      	b.n	80057dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800577c:	f7ff fde6 	bl	800534c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b05      	cmp	r3, #5
 8005788:	d928      	bls.n	80057dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2203      	movs	r2, #3
 8005794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e246      	b.n	8005c2a <HAL_DMA_Init+0x646>
 800579c:	40020010 	.word	0x40020010
 80057a0:	40020028 	.word	0x40020028
 80057a4:	40020040 	.word	0x40020040
 80057a8:	40020058 	.word	0x40020058
 80057ac:	40020070 	.word	0x40020070
 80057b0:	40020088 	.word	0x40020088
 80057b4:	400200a0 	.word	0x400200a0
 80057b8:	400200b8 	.word	0x400200b8
 80057bc:	40020410 	.word	0x40020410
 80057c0:	40020428 	.word	0x40020428
 80057c4:	40020440 	.word	0x40020440
 80057c8:	40020458 	.word	0x40020458
 80057cc:	40020470 	.word	0x40020470
 80057d0:	40020488 	.word	0x40020488
 80057d4:	400204a0 	.word	0x400204a0
 80057d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1c8      	bne.n	800577c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4b83      	ldr	r3, [pc, #524]	; (8005a04 <HAL_DMA_Init+0x420>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005802:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2b04      	cmp	r3, #4
 800582e:	d107      	bne.n	8005840 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005838:	4313      	orrs	r3, r2
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005840:	4b71      	ldr	r3, [pc, #452]	; (8005a08 <HAL_DMA_Init+0x424>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b71      	ldr	r3, [pc, #452]	; (8005a0c <HAL_DMA_Init+0x428>)
 8005846:	4013      	ands	r3, r2
 8005848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800584c:	d328      	bcc.n	80058a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b28      	cmp	r3, #40	; 0x28
 8005854:	d903      	bls.n	800585e <HAL_DMA_Init+0x27a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b2e      	cmp	r3, #46	; 0x2e
 800585c:	d917      	bls.n	800588e <HAL_DMA_Init+0x2aa>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b3e      	cmp	r3, #62	; 0x3e
 8005864:	d903      	bls.n	800586e <HAL_DMA_Init+0x28a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b42      	cmp	r3, #66	; 0x42
 800586c:	d90f      	bls.n	800588e <HAL_DMA_Init+0x2aa>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b46      	cmp	r3, #70	; 0x46
 8005874:	d903      	bls.n	800587e <HAL_DMA_Init+0x29a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b48      	cmp	r3, #72	; 0x48
 800587c:	d907      	bls.n	800588e <HAL_DMA_Init+0x2aa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b4e      	cmp	r3, #78	; 0x4e
 8005884:	d905      	bls.n	8005892 <HAL_DMA_Init+0x2ae>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b52      	cmp	r3, #82	; 0x52
 800588c:	d801      	bhi.n	8005892 <HAL_DMA_Init+0x2ae>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_DMA_Init+0x2b0>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d117      	bne.n	80058fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 fb4d 	bl	8007f7c <DMA_CheckFifoParam>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e197      	b.n	8005c2a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f002 fa88 	bl	8007e18 <DMA_CalcBaseAndBitshift>
 8005908:	4603      	mov	r3, r0
 800590a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	223f      	movs	r2, #63	; 0x3f
 8005916:	409a      	lsls	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	e0cd      	b.n	8005aba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3b      	ldr	r2, [pc, #236]	; (8005a10 <HAL_DMA_Init+0x42c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_DMA_Init+0x38a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a39      	ldr	r2, [pc, #228]	; (8005a14 <HAL_DMA_Init+0x430>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01d      	beq.n	800596e <HAL_DMA_Init+0x38a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a38      	ldr	r2, [pc, #224]	; (8005a18 <HAL_DMA_Init+0x434>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_DMA_Init+0x38a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a36      	ldr	r2, [pc, #216]	; (8005a1c <HAL_DMA_Init+0x438>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_DMA_Init+0x38a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <HAL_DMA_Init+0x43c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_DMA_Init+0x38a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a33      	ldr	r2, [pc, #204]	; (8005a24 <HAL_DMA_Init+0x440>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_DMA_Init+0x38a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a32      	ldr	r2, [pc, #200]	; (8005a28 <HAL_DMA_Init+0x444>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_DMA_Init+0x38a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a30      	ldr	r2, [pc, #192]	; (8005a2c <HAL_DMA_Init+0x448>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <HAL_DMA_Init+0x38e>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_DMA_Init+0x390>
 8005972:	2300      	movs	r3, #0
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8097 	beq.w	8005aa8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <HAL_DMA_Init+0x42c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d021      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <HAL_DMA_Init+0x430>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01c      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_DMA_Init+0x434>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d017      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <HAL_DMA_Init+0x438>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d012      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_DMA_Init+0x43c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00d      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <HAL_DMA_Init+0x440>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d008      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_DMA_Init+0x444>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <HAL_DMA_Init+0x3e4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <HAL_DMA_Init+0x448>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <HAL_DMA_Init+0x44c>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d020      	beq.n	8005a34 <HAL_DMA_Init+0x450>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d102      	bne.n	8005a00 <HAL_DMA_Init+0x41c>
 80059fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059fe:	e01a      	b.n	8005a36 <HAL_DMA_Init+0x452>
 8005a00:	2300      	movs	r3, #0
 8005a02:	e018      	b.n	8005a36 <HAL_DMA_Init+0x452>
 8005a04:	fe10803f 	.word	0xfe10803f
 8005a08:	5c001000 	.word	0x5c001000
 8005a0c:	ffff0000 	.word	0xffff0000
 8005a10:	58025408 	.word	0x58025408
 8005a14:	5802541c 	.word	0x5802541c
 8005a18:	58025430 	.word	0x58025430
 8005a1c:	58025444 	.word	0x58025444
 8005a20:	58025458 	.word	0x58025458
 8005a24:	5802546c 	.word	0x5802546c
 8005a28:	58025480 	.word	0x58025480
 8005a2c:	58025494 	.word	0x58025494
 8005a30:	fffe000f 	.word	0xfffe000f
 8005a34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	; (8005c34 <HAL_DMA_Init+0x650>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	4a6e      	ldr	r2, [pc, #440]	; (8005c38 <HAL_DMA_Init+0x654>)
 8005a80:	fba2 2303 	umull	r2, r3, r2, r3
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	009a      	lsls	r2, r3, #2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 f9c3 	bl	8007e18 <DMA_CalcBaseAndBitshift>
 8005a92:	4603      	mov	r3, r0
 8005a94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e008      	b.n	8005aba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0b7      	b.n	8005c2a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a5f      	ldr	r2, [pc, #380]	; (8005c3c <HAL_DMA_Init+0x658>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d072      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_DMA_Init+0x65c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d06d      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_DMA_Init+0x660>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d068      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a5a      	ldr	r2, [pc, #360]	; (8005c48 <HAL_DMA_Init+0x664>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d063      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a59      	ldr	r2, [pc, #356]	; (8005c4c <HAL_DMA_Init+0x668>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d05e      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a57      	ldr	r2, [pc, #348]	; (8005c50 <HAL_DMA_Init+0x66c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d059      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a56      	ldr	r2, [pc, #344]	; (8005c54 <HAL_DMA_Init+0x670>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d054      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a54      	ldr	r2, [pc, #336]	; (8005c58 <HAL_DMA_Init+0x674>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d04f      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a53      	ldr	r2, [pc, #332]	; (8005c5c <HAL_DMA_Init+0x678>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a51      	ldr	r2, [pc, #324]	; (8005c60 <HAL_DMA_Init+0x67c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a50      	ldr	r2, [pc, #320]	; (8005c64 <HAL_DMA_Init+0x680>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <HAL_DMA_Init+0x684>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a4d      	ldr	r2, [pc, #308]	; (8005c6c <HAL_DMA_Init+0x688>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_DMA_Init+0x68c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4a      	ldr	r2, [pc, #296]	; (8005c74 <HAL_DMA_Init+0x690>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a48      	ldr	r2, [pc, #288]	; (8005c78 <HAL_DMA_Init+0x694>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <HAL_DMA_Init+0x698>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a45      	ldr	r2, [pc, #276]	; (8005c80 <HAL_DMA_Init+0x69c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a44      	ldr	r2, [pc, #272]	; (8005c84 <HAL_DMA_Init+0x6a0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a42      	ldr	r2, [pc, #264]	; (8005c88 <HAL_DMA_Init+0x6a4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_DMA_Init+0x6a8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3f      	ldr	r2, [pc, #252]	; (8005c90 <HAL_DMA_Init+0x6ac>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3e      	ldr	r2, [pc, #248]	; (8005c94 <HAL_DMA_Init+0x6b0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_Init+0x5c6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3c      	ldr	r2, [pc, #240]	; (8005c98 <HAL_DMA_Init+0x6b4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_DMA_Init+0x5ca>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_DMA_Init+0x5cc>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d032      	beq.n	8005c1a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f002 fa5d 	bl	8008074 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d102      	bne.n	8005bc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_DMA_Init+0x624>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d80c      	bhi.n	8005c08 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f002 fada 	bl	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e008      	b.n	8005c1a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	a7fdabf8 	.word	0xa7fdabf8
 8005c38:	cccccccd 	.word	0xcccccccd
 8005c3c:	40020010 	.word	0x40020010
 8005c40:	40020028 	.word	0x40020028
 8005c44:	40020040 	.word	0x40020040
 8005c48:	40020058 	.word	0x40020058
 8005c4c:	40020070 	.word	0x40020070
 8005c50:	40020088 	.word	0x40020088
 8005c54:	400200a0 	.word	0x400200a0
 8005c58:	400200b8 	.word	0x400200b8
 8005c5c:	40020410 	.word	0x40020410
 8005c60:	40020428 	.word	0x40020428
 8005c64:	40020440 	.word	0x40020440
 8005c68:	40020458 	.word	0x40020458
 8005c6c:	40020470 	.word	0x40020470
 8005c70:	40020488 	.word	0x40020488
 8005c74:	400204a0 	.word	0x400204a0
 8005c78:	400204b8 	.word	0x400204b8
 8005c7c:	58025408 	.word	0x58025408
 8005c80:	5802541c 	.word	0x5802541c
 8005c84:	58025430 	.word	0x58025430
 8005c88:	58025444 	.word	0x58025444
 8005c8c:	58025458 	.word	0x58025458
 8005c90:	5802546c 	.word	0x5802546c
 8005c94:	58025480 	.word	0x58025480
 8005c98:	58025494 	.word	0x58025494

08005c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e226      	b.n	8006106 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_DMA_Start_IT+0x2a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e21f      	b.n	8006106 <HAL_DMA_Start_IT+0x46a>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 820a 	bne.w	80060f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a68      	ldr	r2, [pc, #416]	; (8005e90 <HAL_DMA_Start_IT+0x1f4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a66      	ldr	r2, [pc, #408]	; (8005e94 <HAL_DMA_Start_IT+0x1f8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a65      	ldr	r2, [pc, #404]	; (8005e98 <HAL_DMA_Start_IT+0x1fc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a63      	ldr	r2, [pc, #396]	; (8005e9c <HAL_DMA_Start_IT+0x200>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a62      	ldr	r2, [pc, #392]	; (8005ea0 <HAL_DMA_Start_IT+0x204>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a60      	ldr	r2, [pc, #384]	; (8005ea4 <HAL_DMA_Start_IT+0x208>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5f      	ldr	r2, [pc, #380]	; (8005ea8 <HAL_DMA_Start_IT+0x20c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5d      	ldr	r2, [pc, #372]	; (8005eac <HAL_DMA_Start_IT+0x210>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a5c      	ldr	r2, [pc, #368]	; (8005eb0 <HAL_DMA_Start_IT+0x214>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5a      	ldr	r2, [pc, #360]	; (8005eb4 <HAL_DMA_Start_IT+0x218>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a59      	ldr	r2, [pc, #356]	; (8005eb8 <HAL_DMA_Start_IT+0x21c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a57      	ldr	r2, [pc, #348]	; (8005ebc <HAL_DMA_Start_IT+0x220>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a56      	ldr	r2, [pc, #344]	; (8005ec0 <HAL_DMA_Start_IT+0x224>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a54      	ldr	r2, [pc, #336]	; (8005ec4 <HAL_DMA_Start_IT+0x228>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a53      	ldr	r2, [pc, #332]	; (8005ec8 <HAL_DMA_Start_IT+0x22c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a51      	ldr	r2, [pc, #324]	; (8005ecc <HAL_DMA_Start_IT+0x230>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_DMA_Start_IT+0x100>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e007      	b.n	8005dac <HAL_DMA_Start_IT+0x110>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f001 fe84 	bl	8007ac0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a34      	ldr	r2, [pc, #208]	; (8005e90 <HAL_DMA_Start_IT+0x1f4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04a      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <HAL_DMA_Start_IT+0x1f8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d045      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <HAL_DMA_Start_IT+0x1fc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d040      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <HAL_DMA_Start_IT+0x200>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2e      	ldr	r2, [pc, #184]	; (8005ea0 <HAL_DMA_Start_IT+0x204>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d036      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <HAL_DMA_Start_IT+0x208>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <HAL_DMA_Start_IT+0x20c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <HAL_DMA_Start_IT+0x210>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d027      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <HAL_DMA_Start_IT+0x214>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <HAL_DMA_Start_IT+0x218>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a25      	ldr	r2, [pc, #148]	; (8005eb8 <HAL_DMA_Start_IT+0x21c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <HAL_DMA_Start_IT+0x220>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <HAL_DMA_Start_IT+0x224>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_DMA_Start_IT+0x228>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <HAL_DMA_Start_IT+0x22c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <HAL_DMA_Start_IT+0x230>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_DMA_Start_IT+0x1c0>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_DMA_Start_IT+0x1c2>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 021e 	bic.w	r2, r3, #30
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0216 	orr.w	r2, r2, #22
 8005e74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03e      	beq.n	8005efc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0208 	orr.w	r2, r2, #8
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e035      	b.n	8005efc <HAL_DMA_Start_IT+0x260>
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 020e 	bic.w	r2, r3, #14
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 020a 	orr.w	r2, r2, #10
 8005ee2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0204 	orr.w	r2, r2, #4
 8005efa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a83      	ldr	r2, [pc, #524]	; (8006110 <HAL_DMA_Start_IT+0x474>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d072      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a82      	ldr	r2, [pc, #520]	; (8006114 <HAL_DMA_Start_IT+0x478>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d06d      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a80      	ldr	r2, [pc, #512]	; (8006118 <HAL_DMA_Start_IT+0x47c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d068      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7f      	ldr	r2, [pc, #508]	; (800611c <HAL_DMA_Start_IT+0x480>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d063      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7d      	ldr	r2, [pc, #500]	; (8006120 <HAL_DMA_Start_IT+0x484>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d05e      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_DMA_Start_IT+0x488>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d059      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a7a      	ldr	r2, [pc, #488]	; (8006128 <HAL_DMA_Start_IT+0x48c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d054      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a79      	ldr	r2, [pc, #484]	; (800612c <HAL_DMA_Start_IT+0x490>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04f      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a77      	ldr	r2, [pc, #476]	; (8006130 <HAL_DMA_Start_IT+0x494>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04a      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a76      	ldr	r2, [pc, #472]	; (8006134 <HAL_DMA_Start_IT+0x498>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d045      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a74      	ldr	r2, [pc, #464]	; (8006138 <HAL_DMA_Start_IT+0x49c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d040      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a73      	ldr	r2, [pc, #460]	; (800613c <HAL_DMA_Start_IT+0x4a0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d03b      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a71      	ldr	r2, [pc, #452]	; (8006140 <HAL_DMA_Start_IT+0x4a4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d036      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a70      	ldr	r2, [pc, #448]	; (8006144 <HAL_DMA_Start_IT+0x4a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6e      	ldr	r2, [pc, #440]	; (8006148 <HAL_DMA_Start_IT+0x4ac>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6d      	ldr	r2, [pc, #436]	; (800614c <HAL_DMA_Start_IT+0x4b0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d027      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	; (8006150 <HAL_DMA_Start_IT+0x4b4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_DMA_Start_IT+0x4b8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a68      	ldr	r2, [pc, #416]	; (8006158 <HAL_DMA_Start_IT+0x4bc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_DMA_Start_IT+0x4c0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_DMA_Start_IT+0x4c4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a64      	ldr	r2, [pc, #400]	; (8006164 <HAL_DMA_Start_IT+0x4c8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a62      	ldr	r2, [pc, #392]	; (8006168 <HAL_DMA_Start_IT+0x4cc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a61      	ldr	r2, [pc, #388]	; (800616c <HAL_DMA_Start_IT+0x4d0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x354>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_DMA_Start_IT+0x356>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01a      	beq.n	800602c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006012:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a37      	ldr	r2, [pc, #220]	; (8006110 <HAL_DMA_Start_IT+0x474>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04a      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a36      	ldr	r2, [pc, #216]	; (8006114 <HAL_DMA_Start_IT+0x478>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d045      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a34      	ldr	r2, [pc, #208]	; (8006118 <HAL_DMA_Start_IT+0x47c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d040      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a33      	ldr	r2, [pc, #204]	; (800611c <HAL_DMA_Start_IT+0x480>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d03b      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_DMA_Start_IT+0x484>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d036      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a30      	ldr	r2, [pc, #192]	; (8006124 <HAL_DMA_Start_IT+0x488>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d031      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2e      	ldr	r2, [pc, #184]	; (8006128 <HAL_DMA_Start_IT+0x48c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02c      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2d      	ldr	r2, [pc, #180]	; (800612c <HAL_DMA_Start_IT+0x490>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d027      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2b      	ldr	r2, [pc, #172]	; (8006130 <HAL_DMA_Start_IT+0x494>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <HAL_DMA_Start_IT+0x498>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a28      	ldr	r2, [pc, #160]	; (8006138 <HAL_DMA_Start_IT+0x49c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a27      	ldr	r2, [pc, #156]	; (800613c <HAL_DMA_Start_IT+0x4a0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a25      	ldr	r2, [pc, #148]	; (8006140 <HAL_DMA_Start_IT+0x4a4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a24      	ldr	r2, [pc, #144]	; (8006144 <HAL_DMA_Start_IT+0x4a8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_DMA_Start_IT+0x4ac>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_DMA_Start_IT+0x4b0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <HAL_DMA_Start_IT+0x442>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e012      	b.n	8006104 <HAL_DMA_Start_IT+0x468>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e009      	b.n	8006104 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40020010 	.word	0x40020010
 8006114:	40020028 	.word	0x40020028
 8006118:	40020040 	.word	0x40020040
 800611c:	40020058 	.word	0x40020058
 8006120:	40020070 	.word	0x40020070
 8006124:	40020088 	.word	0x40020088
 8006128:	400200a0 	.word	0x400200a0
 800612c:	400200b8 	.word	0x400200b8
 8006130:	40020410 	.word	0x40020410
 8006134:	40020428 	.word	0x40020428
 8006138:	40020440 	.word	0x40020440
 800613c:	40020458 	.word	0x40020458
 8006140:	40020470 	.word	0x40020470
 8006144:	40020488 	.word	0x40020488
 8006148:	400204a0 	.word	0x400204a0
 800614c:	400204b8 	.word	0x400204b8
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494

08006170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006178:	f7ff f8e8 	bl	800534c <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e2dc      	b.n	8006742 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d008      	beq.n	80061a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2280      	movs	r2, #128	; 0x80
 8006198:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e2cd      	b.n	8006742 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a76      	ldr	r2, [pc, #472]	; (8006384 <HAL_DMA_Abort+0x214>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d04a      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a74      	ldr	r2, [pc, #464]	; (8006388 <HAL_DMA_Abort+0x218>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d045      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a73      	ldr	r2, [pc, #460]	; (800638c <HAL_DMA_Abort+0x21c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d040      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a71      	ldr	r2, [pc, #452]	; (8006390 <HAL_DMA_Abort+0x220>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d03b      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a70      	ldr	r2, [pc, #448]	; (8006394 <HAL_DMA_Abort+0x224>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d036      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6e      	ldr	r2, [pc, #440]	; (8006398 <HAL_DMA_Abort+0x228>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d031      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6d      	ldr	r2, [pc, #436]	; (800639c <HAL_DMA_Abort+0x22c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d02c      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a6b      	ldr	r2, [pc, #428]	; (80063a0 <HAL_DMA_Abort+0x230>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d027      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6a      	ldr	r2, [pc, #424]	; (80063a4 <HAL_DMA_Abort+0x234>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a68      	ldr	r2, [pc, #416]	; (80063a8 <HAL_DMA_Abort+0x238>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d01d      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a67      	ldr	r2, [pc, #412]	; (80063ac <HAL_DMA_Abort+0x23c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a65      	ldr	r2, [pc, #404]	; (80063b0 <HAL_DMA_Abort+0x240>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a64      	ldr	r2, [pc, #400]	; (80063b4 <HAL_DMA_Abort+0x244>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a62      	ldr	r2, [pc, #392]	; (80063b8 <HAL_DMA_Abort+0x248>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a61      	ldr	r2, [pc, #388]	; (80063bc <HAL_DMA_Abort+0x24c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_DMA_Abort+0xd6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5f      	ldr	r2, [pc, #380]	; (80063c0 <HAL_DMA_Abort+0x250>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_DMA_Abort+0xda>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_DMA_Abort+0xdc>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 021e 	bic.w	r2, r2, #30
 800625e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800626e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e00a      	b.n	800628e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 020e 	bic.w	r2, r2, #14
 8006286:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a3c      	ldr	r2, [pc, #240]	; (8006384 <HAL_DMA_Abort+0x214>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d072      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a3a      	ldr	r2, [pc, #232]	; (8006388 <HAL_DMA_Abort+0x218>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d06d      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a39      	ldr	r2, [pc, #228]	; (800638c <HAL_DMA_Abort+0x21c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d068      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a37      	ldr	r2, [pc, #220]	; (8006390 <HAL_DMA_Abort+0x220>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d063      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a36      	ldr	r2, [pc, #216]	; (8006394 <HAL_DMA_Abort+0x224>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d05e      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a34      	ldr	r2, [pc, #208]	; (8006398 <HAL_DMA_Abort+0x228>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d059      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a33      	ldr	r2, [pc, #204]	; (800639c <HAL_DMA_Abort+0x22c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d054      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a31      	ldr	r2, [pc, #196]	; (80063a0 <HAL_DMA_Abort+0x230>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d04f      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a30      	ldr	r2, [pc, #192]	; (80063a4 <HAL_DMA_Abort+0x234>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d04a      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2e      	ldr	r2, [pc, #184]	; (80063a8 <HAL_DMA_Abort+0x238>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d045      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <HAL_DMA_Abort+0x23c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d040      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2b      	ldr	r2, [pc, #172]	; (80063b0 <HAL_DMA_Abort+0x240>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d03b      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <HAL_DMA_Abort+0x244>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d036      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <HAL_DMA_Abort+0x248>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a27      	ldr	r2, [pc, #156]	; (80063bc <HAL_DMA_Abort+0x24c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d02c      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a25      	ldr	r2, [pc, #148]	; (80063c0 <HAL_DMA_Abort+0x250>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d027      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <HAL_DMA_Abort+0x254>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <HAL_DMA_Abort+0x258>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a21      	ldr	r2, [pc, #132]	; (80063cc <HAL_DMA_Abort+0x25c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <HAL_DMA_Abort+0x260>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1e      	ldr	r2, [pc, #120]	; (80063d4 <HAL_DMA_Abort+0x264>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_DMA_Abort+0x268>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1b      	ldr	r2, [pc, #108]	; (80063dc <HAL_DMA_Abort+0x26c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_Abort+0x20e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_DMA_Abort+0x270>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d132      	bne.n	80063e4 <HAL_DMA_Abort+0x274>
 800637e:	2301      	movs	r3, #1
 8006380:	e031      	b.n	80063e6 <HAL_DMA_Abort+0x276>
 8006382:	bf00      	nop
 8006384:	40020010 	.word	0x40020010
 8006388:	40020028 	.word	0x40020028
 800638c:	40020040 	.word	0x40020040
 8006390:	40020058 	.word	0x40020058
 8006394:	40020070 	.word	0x40020070
 8006398:	40020088 	.word	0x40020088
 800639c:	400200a0 	.word	0x400200a0
 80063a0:	400200b8 	.word	0x400200b8
 80063a4:	40020410 	.word	0x40020410
 80063a8:	40020428 	.word	0x40020428
 80063ac:	40020440 	.word	0x40020440
 80063b0:	40020458 	.word	0x40020458
 80063b4:	40020470 	.word	0x40020470
 80063b8:	40020488 	.word	0x40020488
 80063bc:	400204a0 	.word	0x400204a0
 80063c0:	400204b8 	.word	0x400204b8
 80063c4:	58025408 	.word	0x58025408
 80063c8:	5802541c 	.word	0x5802541c
 80063cc:	58025430 	.word	0x58025430
 80063d0:	58025444 	.word	0x58025444
 80063d4:	58025458 	.word	0x58025458
 80063d8:	5802546c 	.word	0x5802546c
 80063dc:	58025480 	.word	0x58025480
 80063e0:	58025494 	.word	0x58025494
 80063e4:	2300      	movs	r3, #0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6d      	ldr	r2, [pc, #436]	; (80065b4 <HAL_DMA_Abort+0x444>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6b      	ldr	r2, [pc, #428]	; (80065b8 <HAL_DMA_Abort+0x448>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6a      	ldr	r2, [pc, #424]	; (80065bc <HAL_DMA_Abort+0x44c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a68      	ldr	r2, [pc, #416]	; (80065c0 <HAL_DMA_Abort+0x450>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a67      	ldr	r2, [pc, #412]	; (80065c4 <HAL_DMA_Abort+0x454>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a65      	ldr	r2, [pc, #404]	; (80065c8 <HAL_DMA_Abort+0x458>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a64      	ldr	r2, [pc, #400]	; (80065cc <HAL_DMA_Abort+0x45c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a62      	ldr	r2, [pc, #392]	; (80065d0 <HAL_DMA_Abort+0x460>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a61      	ldr	r2, [pc, #388]	; (80065d4 <HAL_DMA_Abort+0x464>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a5f      	ldr	r2, [pc, #380]	; (80065d8 <HAL_DMA_Abort+0x468>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a5e      	ldr	r2, [pc, #376]	; (80065dc <HAL_DMA_Abort+0x46c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a5c      	ldr	r2, [pc, #368]	; (80065e0 <HAL_DMA_Abort+0x470>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5b      	ldr	r2, [pc, #364]	; (80065e4 <HAL_DMA_Abort+0x474>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a59      	ldr	r2, [pc, #356]	; (80065e8 <HAL_DMA_Abort+0x478>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a58      	ldr	r2, [pc, #352]	; (80065ec <HAL_DMA_Abort+0x47c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_Abort+0x32a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <HAL_DMA_Abort+0x480>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d108      	bne.n	80064ac <HAL_DMA_Abort+0x33c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	e007      	b.n	80064bc <HAL_DMA_Abort+0x34c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064bc:	e013      	b.n	80064e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064be:	f7fe ff45 	bl	800534c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d90c      	bls.n	80064e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2203      	movs	r2, #3
 80064d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e12d      	b.n	8006742 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2f      	ldr	r2, [pc, #188]	; (80065b4 <HAL_DMA_Abort+0x444>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d04a      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <HAL_DMA_Abort+0x448>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d045      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <HAL_DMA_Abort+0x44c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d040      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <HAL_DMA_Abort+0x450>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d03b      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a29      	ldr	r2, [pc, #164]	; (80065c4 <HAL_DMA_Abort+0x454>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d036      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a27      	ldr	r2, [pc, #156]	; (80065c8 <HAL_DMA_Abort+0x458>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d031      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a26      	ldr	r2, [pc, #152]	; (80065cc <HAL_DMA_Abort+0x45c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d02c      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a24      	ldr	r2, [pc, #144]	; (80065d0 <HAL_DMA_Abort+0x460>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d027      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a23      	ldr	r2, [pc, #140]	; (80065d4 <HAL_DMA_Abort+0x464>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d022      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <HAL_DMA_Abort+0x468>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01d      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a20      	ldr	r2, [pc, #128]	; (80065dc <HAL_DMA_Abort+0x46c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d018      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <HAL_DMA_Abort+0x470>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <HAL_DMA_Abort+0x474>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00e      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_DMA_Abort+0x478>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <HAL_DMA_Abort+0x47c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_DMA_Abort+0x422>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <HAL_DMA_Abort+0x480>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d101      	bne.n	8006596 <HAL_DMA_Abort+0x426>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <HAL_DMA_Abort+0x428>
 8006596:	2300      	movs	r3, #0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02b      	beq.n	80065f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	223f      	movs	r2, #63	; 0x3f
 80065ac:	409a      	lsls	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	609a      	str	r2, [r3, #8]
 80065b2:	e02a      	b.n	800660a <HAL_DMA_Abort+0x49a>
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2201      	movs	r2, #1
 8006604:	409a      	lsls	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4f      	ldr	r2, [pc, #316]	; (800674c <HAL_DMA_Abort+0x5dc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d072      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a4d      	ldr	r2, [pc, #308]	; (8006750 <HAL_DMA_Abort+0x5e0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d06d      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a4c      	ldr	r2, [pc, #304]	; (8006754 <HAL_DMA_Abort+0x5e4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d068      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a4a      	ldr	r2, [pc, #296]	; (8006758 <HAL_DMA_Abort+0x5e8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d063      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a49      	ldr	r2, [pc, #292]	; (800675c <HAL_DMA_Abort+0x5ec>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d05e      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a47      	ldr	r2, [pc, #284]	; (8006760 <HAL_DMA_Abort+0x5f0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d059      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a46      	ldr	r2, [pc, #280]	; (8006764 <HAL_DMA_Abort+0x5f4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d054      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a44      	ldr	r2, [pc, #272]	; (8006768 <HAL_DMA_Abort+0x5f8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d04f      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a43      	ldr	r2, [pc, #268]	; (800676c <HAL_DMA_Abort+0x5fc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d04a      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a41      	ldr	r2, [pc, #260]	; (8006770 <HAL_DMA_Abort+0x600>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d045      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a40      	ldr	r2, [pc, #256]	; (8006774 <HAL_DMA_Abort+0x604>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d040      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a3e      	ldr	r2, [pc, #248]	; (8006778 <HAL_DMA_Abort+0x608>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d03b      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a3d      	ldr	r2, [pc, #244]	; (800677c <HAL_DMA_Abort+0x60c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d036      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a3b      	ldr	r2, [pc, #236]	; (8006780 <HAL_DMA_Abort+0x610>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d031      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3a      	ldr	r2, [pc, #232]	; (8006784 <HAL_DMA_Abort+0x614>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d02c      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a38      	ldr	r2, [pc, #224]	; (8006788 <HAL_DMA_Abort+0x618>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d027      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a37      	ldr	r2, [pc, #220]	; (800678c <HAL_DMA_Abort+0x61c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a35      	ldr	r2, [pc, #212]	; (8006790 <HAL_DMA_Abort+0x620>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01d      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a34      	ldr	r2, [pc, #208]	; (8006794 <HAL_DMA_Abort+0x624>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a32      	ldr	r2, [pc, #200]	; (8006798 <HAL_DMA_Abort+0x628>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a31      	ldr	r2, [pc, #196]	; (800679c <HAL_DMA_Abort+0x62c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <HAL_DMA_Abort+0x630>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2e      	ldr	r2, [pc, #184]	; (80067a4 <HAL_DMA_Abort+0x634>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_DMA_Abort+0x58a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a2c      	ldr	r2, [pc, #176]	; (80067a8 <HAL_DMA_Abort+0x638>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <HAL_DMA_Abort+0x58e>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <HAL_DMA_Abort+0x590>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800670c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00c      	beq.n	8006730 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006724:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800672e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40020010 	.word	0x40020010
 8006750:	40020028 	.word	0x40020028
 8006754:	40020040 	.word	0x40020040
 8006758:	40020058 	.word	0x40020058
 800675c:	40020070 	.word	0x40020070
 8006760:	40020088 	.word	0x40020088
 8006764:	400200a0 	.word	0x400200a0
 8006768:	400200b8 	.word	0x400200b8
 800676c:	40020410 	.word	0x40020410
 8006770:	40020428 	.word	0x40020428
 8006774:	40020440 	.word	0x40020440
 8006778:	40020458 	.word	0x40020458
 800677c:	40020470 	.word	0x40020470
 8006780:	40020488 	.word	0x40020488
 8006784:	400204a0 	.word	0x400204a0
 8006788:	400204b8 	.word	0x400204b8
 800678c:	58025408 	.word	0x58025408
 8006790:	5802541c 	.word	0x5802541c
 8006794:	58025430 	.word	0x58025430
 8006798:	58025444 	.word	0x58025444
 800679c:	58025458 	.word	0x58025458
 80067a0:	5802546c 	.word	0x5802546c
 80067a4:	58025480 	.word	0x58025480
 80067a8:	58025494 	.word	0x58025494

080067ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e237      	b.n	8006c2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d004      	beq.n	80067d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2280      	movs	r2, #128	; 0x80
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e22c      	b.n	8006c2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a5c      	ldr	r2, [pc, #368]	; (800694c <HAL_DMA_Abort_IT+0x1a0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d04a      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5b      	ldr	r2, [pc, #364]	; (8006950 <HAL_DMA_Abort_IT+0x1a4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d045      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a59      	ldr	r2, [pc, #356]	; (8006954 <HAL_DMA_Abort_IT+0x1a8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d040      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a58      	ldr	r2, [pc, #352]	; (8006958 <HAL_DMA_Abort_IT+0x1ac>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d03b      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a56      	ldr	r2, [pc, #344]	; (800695c <HAL_DMA_Abort_IT+0x1b0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d036      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a55      	ldr	r2, [pc, #340]	; (8006960 <HAL_DMA_Abort_IT+0x1b4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d031      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a53      	ldr	r2, [pc, #332]	; (8006964 <HAL_DMA_Abort_IT+0x1b8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d02c      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a52      	ldr	r2, [pc, #328]	; (8006968 <HAL_DMA_Abort_IT+0x1bc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d027      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a50      	ldr	r2, [pc, #320]	; (800696c <HAL_DMA_Abort_IT+0x1c0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d022      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a4f      	ldr	r2, [pc, #316]	; (8006970 <HAL_DMA_Abort_IT+0x1c4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d01d      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a4d      	ldr	r2, [pc, #308]	; (8006974 <HAL_DMA_Abort_IT+0x1c8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d018      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a4c      	ldr	r2, [pc, #304]	; (8006978 <HAL_DMA_Abort_IT+0x1cc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a4a      	ldr	r2, [pc, #296]	; (800697c <HAL_DMA_Abort_IT+0x1d0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00e      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a49      	ldr	r2, [pc, #292]	; (8006980 <HAL_DMA_Abort_IT+0x1d4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a47      	ldr	r2, [pc, #284]	; (8006984 <HAL_DMA_Abort_IT+0x1d8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_DMA_Abort_IT+0xc8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a46      	ldr	r2, [pc, #280]	; (8006988 <HAL_DMA_Abort_IT+0x1dc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d101      	bne.n	8006878 <HAL_DMA_Abort_IT+0xcc>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <HAL_DMA_Abort_IT+0xce>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8086 	beq.w	800698c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2204      	movs	r2, #4
 8006884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a2f      	ldr	r2, [pc, #188]	; (800694c <HAL_DMA_Abort_IT+0x1a0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04a      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a2e      	ldr	r2, [pc, #184]	; (8006950 <HAL_DMA_Abort_IT+0x1a4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d045      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <HAL_DMA_Abort_IT+0x1a8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d040      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2b      	ldr	r2, [pc, #172]	; (8006958 <HAL_DMA_Abort_IT+0x1ac>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d03b      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a29      	ldr	r2, [pc, #164]	; (800695c <HAL_DMA_Abort_IT+0x1b0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d036      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a28      	ldr	r2, [pc, #160]	; (8006960 <HAL_DMA_Abort_IT+0x1b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d031      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a26      	ldr	r2, [pc, #152]	; (8006964 <HAL_DMA_Abort_IT+0x1b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d02c      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a25      	ldr	r2, [pc, #148]	; (8006968 <HAL_DMA_Abort_IT+0x1bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d027      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a23      	ldr	r2, [pc, #140]	; (800696c <HAL_DMA_Abort_IT+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d022      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a22      	ldr	r2, [pc, #136]	; (8006970 <HAL_DMA_Abort_IT+0x1c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d01d      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a20      	ldr	r2, [pc, #128]	; (8006974 <HAL_DMA_Abort_IT+0x1c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d018      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <HAL_DMA_Abort_IT+0x1cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1d      	ldr	r2, [pc, #116]	; (800697c <HAL_DMA_Abort_IT+0x1d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00e      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1c      	ldr	r2, [pc, #112]	; (8006980 <HAL_DMA_Abort_IT+0x1d4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <HAL_DMA_Abort_IT+0x1d8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_DMA_Abort_IT+0x17c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a19      	ldr	r2, [pc, #100]	; (8006988 <HAL_DMA_Abort_IT+0x1dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d108      	bne.n	800693a <HAL_DMA_Abort_IT+0x18e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e178      	b.n	8006c2c <HAL_DMA_Abort_IT+0x480>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e16f      	b.n	8006c2c <HAL_DMA_Abort_IT+0x480>
 800694c:	40020010 	.word	0x40020010
 8006950:	40020028 	.word	0x40020028
 8006954:	40020040 	.word	0x40020040
 8006958:	40020058 	.word	0x40020058
 800695c:	40020070 	.word	0x40020070
 8006960:	40020088 	.word	0x40020088
 8006964:	400200a0 	.word	0x400200a0
 8006968:	400200b8 	.word	0x400200b8
 800696c:	40020410 	.word	0x40020410
 8006970:	40020428 	.word	0x40020428
 8006974:	40020440 	.word	0x40020440
 8006978:	40020458 	.word	0x40020458
 800697c:	40020470 	.word	0x40020470
 8006980:	40020488 	.word	0x40020488
 8006984:	400204a0 	.word	0x400204a0
 8006988:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 020e 	bic.w	r2, r2, #14
 800699a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a6c      	ldr	r2, [pc, #432]	; (8006b54 <HAL_DMA_Abort_IT+0x3a8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d04a      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6b      	ldr	r2, [pc, #428]	; (8006b58 <HAL_DMA_Abort_IT+0x3ac>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d045      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a69      	ldr	r2, [pc, #420]	; (8006b5c <HAL_DMA_Abort_IT+0x3b0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d040      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <HAL_DMA_Abort_IT+0x3b4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d03b      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a66      	ldr	r2, [pc, #408]	; (8006b64 <HAL_DMA_Abort_IT+0x3b8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d036      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a65      	ldr	r2, [pc, #404]	; (8006b68 <HAL_DMA_Abort_IT+0x3bc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d031      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a63      	ldr	r2, [pc, #396]	; (8006b6c <HAL_DMA_Abort_IT+0x3c0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d02c      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <HAL_DMA_Abort_IT+0x3c4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d027      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a60      	ldr	r2, [pc, #384]	; (8006b74 <HAL_DMA_Abort_IT+0x3c8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5f      	ldr	r2, [pc, #380]	; (8006b78 <HAL_DMA_Abort_IT+0x3cc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5d      	ldr	r2, [pc, #372]	; (8006b7c <HAL_DMA_Abort_IT+0x3d0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5c      	ldr	r2, [pc, #368]	; (8006b80 <HAL_DMA_Abort_IT+0x3d4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5a      	ldr	r2, [pc, #360]	; (8006b84 <HAL_DMA_Abort_IT+0x3d8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a59      	ldr	r2, [pc, #356]	; (8006b88 <HAL_DMA_Abort_IT+0x3dc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a57      	ldr	r2, [pc, #348]	; (8006b8c <HAL_DMA_Abort_IT+0x3e0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x290>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a56      	ldr	r2, [pc, #344]	; (8006b90 <HAL_DMA_Abort_IT+0x3e4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d108      	bne.n	8006a4e <HAL_DMA_Abort_IT+0x2a2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e007      	b.n	8006a5e <HAL_DMA_Abort_IT+0x2b2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a3c      	ldr	r2, [pc, #240]	; (8006b54 <HAL_DMA_Abort_IT+0x3a8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d072      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <HAL_DMA_Abort_IT+0x3ac>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d06d      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a39      	ldr	r2, [pc, #228]	; (8006b5c <HAL_DMA_Abort_IT+0x3b0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d068      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a37      	ldr	r2, [pc, #220]	; (8006b60 <HAL_DMA_Abort_IT+0x3b4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d063      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a36      	ldr	r2, [pc, #216]	; (8006b64 <HAL_DMA_Abort_IT+0x3b8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d05e      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a34      	ldr	r2, [pc, #208]	; (8006b68 <HAL_DMA_Abort_IT+0x3bc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d059      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a33      	ldr	r2, [pc, #204]	; (8006b6c <HAL_DMA_Abort_IT+0x3c0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d054      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a31      	ldr	r2, [pc, #196]	; (8006b70 <HAL_DMA_Abort_IT+0x3c4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04f      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a30      	ldr	r2, [pc, #192]	; (8006b74 <HAL_DMA_Abort_IT+0x3c8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2e      	ldr	r2, [pc, #184]	; (8006b78 <HAL_DMA_Abort_IT+0x3cc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <HAL_DMA_Abort_IT+0x3d0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <HAL_DMA_Abort_IT+0x3d4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <HAL_DMA_Abort_IT+0x3d8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a28      	ldr	r2, [pc, #160]	; (8006b88 <HAL_DMA_Abort_IT+0x3dc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <HAL_DMA_Abort_IT+0x3e0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <HAL_DMA_Abort_IT+0x3e4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a24      	ldr	r2, [pc, #144]	; (8006b94 <HAL_DMA_Abort_IT+0x3e8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <HAL_DMA_Abort_IT+0x3ec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a21      	ldr	r2, [pc, #132]	; (8006b9c <HAL_DMA_Abort_IT+0x3f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <HAL_DMA_Abort_IT+0x3f4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ba4 <HAL_DMA_Abort_IT+0x3f8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <HAL_DMA_Abort_IT+0x3fc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_DMA_Abort_IT+0x400>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_Abort_IT+0x3a2>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <HAL_DMA_Abort_IT+0x404>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d132      	bne.n	8006bb4 <HAL_DMA_Abort_IT+0x408>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e031      	b.n	8006bb6 <HAL_DMA_Abort_IT+0x40a>
 8006b52:	bf00      	nop
 8006b54:	40020010 	.word	0x40020010
 8006b58:	40020028 	.word	0x40020028
 8006b5c:	40020040 	.word	0x40020040
 8006b60:	40020058 	.word	0x40020058
 8006b64:	40020070 	.word	0x40020070
 8006b68:	40020088 	.word	0x40020088
 8006b6c:	400200a0 	.word	0x400200a0
 8006b70:	400200b8 	.word	0x400200b8
 8006b74:	40020410 	.word	0x40020410
 8006b78:	40020428 	.word	0x40020428
 8006b7c:	40020440 	.word	0x40020440
 8006b80:	40020458 	.word	0x40020458
 8006b84:	40020470 	.word	0x40020470
 8006b88:	40020488 	.word	0x40020488
 8006b8c:	400204a0 	.word	0x400204a0
 8006b90:	400204b8 	.word	0x400204b8
 8006b94:	58025408 	.word	0x58025408
 8006b98:	5802541c 	.word	0x5802541c
 8006b9c:	58025430 	.word	0x58025430
 8006ba0:	58025444 	.word	0x58025444
 8006ba4:	58025458 	.word	0x58025458
 8006ba8:	5802546c 	.word	0x5802546c
 8006bac:	58025480 	.word	0x58025480
 8006bb0:	58025494 	.word	0x58025494
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d028      	beq.n	8006c0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2201      	movs	r2, #1
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006be8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	; 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c44:	4b67      	ldr	r3, [pc, #412]	; (8006de4 <HAL_DMA_IRQHandler+0x1ac>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a67      	ldr	r2, [pc, #412]	; (8006de8 <HAL_DMA_IRQHandler+0x1b0>)
 8006c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4e:	0a9b      	lsrs	r3, r3, #10
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a5f      	ldr	r2, [pc, #380]	; (8006dec <HAL_DMA_IRQHandler+0x1b4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a5d      	ldr	r2, [pc, #372]	; (8006df0 <HAL_DMA_IRQHandler+0x1b8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a5c      	ldr	r2, [pc, #368]	; (8006df4 <HAL_DMA_IRQHandler+0x1bc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a5a      	ldr	r2, [pc, #360]	; (8006df8 <HAL_DMA_IRQHandler+0x1c0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a59      	ldr	r2, [pc, #356]	; (8006dfc <HAL_DMA_IRQHandler+0x1c4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a57      	ldr	r2, [pc, #348]	; (8006e00 <HAL_DMA_IRQHandler+0x1c8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a56      	ldr	r2, [pc, #344]	; (8006e04 <HAL_DMA_IRQHandler+0x1cc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a54      	ldr	r2, [pc, #336]	; (8006e08 <HAL_DMA_IRQHandler+0x1d0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a53      	ldr	r2, [pc, #332]	; (8006e0c <HAL_DMA_IRQHandler+0x1d4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a51      	ldr	r2, [pc, #324]	; (8006e10 <HAL_DMA_IRQHandler+0x1d8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a50      	ldr	r2, [pc, #320]	; (8006e14 <HAL_DMA_IRQHandler+0x1dc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a4e      	ldr	r2, [pc, #312]	; (8006e18 <HAL_DMA_IRQHandler+0x1e0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a4d      	ldr	r2, [pc, #308]	; (8006e1c <HAL_DMA_IRQHandler+0x1e4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a4b      	ldr	r2, [pc, #300]	; (8006e20 <HAL_DMA_IRQHandler+0x1e8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a4a      	ldr	r2, [pc, #296]	; (8006e24 <HAL_DMA_IRQHandler+0x1ec>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xd2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a48      	ldr	r2, [pc, #288]	; (8006e28 <HAL_DMA_IRQHandler+0x1f0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_DMA_IRQHandler+0xd6>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <HAL_DMA_IRQHandler+0xd8>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 842b 	beq.w	800756c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	2208      	movs	r2, #8
 8006d20:	409a      	lsls	r2, r3
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 80a2 	beq.w	8006e70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a2e      	ldr	r2, [pc, #184]	; (8006dec <HAL_DMA_IRQHandler+0x1b4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04a      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <HAL_DMA_IRQHandler+0x1b8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d045      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <HAL_DMA_IRQHandler+0x1bc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d040      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <HAL_DMA_IRQHandler+0x1c0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d03b      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <HAL_DMA_IRQHandler+0x1c4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d036      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <HAL_DMA_IRQHandler+0x1c8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d031      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a25      	ldr	r2, [pc, #148]	; (8006e04 <HAL_DMA_IRQHandler+0x1cc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d02c      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <HAL_DMA_IRQHandler+0x1d0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d027      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a22      	ldr	r2, [pc, #136]	; (8006e0c <HAL_DMA_IRQHandler+0x1d4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d022      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <HAL_DMA_IRQHandler+0x1d8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d01d      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <HAL_DMA_IRQHandler+0x1dc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d018      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <HAL_DMA_IRQHandler+0x1e0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d013      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <HAL_DMA_IRQHandler+0x1e4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00e      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <HAL_DMA_IRQHandler+0x1e8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d009      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <HAL_DMA_IRQHandler+0x1ec>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_DMA_IRQHandler+0x194>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <HAL_DMA_IRQHandler+0x1f0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d12f      	bne.n	8006e2c <HAL_DMA_IRQHandler+0x1f4>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf14      	ite	ne
 8006dda:	2301      	movne	r3, #1
 8006ddc:	2300      	moveq	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	e02e      	b.n	8006e40 <HAL_DMA_IRQHandler+0x208>
 8006de2:	bf00      	nop
 8006de4:	24000070 	.word	0x24000070
 8006de8:	1b4e81b5 	.word	0x1b4e81b5
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bf14      	ite	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	2300      	moveq	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d015      	beq.n	8006e70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0204 	bic.w	r2, r2, #4
 8006e52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	f043 0201 	orr.w	r2, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d06e      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a69      	ldr	r2, [pc, #420]	; (8007030 <HAL_DMA_IRQHandler+0x3f8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d04a      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a67      	ldr	r2, [pc, #412]	; (8007034 <HAL_DMA_IRQHandler+0x3fc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d045      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a66      	ldr	r2, [pc, #408]	; (8007038 <HAL_DMA_IRQHandler+0x400>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d040      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a64      	ldr	r2, [pc, #400]	; (800703c <HAL_DMA_IRQHandler+0x404>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d03b      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a63      	ldr	r2, [pc, #396]	; (8007040 <HAL_DMA_IRQHandler+0x408>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d036      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a61      	ldr	r2, [pc, #388]	; (8007044 <HAL_DMA_IRQHandler+0x40c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d031      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a60      	ldr	r2, [pc, #384]	; (8007048 <HAL_DMA_IRQHandler+0x410>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d02c      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a5e      	ldr	r2, [pc, #376]	; (800704c <HAL_DMA_IRQHandler+0x414>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d027      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5d      	ldr	r2, [pc, #372]	; (8007050 <HAL_DMA_IRQHandler+0x418>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d022      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5b      	ldr	r2, [pc, #364]	; (8007054 <HAL_DMA_IRQHandler+0x41c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01d      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5a      	ldr	r2, [pc, #360]	; (8007058 <HAL_DMA_IRQHandler+0x420>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a58      	ldr	r2, [pc, #352]	; (800705c <HAL_DMA_IRQHandler+0x424>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a57      	ldr	r2, [pc, #348]	; (8007060 <HAL_DMA_IRQHandler+0x428>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00e      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a55      	ldr	r2, [pc, #340]	; (8007064 <HAL_DMA_IRQHandler+0x42c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d009      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a54      	ldr	r2, [pc, #336]	; (8007068 <HAL_DMA_IRQHandler+0x430>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d004      	beq.n	8006f26 <HAL_DMA_IRQHandler+0x2ee>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a52      	ldr	r2, [pc, #328]	; (800706c <HAL_DMA_IRQHandler+0x434>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d10a      	bne.n	8006f3c <HAL_DMA_IRQHandler+0x304>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	e003      	b.n	8006f44 <HAL_DMA_IRQHandler+0x30c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f043 0202 	orr.w	r2, r3, #2
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	409a      	lsls	r2, r3
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 808f 	beq.w	8007098 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2c      	ldr	r2, [pc, #176]	; (8007030 <HAL_DMA_IRQHandler+0x3f8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d04a      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2a      	ldr	r2, [pc, #168]	; (8007034 <HAL_DMA_IRQHandler+0x3fc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d045      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a29      	ldr	r2, [pc, #164]	; (8007038 <HAL_DMA_IRQHandler+0x400>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d040      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a27      	ldr	r2, [pc, #156]	; (800703c <HAL_DMA_IRQHandler+0x404>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d03b      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a26      	ldr	r2, [pc, #152]	; (8007040 <HAL_DMA_IRQHandler+0x408>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d036      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a24      	ldr	r2, [pc, #144]	; (8007044 <HAL_DMA_IRQHandler+0x40c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d031      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a23      	ldr	r2, [pc, #140]	; (8007048 <HAL_DMA_IRQHandler+0x410>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d02c      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_DMA_IRQHandler+0x414>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d027      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a20      	ldr	r2, [pc, #128]	; (8007050 <HAL_DMA_IRQHandler+0x418>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1e      	ldr	r2, [pc, #120]	; (8007054 <HAL_DMA_IRQHandler+0x41c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <HAL_DMA_IRQHandler+0x420>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d018      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	; (800705c <HAL_DMA_IRQHandler+0x424>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <HAL_DMA_IRQHandler+0x428>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a18      	ldr	r2, [pc, #96]	; (8007064 <HAL_DMA_IRQHandler+0x42c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_DMA_IRQHandler+0x430>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_DMA_IRQHandler+0x3e2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_DMA_IRQHandler+0x434>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d12a      	bne.n	8007070 <HAL_DMA_IRQHandler+0x438>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	e023      	b.n	8007078 <HAL_DMA_IRQHandler+0x440>
 8007030:	40020010 	.word	0x40020010
 8007034:	40020028 	.word	0x40020028
 8007038:	40020040 	.word	0x40020040
 800703c:	40020058 	.word	0x40020058
 8007040:	40020070 	.word	0x40020070
 8007044:	40020088 	.word	0x40020088
 8007048:	400200a0 	.word	0x400200a0
 800704c:	400200b8 	.word	0x400200b8
 8007050:	40020410 	.word	0x40020410
 8007054:	40020428 	.word	0x40020428
 8007058:	40020440 	.word	0x40020440
 800705c:	40020458 	.word	0x40020458
 8007060:	40020470 	.word	0x40020470
 8007064:	40020488 	.word	0x40020488
 8007068:	400204a0 	.word	0x400204a0
 800706c:	400204b8 	.word	0x400204b8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	2204      	movs	r2, #4
 8007086:	409a      	lsls	r2, r3
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0204 	orr.w	r2, r3, #4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2210      	movs	r2, #16
 80070a2:	409a      	lsls	r2, r3
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80a6 	beq.w	80071fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a85      	ldr	r2, [pc, #532]	; (80072c8 <HAL_DMA_IRQHandler+0x690>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d04a      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a83      	ldr	r2, [pc, #524]	; (80072cc <HAL_DMA_IRQHandler+0x694>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d045      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a82      	ldr	r2, [pc, #520]	; (80072d0 <HAL_DMA_IRQHandler+0x698>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d040      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a80      	ldr	r2, [pc, #512]	; (80072d4 <HAL_DMA_IRQHandler+0x69c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d03b      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a7f      	ldr	r2, [pc, #508]	; (80072d8 <HAL_DMA_IRQHandler+0x6a0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d036      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a7d      	ldr	r2, [pc, #500]	; (80072dc <HAL_DMA_IRQHandler+0x6a4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d031      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a7c      	ldr	r2, [pc, #496]	; (80072e0 <HAL_DMA_IRQHandler+0x6a8>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d02c      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a7a      	ldr	r2, [pc, #488]	; (80072e4 <HAL_DMA_IRQHandler+0x6ac>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d027      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a79      	ldr	r2, [pc, #484]	; (80072e8 <HAL_DMA_IRQHandler+0x6b0>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a77      	ldr	r2, [pc, #476]	; (80072ec <HAL_DMA_IRQHandler+0x6b4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d01d      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a76      	ldr	r2, [pc, #472]	; (80072f0 <HAL_DMA_IRQHandler+0x6b8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a74      	ldr	r2, [pc, #464]	; (80072f4 <HAL_DMA_IRQHandler+0x6bc>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a73      	ldr	r2, [pc, #460]	; (80072f8 <HAL_DMA_IRQHandler+0x6c0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a71      	ldr	r2, [pc, #452]	; (80072fc <HAL_DMA_IRQHandler+0x6c4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a70      	ldr	r2, [pc, #448]	; (8007300 <HAL_DMA_IRQHandler+0x6c8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_DMA_IRQHandler+0x516>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a6e      	ldr	r2, [pc, #440]	; (8007304 <HAL_DMA_IRQHandler+0x6cc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d10a      	bne.n	8007164 <HAL_DMA_IRQHandler+0x52c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e009      	b.n	8007178 <HAL_DMA_IRQHandler+0x540>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d03e      	beq.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2210      	movs	r2, #16
 8007186:	409a      	lsls	r2, r3
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d024      	beq.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
 80071b8:	e01f      	b.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01b      	beq.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
 80071ca:	e016      	b.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d107      	bne.n	80071ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0208 	bic.w	r2, r2, #8
 80071e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2220      	movs	r2, #32
 8007204:	409a      	lsls	r2, r3
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8110 	beq.w	8007430 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2c      	ldr	r2, [pc, #176]	; (80072c8 <HAL_DMA_IRQHandler+0x690>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d04a      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2b      	ldr	r2, [pc, #172]	; (80072cc <HAL_DMA_IRQHandler+0x694>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d045      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <HAL_DMA_IRQHandler+0x698>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d040      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a28      	ldr	r2, [pc, #160]	; (80072d4 <HAL_DMA_IRQHandler+0x69c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d03b      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a26      	ldr	r2, [pc, #152]	; (80072d8 <HAL_DMA_IRQHandler+0x6a0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d036      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a25      	ldr	r2, [pc, #148]	; (80072dc <HAL_DMA_IRQHandler+0x6a4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d031      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <HAL_DMA_IRQHandler+0x6a8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02c      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <HAL_DMA_IRQHandler+0x6ac>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d027      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <HAL_DMA_IRQHandler+0x6b0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <HAL_DMA_IRQHandler+0x6b4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01d      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <HAL_DMA_IRQHandler+0x6b8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <HAL_DMA_IRQHandler+0x6bc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <HAL_DMA_IRQHandler+0x6c0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a19      	ldr	r2, [pc, #100]	; (80072fc <HAL_DMA_IRQHandler+0x6c4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a17      	ldr	r2, [pc, #92]	; (8007300 <HAL_DMA_IRQHandler+0x6c8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x678>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a16      	ldr	r2, [pc, #88]	; (8007304 <HAL_DMA_IRQHandler+0x6cc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d12b      	bne.n	8007308 <HAL_DMA_IRQHandler+0x6d0>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	bf14      	ite	ne
 80072be:	2301      	movne	r3, #1
 80072c0:	2300      	moveq	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	e02a      	b.n	800731c <HAL_DMA_IRQHandler+0x6e4>
 80072c6:	bf00      	nop
 80072c8:	40020010 	.word	0x40020010
 80072cc:	40020028 	.word	0x40020028
 80072d0:	40020040 	.word	0x40020040
 80072d4:	40020058 	.word	0x40020058
 80072d8:	40020070 	.word	0x40020070
 80072dc:	40020088 	.word	0x40020088
 80072e0:	400200a0 	.word	0x400200a0
 80072e4:	400200b8 	.word	0x400200b8
 80072e8:	40020410 	.word	0x40020410
 80072ec:	40020428 	.word	0x40020428
 80072f0:	40020440 	.word	0x40020440
 80072f4:	40020458 	.word	0x40020458
 80072f8:	40020470 	.word	0x40020470
 80072fc:	40020488 	.word	0x40020488
 8007300:	400204a0 	.word	0x400204a0
 8007304:	400204b8 	.word	0x400204b8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf14      	ite	ne
 8007316:	2301      	movne	r3, #1
 8007318:	2300      	moveq	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8087 	beq.w	8007430 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2220      	movs	r2, #32
 800732c:	409a      	lsls	r2, r3
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b04      	cmp	r3, #4
 800733c:	d139      	bne.n	80073b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0216 	bic.w	r2, r2, #22
 800734c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800735c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <HAL_DMA_IRQHandler+0x736>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0208 	bic.w	r2, r2, #8
 800737c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	223f      	movs	r2, #63	; 0x3f
 8007388:	409a      	lsls	r2, r3
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 834a 	beq.w	8007a3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
          }
          return;
 80073b0:	e344      	b.n	8007a3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d018      	beq.n	80073f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d108      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d02c      	beq.n	8007430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	e027      	b.n	8007430 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d023      	beq.n	8007430 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
 80073f0:	e01e      	b.n	8007430 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10f      	bne.n	8007420 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0210 	bic.w	r2, r2, #16
 800740e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8306 	beq.w	8007a46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8088 	beq.w	8007558 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2204      	movs	r2, #4
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a7a      	ldr	r2, [pc, #488]	; (8007640 <HAL_DMA_IRQHandler+0xa08>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d04a      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a79      	ldr	r2, [pc, #484]	; (8007644 <HAL_DMA_IRQHandler+0xa0c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d045      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_DMA_IRQHandler+0xa10>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d040      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a76      	ldr	r2, [pc, #472]	; (800764c <HAL_DMA_IRQHandler+0xa14>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d03b      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a74      	ldr	r2, [pc, #464]	; (8007650 <HAL_DMA_IRQHandler+0xa18>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d036      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a73      	ldr	r2, [pc, #460]	; (8007654 <HAL_DMA_IRQHandler+0xa1c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d031      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <HAL_DMA_IRQHandler+0xa20>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d02c      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a70      	ldr	r2, [pc, #448]	; (800765c <HAL_DMA_IRQHandler+0xa24>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d027      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <HAL_DMA_IRQHandler+0xa28>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d022      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6d      	ldr	r2, [pc, #436]	; (8007664 <HAL_DMA_IRQHandler+0xa2c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d01d      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6b      	ldr	r2, [pc, #428]	; (8007668 <HAL_DMA_IRQHandler+0xa30>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6a      	ldr	r2, [pc, #424]	; (800766c <HAL_DMA_IRQHandler+0xa34>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a68      	ldr	r2, [pc, #416]	; (8007670 <HAL_DMA_IRQHandler+0xa38>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a67      	ldr	r2, [pc, #412]	; (8007674 <HAL_DMA_IRQHandler+0xa3c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a65      	ldr	r2, [pc, #404]	; (8007678 <HAL_DMA_IRQHandler+0xa40>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x8b8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a64      	ldr	r2, [pc, #400]	; (800767c <HAL_DMA_IRQHandler+0xa44>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d108      	bne.n	8007502 <HAL_DMA_IRQHandler+0x8ca>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	e007      	b.n	8007512 <HAL_DMA_IRQHandler+0x8da>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751a:	429a      	cmp	r2, r3
 800751c:	d307      	bcc.n	800752e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f2      	bne.n	8007512 <HAL_DMA_IRQHandler+0x8da>
 800752c:	e000      	b.n	8007530 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800752e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007546:	e003      	b.n	8007550 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8272 	beq.w	8007a46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	e26c      	b.n	8007a46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a43      	ldr	r2, [pc, #268]	; (8007680 <HAL_DMA_IRQHandler+0xa48>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d022      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a42      	ldr	r2, [pc, #264]	; (8007684 <HAL_DMA_IRQHandler+0xa4c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d01d      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a40      	ldr	r2, [pc, #256]	; (8007688 <HAL_DMA_IRQHandler+0xa50>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d018      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a3f      	ldr	r2, [pc, #252]	; (800768c <HAL_DMA_IRQHandler+0xa54>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3d      	ldr	r2, [pc, #244]	; (8007690 <HAL_DMA_IRQHandler+0xa58>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00e      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3c      	ldr	r2, [pc, #240]	; (8007694 <HAL_DMA_IRQHandler+0xa5c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3a      	ldr	r2, [pc, #232]	; (8007698 <HAL_DMA_IRQHandler+0xa60>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_DMA_IRQHandler+0x984>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a39      	ldr	r2, [pc, #228]	; (800769c <HAL_DMA_IRQHandler+0xa64>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d101      	bne.n	80075c0 <HAL_DMA_IRQHandler+0x988>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <HAL_DMA_IRQHandler+0x98a>
 80075c0:	2300      	movs	r3, #0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 823f 	beq.w	8007a46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2204      	movs	r2, #4
 80075da:	409a      	lsls	r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 80cd 	beq.w	8007780 <HAL_DMA_IRQHandler+0xb48>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80c7 	beq.w	8007780 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	2204      	movs	r2, #4
 80075fc:	409a      	lsls	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d049      	beq.n	80076a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8210 	beq.w	8007a40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007628:	e20a      	b.n	8007a40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8206 	beq.w	8007a40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800763c:	e200      	b.n	8007a40 <HAL_DMA_IRQHandler+0xe08>
 800763e:	bf00      	nop
 8007640:	40020010 	.word	0x40020010
 8007644:	40020028 	.word	0x40020028
 8007648:	40020040 	.word	0x40020040
 800764c:	40020058 	.word	0x40020058
 8007650:	40020070 	.word	0x40020070
 8007654:	40020088 	.word	0x40020088
 8007658:	400200a0 	.word	0x400200a0
 800765c:	400200b8 	.word	0x400200b8
 8007660:	40020410 	.word	0x40020410
 8007664:	40020428 	.word	0x40020428
 8007668:	40020440 	.word	0x40020440
 800766c:	40020458 	.word	0x40020458
 8007670:	40020470 	.word	0x40020470
 8007674:	40020488 	.word	0x40020488
 8007678:	400204a0 	.word	0x400204a0
 800767c:	400204b8 	.word	0x400204b8
 8007680:	58025408 	.word	0x58025408
 8007684:	5802541c 	.word	0x5802541c
 8007688:	58025430 	.word	0x58025430
 800768c:	58025444 	.word	0x58025444
 8007690:	58025458 	.word	0x58025458
 8007694:	5802546c 	.word	0x5802546c
 8007698:	58025480 	.word	0x58025480
 800769c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d160      	bne.n	800776c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a7f      	ldr	r2, [pc, #508]	; (80078ac <HAL_DMA_IRQHandler+0xc74>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d04a      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a7d      	ldr	r2, [pc, #500]	; (80078b0 <HAL_DMA_IRQHandler+0xc78>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d045      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a7c      	ldr	r2, [pc, #496]	; (80078b4 <HAL_DMA_IRQHandler+0xc7c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d040      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a7a      	ldr	r2, [pc, #488]	; (80078b8 <HAL_DMA_IRQHandler+0xc80>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d03b      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a79      	ldr	r2, [pc, #484]	; (80078bc <HAL_DMA_IRQHandler+0xc84>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d036      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a77      	ldr	r2, [pc, #476]	; (80078c0 <HAL_DMA_IRQHandler+0xc88>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d031      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a76      	ldr	r2, [pc, #472]	; (80078c4 <HAL_DMA_IRQHandler+0xc8c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d02c      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a74      	ldr	r2, [pc, #464]	; (80078c8 <HAL_DMA_IRQHandler+0xc90>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d027      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a73      	ldr	r2, [pc, #460]	; (80078cc <HAL_DMA_IRQHandler+0xc94>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d022      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a71      	ldr	r2, [pc, #452]	; (80078d0 <HAL_DMA_IRQHandler+0xc98>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d01d      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a70      	ldr	r2, [pc, #448]	; (80078d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d018      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a6e      	ldr	r2, [pc, #440]	; (80078d8 <HAL_DMA_IRQHandler+0xca0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6d      	ldr	r2, [pc, #436]	; (80078dc <HAL_DMA_IRQHandler+0xca4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00e      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a6b      	ldr	r2, [pc, #428]	; (80078e0 <HAL_DMA_IRQHandler+0xca8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a6a      	ldr	r2, [pc, #424]	; (80078e4 <HAL_DMA_IRQHandler+0xcac>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_DMA_IRQHandler+0xb12>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a68      	ldr	r2, [pc, #416]	; (80078e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d108      	bne.n	800775c <HAL_DMA_IRQHandler+0xb24>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0208 	bic.w	r2, r2, #8
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	e007      	b.n	800776c <HAL_DMA_IRQHandler+0xb34>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0204 	bic.w	r2, r2, #4
 800776a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8165 	beq.w	8007a40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800777e:	e15f      	b.n	8007a40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2202      	movs	r2, #2
 800778a:	409a      	lsls	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80c5 	beq.w	8007920 <HAL_DMA_IRQHandler+0xce8>
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 80bf 	beq.w	8007920 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2202      	movs	r2, #2
 80077ac:	409a      	lsls	r2, r3
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d018      	beq.n	80077ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 813a 	beq.w	8007a44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077d8:	e134      	b.n	8007a44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 8130 	beq.w	8007a44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077ec:	e12a      	b.n	8007a44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f040 8089 	bne.w	800790c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a2b      	ldr	r2, [pc, #172]	; (80078ac <HAL_DMA_IRQHandler+0xc74>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d04a      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a29      	ldr	r2, [pc, #164]	; (80078b0 <HAL_DMA_IRQHandler+0xc78>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d045      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a28      	ldr	r2, [pc, #160]	; (80078b4 <HAL_DMA_IRQHandler+0xc7c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d040      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a26      	ldr	r2, [pc, #152]	; (80078b8 <HAL_DMA_IRQHandler+0xc80>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d03b      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a25      	ldr	r2, [pc, #148]	; (80078bc <HAL_DMA_IRQHandler+0xc84>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d036      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a23      	ldr	r2, [pc, #140]	; (80078c0 <HAL_DMA_IRQHandler+0xc88>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d031      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a22      	ldr	r2, [pc, #136]	; (80078c4 <HAL_DMA_IRQHandler+0xc8c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d02c      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a20      	ldr	r2, [pc, #128]	; (80078c8 <HAL_DMA_IRQHandler+0xc90>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d027      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a1f      	ldr	r2, [pc, #124]	; (80078cc <HAL_DMA_IRQHandler+0xc94>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d022      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <HAL_DMA_IRQHandler+0xc98>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01d      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a1c      	ldr	r2, [pc, #112]	; (80078d4 <HAL_DMA_IRQHandler+0xc9c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d018      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a1a      	ldr	r2, [pc, #104]	; (80078d8 <HAL_DMA_IRQHandler+0xca0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d013      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a19      	ldr	r2, [pc, #100]	; (80078dc <HAL_DMA_IRQHandler+0xca4>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00e      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <HAL_DMA_IRQHandler+0xca8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d009      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <HAL_DMA_IRQHandler+0xcac>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_DMA_IRQHandler+0xc62>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a14      	ldr	r2, [pc, #80]	; (80078e8 <HAL_DMA_IRQHandler+0xcb0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d128      	bne.n	80078ec <HAL_DMA_IRQHandler+0xcb4>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0214 	bic.w	r2, r2, #20
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	e027      	b.n	80078fc <HAL_DMA_IRQHandler+0xcc4>
 80078ac:	40020010 	.word	0x40020010
 80078b0:	40020028 	.word	0x40020028
 80078b4:	40020040 	.word	0x40020040
 80078b8:	40020058 	.word	0x40020058
 80078bc:	40020070 	.word	0x40020070
 80078c0:	40020088 	.word	0x40020088
 80078c4:	400200a0 	.word	0x400200a0
 80078c8:	400200b8 	.word	0x400200b8
 80078cc:	40020410 	.word	0x40020410
 80078d0:	40020428 	.word	0x40020428
 80078d4:	40020440 	.word	0x40020440
 80078d8:	40020458 	.word	0x40020458
 80078dc:	40020470 	.word	0x40020470
 80078e0:	40020488 	.word	0x40020488
 80078e4:	400204a0 	.word	0x400204a0
 80078e8:	400204b8 	.word	0x400204b8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 020a 	bic.w	r2, r2, #10
 80078fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8097 	beq.w	8007a44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800791e:	e091      	b.n	8007a44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	2208      	movs	r2, #8
 800792a:	409a      	lsls	r2, r3
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	4013      	ands	r3, r2
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8088 	beq.w	8007a46 <HAL_DMA_IRQHandler+0xe0e>
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 8082 	beq.w	8007a46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a41      	ldr	r2, [pc, #260]	; (8007a4c <HAL_DMA_IRQHandler+0xe14>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d04a      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a3f      	ldr	r2, [pc, #252]	; (8007a50 <HAL_DMA_IRQHandler+0xe18>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d045      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3e      	ldr	r2, [pc, #248]	; (8007a54 <HAL_DMA_IRQHandler+0xe1c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d040      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <HAL_DMA_IRQHandler+0xe20>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d03b      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a3b      	ldr	r2, [pc, #236]	; (8007a5c <HAL_DMA_IRQHandler+0xe24>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d036      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a39      	ldr	r2, [pc, #228]	; (8007a60 <HAL_DMA_IRQHandler+0xe28>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d031      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <HAL_DMA_IRQHandler+0xe2c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d02c      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a36      	ldr	r2, [pc, #216]	; (8007a68 <HAL_DMA_IRQHandler+0xe30>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d027      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a35      	ldr	r2, [pc, #212]	; (8007a6c <HAL_DMA_IRQHandler+0xe34>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d022      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a33      	ldr	r2, [pc, #204]	; (8007a70 <HAL_DMA_IRQHandler+0xe38>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d01d      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a32      	ldr	r2, [pc, #200]	; (8007a74 <HAL_DMA_IRQHandler+0xe3c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d018      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a30      	ldr	r2, [pc, #192]	; (8007a78 <HAL_DMA_IRQHandler+0xe40>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2f      	ldr	r2, [pc, #188]	; (8007a7c <HAL_DMA_IRQHandler+0xe44>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00e      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2d      	ldr	r2, [pc, #180]	; (8007a80 <HAL_DMA_IRQHandler+0xe48>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <HAL_DMA_IRQHandler+0xe4c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xdaa>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2a      	ldr	r2, [pc, #168]	; (8007a88 <HAL_DMA_IRQHandler+0xe50>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <HAL_DMA_IRQHandler+0xdbc>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 021c 	bic.w	r2, r2, #28
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e007      	b.n	8007a04 <HAL_DMA_IRQHandler+0xdcc>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 020e 	bic.w	r2, r2, #14
 8007a02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	409a      	lsls	r2, r3
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	e004      	b.n	8007a46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a3c:	bf00      	nop
 8007a3e:	e002      	b.n	8007a46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40020010 	.word	0x40020010
 8007a50:	40020028 	.word	0x40020028
 8007a54:	40020040 	.word	0x40020040
 8007a58:	40020058 	.word	0x40020058
 8007a5c:	40020070 	.word	0x40020070
 8007a60:	40020088 	.word	0x40020088
 8007a64:	400200a0 	.word	0x400200a0
 8007a68:	400200b8 	.word	0x400200b8
 8007a6c:	40020410 	.word	0x40020410
 8007a70:	40020428 	.word	0x40020428
 8007a74:	40020440 	.word	0x40020440
 8007a78:	40020458 	.word	0x40020458
 8007a7c:	40020470 	.word	0x40020470
 8007a80:	40020488 	.word	0x40020488
 8007a84:	400204a0 	.word	0x400204a0
 8007a88:	400204b8 	.word	0x400204b8

08007a8c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a9a:	b2db      	uxtb	r3, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a7f      	ldr	r2, [pc, #508]	; (8007cdc <DMA_SetConfig+0x21c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d072      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a7d      	ldr	r2, [pc, #500]	; (8007ce0 <DMA_SetConfig+0x220>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d06d      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a7c      	ldr	r2, [pc, #496]	; (8007ce4 <DMA_SetConfig+0x224>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d068      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a7a      	ldr	r2, [pc, #488]	; (8007ce8 <DMA_SetConfig+0x228>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d063      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a79      	ldr	r2, [pc, #484]	; (8007cec <DMA_SetConfig+0x22c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d05e      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a77      	ldr	r2, [pc, #476]	; (8007cf0 <DMA_SetConfig+0x230>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d059      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a76      	ldr	r2, [pc, #472]	; (8007cf4 <DMA_SetConfig+0x234>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d054      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a74      	ldr	r2, [pc, #464]	; (8007cf8 <DMA_SetConfig+0x238>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d04f      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a73      	ldr	r2, [pc, #460]	; (8007cfc <DMA_SetConfig+0x23c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d04a      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a71      	ldr	r2, [pc, #452]	; (8007d00 <DMA_SetConfig+0x240>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d045      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a70      	ldr	r2, [pc, #448]	; (8007d04 <DMA_SetConfig+0x244>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d040      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6e      	ldr	r2, [pc, #440]	; (8007d08 <DMA_SetConfig+0x248>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d03b      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a6d      	ldr	r2, [pc, #436]	; (8007d0c <DMA_SetConfig+0x24c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d036      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a6b      	ldr	r2, [pc, #428]	; (8007d10 <DMA_SetConfig+0x250>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d031      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a6a      	ldr	r2, [pc, #424]	; (8007d14 <DMA_SetConfig+0x254>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d02c      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a68      	ldr	r2, [pc, #416]	; (8007d18 <DMA_SetConfig+0x258>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d027      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a67      	ldr	r2, [pc, #412]	; (8007d1c <DMA_SetConfig+0x25c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d022      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a65      	ldr	r2, [pc, #404]	; (8007d20 <DMA_SetConfig+0x260>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d01d      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a64      	ldr	r2, [pc, #400]	; (8007d24 <DMA_SetConfig+0x264>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d018      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a62      	ldr	r2, [pc, #392]	; (8007d28 <DMA_SetConfig+0x268>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a61      	ldr	r2, [pc, #388]	; (8007d2c <DMA_SetConfig+0x26c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00e      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a5f      	ldr	r2, [pc, #380]	; (8007d30 <DMA_SetConfig+0x270>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a5e      	ldr	r2, [pc, #376]	; (8007d34 <DMA_SetConfig+0x274>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <DMA_SetConfig+0x10a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a5c      	ldr	r2, [pc, #368]	; (8007d38 <DMA_SetConfig+0x278>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d101      	bne.n	8007bce <DMA_SetConfig+0x10e>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <DMA_SetConfig+0x110>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00d      	beq.n	8007bf0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bdc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <DMA_SetConfig+0x21c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d04a      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a38      	ldr	r2, [pc, #224]	; (8007ce0 <DMA_SetConfig+0x220>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d045      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a36      	ldr	r2, [pc, #216]	; (8007ce4 <DMA_SetConfig+0x224>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d040      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a35      	ldr	r2, [pc, #212]	; (8007ce8 <DMA_SetConfig+0x228>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d03b      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a33      	ldr	r2, [pc, #204]	; (8007cec <DMA_SetConfig+0x22c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d036      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a32      	ldr	r2, [pc, #200]	; (8007cf0 <DMA_SetConfig+0x230>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d031      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a30      	ldr	r2, [pc, #192]	; (8007cf4 <DMA_SetConfig+0x234>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d02c      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2f      	ldr	r2, [pc, #188]	; (8007cf8 <DMA_SetConfig+0x238>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d027      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a2d      	ldr	r2, [pc, #180]	; (8007cfc <DMA_SetConfig+0x23c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d022      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <DMA_SetConfig+0x240>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d01d      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2a      	ldr	r2, [pc, #168]	; (8007d04 <DMA_SetConfig+0x244>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d018      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a29      	ldr	r2, [pc, #164]	; (8007d08 <DMA_SetConfig+0x248>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d013      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a27      	ldr	r2, [pc, #156]	; (8007d0c <DMA_SetConfig+0x24c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00e      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a26      	ldr	r2, [pc, #152]	; (8007d10 <DMA_SetConfig+0x250>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a24      	ldr	r2, [pc, #144]	; (8007d14 <DMA_SetConfig+0x254>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <DMA_SetConfig+0x1d0>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <DMA_SetConfig+0x258>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d101      	bne.n	8007c94 <DMA_SetConfig+0x1d4>
 8007c90:	2301      	movs	r3, #1
 8007c92:	e000      	b.n	8007c96 <DMA_SetConfig+0x1d6>
 8007c94:	2300      	movs	r3, #0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d059      	beq.n	8007d4e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	223f      	movs	r2, #63	; 0x3f
 8007ca4:	409a      	lsls	r2, r3
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007cb8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d138      	bne.n	8007d3c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007cda:	e086      	b.n	8007dea <DMA_SetConfig+0x32a>
 8007cdc:	40020010 	.word	0x40020010
 8007ce0:	40020028 	.word	0x40020028
 8007ce4:	40020040 	.word	0x40020040
 8007ce8:	40020058 	.word	0x40020058
 8007cec:	40020070 	.word	0x40020070
 8007cf0:	40020088 	.word	0x40020088
 8007cf4:	400200a0 	.word	0x400200a0
 8007cf8:	400200b8 	.word	0x400200b8
 8007cfc:	40020410 	.word	0x40020410
 8007d00:	40020428 	.word	0x40020428
 8007d04:	40020440 	.word	0x40020440
 8007d08:	40020458 	.word	0x40020458
 8007d0c:	40020470 	.word	0x40020470
 8007d10:	40020488 	.word	0x40020488
 8007d14:	400204a0 	.word	0x400204a0
 8007d18:	400204b8 	.word	0x400204b8
 8007d1c:	58025408 	.word	0x58025408
 8007d20:	5802541c 	.word	0x5802541c
 8007d24:	58025430 	.word	0x58025430
 8007d28:	58025444 	.word	0x58025444
 8007d2c:	58025458 	.word	0x58025458
 8007d30:	5802546c 	.word	0x5802546c
 8007d34:	58025480 	.word	0x58025480
 8007d38:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	60da      	str	r2, [r3, #12]
}
 8007d4c:	e04d      	b.n	8007dea <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <DMA_SetConfig+0x338>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a27      	ldr	r2, [pc, #156]	; (8007dfc <DMA_SetConfig+0x33c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a26      	ldr	r2, [pc, #152]	; (8007e00 <DMA_SetConfig+0x340>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a24      	ldr	r2, [pc, #144]	; (8007e04 <DMA_SetConfig+0x344>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <DMA_SetConfig+0x348>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a21      	ldr	r2, [pc, #132]	; (8007e0c <DMA_SetConfig+0x34c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a20      	ldr	r2, [pc, #128]	; (8007e10 <DMA_SetConfig+0x350>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <DMA_SetConfig+0x2de>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1e      	ldr	r2, [pc, #120]	; (8007e14 <DMA_SetConfig+0x354>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d101      	bne.n	8007da2 <DMA_SetConfig+0x2e2>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <DMA_SetConfig+0x2e4>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d020      	beq.n	8007dea <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d108      	bne.n	8007dda <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	60da      	str	r2, [r3, #12]
}
 8007dd8:	e007      	b.n	8007dea <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	58025408 	.word	0x58025408
 8007dfc:	5802541c 	.word	0x5802541c
 8007e00:	58025430 	.word	0x58025430
 8007e04:	58025444 	.word	0x58025444
 8007e08:	58025458 	.word	0x58025458
 8007e0c:	5802546c 	.word	0x5802546c
 8007e10:	58025480 	.word	0x58025480
 8007e14:	58025494 	.word	0x58025494

08007e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a42      	ldr	r2, [pc, #264]	; (8007f30 <DMA_CalcBaseAndBitshift+0x118>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d04a      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a41      	ldr	r2, [pc, #260]	; (8007f34 <DMA_CalcBaseAndBitshift+0x11c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d045      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a3f      	ldr	r2, [pc, #252]	; (8007f38 <DMA_CalcBaseAndBitshift+0x120>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d040      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a3e      	ldr	r2, [pc, #248]	; (8007f3c <DMA_CalcBaseAndBitshift+0x124>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d03b      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a3c      	ldr	r2, [pc, #240]	; (8007f40 <DMA_CalcBaseAndBitshift+0x128>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d036      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <DMA_CalcBaseAndBitshift+0x12c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d031      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a39      	ldr	r2, [pc, #228]	; (8007f48 <DMA_CalcBaseAndBitshift+0x130>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d02c      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a38      	ldr	r2, [pc, #224]	; (8007f4c <DMA_CalcBaseAndBitshift+0x134>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d027      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a36      	ldr	r2, [pc, #216]	; (8007f50 <DMA_CalcBaseAndBitshift+0x138>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a35      	ldr	r2, [pc, #212]	; (8007f54 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01d      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a33      	ldr	r2, [pc, #204]	; (8007f58 <DMA_CalcBaseAndBitshift+0x140>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a32      	ldr	r2, [pc, #200]	; (8007f5c <DMA_CalcBaseAndBitshift+0x144>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a30      	ldr	r2, [pc, #192]	; (8007f60 <DMA_CalcBaseAndBitshift+0x148>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2f      	ldr	r2, [pc, #188]	; (8007f64 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a2d      	ldr	r2, [pc, #180]	; (8007f68 <DMA_CalcBaseAndBitshift+0x150>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xa8>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a2c      	ldr	r2, [pc, #176]	; (8007f6c <DMA_CalcBaseAndBitshift+0x154>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d101      	bne.n	8007ec4 <DMA_CalcBaseAndBitshift+0xac>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <DMA_CalcBaseAndBitshift+0xae>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d024      	beq.n	8007f14 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	3b10      	subs	r3, #16
 8007ed2:	4a27      	ldr	r2, [pc, #156]	; (8007f70 <DMA_CalcBaseAndBitshift+0x158>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <DMA_CalcBaseAndBitshift+0x15c>)
 8007ee4:	5cd3      	ldrb	r3, [r2, r3]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d908      	bls.n	8007f04 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4b1f      	ldr	r3, [pc, #124]	; (8007f78 <DMA_CalcBaseAndBitshift+0x160>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	659a      	str	r2, [r3, #88]	; 0x58
 8007f02:	e00d      	b.n	8007f20 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <DMA_CalcBaseAndBitshift+0x160>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6593      	str	r3, [r2, #88]	; 0x58
 8007f12:	e005      	b.n	8007f20 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	40020010 	.word	0x40020010
 8007f34:	40020028 	.word	0x40020028
 8007f38:	40020040 	.word	0x40020040
 8007f3c:	40020058 	.word	0x40020058
 8007f40:	40020070 	.word	0x40020070
 8007f44:	40020088 	.word	0x40020088
 8007f48:	400200a0 	.word	0x400200a0
 8007f4c:	400200b8 	.word	0x400200b8
 8007f50:	40020410 	.word	0x40020410
 8007f54:	40020428 	.word	0x40020428
 8007f58:	40020440 	.word	0x40020440
 8007f5c:	40020458 	.word	0x40020458
 8007f60:	40020470 	.word	0x40020470
 8007f64:	40020488 	.word	0x40020488
 8007f68:	400204a0 	.word	0x400204a0
 8007f6c:	400204b8 	.word	0x400204b8
 8007f70:	aaaaaaab 	.word	0xaaaaaaab
 8007f74:	080306fc 	.word	0x080306fc
 8007f78:	fffffc00 	.word	0xfffffc00

08007f7c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d120      	bne.n	8007fd2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d858      	bhi.n	800804a <DMA_CheckFifoParam+0xce>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <DMA_CheckFifoParam+0x24>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fc3 	.word	0x08007fc3
 8007fa8:	08007fb1 	.word	0x08007fb1
 8007fac:	0800804b 	.word	0x0800804b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d048      	beq.n	800804e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fc0:	e045      	b.n	800804e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fca:	d142      	bne.n	8008052 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fd0:	e03f      	b.n	8008052 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fda:	d123      	bne.n	8008024 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d838      	bhi.n	8008056 <DMA_CheckFifoParam+0xda>
 8007fe4:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <DMA_CheckFifoParam+0x70>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008003 	.word	0x08008003
 8007ff4:	08007ffd 	.word	0x08007ffd
 8007ff8:	08008015 	.word	0x08008015
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	73fb      	strb	r3, [r7, #15]
        break;
 8008000:	e030      	b.n	8008064 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d025      	beq.n	800805a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008012:	e022      	b.n	800805a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800801c:	d11f      	bne.n	800805e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008022:	e01c      	b.n	800805e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	2b02      	cmp	r3, #2
 800802a:	d902      	bls.n	8008032 <DMA_CheckFifoParam+0xb6>
 800802c:	2b03      	cmp	r3, #3
 800802e:	d003      	beq.n	8008038 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008030:	e018      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
        break;
 8008036:	e015      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00e      	beq.n	8008062 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]
    break;
 8008048:	e00b      	b.n	8008062 <DMA_CheckFifoParam+0xe6>
        break;
 800804a:	bf00      	nop
 800804c:	e00a      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        break;
 800804e:	bf00      	nop
 8008050:	e008      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        break;
 8008052:	bf00      	nop
 8008054:	e006      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        break;
 8008056:	bf00      	nop
 8008058:	e004      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        break;
 800805a:	bf00      	nop
 800805c:	e002      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
        break;
 800805e:	bf00      	nop
 8008060:	e000      	b.n	8008064 <DMA_CheckFifoParam+0xe8>
    break;
 8008062:	bf00      	nop
    }
  }

  return status;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a38      	ldr	r2, [pc, #224]	; (8008168 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d022      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a36      	ldr	r2, [pc, #216]	; (800816c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d01d      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a35      	ldr	r2, [pc, #212]	; (8008170 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d018      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a33      	ldr	r2, [pc, #204]	; (8008174 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a32      	ldr	r2, [pc, #200]	; (8008178 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a30      	ldr	r2, [pc, #192]	; (800817c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2f      	ldr	r2, [pc, #188]	; (8008180 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a2d      	ldr	r2, [pc, #180]	; (8008184 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d101      	bne.n	80080d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01a      	beq.n	8008112 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	3b08      	subs	r3, #8
 80080e4:	4a28      	ldr	r2, [pc, #160]	; (8008188 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80080e6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4b26      	ldr	r3, [pc, #152]	; (800818c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a24      	ldr	r2, [pc, #144]	; (8008190 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008100:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	2201      	movs	r2, #1
 800810a:	409a      	lsls	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008110:	e024      	b.n	800815c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	3b10      	subs	r3, #16
 800811a:	4a1e      	ldr	r2, [pc, #120]	; (8008194 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800811c:	fba2 2303 	umull	r2, r3, r2, r3
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d806      	bhi.n	800813a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4a1b      	ldr	r2, [pc, #108]	; (800819c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d902      	bls.n	800813a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3308      	adds	r3, #8
 8008138:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800814c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 031f 	and.w	r3, r3, #31
 8008154:	2201      	movs	r2, #1
 8008156:	409a      	lsls	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	58025408 	.word	0x58025408
 800816c:	5802541c 	.word	0x5802541c
 8008170:	58025430 	.word	0x58025430
 8008174:	58025444 	.word	0x58025444
 8008178:	58025458 	.word	0x58025458
 800817c:	5802546c 	.word	0x5802546c
 8008180:	58025480 	.word	0x58025480
 8008184:	58025494 	.word	0x58025494
 8008188:	cccccccd 	.word	0xcccccccd
 800818c:	16009600 	.word	0x16009600
 8008190:	58025880 	.word	0x58025880
 8008194:	aaaaaaab 	.word	0xaaaaaaab
 8008198:	400204b8 	.word	0x400204b8
 800819c:	4002040f 	.word	0x4002040f
 80081a0:	10008200 	.word	0x10008200
 80081a4:	40020880 	.word	0x40020880

080081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d04a      	beq.n	8008254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d847      	bhi.n	8008254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a25      	ldr	r2, [pc, #148]	; (8008260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d022      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a24      	ldr	r2, [pc, #144]	; (8008264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d01d      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a22      	ldr	r2, [pc, #136]	; (8008268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d018      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a21      	ldr	r2, [pc, #132]	; (800826c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d013      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00e      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d009      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1c      	ldr	r2, [pc, #112]	; (8008278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d004      	beq.n	8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1b      	ldr	r2, [pc, #108]	; (800827c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d101      	bne.n	8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008218:	2300      	movs	r3, #0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4b17      	ldr	r3, [pc, #92]	; (8008280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a15      	ldr	r2, [pc, #84]	; (8008284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008230:	671a      	str	r2, [r3, #112]	; 0x70
 8008232:	e009      	b.n	8008248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	461a      	mov	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a11      	ldr	r2, [pc, #68]	; (800828c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008246:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3b01      	subs	r3, #1
 800824c:	2201      	movs	r2, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	58025408 	.word	0x58025408
 8008264:	5802541c 	.word	0x5802541c
 8008268:	58025430 	.word	0x58025430
 800826c:	58025444 	.word	0x58025444
 8008270:	58025458 	.word	0x58025458
 8008274:	5802546c 	.word	0x5802546c
 8008278:	58025480 	.word	0x58025480
 800827c:	58025494 	.word	0x58025494
 8008280:	1600963f 	.word	0x1600963f
 8008284:	58025940 	.word	0x58025940
 8008288:	1000823f 	.word	0x1000823f
 800828c:	40020940 	.word	0x40020940

08008290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	; 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800829a:	2300      	movs	r3, #0
 800829c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800829e:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <HAL_GPIO_Init+0x234>)
 80082a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082a2:	e194      	b.n	80085ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	2101      	movs	r1, #1
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	4013      	ands	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 8186 	beq.w	80085c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d005      	beq.n	80082d4 <HAL_GPIO_Init+0x44>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f003 0303 	and.w	r3, r3, #3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d130      	bne.n	8008336 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	2203      	movs	r2, #3
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	43db      	mvns	r3, r3
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4013      	ands	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	fa02 f303 	lsl.w	r3, r2, r3
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800830a:	2201      	movs	r2, #1
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	4013      	ands	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	f003 0201 	and.w	r2, r3, #1
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4313      	orrs	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	2b03      	cmp	r3, #3
 8008340:	d017      	beq.n	8008372 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	2203      	movs	r2, #3
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	43db      	mvns	r3, r3
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	4013      	ands	r3, r2
 8008358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	fa02 f303 	lsl.w	r3, r2, r3
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	4313      	orrs	r3, r2
 800836a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d123      	bne.n	80083c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	08da      	lsrs	r2, r3, #3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3208      	adds	r2, #8
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	220f      	movs	r2, #15
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	43db      	mvns	r3, r3
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	4013      	ands	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	08da      	lsrs	r2, r3, #3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3208      	adds	r2, #8
 80083c0:	69b9      	ldr	r1, [r7, #24]
 80083c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	2203      	movs	r2, #3
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	43db      	mvns	r3, r3
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	4013      	ands	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f003 0203 	and.w	r2, r3, #3
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80e0 	beq.w	80085c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008408:	4b2f      	ldr	r3, [pc, #188]	; (80084c8 <HAL_GPIO_Init+0x238>)
 800840a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800840e:	4a2e      	ldr	r2, [pc, #184]	; (80084c8 <HAL_GPIO_Init+0x238>)
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008418:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <HAL_GPIO_Init+0x238>)
 800841a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008426:	4a29      	ldr	r2, [pc, #164]	; (80084cc <HAL_GPIO_Init+0x23c>)
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	089b      	lsrs	r3, r3, #2
 800842c:	3302      	adds	r3, #2
 800842e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	220f      	movs	r2, #15
 800843e:	fa02 f303 	lsl.w	r3, r2, r3
 8008442:	43db      	mvns	r3, r3
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	4013      	ands	r3, r2
 8008448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a20      	ldr	r2, [pc, #128]	; (80084d0 <HAL_GPIO_Init+0x240>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d052      	beq.n	80084f8 <HAL_GPIO_Init+0x268>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a1f      	ldr	r2, [pc, #124]	; (80084d4 <HAL_GPIO_Init+0x244>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d031      	beq.n	80084be <HAL_GPIO_Init+0x22e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <HAL_GPIO_Init+0x248>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d02b      	beq.n	80084ba <HAL_GPIO_Init+0x22a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a1d      	ldr	r2, [pc, #116]	; (80084dc <HAL_GPIO_Init+0x24c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d025      	beq.n	80084b6 <HAL_GPIO_Init+0x226>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a1c      	ldr	r2, [pc, #112]	; (80084e0 <HAL_GPIO_Init+0x250>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01f      	beq.n	80084b2 <HAL_GPIO_Init+0x222>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <HAL_GPIO_Init+0x254>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d019      	beq.n	80084ae <HAL_GPIO_Init+0x21e>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a1a      	ldr	r2, [pc, #104]	; (80084e8 <HAL_GPIO_Init+0x258>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <HAL_GPIO_Init+0x21a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a19      	ldr	r2, [pc, #100]	; (80084ec <HAL_GPIO_Init+0x25c>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00d      	beq.n	80084a6 <HAL_GPIO_Init+0x216>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a18      	ldr	r2, [pc, #96]	; (80084f0 <HAL_GPIO_Init+0x260>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d007      	beq.n	80084a2 <HAL_GPIO_Init+0x212>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a17      	ldr	r2, [pc, #92]	; (80084f4 <HAL_GPIO_Init+0x264>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <HAL_GPIO_Init+0x20e>
 800849a:	2309      	movs	r3, #9
 800849c:	e02d      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 800849e:	230a      	movs	r3, #10
 80084a0:	e02b      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084a2:	2308      	movs	r3, #8
 80084a4:	e029      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084a6:	2307      	movs	r3, #7
 80084a8:	e027      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084aa:	2306      	movs	r3, #6
 80084ac:	e025      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084ae:	2305      	movs	r3, #5
 80084b0:	e023      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084b2:	2304      	movs	r3, #4
 80084b4:	e021      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084b6:	2303      	movs	r3, #3
 80084b8:	e01f      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084ba:	2302      	movs	r3, #2
 80084bc:	e01d      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084be:	2301      	movs	r3, #1
 80084c0:	e01b      	b.n	80084fa <HAL_GPIO_Init+0x26a>
 80084c2:	bf00      	nop
 80084c4:	58000080 	.word	0x58000080
 80084c8:	58024400 	.word	0x58024400
 80084cc:	58000400 	.word	0x58000400
 80084d0:	58020000 	.word	0x58020000
 80084d4:	58020400 	.word	0x58020400
 80084d8:	58020800 	.word	0x58020800
 80084dc:	58020c00 	.word	0x58020c00
 80084e0:	58021000 	.word	0x58021000
 80084e4:	58021400 	.word	0x58021400
 80084e8:	58021800 	.word	0x58021800
 80084ec:	58021c00 	.word	0x58021c00
 80084f0:	58022000 	.word	0x58022000
 80084f4:	58022400 	.word	0x58022400
 80084f8:	2300      	movs	r3, #0
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	f002 0203 	and.w	r2, r2, #3
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	4093      	lsls	r3, r2
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4313      	orrs	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800850a:	4938      	ldr	r1, [pc, #224]	; (80085ec <HAL_GPIO_Init+0x35c>)
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	089b      	lsrs	r3, r3, #2
 8008510:	3302      	adds	r3, #2
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	43db      	mvns	r3, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	4013      	ands	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800853e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	43db      	mvns	r3, r3
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	4013      	ands	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800856c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	43db      	mvns	r3, r3
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	4013      	ands	r3, r2
 8008582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	43db      	mvns	r3, r3
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	4013      	ands	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	fa22 f303 	lsr.w	r3, r2, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f47f ae63 	bne.w	80082a4 <HAL_GPIO_Init+0x14>
  }
}
 80085de:	bf00      	nop
 80085e0:	bf00      	nop
 80085e2:	3724      	adds	r7, #36	; 0x24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	58000400 	.word	0x58000400

080085f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	807b      	strh	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008600:	787b      	ldrb	r3, [r7, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800860c:	e003      	b.n	8008616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	041a      	lsls	r2, r3, #16
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	619a      	str	r2, [r3, #24]
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e07f      	b.n	8008736 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d106      	bne.n	8008650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7f9 ff82 	bl	8002554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2224      	movs	r2, #36	; 0x24
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008674:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008684:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d107      	bne.n	800869e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800869a:	609a      	str	r2, [r3, #8]
 800869c:	e006      	b.n	80086ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80086aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d104      	bne.n	80086be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6859      	ldr	r1, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4b1d      	ldr	r3, [pc, #116]	; (8008740 <HAL_I2C_Init+0x11c>)
 80086ca:	430b      	orrs	r3, r1
 80086cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	69d9      	ldr	r1, [r3, #28]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1a      	ldr	r2, [r3, #32]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	02008000 	.word	0x02008000

08008744 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	607a      	str	r2, [r7, #4]
 800874e:	461a      	mov	r2, r3
 8008750:	460b      	mov	r3, r1
 8008752:	817b      	strh	r3, [r7, #10]
 8008754:	4613      	mov	r3, r2
 8008756:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b20      	cmp	r3, #32
 8008762:	f040 80da 	bne.w	800891a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_I2C_Master_Transmit+0x30>
 8008770:	2302      	movs	r3, #2
 8008772:	e0d3      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800877c:	f7fc fde6 	bl	800534c <HAL_GetTick>
 8008780:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2319      	movs	r3, #25
 8008788:	2201      	movs	r2, #1
 800878a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 ffe9 	bl	8009766 <I2C_WaitOnFlagUntilTimeout>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e0be      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2221      	movs	r2, #33	; 0x21
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2210      	movs	r2, #16
 80087aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	893a      	ldrh	r2, [r7, #8]
 80087be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	2bff      	cmp	r3, #255	; 0xff
 80087ce:	d90e      	bls.n	80087ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	22ff      	movs	r2, #255	; 0xff
 80087d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	8979      	ldrh	r1, [r7, #10]
 80087de:	4b51      	ldr	r3, [pc, #324]	; (8008924 <HAL_I2C_Master_Transmit+0x1e0>)
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f001 f9e0 	bl	8009bac <I2C_TransferConfig>
 80087ec:	e06c      	b.n	80088c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	8979      	ldrh	r1, [r7, #10]
 8008800:	4b48      	ldr	r3, [pc, #288]	; (8008924 <HAL_I2C_Master_Transmit+0x1e0>)
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f001 f9cf 	bl	8009bac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800880e:	e05b      	b.n	80088c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	6a39      	ldr	r1, [r7, #32]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 ffe6 	bl	80097e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e07b      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800884c:	3b01      	subs	r3, #1
 800884e:	b29a      	uxth	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d034      	beq.n	80088c8 <HAL_I2C_Master_Transmit+0x184>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	2b00      	cmp	r3, #0
 8008864:	d130      	bne.n	80088c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	2200      	movs	r2, #0
 800886e:	2180      	movs	r1, #128	; 0x80
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 ff78 	bl	8009766 <I2C_WaitOnFlagUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e04d      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008884:	b29b      	uxth	r3, r3
 8008886:	2bff      	cmp	r3, #255	; 0xff
 8008888:	d90e      	bls.n	80088a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	22ff      	movs	r2, #255	; 0xff
 800888e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008894:	b2da      	uxtb	r2, r3
 8008896:	8979      	ldrh	r1, [r7, #10]
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f001 f983 	bl	8009bac <I2C_TransferConfig>
 80088a6:	e00f      	b.n	80088c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	8979      	ldrh	r1, [r7, #10]
 80088ba:	2300      	movs	r3, #0
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f001 f972 	bl	8009bac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d19e      	bne.n	8008810 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	6a39      	ldr	r1, [r7, #32]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 ffc5 	bl	8009866 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e01a      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2220      	movs	r2, #32
 80088ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6859      	ldr	r1, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <HAL_I2C_Master_Transmit+0x1e4>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2220      	movs	r2, #32
 8008902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	e000      	b.n	800891c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800891a:	2302      	movs	r3, #2
  }
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	80002000 	.word	0x80002000
 8008928:	fe00e800 	.word	0xfe00e800

0800892c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	461a      	mov	r2, r3
 8008938:	460b      	mov	r3, r1
 800893a:	817b      	strh	r3, [r7, #10]
 800893c:	4613      	mov	r3, r2
 800893e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b20      	cmp	r3, #32
 800894a:	f040 80db 	bne.w	8008b04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_I2C_Master_Receive+0x30>
 8008958:	2302      	movs	r3, #2
 800895a:	e0d4      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008964:	f7fc fcf2 	bl	800534c <HAL_GetTick>
 8008968:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	2319      	movs	r3, #25
 8008970:	2201      	movs	r2, #1
 8008972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fef5 	bl	8009766 <I2C_WaitOnFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e0bf      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2222      	movs	r2, #34	; 0x22
 800898a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2210      	movs	r2, #16
 8008992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	893a      	ldrh	r2, [r7, #8]
 80089a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2bff      	cmp	r3, #255	; 0xff
 80089b6:	d90e      	bls.n	80089d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	22ff      	movs	r2, #255	; 0xff
 80089bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	8979      	ldrh	r1, [r7, #10]
 80089c6:	4b52      	ldr	r3, [pc, #328]	; (8008b10 <HAL_I2C_Master_Receive+0x1e4>)
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f001 f8ec 	bl	8009bac <I2C_TransferConfig>
 80089d4:	e06d      	b.n	8008ab2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	8979      	ldrh	r1, [r7, #10]
 80089e8:	4b49      	ldr	r3, [pc, #292]	; (8008b10 <HAL_I2C_Master_Receive+0x1e4>)
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 f8db 	bl	8009bac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80089f6:	e05c      	b.n	8008ab2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	6a39      	ldr	r1, [r7, #32]
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 ff6f 	bl	80098e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e07c      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d034      	beq.n	8008ab2 <HAL_I2C_Master_Receive+0x186>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d130      	bne.n	8008ab2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fe83 	bl	8009766 <I2C_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e04d      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	2bff      	cmp	r3, #255	; 0xff
 8008a72:	d90e      	bls.n	8008a92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	22ff      	movs	r2, #255	; 0xff
 8008a78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	8979      	ldrh	r1, [r7, #10]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f001 f88e 	bl	8009bac <I2C_TransferConfig>
 8008a90:	e00f      	b.n	8008ab2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	8979      	ldrh	r1, [r7, #10]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f001 f87d 	bl	8009bac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d19d      	bne.n	80089f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	6a39      	ldr	r1, [r7, #32]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fed0 	bl	8009866 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e01a      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <HAL_I2C_Master_Receive+0x1e8>)
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	e000      	b.n	8008b06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008b04:	2302      	movs	r3, #2
  }
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	80002400 	.word	0x80002400
 8008b14:	fe00e800 	.word	0xfe00e800

08008b18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	4798      	blx	r3
  }
}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d010      	beq.n	8008b92 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	09db      	lsrs	r3, r3, #7
 8008b74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b80:	f043 0201 	orr.w	r2, r3, #1
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	0a9b      	lsrs	r3, r3, #10
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d010      	beq.n	8008bc0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	09db      	lsrs	r3, r3, #7
 8008ba2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bae:	f043 0208 	orr.w	r2, r3, #8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	0a5b      	lsrs	r3, r3, #9
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d010      	beq.n	8008bee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	09db      	lsrs	r3, r3, #7
 8008bd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bdc:	f043 0202 	orr.w	r2, r3, #2
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 030b 	and.w	r3, r3, #11
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fc77 	bl	80094f4 <I2C_ITError>
  }
}
 8008c06:	bf00      	nop
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
 8008c42:	4613      	mov	r3, r2
 8008c44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <I2C_Slave_ISR_IT+0x24>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e0ec      	b.n	8008e8c <I2C_Slave_ISR_IT+0x1fe>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	095b      	lsrs	r3, r3, #5
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008cd2:	6939      	ldr	r1, [r7, #16]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f9bf 	bl	8009058 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d04d      	beq.n	8008d82 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d047      	beq.n	8008d82 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d128      	bne.n	8008d4e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b28      	cmp	r3, #40	; 0x28
 8008d06:	d108      	bne.n	8008d1a <I2C_Slave_ISR_IT+0x8c>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d0e:	d104      	bne.n	8008d1a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d10:	6939      	ldr	r1, [r7, #16]
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fb98 	bl	8009448 <I2C_ITListenCplt>
 8008d18:	e032      	b.n	8008d80 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b29      	cmp	r3, #41	; 0x29
 8008d24:	d10e      	bne.n	8008d44 <I2C_Slave_ISR_IT+0xb6>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d2c:	d00a      	beq.n	8008d44 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2210      	movs	r2, #16
 8008d34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fcd3 	bl	80096e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f92d 	bl	8008f9c <I2C_ITSlaveSeqCplt>
 8008d42:	e01d      	b.n	8008d80 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2210      	movs	r2, #16
 8008d4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008d4c:	e096      	b.n	8008e7c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2210      	movs	r2, #16
 8008d54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <I2C_Slave_ISR_IT+0xe4>
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d6e:	f040 8085 	bne.w	8008e7c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d76:	4619      	mov	r1, r3
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 fbbb 	bl	80094f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008d7e:	e07d      	b.n	8008e7c <I2C_Slave_ISR_IT+0x1ee>
 8008d80:	e07c      	b.n	8008e7c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	089b      	lsrs	r3, r3, #2
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d030      	beq.n	8008df0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	089b      	lsrs	r3, r3, #2
 8008d92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02a      	beq.n	8008df0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d018      	beq.n	8008dd6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d14f      	bne.n	8008e80 <I2C_Slave_ISR_IT+0x1f2>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008de6:	d04b      	beq.n	8008e80 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f8d7 	bl	8008f9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008dee:	e047      	b.n	8008e80 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	08db      	lsrs	r3, r3, #3
 8008e00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008e08:	6939      	ldr	r1, [r7, #16]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f842 	bl	8008e94 <I2C_ITAddrCplt>
 8008e10:	e037      	b.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d031      	beq.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	085b      	lsrs	r3, r3, #1
 8008e22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d02b      	beq.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d018      	beq.n	8008e66 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	851a      	strh	r2, [r3, #40]	; 0x28
 8008e64:	e00d      	b.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6c:	d002      	beq.n	8008e74 <I2C_Slave_ISR_IT+0x1e6>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 f891 	bl	8008f9c <I2C_ITSlaveSeqCplt>
 8008e7a:	e002      	b.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008e7c:	bf00      	nop
 8008e7e:	e000      	b.n	8008e82 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008e80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008eaa:	2b28      	cmp	r3, #40	; 0x28
 8008eac:	d16a      	bne.n	8008f84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ecc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ee8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d138      	bne.n	8008f64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008ef2:	897b      	ldrh	r3, [r7, #10]
 8008ef4:	09db      	lsrs	r3, r3, #7
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	89bb      	ldrh	r3, [r7, #12]
 8008efa:	4053      	eors	r3, r2
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f003 0306 	and.w	r3, r3, #6
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d11c      	bne.n	8008f40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008f06:	897b      	ldrh	r3, [r7, #10]
 8008f08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d13b      	bne.n	8008f94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2208      	movs	r2, #8
 8008f28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f32:	89ba      	ldrh	r2, [r7, #12]
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fe7c 	bl	8008c36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008f3e:	e029      	b.n	8008f94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008f40:	893b      	ldrh	r3, [r7, #8]
 8008f42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fe61 	bl	8009c10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f56:	89ba      	ldrh	r2, [r7, #12]
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fe6a 	bl	8008c36 <HAL_I2C_AddrCallback>
}
 8008f62:	e017      	b.n	8008f94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fe51 	bl	8009c10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f76:	89ba      	ldrh	r2, [r7, #12]
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fe5a 	bl	8008c36 <HAL_I2C_AddrCallback>
}
 8008f82:	e007      	b.n	8008f94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2208      	movs	r2, #8
 8008f8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	0b9b      	lsrs	r3, r3, #14
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	e00d      	b.n	8008fee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	0bdb      	lsrs	r3, r3, #15
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d007      	beq.n	8008fee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b29      	cmp	r3, #41	; 0x29
 8008ff8:	d112      	bne.n	8009020 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2228      	movs	r2, #40	; 0x28
 8008ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2221      	movs	r2, #33	; 0x21
 8009006:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009008:	2101      	movs	r1, #1
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fe00 	bl	8009c10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fdf8 	bl	8008c0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800901e:	e017      	b.n	8009050 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b2a      	cmp	r3, #42	; 0x2a
 800902a:	d111      	bne.n	8009050 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2228      	movs	r2, #40	; 0x28
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2222      	movs	r2, #34	; 0x22
 8009038:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800903a:	2102      	movs	r1, #2
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fde7 	bl	8009c10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff fde9 	bl	8008c22 <HAL_I2C_SlaveRxCpltCallback>
}
 8009050:	bf00      	nop
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009074:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2220      	movs	r2, #32
 800907c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	2b21      	cmp	r3, #33	; 0x21
 8009082:	d002      	beq.n	800908a <I2C_ITSlaveCplt+0x32>
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b29      	cmp	r3, #41	; 0x29
 8009088:	d108      	bne.n	800909c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800908a:	f248 0101 	movw	r1, #32769	; 0x8001
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fdbe 	bl	8009c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2221      	movs	r2, #33	; 0x21
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
 800909a:	e00d      	b.n	80090b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b22      	cmp	r3, #34	; 0x22
 80090a0:	d002      	beq.n	80090a8 <I2C_ITSlaveCplt+0x50>
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	2b2a      	cmp	r3, #42	; 0x2a
 80090a6:	d107      	bne.n	80090b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80090a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fdaf 	bl	8009c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2222      	movs	r2, #34	; 0x22
 80090b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685a      	ldr	r2, [r3, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b80      	ldr	r3, [pc, #512]	; (80092d4 <I2C_ITSlaveCplt+0x27c>)
 80090d4:	400b      	ands	r3, r1
 80090d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fb02 	bl	80096e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	0b9b      	lsrs	r3, r3, #14
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d07a      	beq.n	80091e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 8111 	beq.w	8009326 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a73      	ldr	r2, [pc, #460]	; (80092d8 <I2C_ITSlaveCplt+0x280>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d059      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a71      	ldr	r2, [pc, #452]	; (80092dc <I2C_ITSlaveCplt+0x284>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d053      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a6f      	ldr	r2, [pc, #444]	; (80092e0 <I2C_ITSlaveCplt+0x288>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d04d      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a6d      	ldr	r2, [pc, #436]	; (80092e4 <I2C_ITSlaveCplt+0x28c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d047      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a6b      	ldr	r2, [pc, #428]	; (80092e8 <I2C_ITSlaveCplt+0x290>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d041      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a69      	ldr	r2, [pc, #420]	; (80092ec <I2C_ITSlaveCplt+0x294>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d03b      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a67      	ldr	r2, [pc, #412]	; (80092f0 <I2C_ITSlaveCplt+0x298>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d035      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a65      	ldr	r2, [pc, #404]	; (80092f4 <I2C_ITSlaveCplt+0x29c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d02f      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a63      	ldr	r2, [pc, #396]	; (80092f8 <I2C_ITSlaveCplt+0x2a0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d029      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a61      	ldr	r2, [pc, #388]	; (80092fc <I2C_ITSlaveCplt+0x2a4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d023      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a5f      	ldr	r2, [pc, #380]	; (8009300 <I2C_ITSlaveCplt+0x2a8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d01d      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5d      	ldr	r2, [pc, #372]	; (8009304 <I2C_ITSlaveCplt+0x2ac>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d017      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a5b      	ldr	r2, [pc, #364]	; (8009308 <I2C_ITSlaveCplt+0x2b0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d011      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a59      	ldr	r2, [pc, #356]	; (800930c <I2C_ITSlaveCplt+0x2b4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00b      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a57      	ldr	r2, [pc, #348]	; (8009310 <I2C_ITSlaveCplt+0x2b8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d005      	beq.n	80091c4 <I2C_ITSlaveCplt+0x16c>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a55      	ldr	r2, [pc, #340]	; (8009314 <I2C_ITSlaveCplt+0x2bc>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d105      	bne.n	80091d0 <I2C_ITSlaveCplt+0x178>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	e004      	b.n	80091da <I2C_ITSlaveCplt+0x182>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	8553      	strh	r3, [r2, #42]	; 0x2a
 80091de:	e0a2      	b.n	8009326 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	0bdb      	lsrs	r3, r3, #15
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 809c 	beq.w	8009326 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 808f 	beq.w	8009326 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a32      	ldr	r2, [pc, #200]	; (80092d8 <I2C_ITSlaveCplt+0x280>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d059      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a30      	ldr	r2, [pc, #192]	; (80092dc <I2C_ITSlaveCplt+0x284>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d053      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a2e      	ldr	r2, [pc, #184]	; (80092e0 <I2C_ITSlaveCplt+0x288>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d04d      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a2c      	ldr	r2, [pc, #176]	; (80092e4 <I2C_ITSlaveCplt+0x28c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d047      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <I2C_ITSlaveCplt+0x290>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d041      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a28      	ldr	r2, [pc, #160]	; (80092ec <I2C_ITSlaveCplt+0x294>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d03b      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <I2C_ITSlaveCplt+0x298>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d035      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a24      	ldr	r2, [pc, #144]	; (80092f4 <I2C_ITSlaveCplt+0x29c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d02f      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a22      	ldr	r2, [pc, #136]	; (80092f8 <I2C_ITSlaveCplt+0x2a0>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d029      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a20      	ldr	r2, [pc, #128]	; (80092fc <I2C_ITSlaveCplt+0x2a4>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d023      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a1e      	ldr	r2, [pc, #120]	; (8009300 <I2C_ITSlaveCplt+0x2a8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d01d      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1c      	ldr	r2, [pc, #112]	; (8009304 <I2C_ITSlaveCplt+0x2ac>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d017      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1a      	ldr	r2, [pc, #104]	; (8009308 <I2C_ITSlaveCplt+0x2b0>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d011      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a18      	ldr	r2, [pc, #96]	; (800930c <I2C_ITSlaveCplt+0x2b4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a16      	ldr	r2, [pc, #88]	; (8009310 <I2C_ITSlaveCplt+0x2b8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d005      	beq.n	80092c8 <I2C_ITSlaveCplt+0x270>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a14      	ldr	r2, [pc, #80]	; (8009314 <I2C_ITSlaveCplt+0x2bc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d127      	bne.n	8009318 <I2C_ITSlaveCplt+0x2c0>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	e026      	b.n	8009322 <I2C_ITSlaveCplt+0x2ca>
 80092d4:	fe00e800 	.word	0xfe00e800
 80092d8:	40020010 	.word	0x40020010
 80092dc:	40020028 	.word	0x40020028
 80092e0:	40020040 	.word	0x40020040
 80092e4:	40020058 	.word	0x40020058
 80092e8:	40020070 	.word	0x40020070
 80092ec:	40020088 	.word	0x40020088
 80092f0:	400200a0 	.word	0x400200a0
 80092f4:	400200b8 	.word	0x400200b8
 80092f8:	40020410 	.word	0x40020410
 80092fc:	40020428 	.word	0x40020428
 8009300:	40020440 	.word	0x40020440
 8009304:	40020458 	.word	0x40020458
 8009308:	40020470 	.word	0x40020470
 800930c:	40020488 	.word	0x40020488
 8009310:	400204a0 	.word	0x400204a0
 8009314:	400204b8 	.word	0x400204b8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	b29b      	uxth	r3, r3
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	089b      	lsrs	r3, r3, #2
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d020      	beq.n	8009374 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f023 0304 	bic.w	r3, r3, #4
 8009338:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	b2d2      	uxtb	r2, r2
 8009346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00c      	beq.n	8009374 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935e:	3b01      	subs	r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009382:	f043 0204 	orr.w	r2, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939c:	2b00      	cmp	r3, #0
 800939e:	d010      	beq.n	80093c2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8a4 	bl	80094f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b28      	cmp	r3, #40	; 0x28
 80093b6:	d141      	bne.n	800943c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f844 	bl	8009448 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093c0:	e03c      	b.n	800943c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093ca:	d014      	beq.n	80093f6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff fde5 	bl	8008f9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1b      	ldr	r2, [pc, #108]	; (8009444 <I2C_ITSlaveCplt+0x3ec>)
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff fc2f 	bl	8008c52 <HAL_I2C_ListenCpltCallback>
}
 80093f4:	e022      	b.n	800943c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b22      	cmp	r3, #34	; 0x22
 8009400:	d10e      	bne.n	8009420 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff fc02 	bl	8008c22 <HAL_I2C_SlaveRxCpltCallback>
}
 800941e:	e00d      	b.n	800943c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fbe9 	bl	8008c0e <HAL_I2C_SlaveTxCpltCallback>
}
 800943c:	bf00      	nop
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	ffff0000 	.word	0xffff0000

08009448 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <I2C_ITListenCplt+0xa8>)
 8009456:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	d022      	beq.n	80094c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d012      	beq.n	80094c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a4:	3b01      	subs	r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f043 0204 	orr.w	r2, r3, #4
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80094c6:	f248 0103 	movw	r1, #32771	; 0x8003
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fba0 	bl	8009c10 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2210      	movs	r2, #16
 80094d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fbb6 	bl	8008c52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80094e6:	bf00      	nop
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	ffff0000 	.word	0xffff0000

080094f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a5d      	ldr	r2, [pc, #372]	; (8009688 <I2C_ITError+0x194>)
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b28      	cmp	r3, #40	; 0x28
 800952a:	d005      	beq.n	8009538 <I2C_ITError+0x44>
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b29      	cmp	r3, #41	; 0x29
 8009530:	d002      	beq.n	8009538 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b2a      	cmp	r3, #42	; 0x2a
 8009536:	d10b      	bne.n	8009550 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009538:	2103      	movs	r1, #3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fb68 	bl	8009c10 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2228      	movs	r2, #40	; 0x28
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a50      	ldr	r2, [pc, #320]	; (800968c <I2C_ITError+0x198>)
 800954c:	635a      	str	r2, [r3, #52]	; 0x34
 800954e:	e011      	b.n	8009574 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009550:	f248 0103 	movw	r1, #32771	; 0x8003
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fb5b 	bl	8009c10 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b60      	cmp	r3, #96	; 0x60
 8009564:	d003      	beq.n	800956e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009578:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	2b00      	cmp	r3, #0
 8009580:	d039      	beq.n	80095f6 <I2C_ITError+0x102>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b11      	cmp	r3, #17
 8009586:	d002      	beq.n	800958e <I2C_ITError+0x9a>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b21      	cmp	r3, #33	; 0x21
 800958c:	d133      	bne.n	80095f6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800959c:	d107      	bne.n	80095ae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fa6a 	bl	8007a8c <HAL_DMA_GetState>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d017      	beq.n	80095ee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	4a33      	ldr	r2, [pc, #204]	; (8009690 <I2C_ITError+0x19c>)
 80095c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fd f8ea 	bl	80067ac <HAL_DMA_Abort_IT>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d04d      	beq.n	800967a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095ec:	e045      	b.n	800967a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f850 	bl	8009694 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80095f4:	e041      	b.n	800967a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d039      	beq.n	8009672 <I2C_ITError+0x17e>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b12      	cmp	r3, #18
 8009602:	d002      	beq.n	800960a <I2C_ITError+0x116>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b22      	cmp	r3, #34	; 0x22
 8009608:	d133      	bne.n	8009672 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009618:	d107      	bne.n	800962a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009628:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fa2c 	bl	8007a8c <HAL_DMA_GetState>
 8009634:	4603      	mov	r3, r0
 8009636:	2b01      	cmp	r3, #1
 8009638:	d017      	beq.n	800966a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	4a14      	ldr	r2, [pc, #80]	; (8009690 <I2C_ITError+0x19c>)
 8009640:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964e:	4618      	mov	r0, r3
 8009650:	f7fd f8ac 	bl	80067ac <HAL_DMA_Abort_IT>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009668:	e009      	b.n	800967e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f812 	bl	8009694 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009670:	e005      	b.n	800967e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f80e 	bl	8009694 <I2C_TreatErrorCallback>
  }
}
 8009678:	e002      	b.n	8009680 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800967a:	bf00      	nop
 800967c:	e000      	b.n	8009680 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800967e:	bf00      	nop
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	ffff0000 	.word	0xffff0000
 800968c:	08008c8f 	.word	0x08008c8f
 8009690:	0800972b 	.word	0x0800972b

08009694 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b60      	cmp	r3, #96	; 0x60
 80096a6:	d10e      	bne.n	80096c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fadb 	bl	8008c7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80096c4:	e009      	b.n	80096da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fac6 	bl	8008c66 <HAL_I2C_ErrorCallback>
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d103      	bne.n	8009700 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2200      	movs	r2, #0
 80096fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b01      	cmp	r3, #1
 800970c:	d007      	beq.n	800971e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699a      	ldr	r2, [r3, #24]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0201 	orr.w	r2, r2, #1
 800971c:	619a      	str	r2, [r3, #24]
  }
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d003      	beq.n	8009748 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009744:	2200      	movs	r2, #0
 8009746:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009754:	2200      	movs	r2, #0
 8009756:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff ff9b 	bl	8009694 <I2C_TreatErrorCallback>
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	4613      	mov	r3, r2
 8009774:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009776:	e022      	b.n	80097be <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d01e      	beq.n	80097be <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009780:	f7fb fde4 	bl	800534c <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d302      	bcc.n	8009796 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d113      	bne.n	80097be <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979a:	f043 0220 	orr.w	r2, r3, #32
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e00f      	b.n	80097de <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4013      	ands	r3, r2
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	bf0c      	ite	eq
 80097ce:	2301      	moveq	r3, #1
 80097d0:	2300      	movne	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d0cd      	beq.n	8009778 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097f2:	e02c      	b.n	800984e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	68b9      	ldr	r1, [r7, #8]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f8eb 	bl	80099d4 <I2C_IsErrorOccurred>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e02a      	b.n	800985e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980e:	d01e      	beq.n	800984e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009810:	f7fb fd9c 	bl	800534c <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d113      	bne.n	800984e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982a:	f043 0220 	orr.w	r2, r3, #32
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e007      	b.n	800985e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b02      	cmp	r3, #2
 800985a:	d1cb      	bne.n	80097f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009872:	e028      	b.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f8ab 	bl	80099d4 <I2C_IsErrorOccurred>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e026      	b.n	80098d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009888:	f7fb fd60 	bl	800534c <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	429a      	cmp	r2, r3
 8009896:	d302      	bcc.n	800989e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d113      	bne.n	80098c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	f043 0220 	orr.w	r2, r3, #32
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2220      	movs	r2, #32
 80098ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e007      	b.n	80098d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d1cf      	bne.n	8009874 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098ec:	e064      	b.n	80099b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f86e 	bl	80099d4 <I2C_IsErrorOccurred>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e062      	b.n	80099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b20      	cmp	r3, #32
 800990e:	d138      	bne.n	8009982 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d105      	bne.n	800992a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	e04e      	b.n	80099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b10      	cmp	r3, #16
 8009936:	d107      	bne.n	8009948 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2210      	movs	r2, #16
 800993e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2204      	movs	r2, #4
 8009944:	645a      	str	r2, [r3, #68]	; 0x44
 8009946:	e002      	b.n	800994e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2220      	movs	r2, #32
 8009954:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6859      	ldr	r1, [r3, #4]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009962:	400b      	ands	r3, r1
 8009964:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e022      	b.n	80099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009982:	f7fb fce3 	bl	800534c <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	429a      	cmp	r2, r3
 8009990:	d302      	bcc.n	8009998 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10f      	bne.n	80099b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800999c:	f043 0220 	orr.w	r2, r3, #32
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e007      	b.n	80099c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d193      	bne.n	80098ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	fe00e800 	.word	0xfe00e800

080099d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f003 0310 	and.w	r3, r3, #16
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d075      	beq.n	8009aec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2210      	movs	r2, #16
 8009a06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a08:	e056      	b.n	8009ab8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d052      	beq.n	8009ab8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a12:	f7fb fc9b 	bl	800534c <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d302      	bcc.n	8009a28 <I2C_IsErrorOccurred+0x54>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d147      	bne.n	8009ab8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a4a:	d12e      	bne.n	8009aaa <I2C_IsErrorOccurred+0xd6>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a52:	d02a      	beq.n	8009aaa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009a54:	7cfb      	ldrb	r3, [r7, #19]
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d027      	beq.n	8009aaa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a68:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a6a:	f7fb fc6f 	bl	800534c <HAL_GetTick>
 8009a6e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a70:	e01b      	b.n	8009aaa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a72:	f7fb fc6b 	bl	800534c <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b19      	cmp	r3, #25
 8009a7e:	d914      	bls.n	8009aaa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a84:	f043 0220 	orr.w	r2, r3, #32
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	d1dc      	bne.n	8009a72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d003      	beq.n	8009ace <I2C_IsErrorOccurred+0xfa>
 8009ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d09d      	beq.n	8009a0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d103      	bne.n	8009ade <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2220      	movs	r2, #32
 8009adc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f043 0304 	orr.w	r3, r3, #4
 8009ae4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	f043 0308 	orr.w	r3, r3, #8
 8009b26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f043 0302 	orr.w	r3, r3, #2
 8009b48:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d01c      	beq.n	8009b9c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff fdbd 	bl	80096e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6859      	ldr	r1, [r3, #4]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <I2C_IsErrorOccurred+0x1d4>)
 8009b74:	400b      	ands	r3, r1
 8009b76:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3728      	adds	r7, #40	; 0x28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	fe00e800 	.word	0xfe00e800

08009bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	817b      	strh	r3, [r7, #10]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bbe:	897b      	ldrh	r3, [r7, #10]
 8009bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bc4:	7a7b      	ldrb	r3, [r7, #9]
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bcc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bda:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	0d5b      	lsrs	r3, r3, #21
 8009be6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009bea:	4b08      	ldr	r3, [pc, #32]	; (8009c0c <I2C_TransferConfig+0x60>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	43db      	mvns	r3, r3
 8009bf0:	ea02 0103 	and.w	r1, r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	03ff63ff 	.word	0x03ff63ff

08009c10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c20:	887b      	ldrh	r3, [r7, #2]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00f      	beq.n	8009c4a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c30:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c3e:	2b28      	cmp	r3, #40	; 0x28
 8009c40:	d003      	beq.n	8009c4a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c4a:	887b      	ldrh	r3, [r7, #2]
 8009c4c:	f003 0302 	and.w	r3, r3, #2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009c5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c68:	2b28      	cmp	r3, #40	; 0x28
 8009c6a:	d003      	beq.n	8009c74 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c72:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da03      	bge.n	8009c84 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009c82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009c84:	887b      	ldrh	r3, [r7, #2]
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	d103      	bne.n	8009c92 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009c90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009c92:	887b      	ldrh	r3, [r7, #2]
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d103      	bne.n	8009ca0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f043 0320 	orr.w	r3, r3, #32
 8009c9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009ca0:	887b      	ldrh	r3, [r7, #2]
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d103      	bne.n	8009cae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	43da      	mvns	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	400a      	ands	r2, r1
 8009cbe:	601a      	str	r2, [r3, #0]
}
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	d138      	bne.n	8009d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d101      	bne.n	8009cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cec:	2302      	movs	r3, #2
 8009cee:	e032      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2224      	movs	r2, #36	; 0x24
 8009cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0201 	bic.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6819      	ldr	r1, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d139      	bne.n	8009dec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e033      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2224      	movs	r2, #36	; 0x24
 8009d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0201 	bic.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009db4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	021b      	lsls	r3, r3, #8
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e000      	b.n	8009dee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dec:	2302      	movs	r3, #2
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfc:	b08f      	sub	sp, #60	; 0x3c
 8009dfe:	af0a      	add	r7, sp, #40	; 0x28
 8009e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e116      	b.n	800a03a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7fa fe44 	bl	8004ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f008 f939 	bl	80120c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	687e      	ldr	r6, [r7, #4]
 8009e58:	466d      	mov	r5, sp
 8009e5a:	f106 0410 	add.w	r4, r6, #16
 8009e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e6e:	1d33      	adds	r3, r6, #4
 8009e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e72:	6838      	ldr	r0, [r7, #0]
 8009e74:	f008 f804 	bl	8011e80 <USB_CoreInit>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e0d7      	b.n	800a03a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	4618      	mov	r0, r3
 8009e92:	f008 f927 	bl	80120e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
 8009e9a:	e04a      	b.n	8009f32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e9c:	7bfa      	ldrb	r2, [r7, #15]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	333d      	adds	r3, #61	; 0x3d
 8009eac:	2201      	movs	r2, #1
 8009eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	1a9b      	subs	r3, r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	333c      	adds	r3, #60	; 0x3c
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009ec4:	7bfa      	ldrb	r2, [r7, #15]
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	b298      	uxth	r0, r3
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3342      	adds	r3, #66	; 0x42
 8009ed8:	4602      	mov	r2, r0
 8009eda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	00db      	lsls	r3, r3, #3
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	333f      	adds	r3, #63	; 0x3f
 8009eec:	2200      	movs	r2, #0
 8009eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	3344      	adds	r3, #68	; 0x44
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	3348      	adds	r3, #72	; 0x48
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f18:	7bfa      	ldrb	r2, [r7, #15]
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	3350      	adds	r3, #80	; 0x50
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	73fb      	strb	r3, [r7, #15]
 8009f32:	7bfa      	ldrb	r2, [r7, #15]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d3af      	bcc.n	8009e9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e044      	b.n	8009fcc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f42:	7bfa      	ldrb	r2, [r7, #15]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f58:	7bfa      	ldrb	r2, [r7, #15]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	1a9b      	subs	r3, r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	440b      	add	r3, r1
 8009f66:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009f6a:	7bfa      	ldrb	r2, [r7, #15]
 8009f6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	1a9b      	subs	r3, r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009f80:	2200      	movs	r2, #0
 8009f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f9a:	7bfa      	ldrb	r2, [r7, #15]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fb0:	7bfa      	ldrb	r2, [r7, #15]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	73fb      	strb	r3, [r7, #15]
 8009fcc:	7bfa      	ldrb	r2, [r7, #15]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d3b5      	bcc.n	8009f42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	603b      	str	r3, [r7, #0]
 8009fdc:	687e      	ldr	r6, [r7, #4]
 8009fde:	466d      	mov	r5, sp
 8009fe0:	f106 0410 	add.w	r4, r6, #16
 8009fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ff0:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ff4:	1d33      	adds	r3, r6, #4
 8009ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ff8:	6838      	ldr	r0, [r7, #0]
 8009ffa:	f008 f8bf 	bl	801217c <USB_DevInit>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	e014      	b.n	800a03a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b01      	cmp	r3, #1
 800a026:	d102      	bne.n	800a02e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 f885 	bl	800b138 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4618      	mov	r0, r3
 800a034:	f009 f957 	bl	80132e6 <USB_DevDisconnect>

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a042 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_PCD_Start+0x1c>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e020      	b.n	800a0a0 <HAL_PCD_Start+0x5e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d109      	bne.n	800a082 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a072:	2b01      	cmp	r3, #1
 800a074:	d005      	beq.n	800a082 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f008 f80a 	bl	80120a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4618      	mov	r0, r3
 800a092:	f009 f907 	bl	80132a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a0a8:	b590      	push	{r4, r7, lr}
 800a0aa:	b08d      	sub	sp, #52	; 0x34
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f009 f9c5 	bl	801344e <USB_GetMode>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f040 83be 	bne.w	800a848 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f009 f929 	bl	8013328 <USB_ReadInterrupts>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 83b4 	beq.w	800a846 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f009 f920 	bl	8013328 <USB_ReadInterrupts>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d107      	bne.n	800a102 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	695a      	ldr	r2, [r3, #20]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f002 0202 	and.w	r2, r2, #2
 800a100:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f009 f90e 	bl	8013328 <USB_ReadInterrupts>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f003 0310 	and.w	r3, r3, #16
 800a112:	2b10      	cmp	r3, #16
 800a114:	d161      	bne.n	800a1da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699a      	ldr	r2, [r3, #24]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0210 	bic.w	r2, r2, #16
 800a124:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f003 020f 	and.w	r2, r3, #15
 800a132:	4613      	mov	r3, r2
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	3304      	adds	r3, #4
 800a144:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	0c5b      	lsrs	r3, r3, #17
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d124      	bne.n	800a19c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a158:	4013      	ands	r3, r2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d035      	beq.n	800a1ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	091b      	lsrs	r3, r3, #4
 800a166:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	6a38      	ldr	r0, [r7, #32]
 800a172:	f008 ff45 	bl	8013000 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	091b      	lsrs	r3, r3, #4
 800a17e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a182:	441a      	add	r2, r3
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	699a      	ldr	r2, [r3, #24]
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a194:	441a      	add	r2, r3
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	619a      	str	r2, [r3, #24]
 800a19a:	e016      	b.n	800a1ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	0c5b      	lsrs	r3, r3, #17
 800a1a0:	f003 030f 	and.w	r3, r3, #15
 800a1a4:	2b06      	cmp	r3, #6
 800a1a6:	d110      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6a38      	ldr	r0, [r7, #32]
 800a1b4:	f008 ff24 	bl	8013000 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	699a      	ldr	r2, [r3, #24]
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	091b      	lsrs	r3, r3, #4
 800a1c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1c4:	441a      	add	r2, r3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f042 0210 	orr.w	r2, r2, #16
 800a1d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f009 f8a2 	bl	8013328 <USB_ReadInterrupts>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1ee:	d16e      	bne.n	800a2ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f009 f8a8 	bl	801334e <USB_ReadDevAllOutEpInterrupt>
 800a1fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a200:	e062      	b.n	800a2c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d057      	beq.n	800a2bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f009 f8cd 	bl	80133b6 <USB_ReadDevOutEPInterrupt>
 800a21c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00c      	beq.n	800a242 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a234:	461a      	mov	r2, r3
 800a236:	2301      	movs	r3, #1
 800a238:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a23a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fdd1 	bl	800ade4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00c      	beq.n	800a266 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	015a      	lsls	r2, r3, #5
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	4413      	add	r3, r2
 800a254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a258:	461a      	mov	r2, r3
 800a25a:	2308      	movs	r3, #8
 800a25c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a25e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fecb 	bl	800affc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27c:	461a      	mov	r2, r3
 800a27e:	2310      	movs	r3, #16
 800a280:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f003 0320 	and.w	r3, r3, #32
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d008      	beq.n	800a29e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a298:	461a      	mov	r2, r3
 800a29a:	2320      	movs	r3, #32
 800a29c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d009      	beq.n	800a2bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	3301      	adds	r3, #1
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d199      	bne.n	800a202 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f009 f828 	bl	8013328 <USB_ReadInterrupts>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2e2:	f040 80c4 	bne.w	800a46e <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f009 f849 	bl	8013382 <USB_ReadDevAllInEpInterrupt>
 800a2f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a2f6:	e0b6      	b.n	800a466 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80ab 	beq.w	800a45a <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f009 f86f 	bl	80133f2 <USB_ReadDevInEPInterrupt>
 800a314:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d057      	beq.n	800a3d0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	f003 030f 	and.w	r3, r3, #15
 800a326:	2201      	movs	r2, #1
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	43db      	mvns	r3, r3
 800a33a:	69f9      	ldr	r1, [r7, #28]
 800a33c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a340:	4013      	ands	r3, r2
 800a342:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a350:	461a      	mov	r2, r3
 800a352:	2301      	movs	r3, #1
 800a354:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d132      	bne.n	800a3c4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a362:	4613      	mov	r3, r2
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	1a9b      	subs	r3, r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	440b      	add	r3, r1
 800a36c:	3348      	adds	r3, #72	; 0x48
 800a36e:	6819      	ldr	r1, [r3, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a374:	4613      	mov	r3, r2
 800a376:	00db      	lsls	r3, r3, #3
 800a378:	1a9b      	subs	r3, r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4403      	add	r3, r0
 800a37e:	3344      	adds	r3, #68	; 0x44
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4419      	add	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a388:	4613      	mov	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	1a9b      	subs	r3, r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4403      	add	r3, r0
 800a392:	3348      	adds	r3, #72	; 0x48
 800a394:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d113      	bne.n	800a3c4 <HAL_PCD_IRQHandler+0x31c>
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	1a9b      	subs	r3, r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	3350      	adds	r3, #80	; 0x50
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a3bc:	461a      	mov	r2, r3
 800a3be:	2101      	movs	r1, #1
 800a3c0:	f009 f878 	bl	80134b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7fa fc19 	bl	8004c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f003 0308 	and.w	r3, r3, #8
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d008      	beq.n	800a3ec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a402:	461a      	mov	r2, r3
 800a404:	2310      	movs	r3, #16
 800a406:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	015a      	lsls	r2, r3, #5
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41e:	461a      	mov	r2, r3
 800a420:	2340      	movs	r3, #64	; 0x40
 800a422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00c      	beq.n	800a448 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a42e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a430:	6a38      	ldr	r0, [r7, #32]
 800a432:	f008 f801 	bl	8012438 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a442:	461a      	mov	r2, r3
 800a444:	2302      	movs	r3, #2
 800a446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fc38 	bl	800acca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	3301      	adds	r3, #1
 800a45e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	085b      	lsrs	r3, r3, #1
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f47f af45 	bne.w	800a2f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f008 ff58 	bl	8013328 <USB_ReadInterrupts>
 800a478:	4603      	mov	r3, r0
 800a47a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a47e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a482:	d122      	bne.n	800a4ca <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	69fa      	ldr	r2, [r7, #28]
 800a48e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d108      	bne.n	800a4b4 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fe67 	bl	800b180 <HAL_PCDEx_LPM_Callback>
 800a4b2:	e002      	b.n	800a4ba <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fa fc1b 	bl	8004cf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	695a      	ldr	r2, [r3, #20]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a4c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f008 ff2a 	bl	8013328 <USB_ReadInterrupts>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4de:	d112      	bne.n	800a506 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d102      	bne.n	800a4f6 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7fa fbd7 	bl	8004ca4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a504:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f008 ff0c 	bl	8013328 <USB_ReadInterrupts>
 800a510:	4603      	mov	r3, r0
 800a512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a51a:	d121      	bne.n	800a560 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695a      	ldr	r2, [r3, #20]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a52a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d111      	bne.n	800a55a <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a544:	089b      	lsrs	r3, r3, #2
 800a546:	f003 020f 	and.w	r2, r3, #15
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a550:	2101      	movs	r1, #1
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fe14 	bl	800b180 <HAL_PCDEx_LPM_Callback>
 800a558:	e002      	b.n	800a560 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fa fba2 	bl	8004ca4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f008 fedf 	bl	8013328 <USB_ReadInterrupts>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a574:	f040 80b7 	bne.w	800a6e6 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	69fa      	ldr	r2, [r7, #28]
 800a582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a586:	f023 0301 	bic.w	r3, r3, #1
 800a58a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2110      	movs	r1, #16
 800a592:	4618      	mov	r0, r3
 800a594:	f007 ff50 	bl	8012438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a59c:	e046      	b.n	800a62c <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	015a      	lsls	r2, r3, #5
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	69fa      	ldr	r2, [r7, #28]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f6:	0151      	lsls	r1, r2, #5
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	440a      	add	r2, r1
 800a5fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a604:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a616:	0151      	lsls	r1, r2, #5
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	440a      	add	r2, r1
 800a61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a624:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	3301      	adds	r3, #1
 800a62a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d3b3      	bcc.n	800a59e <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a644:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a648:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d016      	beq.n	800a680 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a662:	f043 030b 	orr.w	r3, r3, #11
 800a666:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a678:	f043 030b 	orr.w	r3, r3, #11
 800a67c:	6453      	str	r3, [r2, #68]	; 0x44
 800a67e:	e015      	b.n	800a6ac <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	695a      	ldr	r2, [r3, #20]
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68e:	4619      	mov	r1, r3
 800a690:	f242 032b 	movw	r3, #8235	; 0x202b
 800a694:	4313      	orrs	r3, r2
 800a696:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6a6:	f043 030b 	orr.w	r3, r3, #11
 800a6aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69fa      	ldr	r2, [r7, #28]
 800a6b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a6be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6818      	ldr	r0, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f008 feef 	bl	80134b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695a      	ldr	r2, [r3, #20]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a6e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f008 fe1c 	bl	8013328 <USB_ReadInterrupts>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fa:	d124      	bne.n	800a746 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4618      	mov	r0, r3
 800a702:	f008 feb3 	bl	801346c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f007 ff0d 	bl	801252a <USB_GetDevSpeed>
 800a710:	4603      	mov	r3, r0
 800a712:	461a      	mov	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681c      	ldr	r4, [r3, #0]
 800a71c:	f001 fce4 	bl	800c0e8 <HAL_RCC_GetHCLKFreq>
 800a720:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	4620      	mov	r0, r4
 800a72c:	f007 fc16 	bl	8011f5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7fa fa8e 	bl	8004c52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	695a      	ldr	r2, [r3, #20]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a744:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f008 fdec 	bl	8013328 <USB_ReadInterrupts>
 800a750:	4603      	mov	r3, r0
 800a752:	f003 0308 	and.w	r3, r3, #8
 800a756:	2b08      	cmp	r3, #8
 800a758:	d10a      	bne.n	800a770 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fa fa6b 	bl	8004c36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695a      	ldr	r2, [r3, #20]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f002 0208 	and.w	r2, r2, #8
 800a76e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4618      	mov	r0, r3
 800a776:	f008 fdd7 	bl	8013328 <USB_ReadInterrupts>
 800a77a:	4603      	mov	r3, r0
 800a77c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a784:	d10f      	bne.n	800a7a6 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7fa facd 	bl	8004d30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	695a      	ldr	r2, [r3, #20]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a7a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f008 fdbc 	bl	8013328 <USB_ReadInterrupts>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ba:	d10f      	bne.n	800a7dc <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7fa faa0 	bl	8004d0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695a      	ldr	r2, [r3, #20]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a7da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f008 fda1 	bl	8013328 <USB_ReadInterrupts>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f0:	d10a      	bne.n	800a808 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7fa faae 	bl	8004d54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	695a      	ldr	r2, [r3, #20]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f008 fd8b 	bl	8013328 <USB_ReadInterrupts>
 800a812:	4603      	mov	r3, r0
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d115      	bne.n	800a848 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7fa fa9e 	bl	8004d70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6859      	ldr	r1, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	430a      	orrs	r2, r1
 800a842:	605a      	str	r2, [r3, #4]
 800a844:	e000      	b.n	800a848 <HAL_PCD_IRQHandler+0x7a0>
      return;
 800a846:	bf00      	nop
    }
  }
}
 800a848:	3734      	adds	r7, #52	; 0x34
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd90      	pop	{r4, r7, pc}

0800a84e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b082      	sub	sp, #8
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_PCD_SetAddress+0x1a>
 800a864:	2302      	movs	r3, #2
 800a866:	e013      	b.n	800a890 <HAL_PCD_SetAddress+0x42>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	78fa      	ldrb	r2, [r7, #3]
 800a874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	4611      	mov	r1, r2
 800a880:	4618      	mov	r0, r3
 800a882:	f008 fce9 	bl	8013258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	70fb      	strb	r3, [r7, #3]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	803b      	strh	r3, [r7, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a8b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da0f      	bge.n	800a8de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	f003 020f 	and.w	r2, r3, #15
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	1a9b      	subs	r3, r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	3338      	adds	r3, #56	; 0x38
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	705a      	strb	r2, [r3, #1]
 800a8dc:	e00f      	b.n	800a8fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a8de:	78fb      	ldrb	r3, [r7, #3]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	1a9b      	subs	r3, r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	b2da      	uxtb	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a90a:	883a      	ldrh	r2, [r7, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	78ba      	ldrb	r2, [r7, #2]
 800a914:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d004      	beq.n	800a928 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b29a      	uxth	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a928:	78bb      	ldrb	r3, [r7, #2]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d102      	bne.n	800a934 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <HAL_PCD_EP_Open+0xaa>
 800a93e:	2302      	movs	r3, #2
 800a940:	e00e      	b.n	800a960 <HAL_PCD_EP_Open+0xc8>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	4618      	mov	r0, r3
 800a952:	f007 fe0f 	bl	8012574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a95e:	7afb      	ldrb	r3, [r7, #11]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	da0f      	bge.n	800a99c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	f003 020f 	and.w	r2, r3, #15
 800a982:	4613      	mov	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	3338      	adds	r3, #56	; 0x38
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	4413      	add	r3, r2
 800a990:	3304      	adds	r3, #4
 800a992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	705a      	strb	r2, [r3, #1]
 800a99a:	e00f      	b.n	800a9bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a99c:	78fb      	ldrb	r3, [r7, #3]
 800a99e:	f003 020f 	and.w	r2, r3, #15
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	f003 030f 	and.w	r3, r3, #15
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_PCD_EP_Close+0x6e>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e00e      	b.n	800a9f4 <HAL_PCD_EP_Close+0x8c>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68f9      	ldr	r1, [r7, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f007 fe4d 	bl	8012684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aa0c:	7afb      	ldrb	r3, [r7, #11]
 800aa0e:	f003 020f 	and.w	r2, r3, #15
 800aa12:	4613      	mov	r3, r2
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	3304      	adds	r3, #4
 800aa24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2200      	movs	r2, #0
 800aa36:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa3e:	7afb      	ldrb	r3, [r7, #11]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d102      	bne.n	800aa58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aa58:	7afb      	ldrb	r3, [r7, #11]
 800aa5a:	f003 030f 	and.w	r3, r3, #15
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6979      	ldr	r1, [r7, #20]
 800aa70:	f008 f930 	bl	8012cd4 <USB_EP0StartXfer>
 800aa74:	e008      	b.n	800aa88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	6979      	ldr	r1, [r7, #20]
 800aa84:	f007 feda 	bl	801283c <USB_EPStartXfer>
  }

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	f003 020f 	and.w	r2, r3, #15
 800aaa4:	6879      	ldr	r1, [r7, #4]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	440b      	add	r3, r1
 800aab0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aab4:	681b      	ldr	r3, [r3, #0]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b086      	sub	sp, #24
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
 800aace:	460b      	mov	r3, r1
 800aad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aad2:	7afb      	ldrb	r3, [r7, #11]
 800aad4:	f003 020f 	and.w	r2, r3, #15
 800aad8:	4613      	mov	r3, r2
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	3338      	adds	r3, #56	; 0x38
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	3304      	adds	r3, #4
 800aae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2201      	movs	r2, #1
 800ab00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	f003 030f 	and.w	r3, r3, #15
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d102      	bne.n	800ab1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	f003 030f 	and.w	r3, r3, #15
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d109      	bne.n	800ab3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	461a      	mov	r2, r3
 800ab32:	6979      	ldr	r1, [r7, #20]
 800ab34:	f008 f8ce 	bl	8012cd4 <USB_EP0StartXfer>
 800ab38:	e008      	b.n	800ab4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6818      	ldr	r0, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	461a      	mov	r2, r3
 800ab46:	6979      	ldr	r1, [r7, #20]
 800ab48:	f007 fe78 	bl	801283c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	f003 020f 	and.w	r2, r3, #15
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d901      	bls.n	800ab74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e050      	b.n	800ac16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ab74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da0f      	bge.n	800ab9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	f003 020f 	and.w	r2, r3, #15
 800ab82:	4613      	mov	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	1a9b      	subs	r3, r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	3338      	adds	r3, #56	; 0x38
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	4413      	add	r3, r2
 800ab90:	3304      	adds	r3, #4
 800ab92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	705a      	strb	r2, [r3, #1]
 800ab9a:	e00d      	b.n	800abb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ab9c:	78fa      	ldrb	r2, [r7, #3]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	00db      	lsls	r3, r3, #3
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	3304      	adds	r3, #4
 800abb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	f003 030f 	and.w	r3, r3, #15
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_PCD_EP_SetStall+0x82>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e01e      	b.n	800ac16 <HAL_PCD_EP_SetStall+0xc0>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f008 fa62 	bl	80130b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10a      	bne.n	800ac0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	b2d9      	uxtb	r1, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac06:	461a      	mov	r2, r3
 800ac08:	f008 fc54 	bl	80134b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	f003 020f 	and.w	r2, r3, #15
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d901      	bls.n	800ac3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e042      	b.n	800acc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ac3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	da0f      	bge.n	800ac64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	f003 020f 	and.w	r2, r3, #15
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	1a9b      	subs	r3, r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	3338      	adds	r3, #56	; 0x38
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	4413      	add	r3, r2
 800ac58:	3304      	adds	r3, #4
 800ac5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	705a      	strb	r2, [r3, #1]
 800ac62:	e00f      	b.n	800ac84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	f003 020f 	and.w	r2, r3, #15
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d101      	bne.n	800aca4 <HAL_PCD_EP_ClrStall+0x86>
 800aca0:	2302      	movs	r3, #2
 800aca2:	e00e      	b.n	800acc2 <HAL_PCD_EP_ClrStall+0xa4>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68f9      	ldr	r1, [r7, #12]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f008 fa6a 	bl	801318c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b08a      	sub	sp, #40	; 0x28
 800acce:	af02      	add	r7, sp, #8
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4613      	mov	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	3338      	adds	r3, #56	; 0x38
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	3304      	adds	r3, #4
 800acf0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d901      	bls.n	800ad02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e06c      	b.n	800addc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	695a      	ldr	r2, [r3, #20]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d902      	bls.n	800ad1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3303      	adds	r3, #3
 800ad22:	089b      	lsrs	r3, r3, #2
 800ad24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad26:	e02b      	b.n	800ad80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	695a      	ldr	r2, [r3, #20]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d902      	bls.n	800ad44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	3303      	adds	r3, #3
 800ad48:	089b      	lsrs	r3, r3, #2
 800ad4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	68d9      	ldr	r1, [r3, #12]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	4603      	mov	r3, r0
 800ad62:	6978      	ldr	r0, [r7, #20]
 800ad64:	f008 f90e 	bl	8012f84 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	441a      	add	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	699a      	ldr	r2, [r3, #24]
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	441a      	add	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d809      	bhi.n	800adaa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d203      	bcs.n	800adaa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1be      	bne.n	800ad28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	695a      	ldr	r2, [r3, #20]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d811      	bhi.n	800adda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	2201      	movs	r2, #1
 800adbe:	fa02 f303 	lsl.w	r3, r2, r3
 800adc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	43db      	mvns	r3, r3
 800add0:	6939      	ldr	r1, [r7, #16]
 800add2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800add6:	4013      	ands	r3, r2
 800add8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3720      	adds	r7, #32
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	333c      	adds	r3, #60	; 0x3c
 800adfc:	3304      	adds	r3, #4
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	f040 80a0 	bne.w	800af5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d015      	beq.n	800ae52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4a72      	ldr	r2, [pc, #456]	; (800aff4 <PCD_EP_OutXfrComplete_int+0x210>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	f240 80dd 	bls.w	800afea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 80d7 	beq.w	800afea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	461a      	mov	r2, r3
 800ae4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae4e:	6093      	str	r3, [r2, #8]
 800ae50:	e0cb      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2320      	movs	r3, #32
 800ae6c:	6093      	str	r3, [r2, #8]
 800ae6e:	e0bc      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f040 80b7 	bne.w	800afea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4a5d      	ldr	r2, [pc, #372]	; (800aff4 <PCD_EP_OutXfrComplete_int+0x210>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d90f      	bls.n	800aea4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea0:	6093      	str	r3, [r2, #8]
 800aea2:	e0a2      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aeb6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	0159      	lsls	r1, r3, #5
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800aeca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	1a9b      	subs	r3, r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4403      	add	r3, r0
 800aeda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aede:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aee0:	6879      	ldr	r1, [r7, #4]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	4613      	mov	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	1a9b      	subs	r3, r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4403      	add	r3, r0
 800af02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4419      	add	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	4613      	mov	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4403      	add	r3, r0
 800af18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800af1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d114      	bne.n	800af4e <PCD_EP_OutXfrComplete_int+0x16a>
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	4613      	mov	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	1a9b      	subs	r3, r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	440b      	add	r3, r1
 800af32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d108      	bne.n	800af4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800af46:	461a      	mov	r2, r3
 800af48:	2101      	movs	r1, #1
 800af4a:	f008 fab3 	bl	80134b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	b2db      	uxtb	r3, r3
 800af52:	4619      	mov	r1, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7f9 fe39 	bl	8004bcc <HAL_PCD_DataOutStageCallback>
 800af5a:	e046      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4a26      	ldr	r2, [pc, #152]	; (800aff8 <PCD_EP_OutXfrComplete_int+0x214>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d124      	bne.n	800afae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7a:	461a      	mov	r2, r3
 800af7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af80:	6093      	str	r3, [r2, #8]
 800af82:	e032      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d008      	beq.n	800afa0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9a:	461a      	mov	r2, r3
 800af9c:	2320      	movs	r3, #32
 800af9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7f9 fe10 	bl	8004bcc <HAL_PCD_DataOutStageCallback>
 800afac:	e01d      	b.n	800afea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d114      	bne.n	800afde <PCD_EP_OutXfrComplete_int+0x1fa>
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	4613      	mov	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	1a9b      	subs	r3, r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d108      	bne.n	800afde <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afd6:	461a      	mov	r2, r3
 800afd8:	2100      	movs	r1, #0
 800afda:	f008 fa6b 	bl	80134b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f9 fdf1 	bl	8004bcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	4f54300a 	.word	0x4f54300a
 800aff8:	4f54310a 	.word	0x4f54310a

0800affc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	333c      	adds	r3, #60	; 0x3c
 800b014:	3304      	adds	r3, #4
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	4a15      	ldr	r2, [pc, #84]	; (800b084 <PCD_EP_OutSetupPacket_int+0x88>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d90e      	bls.n	800b050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b048:	461a      	mov	r2, r3
 800b04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b04e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7f9 fda9 	bl	8004ba8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <PCD_EP_OutSetupPacket_int+0x88>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d90c      	bls.n	800b078 <PCD_EP_OutSetupPacket_int+0x7c>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d108      	bne.n	800b078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b070:	461a      	mov	r2, r3
 800b072:	2101      	movs	r1, #1
 800b074:	f008 fa1e 	bl	80134b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	4f54300a 	.word	0x4f54300a

0800b088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	70fb      	strb	r3, [r7, #3]
 800b094:	4613      	mov	r3, r2
 800b096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b0a6:	883b      	ldrh	r3, [r7, #0]
 800b0a8:	0419      	lsls	r1, r3, #16
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	629a      	str	r2, [r3, #40]	; 0x28
 800b0b4:	e028      	b.n	800b108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
 800b0c8:	e00d      	b.n	800b0e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	3340      	adds	r3, #64	; 0x40
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	4413      	add	r3, r2
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	0c1b      	lsrs	r3, r3, #16
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	4413      	add	r3, r2
 800b0de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	73fb      	strb	r3, [r7, #15]
 800b0e6:	7bfa      	ldrb	r2, [r7, #15]
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d3ec      	bcc.n	800b0ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b0f0:	883b      	ldrh	r3, [r7, #0]
 800b0f2:	0418      	lsls	r0, r3, #16
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6819      	ldr	r1, [r3, #0]
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4302      	orrs	r2, r0
 800b100:	3340      	adds	r3, #64	; 0x40
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	440b      	add	r3, r1
 800b106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	887a      	ldrh	r2, [r7, #2]
 800b128:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <HAL_PCDEx_ActivateLPM+0x44>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	10000003 	.word	0x10000003

0800b180 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b1a0:	4b19      	ldr	r3, [pc, #100]	; (800b208 <HAL_PWREx_ConfigSupply+0x70>)
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d00a      	beq.n	800b1c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b1ac:	4b16      	ldr	r3, [pc, #88]	; (800b208 <HAL_PWREx_ConfigSupply+0x70>)
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d001      	beq.n	800b1be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e01f      	b.n	800b1fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e01d      	b.n	800b1fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b1c2:	4b11      	ldr	r3, [pc, #68]	; (800b208 <HAL_PWREx_ConfigSupply+0x70>)
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	f023 0207 	bic.w	r2, r3, #7
 800b1ca:	490f      	ldr	r1, [pc, #60]	; (800b208 <HAL_PWREx_ConfigSupply+0x70>)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b1d2:	f7fa f8bb 	bl	800534c <HAL_GetTick>
 800b1d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b1d8:	e009      	b.n	800b1ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b1da:	f7fa f8b7 	bl	800534c <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1e8:	d901      	bls.n	800b1ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e007      	b.n	800b1fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b1ee:	4b06      	ldr	r3, [pc, #24]	; (800b208 <HAL_PWREx_ConfigSupply+0x70>)
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fa:	d1ee      	bne.n	800b1da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	58024800 	.word	0x58024800

0800b20c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	4a04      	ldr	r2, [pc, #16]	; (800b228 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b21a:	60d3      	str	r3, [r2, #12]
}
 800b21c:	bf00      	nop
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop
 800b228:	58024800 	.word	0x58024800

0800b22c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08c      	sub	sp, #48	; 0x30
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d102      	bne.n	800b240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f000 bc1d 	b.w	800ba7a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 8087 	beq.w	800b35c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b24e:	4b99      	ldr	r3, [pc, #612]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b256:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b258:	4b96      	ldr	r3, [pc, #600]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b25c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	2b10      	cmp	r3, #16
 800b262:	d007      	beq.n	800b274 <HAL_RCC_OscConfig+0x48>
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	2b18      	cmp	r3, #24
 800b268:	d110      	bne.n	800b28c <HAL_RCC_OscConfig+0x60>
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	f003 0303 	and.w	r3, r3, #3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d10b      	bne.n	800b28c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b274:	4b8f      	ldr	r3, [pc, #572]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d06c      	beq.n	800b35a <HAL_RCC_OscConfig+0x12e>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d168      	bne.n	800b35a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e3f6      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b294:	d106      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x78>
 800b296:	4b87      	ldr	r3, [pc, #540]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a86      	ldr	r2, [pc, #536]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b29c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2a0:	6013      	str	r3, [r2, #0]
 800b2a2:	e02e      	b.n	800b302 <HAL_RCC_OscConfig+0xd6>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x9a>
 800b2ac:	4b81      	ldr	r3, [pc, #516]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a80      	ldr	r2, [pc, #512]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	4b7e      	ldr	r3, [pc, #504]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a7d      	ldr	r2, [pc, #500]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	e01d      	b.n	800b302 <HAL_RCC_OscConfig+0xd6>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2ce:	d10c      	bne.n	800b2ea <HAL_RCC_OscConfig+0xbe>
 800b2d0:	4b78      	ldr	r3, [pc, #480]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a77      	ldr	r2, [pc, #476]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	4b75      	ldr	r3, [pc, #468]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a74      	ldr	r2, [pc, #464]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2e6:	6013      	str	r3, [r2, #0]
 800b2e8:	e00b      	b.n	800b302 <HAL_RCC_OscConfig+0xd6>
 800b2ea:	4b72      	ldr	r3, [pc, #456]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a71      	ldr	r2, [pc, #452]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2f4:	6013      	str	r3, [r2, #0]
 800b2f6:	4b6f      	ldr	r3, [pc, #444]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a6e      	ldr	r2, [pc, #440]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b2fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b300:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d013      	beq.n	800b332 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b30a:	f7fa f81f 	bl	800534c <HAL_GetTick>
 800b30e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b310:	e008      	b.n	800b324 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b312:	f7fa f81b 	bl	800534c <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b64      	cmp	r3, #100	; 0x64
 800b31e:	d901      	bls.n	800b324 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e3aa      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b324:	4b63      	ldr	r3, [pc, #396]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0f0      	beq.n	800b312 <HAL_RCC_OscConfig+0xe6>
 800b330:	e014      	b.n	800b35c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b332:	f7fa f80b 	bl	800534c <HAL_GetTick>
 800b336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b338:	e008      	b.n	800b34c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b33a:	f7fa f807 	bl	800534c <HAL_GetTick>
 800b33e:	4602      	mov	r2, r0
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	2b64      	cmp	r3, #100	; 0x64
 800b346:	d901      	bls.n	800b34c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	e396      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b34c:	4b59      	ldr	r3, [pc, #356]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1f0      	bne.n	800b33a <HAL_RCC_OscConfig+0x10e>
 800b358:	e000      	b.n	800b35c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b35a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0302 	and.w	r3, r3, #2
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80cb 	beq.w	800b500 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b36a:	4b52      	ldr	r3, [pc, #328]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b372:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b374:	4b4f      	ldr	r3, [pc, #316]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b378:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d007      	beq.n	800b390 <HAL_RCC_OscConfig+0x164>
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	2b18      	cmp	r3, #24
 800b384:	d156      	bne.n	800b434 <HAL_RCC_OscConfig+0x208>
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	f003 0303 	and.w	r3, r3, #3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d151      	bne.n	800b434 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b390:	4b48      	ldr	r3, [pc, #288]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d005      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x17c>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e368      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b3a8:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f023 0219 	bic.w	r2, r3, #25
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	493f      	ldr	r1, [pc, #252]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3ba:	f7f9 ffc7 	bl	800534c <HAL_GetTick>
 800b3be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3c0:	e008      	b.n	800b3d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b3c2:	f7f9 ffc3 	bl	800534c <HAL_GetTick>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d901      	bls.n	800b3d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e352      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3d4:	4b37      	ldr	r3, [pc, #220]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d0f0      	beq.n	800b3c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3e0:	f7f9 ffe4 	bl	80053ac <HAL_GetREVID>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f241 0203 	movw	r2, #4099	; 0x1003
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d817      	bhi.n	800b41e <HAL_RCC_OscConfig+0x1f2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	2b40      	cmp	r3, #64	; 0x40
 800b3f4:	d108      	bne.n	800b408 <HAL_RCC_OscConfig+0x1dc>
 800b3f6:	4b2f      	ldr	r3, [pc, #188]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b3fe:	4a2d      	ldr	r2, [pc, #180]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b404:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b406:	e07b      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b408:	4b2a      	ldr	r3, [pc, #168]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	031b      	lsls	r3, r3, #12
 800b416:	4927      	ldr	r1, [pc, #156]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b41c:	e070      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b41e:	4b25      	ldr	r3, [pc, #148]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	061b      	lsls	r3, r3, #24
 800b42c:	4921      	ldr	r1, [pc, #132]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b432:	e065      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d048      	beq.n	800b4ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b43c:	4b1d      	ldr	r3, [pc, #116]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f023 0219 	bic.w	r2, r3, #25
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	491a      	ldr	r1, [pc, #104]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44e:	f7f9 ff7d 	bl	800534c <HAL_GetTick>
 800b452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b454:	e008      	b.n	800b468 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b456:	f7f9 ff79 	bl	800534c <HAL_GetTick>
 800b45a:	4602      	mov	r2, r0
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	2b02      	cmp	r3, #2
 800b462:	d901      	bls.n	800b468 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e308      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b468:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0f0      	beq.n	800b456 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b474:	f7f9 ff9a 	bl	80053ac <HAL_GetREVID>
 800b478:	4603      	mov	r3, r0
 800b47a:	f241 0203 	movw	r2, #4099	; 0x1003
 800b47e:	4293      	cmp	r3, r2
 800b480:	d81a      	bhi.n	800b4b8 <HAL_RCC_OscConfig+0x28c>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	2b40      	cmp	r3, #64	; 0x40
 800b488:	d108      	bne.n	800b49c <HAL_RCC_OscConfig+0x270>
 800b48a:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b492:	4a08      	ldr	r2, [pc, #32]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b498:	6053      	str	r3, [r2, #4]
 800b49a:	e031      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	031b      	lsls	r3, r3, #12
 800b4aa:	4902      	ldr	r1, [pc, #8]	; (800b4b4 <HAL_RCC_OscConfig+0x288>)
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	604b      	str	r3, [r1, #4]
 800b4b0:	e026      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	4b9a      	ldr	r3, [pc, #616]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	061b      	lsls	r3, r3, #24
 800b4c6:	4997      	ldr	r1, [pc, #604]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	604b      	str	r3, [r1, #4]
 800b4cc:	e018      	b.n	800b500 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4ce:	4b95      	ldr	r3, [pc, #596]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a94      	ldr	r2, [pc, #592]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b4d4:	f023 0301 	bic.w	r3, r3, #1
 800b4d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4da:	f7f9 ff37 	bl	800534c <HAL_GetTick>
 800b4de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b4e0:	e008      	b.n	800b4f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4e2:	f7f9 ff33 	bl	800534c <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d901      	bls.n	800b4f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e2c2      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b4f4:	4b8b      	ldr	r3, [pc, #556]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1f0      	bne.n	800b4e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 80a9 	beq.w	800b660 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b50e:	4b85      	ldr	r3, [pc, #532]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b516:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b518:	4b82      	ldr	r3, [pc, #520]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b08      	cmp	r3, #8
 800b522:	d007      	beq.n	800b534 <HAL_RCC_OscConfig+0x308>
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b18      	cmp	r3, #24
 800b528:	d13a      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x374>
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	2b01      	cmp	r3, #1
 800b532:	d135      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b534:	4b7b      	ldr	r3, [pc, #492]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <HAL_RCC_OscConfig+0x320>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	2b80      	cmp	r3, #128	; 0x80
 800b546:	d001      	beq.n	800b54c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e296      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b54c:	f7f9 ff2e 	bl	80053ac <HAL_GetREVID>
 800b550:	4603      	mov	r3, r0
 800b552:	f241 0203 	movw	r2, #4099	; 0x1003
 800b556:	4293      	cmp	r3, r2
 800b558:	d817      	bhi.n	800b58a <HAL_RCC_OscConfig+0x35e>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	2b20      	cmp	r3, #32
 800b560:	d108      	bne.n	800b574 <HAL_RCC_OscConfig+0x348>
 800b562:	4b70      	ldr	r3, [pc, #448]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b56a:	4a6e      	ldr	r2, [pc, #440]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b56c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b570:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b572:	e075      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b574:	4b6b      	ldr	r3, [pc, #428]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	069b      	lsls	r3, r3, #26
 800b582:	4968      	ldr	r1, [pc, #416]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b584:	4313      	orrs	r3, r2
 800b586:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b588:	e06a      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b58a:	4b66      	ldr	r3, [pc, #408]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	061b      	lsls	r3, r3, #24
 800b598:	4962      	ldr	r1, [pc, #392]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b59e:	e05f      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d042      	beq.n	800b62e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b5a8:	4b5e      	ldr	r3, [pc, #376]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a5d      	ldr	r2, [pc, #372]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b4:	f7f9 feca 	bl	800534c <HAL_GetTick>
 800b5b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5ba:	e008      	b.n	800b5ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b5bc:	f7f9 fec6 	bl	800534c <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e255      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5ce:	4b55      	ldr	r3, [pc, #340]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0f0      	beq.n	800b5bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5da:	f7f9 fee7 	bl	80053ac <HAL_GetREVID>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d817      	bhi.n	800b618 <HAL_RCC_OscConfig+0x3ec>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	d108      	bne.n	800b602 <HAL_RCC_OscConfig+0x3d6>
 800b5f0:	4b4c      	ldr	r3, [pc, #304]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b5f8:	4a4a      	ldr	r2, [pc, #296]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b5fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5fe:	6053      	str	r3, [r2, #4]
 800b600:	e02e      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
 800b602:	4b48      	ldr	r3, [pc, #288]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	069b      	lsls	r3, r3, #26
 800b610:	4944      	ldr	r1, [pc, #272]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b612:	4313      	orrs	r3, r2
 800b614:	604b      	str	r3, [r1, #4]
 800b616:	e023      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
 800b618:	4b42      	ldr	r3, [pc, #264]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	061b      	lsls	r3, r3, #24
 800b626:	493f      	ldr	r1, [pc, #252]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	60cb      	str	r3, [r1, #12]
 800b62c:	e018      	b.n	800b660 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b62e:	4b3d      	ldr	r3, [pc, #244]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a3c      	ldr	r2, [pc, #240]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b63a:	f7f9 fe87 	bl	800534c <HAL_GetTick>
 800b63e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b640:	e008      	b.n	800b654 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b642:	f7f9 fe83 	bl	800534c <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d901      	bls.n	800b654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e212      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b654:	4b33      	ldr	r3, [pc, #204]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f0      	bne.n	800b642 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0308 	and.w	r3, r3, #8
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d036      	beq.n	800b6da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d019      	beq.n	800b6a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b674:	4b2b      	ldr	r3, [pc, #172]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b678:	4a2a      	ldr	r2, [pc, #168]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b67a:	f043 0301 	orr.w	r3, r3, #1
 800b67e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b680:	f7f9 fe64 	bl	800534c <HAL_GetTick>
 800b684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b686:	e008      	b.n	800b69a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b688:	f7f9 fe60 	bl	800534c <HAL_GetTick>
 800b68c:	4602      	mov	r2, r0
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	2b02      	cmp	r3, #2
 800b694:	d901      	bls.n	800b69a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e1ef      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b69a:	4b22      	ldr	r3, [pc, #136]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b69e:	f003 0302 	and.w	r3, r3, #2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0f0      	beq.n	800b688 <HAL_RCC_OscConfig+0x45c>
 800b6a6:	e018      	b.n	800b6da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ac:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b6ae:	f023 0301 	bic.w	r3, r3, #1
 800b6b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6b4:	f7f9 fe4a 	bl	800534c <HAL_GetTick>
 800b6b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6ba:	e008      	b.n	800b6ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6bc:	f7f9 fe46 	bl	800534c <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d901      	bls.n	800b6ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e1d5      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6ce:	4b15      	ldr	r3, [pc, #84]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f0      	bne.n	800b6bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d039      	beq.n	800b75a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d01c      	beq.n	800b728 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a0c      	ldr	r2, [pc, #48]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b6f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b6f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b6fa:	f7f9 fe27 	bl	800534c <HAL_GetTick>
 800b6fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b700:	e008      	b.n	800b714 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b702:	f7f9 fe23 	bl	800534c <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d901      	bls.n	800b714 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e1b2      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b714:	4b03      	ldr	r3, [pc, #12]	; (800b724 <HAL_RCC_OscConfig+0x4f8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0f0      	beq.n	800b702 <HAL_RCC_OscConfig+0x4d6>
 800b720:	e01b      	b.n	800b75a <HAL_RCC_OscConfig+0x52e>
 800b722:	bf00      	nop
 800b724:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b728:	4b9b      	ldr	r3, [pc, #620]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a9a      	ldr	r2, [pc, #616]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b732:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b734:	f7f9 fe0a 	bl	800534c <HAL_GetTick>
 800b738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b73a:	e008      	b.n	800b74e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b73c:	f7f9 fe06 	bl	800534c <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	2b02      	cmp	r3, #2
 800b748:	d901      	bls.n	800b74e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e195      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b74e:	4b92      	ldr	r3, [pc, #584]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f0      	bne.n	800b73c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8081 	beq.w	800b86a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b768:	4b8c      	ldr	r3, [pc, #560]	; (800b99c <HAL_RCC_OscConfig+0x770>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a8b      	ldr	r2, [pc, #556]	; (800b99c <HAL_RCC_OscConfig+0x770>)
 800b76e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b774:	f7f9 fdea 	bl	800534c <HAL_GetTick>
 800b778:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b77a:	e008      	b.n	800b78e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b77c:	f7f9 fde6 	bl	800534c <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	2b64      	cmp	r3, #100	; 0x64
 800b788:	d901      	bls.n	800b78e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e175      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b78e:	4b83      	ldr	r3, [pc, #524]	; (800b99c <HAL_RCC_OscConfig+0x770>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0f0      	beq.n	800b77c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d106      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x584>
 800b7a2:	4b7d      	ldr	r3, [pc, #500]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a6:	4a7c      	ldr	r2, [pc, #496]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7a8:	f043 0301 	orr.w	r3, r3, #1
 800b7ac:	6713      	str	r3, [r2, #112]	; 0x70
 800b7ae:	e02d      	b.n	800b80c <HAL_RCC_OscConfig+0x5e0>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10c      	bne.n	800b7d2 <HAL_RCC_OscConfig+0x5a6>
 800b7b8:	4b77      	ldr	r3, [pc, #476]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7bc:	4a76      	ldr	r2, [pc, #472]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7be:	f023 0301 	bic.w	r3, r3, #1
 800b7c2:	6713      	str	r3, [r2, #112]	; 0x70
 800b7c4:	4b74      	ldr	r3, [pc, #464]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c8:	4a73      	ldr	r2, [pc, #460]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7ca:	f023 0304 	bic.w	r3, r3, #4
 800b7ce:	6713      	str	r3, [r2, #112]	; 0x70
 800b7d0:	e01c      	b.n	800b80c <HAL_RCC_OscConfig+0x5e0>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	2b05      	cmp	r3, #5
 800b7d8:	d10c      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x5c8>
 800b7da:	4b6f      	ldr	r3, [pc, #444]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7de:	4a6e      	ldr	r2, [pc, #440]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7e0:	f043 0304 	orr.w	r3, r3, #4
 800b7e4:	6713      	str	r3, [r2, #112]	; 0x70
 800b7e6:	4b6c      	ldr	r3, [pc, #432]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ea:	4a6b      	ldr	r2, [pc, #428]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7ec:	f043 0301 	orr.w	r3, r3, #1
 800b7f0:	6713      	str	r3, [r2, #112]	; 0x70
 800b7f2:	e00b      	b.n	800b80c <HAL_RCC_OscConfig+0x5e0>
 800b7f4:	4b68      	ldr	r3, [pc, #416]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f8:	4a67      	ldr	r2, [pc, #412]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b7fa:	f023 0301 	bic.w	r3, r3, #1
 800b7fe:	6713      	str	r3, [r2, #112]	; 0x70
 800b800:	4b65      	ldr	r3, [pc, #404]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b804:	4a64      	ldr	r2, [pc, #400]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b806:	f023 0304 	bic.w	r3, r3, #4
 800b80a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d015      	beq.n	800b840 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b814:	f7f9 fd9a 	bl	800534c <HAL_GetTick>
 800b818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b81a:	e00a      	b.n	800b832 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b81c:	f7f9 fd96 	bl	800534c <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d901      	bls.n	800b832 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e123      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b832:	4b59      	ldr	r3, [pc, #356]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0ee      	beq.n	800b81c <HAL_RCC_OscConfig+0x5f0>
 800b83e:	e014      	b.n	800b86a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b840:	f7f9 fd84 	bl	800534c <HAL_GetTick>
 800b844:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b846:	e00a      	b.n	800b85e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b848:	f7f9 fd80 	bl	800534c <HAL_GetTick>
 800b84c:	4602      	mov	r2, r0
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	f241 3288 	movw	r2, #5000	; 0x1388
 800b856:	4293      	cmp	r3, r2
 800b858:	d901      	bls.n	800b85e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e10d      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b85e:	4b4e      	ldr	r3, [pc, #312]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b862:	f003 0302 	and.w	r3, r3, #2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1ee      	bne.n	800b848 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 8102 	beq.w	800ba78 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b874:	4b48      	ldr	r3, [pc, #288]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b87c:	2b18      	cmp	r3, #24
 800b87e:	f000 80bd 	beq.w	800b9fc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	2b02      	cmp	r3, #2
 800b888:	f040 809e 	bne.w	800b9c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b88c:	4b42      	ldr	r3, [pc, #264]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a41      	ldr	r2, [pc, #260]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b898:	f7f9 fd58 	bl	800534c <HAL_GetTick>
 800b89c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b89e:	e008      	b.n	800b8b2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b8a0:	f7f9 fd54 	bl	800534c <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d901      	bls.n	800b8b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e0e3      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8b2:	4b39      	ldr	r3, [pc, #228]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1f0      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8be:	4b36      	ldr	r3, [pc, #216]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8c2:	4b37      	ldr	r3, [pc, #220]	; (800b9a0 <HAL_RCC_OscConfig+0x774>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8ce:	0112      	lsls	r2, r2, #4
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	4931      	ldr	r1, [pc, #196]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	025b      	lsls	r3, r3, #9
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	041b      	lsls	r3, r3, #16
 800b8f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b900:	3b01      	subs	r3, #1
 800b902:	061b      	lsls	r3, r3, #24
 800b904:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b908:	4923      	ldr	r1, [pc, #140]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b90e:	4b22      	ldr	r3, [pc, #136]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b912:	4a21      	ldr	r2, [pc, #132]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b914:	f023 0301 	bic.w	r3, r3, #1
 800b918:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b91a:	4b1f      	ldr	r3, [pc, #124]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b91c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b91e:	4b21      	ldr	r3, [pc, #132]	; (800b9a4 <HAL_RCC_OscConfig+0x778>)
 800b920:	4013      	ands	r3, r2
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b926:	00d2      	lsls	r2, r2, #3
 800b928:	491b      	ldr	r1, [pc, #108]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b92a:	4313      	orrs	r3, r2
 800b92c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b92e:	4b1a      	ldr	r3, [pc, #104]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	f023 020c 	bic.w	r2, r3, #12
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	4917      	ldr	r1, [pc, #92]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b940:	4b15      	ldr	r3, [pc, #84]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	f023 0202 	bic.w	r2, r3, #2
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94c:	4912      	ldr	r1, [pc, #72]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b952:	4b11      	ldr	r3, [pc, #68]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b95c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b95e:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	4a0d      	ldr	r2, [pc, #52]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b968:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	4a0a      	ldr	r2, [pc, #40]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b974:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b976:	4b08      	ldr	r3, [pc, #32]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	4a07      	ldr	r2, [pc, #28]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b97c:	f043 0301 	orr.w	r3, r3, #1
 800b980:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b982:	4b05      	ldr	r3, [pc, #20]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a04      	ldr	r2, [pc, #16]	; (800b998 <HAL_RCC_OscConfig+0x76c>)
 800b988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b98c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b98e:	f7f9 fcdd 	bl	800534c <HAL_GetTick>
 800b992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b994:	e011      	b.n	800b9ba <HAL_RCC_OscConfig+0x78e>
 800b996:	bf00      	nop
 800b998:	58024400 	.word	0x58024400
 800b99c:	58024800 	.word	0x58024800
 800b9a0:	fffffc0c 	.word	0xfffffc0c
 800b9a4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9a8:	f7f9 fcd0 	bl	800534c <HAL_GetTick>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d901      	bls.n	800b9ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e05f      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9ba:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f0      	beq.n	800b9a8 <HAL_RCC_OscConfig+0x77c>
 800b9c6:	e057      	b.n	800ba78 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9c8:	4b2e      	ldr	r3, [pc, #184]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a2d      	ldr	r2, [pc, #180]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800b9ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9d4:	f7f9 fcba 	bl	800534c <HAL_GetTick>
 800b9d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b9da:	e008      	b.n	800b9ee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9dc:	f7f9 fcb6 	bl	800534c <HAL_GetTick>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d901      	bls.n	800b9ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e045      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b9ee:	4b25      	ldr	r3, [pc, #148]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1f0      	bne.n	800b9dc <HAL_RCC_OscConfig+0x7b0>
 800b9fa:	e03d      	b.n	800ba78 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b9fc:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba02:	4b20      	ldr	r3, [pc, #128]	; (800ba84 <HAL_RCC_OscConfig+0x858>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d031      	beq.n	800ba74 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f003 0203 	and.w	r2, r3, #3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d12a      	bne.n	800ba74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	091b      	lsrs	r3, r3, #4
 800ba22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d122      	bne.n	800ba74 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d11a      	bne.n	800ba74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0a5b      	lsrs	r3, r3, #9
 800ba42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d111      	bne.n	800ba74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	0c1b      	lsrs	r3, r3, #16
 800ba54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d108      	bne.n	800ba74 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	0e1b      	lsrs	r3, r3, #24
 800ba66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d001      	beq.n	800ba78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3730      	adds	r7, #48	; 0x30
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	58024400 	.word	0x58024400

0800ba88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e19c      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ba9c:	4b8a      	ldr	r3, [pc, #552]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 030f 	and.w	r3, r3, #15
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d910      	bls.n	800bacc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baaa:	4b87      	ldr	r3, [pc, #540]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f023 020f 	bic.w	r2, r3, #15
 800bab2:	4985      	ldr	r1, [pc, #532]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800baba:	4b83      	ldr	r3, [pc, #524]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 030f 	and.w	r3, r3, #15
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d001      	beq.n	800bacc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e184      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d010      	beq.n	800bafa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691a      	ldr	r2, [r3, #16]
 800badc:	4b7b      	ldr	r3, [pc, #492]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d908      	bls.n	800bafa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bae8:	4b78      	ldr	r3, [pc, #480]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	4975      	ldr	r1, [pc, #468]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800baf6:	4313      	orrs	r3, r2
 800baf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f003 0308 	and.w	r3, r3, #8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d010      	beq.n	800bb28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	695a      	ldr	r2, [r3, #20]
 800bb0a:	4b70      	ldr	r3, [pc, #448]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb0c:	69db      	ldr	r3, [r3, #28]
 800bb0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d908      	bls.n	800bb28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb16:	4b6d      	ldr	r3, [pc, #436]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	496a      	ldr	r1, [pc, #424]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb24:	4313      	orrs	r3, r2
 800bb26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0310 	and.w	r3, r3, #16
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d010      	beq.n	800bb56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	699a      	ldr	r2, [r3, #24]
 800bb38:	4b64      	ldr	r3, [pc, #400]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d908      	bls.n	800bb56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bb44:	4b61      	ldr	r3, [pc, #388]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	495e      	ldr	r1, [pc, #376]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb52:	4313      	orrs	r3, r2
 800bb54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d010      	beq.n	800bb84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	69da      	ldr	r2, [r3, #28]
 800bb66:	4b59      	ldr	r3, [pc, #356]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d908      	bls.n	800bb84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bb72:	4b56      	ldr	r3, [pc, #344]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	4953      	ldr	r1, [pc, #332]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb80:	4313      	orrs	r3, r2
 800bb82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d010      	beq.n	800bbb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68da      	ldr	r2, [r3, #12]
 800bb94:	4b4d      	ldr	r3, [pc, #308]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bb96:	699b      	ldr	r3, [r3, #24]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d908      	bls.n	800bbb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bba0:	4b4a      	ldr	r3, [pc, #296]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f023 020f 	bic.w	r2, r3, #15
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	4947      	ldr	r1, [pc, #284]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d055      	beq.n	800bc6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bbbe:	4b43      	ldr	r3, [pc, #268]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	4940      	ldr	r1, [pc, #256]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	d107      	bne.n	800bbe8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbd8:	4b3c      	ldr	r3, [pc, #240]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d121      	bne.n	800bc28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e0f6      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d107      	bne.n	800bc00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbf0:	4b36      	ldr	r3, [pc, #216]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d115      	bne.n	800bc28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e0ea      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d107      	bne.n	800bc18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc08:	4b30      	ldr	r3, [pc, #192]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d109      	bne.n	800bc28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e0de      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc18:	4b2c      	ldr	r3, [pc, #176]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 0304 	and.w	r3, r3, #4
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e0d6      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc28:	4b28      	ldr	r3, [pc, #160]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f023 0207 	bic.w	r2, r3, #7
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	4925      	ldr	r1, [pc, #148]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc3a:	f7f9 fb87 	bl	800534c <HAL_GetTick>
 800bc3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc40:	e00a      	b.n	800bc58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc42:	f7f9 fb83 	bl	800534c <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d901      	bls.n	800bc58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e0be      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc58:	4b1c      	ldr	r3, [pc, #112]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d1eb      	bne.n	800bc42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68da      	ldr	r2, [r3, #12]
 800bc7a:	4b14      	ldr	r3, [pc, #80]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f003 030f 	and.w	r3, r3, #15
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d208      	bcs.n	800bc98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc86:	4b11      	ldr	r3, [pc, #68]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	f023 020f 	bic.w	r2, r3, #15
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	490e      	ldr	r1, [pc, #56]	; (800bccc <HAL_RCC_ClockConfig+0x244>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bc98:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d214      	bcs.n	800bcd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bca6:	4b08      	ldr	r3, [pc, #32]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f023 020f 	bic.w	r2, r3, #15
 800bcae:	4906      	ldr	r1, [pc, #24]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcb6:	4b04      	ldr	r3, [pc, #16]	; (800bcc8 <HAL_RCC_ClockConfig+0x240>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d005      	beq.n	800bcd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e086      	b.n	800bdd6 <HAL_RCC_ClockConfig+0x34e>
 800bcc8:	52002000 	.word	0x52002000
 800bccc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d010      	beq.n	800bcfe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691a      	ldr	r2, [r3, #16]
 800bce0:	4b3f      	ldr	r3, [pc, #252]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d208      	bcs.n	800bcfe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bcec:	4b3c      	ldr	r3, [pc, #240]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	4939      	ldr	r1, [pc, #228]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f003 0308 	and.w	r3, r3, #8
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d010      	beq.n	800bd2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	695a      	ldr	r2, [r3, #20]
 800bd0e:	4b34      	ldr	r3, [pc, #208]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd10:	69db      	ldr	r3, [r3, #28]
 800bd12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d208      	bcs.n	800bd2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd1a:	4b31      	ldr	r3, [pc, #196]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	492e      	ldr	r1, [pc, #184]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f003 0310 	and.w	r3, r3, #16
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d010      	beq.n	800bd5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	4b28      	ldr	r3, [pc, #160]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d208      	bcs.n	800bd5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd48:	4b25      	ldr	r3, [pc, #148]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	4922      	ldr	r1, [pc, #136]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd56:	4313      	orrs	r3, r2
 800bd58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d010      	beq.n	800bd88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	69da      	ldr	r2, [r3, #28]
 800bd6a:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d208      	bcs.n	800bd88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	4917      	ldr	r1, [pc, #92]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bd88:	f000 f834 	bl	800bdf4 <HAL_RCC_GetSysClockFreq>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	f003 030f 	and.w	r3, r3, #15
 800bd98:	4912      	ldr	r1, [pc, #72]	; (800bde4 <HAL_RCC_ClockConfig+0x35c>)
 800bd9a:	5ccb      	ldrb	r3, [r1, r3]
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	fa22 f303 	lsr.w	r3, r2, r3
 800bda4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bda6:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <HAL_RCC_ClockConfig+0x358>)
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	4a0d      	ldr	r2, [pc, #52]	; (800bde4 <HAL_RCC_ClockConfig+0x35c>)
 800bdb0:	5cd3      	ldrb	r3, [r2, r3]
 800bdb2:	f003 031f 	and.w	r3, r3, #31
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdbc:	4a0a      	ldr	r2, [pc, #40]	; (800bde8 <HAL_RCC_ClockConfig+0x360>)
 800bdbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bdc0:	4a0a      	ldr	r2, [pc, #40]	; (800bdec <HAL_RCC_ClockConfig+0x364>)
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bdc6:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <HAL_RCC_ClockConfig+0x368>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f9 fa74 	bl	80052b8 <HAL_InitTick>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	58024400 	.word	0x58024400
 800bde4:	080306ec 	.word	0x080306ec
 800bde8:	24000074 	.word	0x24000074
 800bdec:	24000070 	.word	0x24000070
 800bdf0:	24000078 	.word	0x24000078

0800bdf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b089      	sub	sp, #36	; 0x24
 800bdf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bdfa:	4bb3      	ldr	r3, [pc, #716]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be02:	2b18      	cmp	r3, #24
 800be04:	f200 8155 	bhi.w	800c0b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800be08:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be75 	.word	0x0800be75
 800be14:	0800c0b3 	.word	0x0800c0b3
 800be18:	0800c0b3 	.word	0x0800c0b3
 800be1c:	0800c0b3 	.word	0x0800c0b3
 800be20:	0800c0b3 	.word	0x0800c0b3
 800be24:	0800c0b3 	.word	0x0800c0b3
 800be28:	0800c0b3 	.word	0x0800c0b3
 800be2c:	0800c0b3 	.word	0x0800c0b3
 800be30:	0800be9b 	.word	0x0800be9b
 800be34:	0800c0b3 	.word	0x0800c0b3
 800be38:	0800c0b3 	.word	0x0800c0b3
 800be3c:	0800c0b3 	.word	0x0800c0b3
 800be40:	0800c0b3 	.word	0x0800c0b3
 800be44:	0800c0b3 	.word	0x0800c0b3
 800be48:	0800c0b3 	.word	0x0800c0b3
 800be4c:	0800c0b3 	.word	0x0800c0b3
 800be50:	0800bea1 	.word	0x0800bea1
 800be54:	0800c0b3 	.word	0x0800c0b3
 800be58:	0800c0b3 	.word	0x0800c0b3
 800be5c:	0800c0b3 	.word	0x0800c0b3
 800be60:	0800c0b3 	.word	0x0800c0b3
 800be64:	0800c0b3 	.word	0x0800c0b3
 800be68:	0800c0b3 	.word	0x0800c0b3
 800be6c:	0800c0b3 	.word	0x0800c0b3
 800be70:	0800bea7 	.word	0x0800bea7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be74:	4b94      	ldr	r3, [pc, #592]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d009      	beq.n	800be94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be80:	4b91      	ldr	r3, [pc, #580]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	4a90      	ldr	r2, [pc, #576]	; (800c0cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be8c:	fa22 f303 	lsr.w	r3, r2, r3
 800be90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800be92:	e111      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800be94:	4b8d      	ldr	r3, [pc, #564]	; (800c0cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be96:	61bb      	str	r3, [r7, #24]
    break;
 800be98:	e10e      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800be9a:	4b8d      	ldr	r3, [pc, #564]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800be9c:	61bb      	str	r3, [r7, #24]
    break;
 800be9e:	e10b      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bea0:	4b8c      	ldr	r3, [pc, #560]	; (800c0d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bea2:	61bb      	str	r3, [r7, #24]
    break;
 800bea4:	e108      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bea6:	4b88      	ldr	r3, [pc, #544]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800beb0:	4b85      	ldr	r3, [pc, #532]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb4:	091b      	lsrs	r3, r3, #4
 800beb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bebc:	4b82      	ldr	r3, [pc, #520]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bec6:	4b80      	ldr	r3, [pc, #512]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	08db      	lsrs	r3, r3, #3
 800becc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	fb02 f303 	mul.w	r3, r2, r3
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80e1 	beq.w	800c0ac <HAL_RCC_GetSysClockFreq+0x2b8>
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b02      	cmp	r3, #2
 800beee:	f000 8083 	beq.w	800bff8 <HAL_RCC_GetSysClockFreq+0x204>
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	f200 80a1 	bhi.w	800c03c <HAL_RCC_GetSysClockFreq+0x248>
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <HAL_RCC_GetSysClockFreq+0x114>
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d056      	beq.n	800bfb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf06:	e099      	b.n	800c03c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf08:	4b6f      	ldr	r3, [pc, #444]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0320 	and.w	r3, r3, #32
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d02d      	beq.n	800bf70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf14:	4b6c      	ldr	r3, [pc, #432]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	08db      	lsrs	r3, r3, #3
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	4a6b      	ldr	r2, [pc, #428]	; (800c0cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf20:	fa22 f303 	lsr.w	r3, r2, r3
 800bf24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3e:	4b62      	ldr	r3, [pc, #392]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf52:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c0d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bf6e:	e087      	b.n	800c080 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	ee07 3a90 	vmov	s15, r3
 800bf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c0dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800bf7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf82:	4b51      	ldr	r3, [pc, #324]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf92:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf96:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c0d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfb2:	e065      	b.n	800c080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c0e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc6:	4b40      	ldr	r3, [pc, #256]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfce:	ee07 3a90 	vmov	s15, r3
 800bfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c0d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bff6:	e043      	b.n	800c080 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c002:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c0e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c00a:	4b2f      	ldr	r3, [pc, #188]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c01a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c01e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c0d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c03a:	e021      	b.n	800c080 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c046:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c0e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04e:	4b1e      	ldr	r3, [pc, #120]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c062:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c0d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c07e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c080:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c084:	0a5b      	lsrs	r3, r3, #9
 800c086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c08a:	3301      	adds	r3, #1
 800c08c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	ee07 3a90 	vmov	s15, r3
 800c094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c098:	edd7 6a07 	vldr	s13, [r7, #28]
 800c09c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a4:	ee17 3a90 	vmov	r3, s15
 800c0a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c0aa:	e005      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	61bb      	str	r3, [r7, #24]
    break;
 800c0b0:	e002      	b.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0b4:	61bb      	str	r3, [r7, #24]
    break;
 800c0b6:	bf00      	nop
  }

  return sysclockfreq;
 800c0b8:	69bb      	ldr	r3, [r7, #24]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3724      	adds	r7, #36	; 0x24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	58024400 	.word	0x58024400
 800c0cc:	03d09000 	.word	0x03d09000
 800c0d0:	003d0900 	.word	0x003d0900
 800c0d4:	017d7840 	.word	0x017d7840
 800c0d8:	46000000 	.word	0x46000000
 800c0dc:	4c742400 	.word	0x4c742400
 800c0e0:	4a742400 	.word	0x4a742400
 800c0e4:	4bbebc20 	.word	0x4bbebc20

0800c0e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0ee:	f7ff fe81 	bl	800bdf4 <HAL_RCC_GetSysClockFreq>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	4b10      	ldr	r3, [pc, #64]	; (800c138 <HAL_RCC_GetHCLKFreq+0x50>)
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	0a1b      	lsrs	r3, r3, #8
 800c0fa:	f003 030f 	and.w	r3, r3, #15
 800c0fe:	490f      	ldr	r1, [pc, #60]	; (800c13c <HAL_RCC_GetHCLKFreq+0x54>)
 800c100:	5ccb      	ldrb	r3, [r1, r3]
 800c102:	f003 031f 	and.w	r3, r3, #31
 800c106:	fa22 f303 	lsr.w	r3, r2, r3
 800c10a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <HAL_RCC_GetHCLKFreq+0x50>)
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f003 030f 	and.w	r3, r3, #15
 800c114:	4a09      	ldr	r2, [pc, #36]	; (800c13c <HAL_RCC_GetHCLKFreq+0x54>)
 800c116:	5cd3      	ldrb	r3, [r2, r3]
 800c118:	f003 031f 	and.w	r3, r3, #31
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	fa22 f303 	lsr.w	r3, r2, r3
 800c122:	4a07      	ldr	r2, [pc, #28]	; (800c140 <HAL_RCC_GetHCLKFreq+0x58>)
 800c124:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c126:	4a07      	ldr	r2, [pc, #28]	; (800c144 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <HAL_RCC_GetHCLKFreq+0x58>)
 800c12e:	681b      	ldr	r3, [r3, #0]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	58024400 	.word	0x58024400
 800c13c:	080306ec 	.word	0x080306ec
 800c140:	24000074 	.word	0x24000074
 800c144:	24000070 	.word	0x24000070

0800c148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c14c:	f7ff ffcc 	bl	800c0e8 <HAL_RCC_GetHCLKFreq>
 800c150:	4602      	mov	r2, r0
 800c152:	4b06      	ldr	r3, [pc, #24]	; (800c16c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	4904      	ldr	r1, [pc, #16]	; (800c170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c15e:	5ccb      	ldrb	r3, [r1, r3]
 800c160:	f003 031f 	and.w	r3, r3, #31
 800c164:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c168:	4618      	mov	r0, r3
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	58024400 	.word	0x58024400
 800c170:	080306ec 	.word	0x080306ec

0800c174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c178:	f7ff ffb6 	bl	800c0e8 <HAL_RCC_GetHCLKFreq>
 800c17c:	4602      	mov	r2, r0
 800c17e:	4b06      	ldr	r3, [pc, #24]	; (800c198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	f003 0307 	and.w	r3, r3, #7
 800c188:	4904      	ldr	r1, [pc, #16]	; (800c19c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c18a:	5ccb      	ldrb	r3, [r1, r3]
 800c18c:	f003 031f 	and.w	r3, r3, #31
 800c190:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c194:	4618      	mov	r0, r3
 800c196:	bd80      	pop	{r7, pc}
 800c198:	58024400 	.word	0x58024400
 800c19c:	080306ec 	.word	0x080306ec

0800c1a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d03f      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1c4:	d02a      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c1c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1ca:	d824      	bhi.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c1cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1d0:	d018      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c1d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1d6:	d81e      	bhi.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e0:	d007      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c1e2:	e018      	b.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1e4:	4ba3      	ldr	r3, [pc, #652]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	4aa2      	ldr	r2, [pc, #648]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c1ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c1f0:	e015      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	2102      	movs	r1, #2
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f001 f9d5 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c202:	e00c      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	3324      	adds	r3, #36	; 0x24
 800c208:	2102      	movs	r1, #2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 fa7e 	bl	800d70c <RCCEx_PLL3_Config>
 800c210:	4603      	mov	r3, r0
 800c212:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c214:	e003      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]
      break;
 800c21a:	e000      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c21c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d109      	bne.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c224:	4b93      	ldr	r3, [pc, #588]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c230:	4990      	ldr	r1, [pc, #576]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c232:	4313      	orrs	r3, r2
 800c234:	650b      	str	r3, [r1, #80]	; 0x50
 800c236:	e001      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c244:	2b00      	cmp	r3, #0
 800c246:	d03d      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d826      	bhi.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c250:	a201      	add	r2, pc, #4	; (adr r2, 800c258 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c256:	bf00      	nop
 800c258:	0800c26d 	.word	0x0800c26d
 800c25c:	0800c27b 	.word	0x0800c27b
 800c260:	0800c28d 	.word	0x0800c28d
 800c264:	0800c2a5 	.word	0x0800c2a5
 800c268:	0800c2a5 	.word	0x0800c2a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c26c:	4b81      	ldr	r3, [pc, #516]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4a80      	ldr	r2, [pc, #512]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c278:	e015      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3304      	adds	r3, #4
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f001 f991 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c286:	4603      	mov	r3, r0
 800c288:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c28a:	e00c      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3324      	adds	r3, #36	; 0x24
 800c290:	2100      	movs	r1, #0
 800c292:	4618      	mov	r0, r3
 800c294:	f001 fa3a 	bl	800d70c <RCCEx_PLL3_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c29c:	e003      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c2a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d109      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2ac:	4b71      	ldr	r3, [pc, #452]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b0:	f023 0207 	bic.w	r2, r3, #7
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b8:	496e      	ldr	r1, [pc, #440]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	650b      	str	r3, [r1, #80]	; 0x50
 800c2be:	e001      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d042      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2d8:	d02b      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c2da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2de:	d825      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c2e0:	2bc0      	cmp	r3, #192	; 0xc0
 800c2e2:	d028      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c2e4:	2bc0      	cmp	r3, #192	; 0xc0
 800c2e6:	d821      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c2e8:	2b80      	cmp	r3, #128	; 0x80
 800c2ea:	d016      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c2ec:	2b80      	cmp	r3, #128	; 0x80
 800c2ee:	d81d      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c2f4:	2b40      	cmp	r3, #64	; 0x40
 800c2f6:	d007      	beq.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c2f8:	e018      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2fa:	4b5e      	ldr	r3, [pc, #376]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fe:	4a5d      	ldr	r2, [pc, #372]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c306:	e017      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3304      	adds	r3, #4
 800c30c:	2100      	movs	r1, #0
 800c30e:	4618      	mov	r0, r3
 800c310:	f001 f94a 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c314:	4603      	mov	r3, r0
 800c316:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c318:	e00e      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3324      	adds	r3, #36	; 0x24
 800c31e:	2100      	movs	r1, #0
 800c320:	4618      	mov	r0, r3
 800c322:	f001 f9f3 	bl	800d70c <RCCEx_PLL3_Config>
 800c326:	4603      	mov	r3, r0
 800c328:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c32a:	e005      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
      break;
 800c330:	e002      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c332:	bf00      	nop
 800c334:	e000      	b.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c336:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c33e:	4b4d      	ldr	r3, [pc, #308]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c342:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	494a      	ldr	r1, [pc, #296]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	650b      	str	r3, [r1, #80]	; 0x50
 800c350:	e001      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d049      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c36c:	d030      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c36e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c372:	d82a      	bhi.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c374:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c378:	d02c      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c37a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c37e:	d824      	bhi.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c384:	d018      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c38a:	d81e      	bhi.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c394:	d007      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c396:	e018      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c398:	4b36      	ldr	r3, [pc, #216]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	4a35      	ldr	r2, [pc, #212]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3a4:	e017      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 f8fb 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c3b6:	e00e      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	2100      	movs	r1, #0
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 f9a4 	bl	800d70c <RCCEx_PLL3_Config>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3c8:	e005      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c3ce:	e002      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c3d0:	bf00      	nop
 800c3d2:	e000      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c3d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c3dc:	4b25      	ldr	r3, [pc, #148]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3ea:	4922      	ldr	r1, [pc, #136]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	658b      	str	r3, [r1, #88]	; 0x58
 800c3f0:	e001      	b.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d04b      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c40c:	d030      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c40e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c412:	d82a      	bhi.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c414:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c418:	d02e      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c41a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c41e:	d824      	bhi.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c424:	d018      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c42a:	d81e      	bhi.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c434:	d007      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c436:	e018      	b.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c438:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	4a0d      	ldr	r2, [pc, #52]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c444:	e019      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3304      	adds	r3, #4
 800c44a:	2100      	movs	r1, #0
 800c44c:	4618      	mov	r0, r3
 800c44e:	f001 f8ab 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c456:	e010      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3324      	adds	r3, #36	; 0x24
 800c45c:	2100      	movs	r1, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f001 f954 	bl	800d70c <RCCEx_PLL3_Config>
 800c464:	4603      	mov	r3, r0
 800c466:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c468:	e007      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	75fb      	strb	r3, [r7, #23]
      break;
 800c46e:	e004      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c470:	bf00      	nop
 800c472:	e002      	b.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c474:	58024400 	.word	0x58024400
      break;
 800c478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c480:	4b99      	ldr	r3, [pc, #612]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c484:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c48e:	4996      	ldr	r1, [pc, #600]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c490:	4313      	orrs	r3, r2
 800c492:	658b      	str	r3, [r1, #88]	; 0x58
 800c494:	e001      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d032      	beq.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4aa:	2b30      	cmp	r3, #48	; 0x30
 800c4ac:	d01c      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c4ae:	2b30      	cmp	r3, #48	; 0x30
 800c4b0:	d817      	bhi.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c4b2:	2b20      	cmp	r3, #32
 800c4b4:	d00c      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c4b6:	2b20      	cmp	r3, #32
 800c4b8:	d813      	bhi.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d016      	beq.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d10f      	bne.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c2:	4b89      	ldr	r3, [pc, #548]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	4a88      	ldr	r2, [pc, #544]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c4c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c4ce:	e00e      	b.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	2102      	movs	r1, #2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f001 f866 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c4e0:	e005      	b.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4e6:	e002      	b.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e000      	b.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c4ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d109      	bne.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c4f4:	4b7c      	ldr	r3, [pc, #496]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c500:	4979      	ldr	r1, [pc, #484]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c502:	4313      	orrs	r3, r2
 800c504:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c506:	e001      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d047      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c51c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c520:	d030      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c526:	d82a      	bhi.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c52c:	d02c      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c52e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c532:	d824      	bhi.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c538:	d018      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c53a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c53e:	d81e      	bhi.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c540:	2b00      	cmp	r3, #0
 800c542:	d003      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c548:	d007      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c54a:	e018      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c54c:	4b66      	ldr	r3, [pc, #408]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c550:	4a65      	ldr	r2, [pc, #404]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c558:	e017      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3304      	adds	r3, #4
 800c55e:	2100      	movs	r1, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f001 f821 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c566:	4603      	mov	r3, r0
 800c568:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c56a:	e00e      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3324      	adds	r3, #36	; 0x24
 800c570:	2100      	movs	r1, #0
 800c572:	4618      	mov	r0, r3
 800c574:	f001 f8ca 	bl	800d70c <RCCEx_PLL3_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c57c:	e005      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	75fb      	strb	r3, [r7, #23]
      break;
 800c582:	e002      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c584:	bf00      	nop
 800c586:	e000      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d109      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c590:	4b55      	ldr	r3, [pc, #340]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c594:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c59c:	4952      	ldr	r1, [pc, #328]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	650b      	str	r3, [r1, #80]	; 0x50
 800c5a2:	e001      	b.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d049      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5bc:	d02e      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c5be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5c2:	d828      	bhi.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c5c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5c8:	d02a      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c5ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5ce:	d822      	bhi.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c5d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5d4:	d026      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c5d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5da:	d81c      	bhi.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e0:	d010      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5e6:	d816      	bhi.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d01d      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5f0:	d111      	bne.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 ffd5 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c5fe:	4603      	mov	r3, r0
 800c600:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c602:	e012      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3324      	adds	r3, #36	; 0x24
 800c608:	2101      	movs	r1, #1
 800c60a:	4618      	mov	r0, r3
 800c60c:	f001 f87e 	bl	800d70c <RCCEx_PLL3_Config>
 800c610:	4603      	mov	r3, r0
 800c612:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c614:	e009      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	75fb      	strb	r3, [r7, #23]
      break;
 800c61a:	e006      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c61c:	bf00      	nop
 800c61e:	e004      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c624:	bf00      	nop
 800c626:	e000      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c630:	4b2d      	ldr	r3, [pc, #180]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c634:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c63c:	492a      	ldr	r1, [pc, #168]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	650b      	str	r3, [r1, #80]	; 0x50
 800c642:	e001      	b.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d04d      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c65a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c65e:	d02e      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c664:	d828      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66a:	d02a      	beq.n	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c670:	d822      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c672:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c676:	d026      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c678:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c67c:	d81c      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c682:	d010      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c688:	d816      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d01d      	beq.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c68e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c692:	d111      	bne.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3304      	adds	r3, #4
 800c698:	2101      	movs	r1, #1
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 ff84 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6a4:	e012      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3324      	adds	r3, #36	; 0x24
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 f82d 	bl	800d70c <RCCEx_PLL3_Config>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c6b6:	e009      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c6bc:	e006      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c6be:	bf00      	nop
 800c6c0:	e004      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c6c2:	bf00      	nop
 800c6c4:	e002      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c6c6:	bf00      	nop
 800c6c8:	e000      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c6ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10c      	bne.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6d2:	4b05      	ldr	r3, [pc, #20]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c6e0:	4901      	ldr	r1, [pc, #4]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	658b      	str	r3, [r1, #88]	; 0x58
 800c6e6:	e003      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c6e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d02f      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c704:	d00e      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70a:	d814      	bhi.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d015      	beq.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c714:	d10f      	bne.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c716:	4baf      	ldr	r3, [pc, #700]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71a:	4aae      	ldr	r2, [pc, #696]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c71c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c722:	e00c      	b.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3304      	adds	r3, #4
 800c728:	2101      	movs	r1, #1
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 ff3c 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c730:	4603      	mov	r3, r0
 800c732:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c734:	e003      	b.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	75fb      	strb	r3, [r7, #23]
      break;
 800c73a:	e000      	b.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c73c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d109      	bne.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c744:	4ba3      	ldr	r3, [pc, #652]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c748:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c750:	49a0      	ldr	r1, [pc, #640]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c752:	4313      	orrs	r3, r2
 800c754:	650b      	str	r3, [r1, #80]	; 0x50
 800c756:	e001      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c758:	7dfb      	ldrb	r3, [r7, #23]
 800c75a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d032      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d81b      	bhi.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c770:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c776:	bf00      	nop
 800c778:	0800c7af 	.word	0x0800c7af
 800c77c:	0800c789 	.word	0x0800c789
 800c780:	0800c797 	.word	0x0800c797
 800c784:	0800c7af 	.word	0x0800c7af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c788:	4b92      	ldr	r3, [pc, #584]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	4a91      	ldr	r2, [pc, #580]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c78e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c794:	e00c      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3304      	adds	r3, #4
 800c79a:	2102      	movs	r1, #2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 ff03 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7a6:	e003      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ac:	e000      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c7ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d109      	bne.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c7b6:	4b87      	ldr	r3, [pc, #540]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ba:	f023 0203 	bic.w	r2, r3, #3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c2:	4984      	ldr	r1, [pc, #528]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c7c8:	e001      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ca:	7dfb      	ldrb	r3, [r7, #23]
 800c7cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8086 	beq.w	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7dc:	4b7e      	ldr	r3, [pc, #504]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a7d      	ldr	r2, [pc, #500]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c7e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c7e8:	f7f8 fdb0 	bl	800534c <HAL_GetTick>
 800c7ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c7ee:	e009      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7f0:	f7f8 fdac 	bl	800534c <HAL_GetTick>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	2b64      	cmp	r3, #100	; 0x64
 800c7fc:	d902      	bls.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c7fe:	2303      	movs	r3, #3
 800c800:	75fb      	strb	r3, [r7, #23]
        break;
 800c802:	e005      	b.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c804:	4b74      	ldr	r3, [pc, #464]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0ef      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c810:	7dfb      	ldrb	r3, [r7, #23]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d166      	bne.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c816:	4b6f      	ldr	r3, [pc, #444]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c820:	4053      	eors	r3, r2
 800c822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c826:	2b00      	cmp	r3, #0
 800c828:	d013      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c82a:	4b6a      	ldr	r3, [pc, #424]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c832:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c834:	4b67      	ldr	r3, [pc, #412]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c838:	4a66      	ldr	r2, [pc, #408]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c83a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c83e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c840:	4b64      	ldr	r3, [pc, #400]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c844:	4a63      	ldr	r2, [pc, #396]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c84a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c84c:	4a61      	ldr	r2, [pc, #388]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c85c:	d115      	bne.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85e:	f7f8 fd75 	bl	800534c <HAL_GetTick>
 800c862:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c864:	e00b      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c866:	f7f8 fd71 	bl	800534c <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	f241 3288 	movw	r2, #5000	; 0x1388
 800c874:	4293      	cmp	r3, r2
 800c876:	d902      	bls.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c878:	2303      	movs	r3, #3
 800c87a:	75fb      	strb	r3, [r7, #23]
            break;
 800c87c:	e005      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c87e:	4b55      	ldr	r3, [pc, #340]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0ed      	beq.n	800c866 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d126      	bne.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c89a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c89e:	d10d      	bne.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c8a0:	4b4c      	ldr	r3, [pc, #304]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8ae:	0919      	lsrs	r1, r3, #4
 800c8b0:	4b4a      	ldr	r3, [pc, #296]	; (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c8b2:	400b      	ands	r3, r1
 800c8b4:	4947      	ldr	r1, [pc, #284]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	610b      	str	r3, [r1, #16]
 800c8ba:	e005      	b.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c8bc:	4b45      	ldr	r3, [pc, #276]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	4a44      	ldr	r2, [pc, #272]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c8c6:	6113      	str	r3, [r2, #16]
 800c8c8:	4b42      	ldr	r3, [pc, #264]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8d6:	493f      	ldr	r1, [pc, #252]	; (800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	670b      	str	r3, [r1, #112]	; 0x70
 800c8dc:	e004      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	75bb      	strb	r3, [r7, #22]
 800c8e2:	e001      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 8085 	beq.w	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8fa:	2b28      	cmp	r3, #40	; 0x28
 800c8fc:	d866      	bhi.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c8fe:	a201      	add	r2, pc, #4	; (adr r2, 800c904 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c904:	0800c9e1 	.word	0x0800c9e1
 800c908:	0800c9cd 	.word	0x0800c9cd
 800c90c:	0800c9cd 	.word	0x0800c9cd
 800c910:	0800c9cd 	.word	0x0800c9cd
 800c914:	0800c9cd 	.word	0x0800c9cd
 800c918:	0800c9cd 	.word	0x0800c9cd
 800c91c:	0800c9cd 	.word	0x0800c9cd
 800c920:	0800c9cd 	.word	0x0800c9cd
 800c924:	0800c9a9 	.word	0x0800c9a9
 800c928:	0800c9cd 	.word	0x0800c9cd
 800c92c:	0800c9cd 	.word	0x0800c9cd
 800c930:	0800c9cd 	.word	0x0800c9cd
 800c934:	0800c9cd 	.word	0x0800c9cd
 800c938:	0800c9cd 	.word	0x0800c9cd
 800c93c:	0800c9cd 	.word	0x0800c9cd
 800c940:	0800c9cd 	.word	0x0800c9cd
 800c944:	0800c9bb 	.word	0x0800c9bb
 800c948:	0800c9cd 	.word	0x0800c9cd
 800c94c:	0800c9cd 	.word	0x0800c9cd
 800c950:	0800c9cd 	.word	0x0800c9cd
 800c954:	0800c9cd 	.word	0x0800c9cd
 800c958:	0800c9cd 	.word	0x0800c9cd
 800c95c:	0800c9cd 	.word	0x0800c9cd
 800c960:	0800c9cd 	.word	0x0800c9cd
 800c964:	0800c9e1 	.word	0x0800c9e1
 800c968:	0800c9cd 	.word	0x0800c9cd
 800c96c:	0800c9cd 	.word	0x0800c9cd
 800c970:	0800c9cd 	.word	0x0800c9cd
 800c974:	0800c9cd 	.word	0x0800c9cd
 800c978:	0800c9cd 	.word	0x0800c9cd
 800c97c:	0800c9cd 	.word	0x0800c9cd
 800c980:	0800c9cd 	.word	0x0800c9cd
 800c984:	0800c9e1 	.word	0x0800c9e1
 800c988:	0800c9cd 	.word	0x0800c9cd
 800c98c:	0800c9cd 	.word	0x0800c9cd
 800c990:	0800c9cd 	.word	0x0800c9cd
 800c994:	0800c9cd 	.word	0x0800c9cd
 800c998:	0800c9cd 	.word	0x0800c9cd
 800c99c:	0800c9cd 	.word	0x0800c9cd
 800c9a0:	0800c9cd 	.word	0x0800c9cd
 800c9a4:	0800c9e1 	.word	0x0800c9e1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f000 fdfa 	bl	800d5a8 <RCCEx_PLL2_Config>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9b8:	e013      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3324      	adds	r3, #36	; 0x24
 800c9be:	2101      	movs	r1, #1
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fea3 	bl	800d70c <RCCEx_PLL3_Config>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c9ca:	e00a      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c9d0:	e007      	b.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c9d2:	bf00      	nop
 800c9d4:	58024400 	.word	0x58024400
 800c9d8:	58024800 	.word	0x58024800
 800c9dc:	00ffffcf 	.word	0x00ffffcf
      break;
 800c9e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d109      	bne.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c9e8:	4b96      	ldr	r3, [pc, #600]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c9ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9f4:	4993      	ldr	r1, [pc, #588]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	654b      	str	r3, [r1, #84]	; 0x54
 800c9fa:	e001      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d038      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca10:	2b05      	cmp	r3, #5
 800ca12:	d821      	bhi.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ca14:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800ca16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1a:	bf00      	nop
 800ca1c:	0800ca5f 	.word	0x0800ca5f
 800ca20:	0800ca35 	.word	0x0800ca35
 800ca24:	0800ca47 	.word	0x0800ca47
 800ca28:	0800ca5f 	.word	0x0800ca5f
 800ca2c:	0800ca5f 	.word	0x0800ca5f
 800ca30:	0800ca5f 	.word	0x0800ca5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3304      	adds	r3, #4
 800ca38:	2101      	movs	r1, #1
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fdb4 	bl	800d5a8 <RCCEx_PLL2_Config>
 800ca40:	4603      	mov	r3, r0
 800ca42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca44:	e00c      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3324      	adds	r3, #36	; 0x24
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fe5d 	bl	800d70c <RCCEx_PLL3_Config>
 800ca52:	4603      	mov	r3, r0
 800ca54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ca56:	e003      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca5c:	e000      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800ca5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ca66:	4b77      	ldr	r3, [pc, #476]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ca68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6a:	f023 0207 	bic.w	r2, r3, #7
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca72:	4974      	ldr	r1, [pc, #464]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ca74:	4313      	orrs	r3, r2
 800ca76:	654b      	str	r3, [r1, #84]	; 0x54
 800ca78:	e001      	b.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 0304 	and.w	r3, r3, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d03a      	beq.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	d821      	bhi.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800ca94:	a201      	add	r2, pc, #4	; (adr r2, 800ca9c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800ca96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca9a:	bf00      	nop
 800ca9c:	0800cadf 	.word	0x0800cadf
 800caa0:	0800cab5 	.word	0x0800cab5
 800caa4:	0800cac7 	.word	0x0800cac7
 800caa8:	0800cadf 	.word	0x0800cadf
 800caac:	0800cadf 	.word	0x0800cadf
 800cab0:	0800cadf 	.word	0x0800cadf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3304      	adds	r3, #4
 800cab8:	2101      	movs	r1, #1
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fd74 	bl	800d5a8 <RCCEx_PLL2_Config>
 800cac0:	4603      	mov	r3, r0
 800cac2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cac4:	e00c      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3324      	adds	r3, #36	; 0x24
 800caca:	2101      	movs	r1, #1
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fe1d 	bl	800d70c <RCCEx_PLL3_Config>
 800cad2:	4603      	mov	r3, r0
 800cad4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cad6:	e003      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	75fb      	strb	r3, [r7, #23]
      break;
 800cadc:	e000      	b.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800cade:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cae0:	7dfb      	ldrb	r3, [r7, #23]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10a      	bne.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cae6:	4b57      	ldr	r3, [pc, #348]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caea:	f023 0207 	bic.w	r2, r3, #7
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf4:	4953      	ldr	r1, [pc, #332]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	658b      	str	r3, [r1, #88]	; 0x58
 800cafa:	e001      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0320 	and.w	r3, r3, #32
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d04b      	beq.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb16:	d02e      	beq.n	800cb76 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cb18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb1c:	d828      	bhi.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb22:	d02a      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb28:	d822      	bhi.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb2e:	d026      	beq.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cb30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb34:	d81c      	bhi.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb3a:	d010      	beq.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800cb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb40:	d816      	bhi.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d01d      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800cb46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb4a:	d111      	bne.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	2100      	movs	r1, #0
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fd28 	bl	800d5a8 <RCCEx_PLL2_Config>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb5c:	e012      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3324      	adds	r3, #36	; 0x24
 800cb62:	2102      	movs	r1, #2
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 fdd1 	bl	800d70c <RCCEx_PLL3_Config>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cb6e:	e009      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	75fb      	strb	r3, [r7, #23]
      break;
 800cb74:	e006      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cb76:	bf00      	nop
 800cb78:	e004      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cb7a:	bf00      	nop
 800cb7c:	e002      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cb7e:	bf00      	nop
 800cb80:	e000      	b.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cb82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10a      	bne.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb8a:	4b2e      	ldr	r3, [pc, #184]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb98:	492a      	ldr	r1, [pc, #168]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	654b      	str	r3, [r1, #84]	; 0x54
 800cb9e:	e001      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
 800cba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d04d      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbba:	d02e      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cbbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cbc0:	d828      	bhi.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cbc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbc6:	d02a      	beq.n	800cc1e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cbc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbcc:	d822      	bhi.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cbce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbd2:	d026      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cbd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cbd8:	d81c      	bhi.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cbda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbde:	d010      	beq.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800cbe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbe4:	d816      	bhi.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d01d      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800cbea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbee:	d111      	bne.n	800cc14 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fcd6 	bl	800d5a8 <RCCEx_PLL2_Config>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc00:	e012      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	3324      	adds	r3, #36	; 0x24
 800cc06:	2102      	movs	r1, #2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fd7f 	bl	800d70c <RCCEx_PLL3_Config>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc12:	e009      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	75fb      	strb	r3, [r7, #23]
      break;
 800cc18:	e006      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc1a:	bf00      	nop
 800cc1c:	e004      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc1e:	bf00      	nop
 800cc20:	e002      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc22:	bf00      	nop
 800cc24:	e000      	b.n	800cc28 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc28:	7dfb      	ldrb	r3, [r7, #23]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10c      	bne.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc3c:	4901      	ldr	r1, [pc, #4]	; (800cc44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	658b      	str	r3, [r1, #88]	; 0x58
 800cc42:	e003      	b.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800cc44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d04b      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc62:	d02e      	beq.n	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cc64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cc68:	d828      	bhi.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800cc6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc6e:	d02a      	beq.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800cc70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc74:	d822      	bhi.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800cc76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc7a:	d026      	beq.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800cc7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cc80:	d81c      	bhi.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800cc82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc86:	d010      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800cc88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc8c:	d816      	bhi.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d01d      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800cc92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc96:	d111      	bne.n	800ccbc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f000 fc82 	bl	800d5a8 <RCCEx_PLL2_Config>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cca8:	e012      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	3324      	adds	r3, #36	; 0x24
 800ccae:	2102      	movs	r1, #2
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fd2b 	bl	800d70c <RCCEx_PLL3_Config>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ccba:	e009      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc0:	e006      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ccc2:	bf00      	nop
 800ccc4:	e004      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ccc6:	bf00      	nop
 800ccc8:	e002      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ccca:	bf00      	nop
 800cccc:	e000      	b.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800ccce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ccd6:	4b9d      	ldr	r3, [pc, #628]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ccd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cce4:	4999      	ldr	r1, [pc, #612]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	658b      	str	r3, [r1, #88]	; 0x58
 800ccea:	e001      	b.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01a      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd06:	d10a      	bne.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3324      	adds	r3, #36	; 0x24
 800cd0c:	2102      	movs	r1, #2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fcfc 	bl	800d70c <RCCEx_PLL3_Config>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cd1e:	4b8b      	ldr	r3, [pc, #556]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd2c:	4987      	ldr	r1, [pc, #540]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0310 	and.w	r3, r3, #16
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d01a      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd48:	d10a      	bne.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3324      	adds	r3, #36	; 0x24
 800cd4e:	2102      	movs	r1, #2
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fcdb 	bl	800d70c <RCCEx_PLL3_Config>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd60:	4b7a      	ldr	r3, [pc, #488]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd6e:	4977      	ldr	r1, [pc, #476]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd70:	4313      	orrs	r3, r2
 800cd72:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d034      	beq.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd8a:	d01d      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800cd8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd90:	d817      	bhi.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d003      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800cd96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd9a:	d009      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800cd9c:	e011      	b.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3304      	adds	r3, #4
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 fbff 	bl	800d5a8 <RCCEx_PLL2_Config>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdae:	e00c      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	3324      	adds	r3, #36	; 0x24
 800cdb4:	2102      	movs	r1, #2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 fca8 	bl	800d70c <RCCEx_PLL3_Config>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cdc0:	e003      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	75fb      	strb	r3, [r7, #23]
      break;
 800cdc6:	e000      	b.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800cdc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10a      	bne.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdd0:	4b5e      	ldr	r3, [pc, #376]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cdde:	495b      	ldr	r1, [pc, #364]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cde0:	4313      	orrs	r3, r2
 800cde2:	658b      	str	r3, [r1, #88]	; 0x58
 800cde4:	e001      	b.n	800cdea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d033      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce00:	d01c      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800ce02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce06:	d816      	bhi.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800ce08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce0c:	d003      	beq.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ce0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce12:	d007      	beq.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800ce14:	e00f      	b.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce16:	4b4d      	ldr	r3, [pc, #308]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1a:	4a4c      	ldr	r2, [pc, #304]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce22:	e00c      	b.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3324      	adds	r3, #36	; 0x24
 800ce28:	2101      	movs	r1, #1
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fc6e 	bl	800d70c <RCCEx_PLL3_Config>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce34:	e003      	b.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	75fb      	strb	r3, [r7, #23]
      break;
 800ce3a:	e000      	b.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800ce3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10a      	bne.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ce44:	4b41      	ldr	r3, [pc, #260]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce52:	493e      	ldr	r1, [pc, #248]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	654b      	str	r3, [r1, #84]	; 0x54
 800ce58:	e001      	b.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d029      	beq.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800ce72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce76:	d007      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800ce78:	e00f      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce7a:	4b34      	ldr	r3, [pc, #208]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	4a33      	ldr	r2, [pc, #204]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ce86:	e00b      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	2102      	movs	r1, #2
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 fb8a 	bl	800d5a8 <RCCEx_PLL2_Config>
 800ce94:	4603      	mov	r3, r0
 800ce96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ce98:	e002      	b.n	800cea0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d109      	bne.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cea6:	4b29      	ldr	r3, [pc, #164]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb2:	4926      	ldr	r1, [pc, #152]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ceb8:	e001      	b.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3324      	adds	r3, #36	; 0x24
 800cece:	2102      	movs	r1, #2
 800ced0:	4618      	mov	r0, r3
 800ced2:	f000 fc1b 	bl	800d70c <RCCEx_PLL3_Config>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800cedc:	2301      	movs	r3, #1
 800cede:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d033      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cef4:	d017      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cefa:	d811      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf00:	d013      	beq.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cf02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf06:	d80b      	bhi.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d010      	beq.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800cf0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf10:	d106      	bne.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf12:	4b0e      	ldr	r3, [pc, #56]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf16:	4a0d      	ldr	r2, [pc, #52]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cf1e:	e007      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	75fb      	strb	r3, [r7, #23]
      break;
 800cf24:	e004      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf26:	bf00      	nop
 800cf28:	e002      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf2a:	bf00      	nop
 800cf2c:	e000      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10c      	bne.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf42:	4902      	ldr	r1, [pc, #8]	; (800cf4c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	654b      	str	r3, [r1, #84]	; 0x54
 800cf48:	e004      	b.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cf4a:	bf00      	nop
 800cf4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d008      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cf60:	4b31      	ldr	r3, [pc, #196]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6c:	492e      	ldr	r1, [pc, #184]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d009      	beq.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cf7e:	4b2a      	ldr	r3, [pc, #168]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf8c:	4926      	ldr	r1, [pc, #152]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d008      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cf9e:	4b22      	ldr	r3, [pc, #136]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfaa:	491f      	ldr	r1, [pc, #124]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00d      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	4a19      	ldr	r2, [pc, #100]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfc6:	6113      	str	r3, [r2, #16]
 800cfc8:	4b17      	ldr	r3, [pc, #92]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfca:	691a      	ldr	r2, [r3, #16]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cfd2:	4915      	ldr	r1, [pc, #84]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	da08      	bge.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cfe0:	4b11      	ldr	r3, [pc, #68]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfec:	490e      	ldr	r1, [pc, #56]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d009      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cffe:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d002:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d00c:	4906      	ldr	r1, [pc, #24]	; (800d028 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d012:	7dbb      	ldrb	r3, [r7, #22]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	e000      	b.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	58024400 	.word	0x58024400

0800d02c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d030:	f7ff f85a 	bl	800c0e8 <HAL_RCC_GetHCLKFreq>
 800d034:	4602      	mov	r2, r0
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	091b      	lsrs	r3, r3, #4
 800d03c:	f003 0307 	and.w	r3, r3, #7
 800d040:	4904      	ldr	r1, [pc, #16]	; (800d054 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d042:	5ccb      	ldrb	r3, [r1, r3]
 800d044:	f003 031f 	and.w	r3, r3, #31
 800d048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	58024400 	.word	0x58024400
 800d054:	080306ec 	.word	0x080306ec

0800d058 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d058:	b480      	push	{r7}
 800d05a:	b089      	sub	sp, #36	; 0x24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d060:	4ba1      	ldr	r3, [pc, #644]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d06a:	4b9f      	ldr	r3, [pc, #636]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d06e:	0b1b      	lsrs	r3, r3, #12
 800d070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d074:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d076:	4b9c      	ldr	r3, [pc, #624]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	091b      	lsrs	r3, r3, #4
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d082:	4b99      	ldr	r3, [pc, #612]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d086:	08db      	lsrs	r3, r3, #3
 800d088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	fb02 f303 	mul.w	r3, r2, r3
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 8111 	beq.w	800d2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	f000 8083 	beq.w	800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	f200 80a1 	bhi.w	800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d003      	beq.n	800d0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d056      	beq.n	800d170 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d0c2:	e099      	b.n	800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0c4:	4b88      	ldr	r3, [pc, #544]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 0320 	and.w	r3, r3, #32
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d02d      	beq.n	800d12c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d0d0:	4b85      	ldr	r3, [pc, #532]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	08db      	lsrs	r3, r3, #3
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	4a84      	ldr	r2, [pc, #528]	; (800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	ee07 3a90 	vmov	s15, r3
 800d0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0fa:	4b7b      	ldr	r3, [pc, #492]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d10e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d12a:	e087      	b.n	800d23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	ee07 3a90 	vmov	s15, r3
 800d132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d13e:	4b6a      	ldr	r3, [pc, #424]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d146:	ee07 3a90 	vmov	s15, r3
 800d14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d152:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d16e:	e065      	b.n	800d23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	ee07 3a90 	vmov	s15, r3
 800d176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d182:	4b59      	ldr	r3, [pc, #356]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18a:	ee07 3a90 	vmov	s15, r3
 800d18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d192:	ed97 6a03 	vldr	s12, [r7, #12]
 800d196:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1b2:	e043      	b.n	800d23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1c6:	4b48      	ldr	r3, [pc, #288]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ce:	ee07 3a90 	vmov	s15, r3
 800d1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1f6:	e021      	b.n	800d23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	ee07 3a90 	vmov	s15, r3
 800d1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d20a:	4b37      	ldr	r3, [pc, #220]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d212:	ee07 3a90 	vmov	s15, r3
 800d216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d21e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d23a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d23c:	4b2a      	ldr	r3, [pc, #168]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d240:	0a5b      	lsrs	r3, r3, #9
 800d242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d256:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d262:	ee17 2a90 	vmov	r2, s15
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d26a:	4b1f      	ldr	r3, [pc, #124]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26e:	0c1b      	lsrs	r3, r3, #16
 800d270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d274:	ee07 3a90 	vmov	s15, r3
 800d278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d284:	edd7 6a07 	vldr	s13, [r7, #28]
 800d288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d290:	ee17 2a90 	vmov	r2, s15
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d298:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29c:	0e1b      	lsrs	r3, r3, #24
 800d29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a2:	ee07 3a90 	vmov	s15, r3
 800d2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2be:	ee17 2a90 	vmov	r2, s15
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d2c6:	e008      	b.n	800d2da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	609a      	str	r2, [r3, #8]
}
 800d2da:	bf00      	nop
 800d2dc:	3724      	adds	r7, #36	; 0x24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	58024400 	.word	0x58024400
 800d2ec:	03d09000 	.word	0x03d09000
 800d2f0:	46000000 	.word	0x46000000
 800d2f4:	4c742400 	.word	0x4c742400
 800d2f8:	4a742400 	.word	0x4a742400
 800d2fc:	4bbebc20 	.word	0x4bbebc20

0800d300 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d300:	b480      	push	{r7}
 800d302:	b089      	sub	sp, #36	; 0x24
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d308:	4ba1      	ldr	r3, [pc, #644]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30c:	f003 0303 	and.w	r3, r3, #3
 800d310:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d312:	4b9f      	ldr	r3, [pc, #636]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d316:	0d1b      	lsrs	r3, r3, #20
 800d318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d31c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d31e:	4b9c      	ldr	r3, [pc, #624]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d322:	0a1b      	lsrs	r3, r3, #8
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d32a:	4b99      	ldr	r3, [pc, #612]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d32e:	08db      	lsrs	r3, r3, #3
 800d330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	fb02 f303 	mul.w	r3, r2, r3
 800d33a:	ee07 3a90 	vmov	s15, r3
 800d33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 8111 	beq.w	800d570 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	2b02      	cmp	r3, #2
 800d352:	f000 8083 	beq.w	800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	f200 80a1 	bhi.w	800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	2b01      	cmp	r3, #1
 800d368:	d056      	beq.n	800d418 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d36a:	e099      	b.n	800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d36c:	4b88      	ldr	r3, [pc, #544]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f003 0320 	and.w	r3, r3, #32
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02d      	beq.n	800d3d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d378:	4b85      	ldr	r3, [pc, #532]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	08db      	lsrs	r3, r3, #3
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	4a84      	ldr	r2, [pc, #528]	; (800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d384:	fa22 f303 	lsr.w	r3, r2, r3
 800d388:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	ee07 3a90 	vmov	s15, r3
 800d390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3a2:	4b7b      	ldr	r3, [pc, #492]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d3d2:	e087      	b.n	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d59c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e6:	4b6a      	ldr	r3, [pc, #424]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d416:	e065      	b.n	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	ee07 3a90 	vmov	s15, r3
 800d41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d422:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d42a:	4b59      	ldr	r3, [pc, #356]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d432:	ee07 3a90 	vmov	s15, r3
 800d436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d45a:	e043      	b.n	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	ee07 3a90 	vmov	s15, r3
 800d462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d466:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d46e:	4b48      	ldr	r3, [pc, #288]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d476:	ee07 3a90 	vmov	s15, r3
 800d47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d482:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d49a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d49e:	e021      	b.n	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	ee07 3a90 	vmov	s15, r3
 800d4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b2:	4b37      	ldr	r3, [pc, #220]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ba:	ee07 3a90 	vmov	s15, r3
 800d4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d4e4:	4b2a      	ldr	r3, [pc, #168]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	0a5b      	lsrs	r3, r3, #9
 800d4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50a:	ee17 2a90 	vmov	r2, s15
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d512:	4b1f      	ldr	r3, [pc, #124]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	0c1b      	lsrs	r3, r3, #16
 800d518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51c:	ee07 3a90 	vmov	s15, r3
 800d520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d52c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d538:	ee17 2a90 	vmov	r2, s15
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d540:	4b13      	ldr	r3, [pc, #76]	; (800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d544:	0e1b      	lsrs	r3, r3, #24
 800d546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d54a:	ee07 3a90 	vmov	s15, r3
 800d54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d55a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d55e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d566:	ee17 2a90 	vmov	r2, s15
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d56e:	e008      	b.n	800d582 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	609a      	str	r2, [r3, #8]
}
 800d582:	bf00      	nop
 800d584:	3724      	adds	r7, #36	; 0x24
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	58024400 	.word	0x58024400
 800d594:	03d09000 	.word	0x03d09000
 800d598:	46000000 	.word	0x46000000
 800d59c:	4c742400 	.word	0x4c742400
 800d5a0:	4a742400 	.word	0x4a742400
 800d5a4:	4bbebc20 	.word	0x4bbebc20

0800d5a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d5b6:	4b53      	ldr	r3, [pc, #332]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ba:	f003 0303 	and.w	r3, r3, #3
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d101      	bne.n	800d5c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e099      	b.n	800d6fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d5c6:	4b4f      	ldr	r3, [pc, #316]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a4e      	ldr	r2, [pc, #312]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d2:	f7f7 febb 	bl	800534c <HAL_GetTick>
 800d5d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5d8:	e008      	b.n	800d5ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d5da:	f7f7 feb7 	bl	800534c <HAL_GetTick>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d901      	bls.n	800d5ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	e086      	b.n	800d6fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5ec:	4b45      	ldr	r3, [pc, #276]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1f0      	bne.n	800d5da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d5f8:	4b42      	ldr	r3, [pc, #264]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	031b      	lsls	r3, r3, #12
 800d606:	493f      	ldr	r1, [pc, #252]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d608:	4313      	orrs	r3, r2
 800d60a:	628b      	str	r3, [r1, #40]	; 0x28
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	3b01      	subs	r3, #1
 800d612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	025b      	lsls	r3, r3, #9
 800d61e:	b29b      	uxth	r3, r3
 800d620:	431a      	orrs	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	3b01      	subs	r3, #1
 800d628:	041b      	lsls	r3, r3, #16
 800d62a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d62e:	431a      	orrs	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	3b01      	subs	r3, #1
 800d636:	061b      	lsls	r3, r3, #24
 800d638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d63c:	4931      	ldr	r1, [pc, #196]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d63e:	4313      	orrs	r3, r2
 800d640:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d642:	4b30      	ldr	r3, [pc, #192]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	492d      	ldr	r1, [pc, #180]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d650:	4313      	orrs	r3, r2
 800d652:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d654:	4b2b      	ldr	r3, [pc, #172]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	f023 0220 	bic.w	r2, r3, #32
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	4928      	ldr	r1, [pc, #160]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d662:	4313      	orrs	r3, r2
 800d664:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d666:	4b27      	ldr	r3, [pc, #156]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66a:	4a26      	ldr	r2, [pc, #152]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d66c:	f023 0310 	bic.w	r3, r3, #16
 800d670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d672:	4b24      	ldr	r3, [pc, #144]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d676:	4b24      	ldr	r3, [pc, #144]	; (800d708 <RCCEx_PLL2_Config+0x160>)
 800d678:	4013      	ands	r3, r2
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	69d2      	ldr	r2, [r2, #28]
 800d67e:	00d2      	lsls	r2, r2, #3
 800d680:	4920      	ldr	r1, [pc, #128]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d682:	4313      	orrs	r3, r2
 800d684:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d686:	4b1f      	ldr	r3, [pc, #124]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68a:	4a1e      	ldr	r2, [pc, #120]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d68c:	f043 0310 	orr.w	r3, r3, #16
 800d690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d106      	bne.n	800d6a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d698:	4b1a      	ldr	r3, [pc, #104]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69c:	4a19      	ldr	r2, [pc, #100]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d69e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6a4:	e00f      	b.n	800d6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d106      	bne.n	800d6ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d6ac:	4b15      	ldr	r3, [pc, #84]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b0:	4a14      	ldr	r2, [pc, #80]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6b8:	e005      	b.n	800d6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d6ba:	4b12      	ldr	r3, [pc, #72]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6be:	4a11      	ldr	r2, [pc, #68]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d6c6:	4b0f      	ldr	r3, [pc, #60]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a0e      	ldr	r2, [pc, #56]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d2:	f7f7 fe3b 	bl	800534c <HAL_GetTick>
 800d6d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6d8:	e008      	b.n	800d6ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d6da:	f7f7 fe37 	bl	800534c <HAL_GetTick>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	2b02      	cmp	r3, #2
 800d6e6:	d901      	bls.n	800d6ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	e006      	b.n	800d6fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6ec:	4b05      	ldr	r3, [pc, #20]	; (800d704 <RCCEx_PLL2_Config+0x15c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d0f0      	beq.n	800d6da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	58024400 	.word	0x58024400
 800d708:	ffff0007 	.word	0xffff0007

0800d70c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d71a:	4b53      	ldr	r3, [pc, #332]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71e:	f003 0303 	and.w	r3, r3, #3
 800d722:	2b03      	cmp	r3, #3
 800d724:	d101      	bne.n	800d72a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	e099      	b.n	800d85e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d72a:	4b4f      	ldr	r3, [pc, #316]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a4e      	ldr	r2, [pc, #312]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d736:	f7f7 fe09 	bl	800534c <HAL_GetTick>
 800d73a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d73c:	e008      	b.n	800d750 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d73e:	f7f7 fe05 	bl	800534c <HAL_GetTick>
 800d742:	4602      	mov	r2, r0
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	1ad3      	subs	r3, r2, r3
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d901      	bls.n	800d750 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e086      	b.n	800d85e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d750:	4b45      	ldr	r3, [pc, #276]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1f0      	bne.n	800d73e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d75c:	4b42      	ldr	r3, [pc, #264]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	051b      	lsls	r3, r3, #20
 800d76a:	493f      	ldr	r1, [pc, #252]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d76c:	4313      	orrs	r3, r2
 800d76e:	628b      	str	r3, [r1, #40]	; 0x28
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	3b01      	subs	r3, #1
 800d776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	3b01      	subs	r3, #1
 800d780:	025b      	lsls	r3, r3, #9
 800d782:	b29b      	uxth	r3, r3
 800d784:	431a      	orrs	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	041b      	lsls	r3, r3, #16
 800d78e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d792:	431a      	orrs	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	3b01      	subs	r3, #1
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7a0:	4931      	ldr	r1, [pc, #196]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d7a6:	4b30      	ldr	r3, [pc, #192]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	492d      	ldr	r1, [pc, #180]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d7b8:	4b2b      	ldr	r3, [pc, #172]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	4928      	ldr	r1, [pc, #160]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d7ca:	4b27      	ldr	r3, [pc, #156]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ce:	4a26      	ldr	r2, [pc, #152]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d7d6:	4b24      	ldr	r3, [pc, #144]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7da:	4b24      	ldr	r3, [pc, #144]	; (800d86c <RCCEx_PLL3_Config+0x160>)
 800d7dc:	4013      	ands	r3, r2
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	69d2      	ldr	r2, [r2, #28]
 800d7e2:	00d2      	lsls	r2, r2, #3
 800d7e4:	4920      	ldr	r1, [pc, #128]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d7ea:	4b1f      	ldr	r3, [pc, #124]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ee:	4a1e      	ldr	r2, [pc, #120]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d7fc:	4b1a      	ldr	r3, [pc, #104]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	4a19      	ldr	r2, [pc, #100]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d806:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d808:	e00f      	b.n	800d82a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d106      	bne.n	800d81e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d810:	4b15      	ldr	r3, [pc, #84]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	4a14      	ldr	r2, [pc, #80]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d81a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d81c:	e005      	b.n	800d82a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d81e:	4b12      	ldr	r3, [pc, #72]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d822:	4a11      	ldr	r2, [pc, #68]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d82a:	4b0f      	ldr	r3, [pc, #60]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a0e      	ldr	r2, [pc, #56]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d836:	f7f7 fd89 	bl	800534c <HAL_GetTick>
 800d83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d83c:	e008      	b.n	800d850 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d83e:	f7f7 fd85 	bl	800534c <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d901      	bls.n	800d850 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d84c:	2303      	movs	r3, #3
 800d84e:	e006      	b.n	800d85e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d850:	4b05      	ldr	r3, [pc, #20]	; (800d868 <RCCEx_PLL3_Config+0x15c>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d0f0      	beq.n	800d83e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	58024400 	.word	0x58024400
 800d86c:	ffff0007 	.word	0xffff0007

0800d870 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e0f1      	b.n	800da66 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a78      	ldr	r2, [pc, #480]	; (800da70 <HAL_SPI_Init+0x200>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d00f      	beq.n	800d8b2 <HAL_SPI_Init+0x42>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a77      	ldr	r2, [pc, #476]	; (800da74 <HAL_SPI_Init+0x204>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d00a      	beq.n	800d8b2 <HAL_SPI_Init+0x42>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a75      	ldr	r2, [pc, #468]	; (800da78 <HAL_SPI_Init+0x208>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d005      	beq.n	800d8b2 <HAL_SPI_Init+0x42>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	2b0f      	cmp	r3, #15
 800d8ac:	d901      	bls.n	800d8b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e0d9      	b.n	800da66 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f001 f902 	bl	800eabc <SPI_GetPacketSize>
 800d8b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a6c      	ldr	r2, [pc, #432]	; (800da70 <HAL_SPI_Init+0x200>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00c      	beq.n	800d8de <HAL_SPI_Init+0x6e>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a6a      	ldr	r2, [pc, #424]	; (800da74 <HAL_SPI_Init+0x204>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d007      	beq.n	800d8de <HAL_SPI_Init+0x6e>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a69      	ldr	r2, [pc, #420]	; (800da78 <HAL_SPI_Init+0x208>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d002      	beq.n	800d8de <HAL_SPI_Init+0x6e>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b08      	cmp	r3, #8
 800d8dc:	d811      	bhi.n	800d902 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d8e2:	4a63      	ldr	r2, [pc, #396]	; (800da70 <HAL_SPI_Init+0x200>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d009      	beq.n	800d8fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a61      	ldr	r2, [pc, #388]	; (800da74 <HAL_SPI_Init+0x204>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d004      	beq.n	800d8fc <HAL_SPI_Init+0x8c>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a60      	ldr	r2, [pc, #384]	; (800da78 <HAL_SPI_Init+0x208>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d104      	bne.n	800d906 <HAL_SPI_Init+0x96>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2b10      	cmp	r3, #16
 800d900:	d901      	bls.n	800d906 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	e0af      	b.n	800da66 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d106      	bne.n	800d920 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7f5 ff42 	bl	80037a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f022 0201 	bic.w	r2, r2, #1
 800d936:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d942:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d94c:	d119      	bne.n	800d982 <HAL_SPI_Init+0x112>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d956:	d103      	bne.n	800d960 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d008      	beq.n	800d972 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10c      	bne.n	800d982 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d970:	d107      	bne.n	800d982 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	69da      	ldr	r2, [r3, #28]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d98a:	431a      	orrs	r2, r3
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	431a      	orrs	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d994:	ea42 0103 	orr.w	r1, r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68da      	ldr	r2, [r3, #12]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b2:	431a      	orrs	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e2:	ea42 0103 	orr.w	r1, r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d113      	bne.n	800da22 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f022 0201 	bic.w	r2, r2, #1
 800da30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00a      	beq.n	800da54 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	430a      	orrs	r2, r1
 800da52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	40013000 	.word	0x40013000
 800da74:	40003800 	.word	0x40003800
 800da78:	40003c00 	.word	0x40003c00

0800da7c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da8a:	2300      	movs	r3, #0
 800da8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da94:	2b01      	cmp	r3, #1
 800da96:	d101      	bne.n	800da9c <HAL_SPI_Transmit_DMA+0x20>
 800da98:	2302      	movs	r3, #2
 800da9a:	e12c      	b.n	800dcf6 <HAL_SPI_Transmit_DMA+0x27a>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b01      	cmp	r3, #1
 800daae:	d007      	beq.n	800dac0 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800dab0:	2302      	movs	r3, #2
 800dab2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	e11a      	b.n	800dcf6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <HAL_SPI_Transmit_DMA+0x50>
 800dac6:	88fb      	ldrh	r3, [r7, #6]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d107      	bne.n	800dadc <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
 800dada:	e10c      	b.n	800dcf6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2203      	movs	r2, #3
 800dae0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	88fa      	ldrh	r2, [r7, #6]
 800daf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	88fa      	ldrh	r2, [r7, #6]
 800dafe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2200      	movs	r2, #0
 800db06:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800db2c:	d107      	bne.n	800db3e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db3c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	2b0f      	cmp	r3, #15
 800db44:	d905      	bls.n	800db52 <HAL_SPI_Transmit_DMA+0xd6>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db50:	d10f      	bne.n	800db72 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800db56:	2b07      	cmp	r3, #7
 800db58:	d913      	bls.n	800db82 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db64:	d00d      	beq.n	800db82 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db6a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800db6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db70:	d007      	beq.n	800db82 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	e0b9      	b.n	800dcf6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	2b07      	cmp	r3, #7
 800db88:	d820      	bhi.n	800dbcc <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db94:	d109      	bne.n	800dbaa <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3301      	adds	r3, #1
 800dba0:	105b      	asrs	r3, r3, #1
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbae:	699b      	ldr	r3, [r3, #24]
 800dbb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbb4:	d11e      	bne.n	800dbf4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	3303      	adds	r3, #3
 800dbc0:	109b      	asrs	r3, r3, #2
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dbca:	e013      	b.n	800dbf4 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	2b0f      	cmp	r3, #15
 800dbd2:	d80f      	bhi.n	800dbf4 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbde:	d109      	bne.n	800dbf4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	3301      	adds	r3, #1
 800dbea:	105b      	asrs	r3, r3, #1
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbf8:	4a41      	ldr	r2, [pc, #260]	; (800dd00 <HAL_SPI_Transmit_DMA+0x284>)
 800dbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc00:	4a40      	ldr	r2, [pc, #256]	; (800dd04 <HAL_SPI_Transmit_DMA+0x288>)
 800dc02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc08:	4a3f      	ldr	r2, [pc, #252]	; (800dd08 <HAL_SPI_Transmit_DMA+0x28c>)
 800dc0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc10:	2200      	movs	r2, #0
 800dc12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689a      	ldr	r2, [r3, #8]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc22:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3320      	adds	r3, #32
 800dc34:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dc3e:	f7f8 f82d 	bl	8005c9c <HAL_DMA_Start_IT>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d013      	beq.n	800dc70 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc4e:	f043 0210 	orr.w	r2, r3, #16
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	e042      	b.n	800dcf6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc7a:	d108      	bne.n	800dc8e <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6859      	ldr	r1, [r3, #4]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4b21      	ldr	r3, [pc, #132]	; (800dd0c <HAL_SPI_Transmit_DMA+0x290>)
 800dc88:	400b      	ands	r3, r1
 800dc8a:	6053      	str	r3, [r2, #4]
 800dc8c:	e009      	b.n	800dca2 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	4b1d      	ldr	r3, [pc, #116]	; (800dd0c <HAL_SPI_Transmit_DMA+0x290>)
 800dc96:	4013      	ands	r3, r2
 800dc98:	88f9      	ldrh	r1, [r7, #6]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	6812      	ldr	r2, [r2, #0]
 800dc9e:	430b      	orrs	r3, r1
 800dca0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	689a      	ldr	r2, [r3, #8]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcb0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	691a      	ldr	r2, [r3, #16]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800dcc0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0201 	orr.w	r2, r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcda:	d107      	bne.n	800dcec <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcea:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	0800e8af 	.word	0x0800e8af
 800dd04:	0800e7dd 	.word	0x0800e7dd
 800dd08:	0800e903 	.word	0x0800e903
 800dd0c:	ffff0000 	.word	0xffff0000

0800dd10 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d110      	bne.n	800dd4c <HAL_SPI_Receive_DMA+0x3c>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd32:	d10b      	bne.n	800dd4c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2204      	movs	r2, #4
 800dd38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800dd3c:	88fb      	ldrh	r3, [r7, #6]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	68b9      	ldr	r1, [r7, #8]
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f000 f940 	bl	800dfc8 <HAL_SPI_TransmitReceive_DMA>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	e130      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d101      	bne.n	800dd5a <HAL_SPI_Receive_DMA+0x4a>
 800dd56:	2302      	movs	r3, #2
 800dd58:	e129      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d007      	beq.n	800dd7e <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	e117      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <HAL_SPI_Receive_DMA+0x7a>
 800dd84:	88fb      	ldrh	r3, [r7, #6]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d107      	bne.n	800dd9a <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	e109      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2204      	movs	r2, #4
 800dd9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	88fa      	ldrh	r2, [r7, #6]
 800ddb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	88fa      	ldrh	r2, [r7, #6]
 800ddbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dde4:	d107      	bne.n	800ddf6 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddf4:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	2b0f      	cmp	r3, #15
 800ddfc:	d905      	bls.n	800de0a <HAL_SPI_Receive_DMA+0xfa>
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de02:	699b      	ldr	r3, [r3, #24]
 800de04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de08:	d10f      	bne.n	800de2a <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800de0e:	2b07      	cmp	r3, #7
 800de10:	d913      	bls.n	800de3a <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de16:	699b      	ldr	r3, [r3, #24]
 800de18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de1c:	d00d      	beq.n	800de3a <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de22:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800de24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de28:	d007      	beq.n	800de3a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	e0b9      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de48:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	2b07      	cmp	r3, #7
 800de50:	d820      	bhi.n	800de94 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de5c:	d109      	bne.n	800de72 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de64:	b29b      	uxth	r3, r3
 800de66:	3301      	adds	r3, #1
 800de68:	105b      	asrs	r3, r3, #1
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de7c:	d11e      	bne.n	800debc <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de84:	b29b      	uxth	r3, r3
 800de86:	3303      	adds	r3, #3
 800de88:	109b      	asrs	r3, r3, #2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de92:	e013      	b.n	800debc <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	2b0f      	cmp	r3, #15
 800de9a:	d80f      	bhi.n	800debc <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea6:	d109      	bne.n	800debc <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3301      	adds	r3, #1
 800deb2:	105b      	asrs	r3, r3, #1
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dec0:	4a3d      	ldr	r2, [pc, #244]	; (800dfb8 <HAL_SPI_Receive_DMA+0x2a8>)
 800dec2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dec8:	4a3c      	ldr	r2, [pc, #240]	; (800dfbc <HAL_SPI_Receive_DMA+0x2ac>)
 800deca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ded0:	4a3b      	ldr	r2, [pc, #236]	; (800dfc0 <HAL_SPI_Receive_DMA+0x2b0>)
 800ded2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ded8:	2200      	movs	r2, #0
 800deda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3330      	adds	r3, #48	; 0x30
 800dee6:	4619      	mov	r1, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800def4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800def6:	f7f7 fed1 	bl	8005c9c <HAL_DMA_Start_IT>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d013      	beq.n	800df28 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df06:	f043 0210 	orr.w	r2, r3, #16
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	e042      	b.n	800dfae <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2c:	69db      	ldr	r3, [r3, #28]
 800df2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df32:	d108      	bne.n	800df46 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6859      	ldr	r1, [r3, #4]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	4b21      	ldr	r3, [pc, #132]	; (800dfc4 <HAL_SPI_Receive_DMA+0x2b4>)
 800df40:	400b      	ands	r3, r1
 800df42:	6053      	str	r3, [r2, #4]
 800df44:	e009      	b.n	800df5a <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	4b1d      	ldr	r3, [pc, #116]	; (800dfc4 <HAL_SPI_Receive_DMA+0x2b4>)
 800df4e:	4013      	ands	r3, r2
 800df50:	88f9      	ldrh	r1, [r7, #6]
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	6812      	ldr	r2, [r2, #0]
 800df56:	430b      	orrs	r3, r1
 800df58:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	689a      	ldr	r2, [r3, #8]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df68:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	691a      	ldr	r2, [r3, #16]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800df78:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f042 0201 	orr.w	r2, r2, #1
 800df88:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df92:	d107      	bne.n	800dfa4 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfa2:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	0800e8cb 	.word	0x0800e8cb
 800dfbc:	0800e823 	.word	0x0800e823
 800dfc0:	0800e903 	.word	0x0800e903
 800dfc4:	ffff0000 	.word	0xffff0000

0800dfc8 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d101      	bne.n	800dfe8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	e1b4      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dff6:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dffe:	7dbb      	ldrb	r3, [r7, #22]
 800e000:	2b01      	cmp	r3, #1
 800e002:	d012      	beq.n	800e02a <HAL_SPI_TransmitReceive_DMA+0x62>
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e00a:	d106      	bne.n	800e01a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e014:	7dbb      	ldrb	r3, [r7, #22]
 800e016:	2b04      	cmp	r3, #4
 800e018:	d007      	beq.n	800e02a <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800e01a:	2302      	movs	r3, #2
 800e01c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	e193      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <HAL_SPI_TransmitReceive_DMA+0x74>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d002      	beq.n	800e03c <HAL_SPI_TransmitReceive_DMA+0x74>
 800e036:	887b      	ldrh	r3, [r7, #2]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d107      	bne.n	800e04c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2200      	movs	r2, #0
 800e044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e048:	7dfb      	ldrb	r3, [r7, #23]
 800e04a:	e182      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b04      	cmp	r3, #4
 800e056:	d003      	beq.n	800e060 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2205      	movs	r2, #5
 800e05c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	887a      	ldrh	r2, [r7, #2]
 800e072:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	887a      	ldrh	r2, [r7, #2]
 800e07a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	887a      	ldrh	r2, [r7, #2]
 800e088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	887a      	ldrh	r2, [r7, #2]
 800e090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e0ae:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	2b0f      	cmp	r3, #15
 800e0b6:	d905      	bls.n	800e0c4 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0c2:	d10f      	bne.n	800e0e4 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e0c8:	2b07      	cmp	r3, #7
 800e0ca:	d913      	bls.n	800e0f4 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0d6:	d00d      	beq.n	800e0f4 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0dc:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0e2:	d007      	beq.n	800e0f4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	e12e      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	2b07      	cmp	r3, #7
 800e0fa:	d840      	bhi.n	800e17e <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e106:	d109      	bne.n	800e11c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e10e:	b29b      	uxth	r3, r3
 800e110:	3301      	adds	r3, #1
 800e112:	105b      	asrs	r3, r3, #1
 800e114:	b29a      	uxth	r2, r3
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e120:	699b      	ldr	r3, [r3, #24]
 800e122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e126:	d109      	bne.n	800e13c <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e12e:	b29b      	uxth	r3, r3
 800e130:	3303      	adds	r3, #3
 800e132:	109b      	asrs	r3, r3, #2
 800e134:	b29a      	uxth	r2, r3
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e140:	699b      	ldr	r3, [r3, #24]
 800e142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e146:	d109      	bne.n	800e15c <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3301      	adds	r3, #1
 800e152:	105b      	asrs	r3, r3, #1
 800e154:	b29a      	uxth	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e166:	d12e      	bne.n	800e1c6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e16e:	b29b      	uxth	r3, r3
 800e170:	3303      	adds	r3, #3
 800e172:	109b      	asrs	r3, r3, #2
 800e174:	b29a      	uxth	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e17c:	e023      	b.n	800e1c6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	2b0f      	cmp	r3, #15
 800e184:	d81f      	bhi.n	800e1c6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e190:	d109      	bne.n	800e1a6 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e198:	b29b      	uxth	r3, r3
 800e19a:	3301      	adds	r3, #1
 800e19c:	105b      	asrs	r3, r3, #1
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1b0:	d109      	bne.n	800e1c6 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	105b      	asrs	r3, r3, #1
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d108      	bne.n	800e1e4 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d6:	4a61      	ldr	r2, [pc, #388]	; (800e35c <HAL_SPI_TransmitReceive_DMA+0x394>)
 800e1d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1de:	4a60      	ldr	r2, [pc, #384]	; (800e360 <HAL_SPI_TransmitReceive_DMA+0x398>)
 800e1e0:	63da      	str	r2, [r3, #60]	; 0x3c
 800e1e2:	e007      	b.n	800e1f4 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e8:	4a5e      	ldr	r2, [pc, #376]	; (800e364 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800e1ea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f0:	4a5d      	ldr	r2, [pc, #372]	; (800e368 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800e1f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f8:	4a5c      	ldr	r2, [pc, #368]	; (800e36c <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800e1fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e200:	2200      	movs	r2, #0
 800e202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3330      	adds	r3, #48	; 0x30
 800e20e:	4619      	mov	r1, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e214:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e21c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e21e:	f7f7 fd3d 	bl	8005c9c <HAL_DMA_Start_IT>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d013      	beq.n	800e250 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e22e:	f043 0210 	orr.w	r2, r3, #16
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
 800e24e:	e080      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689a      	ldr	r2, [r3, #8]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e25e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e264:	2200      	movs	r2, #0
 800e266:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e26c:	2200      	movs	r2, #0
 800e26e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e274:	2200      	movs	r2, #0
 800e276:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e27c:	2200      	movs	r2, #0
 800e27e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e288:	4619      	mov	r1, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3320      	adds	r3, #32
 800e290:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e298:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e29a:	f7f7 fcff 	bl	8005c9c <HAL_DMA_Start_IT>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d013      	beq.n	800e2cc <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2aa:	f043 0210 	orr.w	r2, r3, #16
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800e2c8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ca:	e042      	b.n	800e352 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2d6:	d108      	bne.n	800e2ea <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6859      	ldr	r1, [r3, #4]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b23      	ldr	r3, [pc, #140]	; (800e370 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800e2e4:	400b      	ands	r3, r1
 800e2e6:	6053      	str	r3, [r2, #4]
 800e2e8:	e009      	b.n	800e2fe <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685a      	ldr	r2, [r3, #4]
 800e2f0:	4b1f      	ldr	r3, [pc, #124]	; (800e370 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	8879      	ldrh	r1, [r7, #2]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	6812      	ldr	r2, [r2, #0]
 800e2fa:	430b      	orrs	r3, r1
 800e2fc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689a      	ldr	r2, [r3, #8]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e30c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	691a      	ldr	r2, [r3, #16]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800e31c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f042 0201 	orr.w	r2, r2, #1
 800e32c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e336:	d107      	bne.n	800e348 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e346:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800e350:	7dfb      	ldrb	r3, [r7, #23]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3718      	adds	r7, #24
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	0800e8cb 	.word	0x0800e8cb
 800e360:	0800e823 	.word	0x0800e823
 800e364:	0800e8e7 	.word	0x0800e8e7
 800e368:	0800e869 	.word	0x0800e869
 800e36c:	0800e903 	.word	0x0800e903
 800e370:	ffff0000 	.word	0xffff0000

0800e374 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08a      	sub	sp, #40	; 0x28
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800e38c:	6a3a      	ldr	r2, [r7, #32]
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	4013      	ands	r3, r2
 800e392:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3a6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3330      	adds	r3, #48	; 0x30
 800e3ae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d113      	bne.n	800e3e2 <HAL_SPI_IRQHandler+0x6e>
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	f003 0320 	and.w	r3, r3, #32
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d10e      	bne.n	800e3e2 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	4798      	blx	r3
    handled = 1UL;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10f      	bne.n	800e40c <HAL_SPI_IRQHandler+0x98>
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00a      	beq.n	800e40c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d105      	bne.n	800e40c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	4798      	blx	r3
    handled = 1UL;
 800e408:	2301      	movs	r3, #1
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10f      	bne.n	800e436 <HAL_SPI_IRQHandler+0xc2>
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	f003 0302 	and.w	r3, r3, #2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00a      	beq.n	800e436 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e426:	2b00      	cmp	r3, #0
 800e428:	d105      	bne.n	800e436 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	4798      	blx	r3
    handled = 1UL;
 800e432:	2301      	movs	r3, #1
 800e434:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f040 816f 	bne.w	800e71c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	f003 0308 	and.w	r3, r3, #8
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 80a0 	beq.w	800e58a <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	699a      	ldr	r2, [r3, #24]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f042 0208 	orr.w	r2, r2, #8
 800e458:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	699a      	ldr	r2, [r3, #24]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f042 0210 	orr.w	r2, r2, #16
 800e468:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	699a      	ldr	r2, [r3, #24]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e478:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	691a      	ldr	r2, [r3, #16]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f022 0208 	bic.w	r2, r2, #8
 800e488:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00f      	beq.n	800e4b4 <HAL_SPI_IRQHandler+0x140>
 800e494:	7cfb      	ldrb	r3, [r7, #19]
 800e496:	2b04      	cmp	r3, #4
 800e498:	d004      	beq.n	800e4a4 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e49e:	69db      	ldr	r3, [r3, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d007      	beq.n	800e4b4 <HAL_SPI_IRQHandler+0x140>
 800e4a4:	7cfb      	ldrb	r3, [r7, #19]
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d059      	beq.n	800e55e <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ae:	69db      	ldr	r3, [r3, #28]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d154      	bne.n	800e55e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d13d      	bne.n	800e53e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800e4c2:	e036      	b.n	800e532 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	2b0f      	cmp	r3, #15
 800e4ca:	d90b      	bls.n	800e4e4 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4d6:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4dc:	1d1a      	adds	r2, r3, #4
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	665a      	str	r2, [r3, #100]	; 0x64
 800e4e2:	e01d      	b.n	800e520 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	2b07      	cmp	r3, #7
 800e4ea:	d90b      	bls.n	800e504 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	8812      	ldrh	r2, [r2, #0]
 800e4f4:	b292      	uxth	r2, r2
 800e4f6:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4fc:	1c9a      	adds	r2, r3, #2
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	665a      	str	r2, [r3, #100]	; 0x64
 800e502:	e00d      	b.n	800e520 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e510:	7812      	ldrb	r2, [r2, #0]
 800e512:	b2d2      	uxtb	r2, r2
 800e514:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e526:	b29b      	uxth	r3, r3
 800e528:	3b01      	subs	r3, #1
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e538:	b29b      	uxth	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1c2      	bne.n	800e4c4 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fa1c 	bl	800e97c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e552:	2b00      	cmp	r3, #0
 800e554:	d003      	beq.n	800e55e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f928 	bl	800e7ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800e55c:	e0e3      	b.n	800e726 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e55e:	7cfb      	ldrb	r3, [r7, #19]
 800e560:	2b05      	cmp	r3, #5
 800e562:	d103      	bne.n	800e56c <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 f8f9 	bl	800e75c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800e56a:	e0d9      	b.n	800e720 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e56c:	7cfb      	ldrb	r3, [r7, #19]
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d103      	bne.n	800e57a <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f8e8 	bl	800e748 <HAL_SPI_RxCpltCallback>
    return;
 800e578:	e0d2      	b.n	800e720 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e57a:	7cfb      	ldrb	r3, [r7, #19]
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	f040 80cf 	bne.w	800e720 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f8d6 	bl	800e734 <HAL_SPI_TxCpltCallback>
    return;
 800e588:	e0ca      	b.n	800e720 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00d      	beq.n	800e5b0 <HAL_SPI_IRQHandler+0x23c>
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	f003 0308 	and.w	r3, r3, #8
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d008      	beq.n	800e5b0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	699a      	ldr	r2, [r3, #24]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5ac:	619a      	str	r2, [r3, #24]

    return;
 800e5ae:	e0ba      	b.n	800e726 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f000 80b5 	beq.w	800e726 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00f      	beq.n	800e5e6 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5cc:	f043 0204 	orr.w	r2, r3, #4
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	699a      	ldr	r2, [r3, #24]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5e4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00f      	beq.n	800e610 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5f6:	f043 0201 	orr.w	r2, r3, #1
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	699a      	ldr	r2, [r3, #24]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e60e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00f      	beq.n	800e63a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e620:	f043 0208 	orr.w	r2, r3, #8
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	699a      	ldr	r2, [r3, #24]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e638:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	f003 0320 	and.w	r3, r3, #32
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00f      	beq.n	800e664 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e64a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	699a      	ldr	r2, [r3, #24]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f042 0220 	orr.w	r2, r2, #32
 800e662:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d05a      	beq.n	800e724 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f022 0201 	bic.w	r2, r2, #1
 800e67c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6919      	ldr	r1, [r3, #16]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	4b28      	ldr	r3, [pc, #160]	; (800e72c <HAL_SPI_IRQHandler+0x3b8>)
 800e68a:	400b      	ands	r3, r1
 800e68c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e694:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e698:	d138      	bne.n	800e70c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689a      	ldr	r2, [r3, #8]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e6a8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d013      	beq.n	800e6da <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b6:	4a1e      	ldr	r2, [pc, #120]	; (800e730 <HAL_SPI_IRQHandler+0x3bc>)
 800e6b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f8 f874 	bl	80067ac <HAL_DMA_Abort_IT>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d007      	beq.n	800e6da <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d020      	beq.n	800e724 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6e6:	4a12      	ldr	r2, [pc, #72]	; (800e730 <HAL_SPI_IRQHandler+0x3bc>)
 800e6e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7f8 f85c 	bl	80067ac <HAL_DMA_Abort_IT>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d014      	beq.n	800e724 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e70a:	e00b      	b.n	800e724 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f849 	bl	800e7ac <HAL_SPI_ErrorCallback>
    return;
 800e71a:	e003      	b.n	800e724 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800e71c:	bf00      	nop
 800e71e:	e002      	b.n	800e726 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800e720:	bf00      	nop
 800e722:	e000      	b.n	800e726 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800e724:	bf00      	nop
  }
}
 800e726:	3728      	adds	r7, #40	; 0x28
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	fffffc94 	.word	0xfffffc94
 800e730:	0800e949 	.word	0x0800e949

0800e734 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e750:	bf00      	nop
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7ce:	b2db      	uxtb	r3, r3
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b07      	cmp	r3, #7
 800e7f4:	d011      	beq.n	800e81a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7fa:	69db      	ldr	r3, [r3, #28]
 800e7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e800:	d103      	bne.n	800e80a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f7ff ff96 	bl	800e734 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e808:	e007      	b.n	800e81a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	691a      	ldr	r2, [r3, #16]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f042 0208 	orr.w	r2, r2, #8
 800e818:	611a      	str	r2, [r3, #16]
}
 800e81a:	bf00      	nop
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b07      	cmp	r3, #7
 800e83a:	d011      	beq.n	800e860 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e846:	d103      	bne.n	800e850 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff ff7d 	bl	800e748 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e84e:	e007      	b.n	800e860 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f042 0208 	orr.w	r2, r2, #8
 800e85e:	611a      	str	r2, [r3, #16]
}
 800e860:	bf00      	nop
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e874:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b07      	cmp	r3, #7
 800e880:	d011      	beq.n	800e8a6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e886:	69db      	ldr	r3, [r3, #28]
 800e888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e88c:	d103      	bne.n	800e896 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800e88e:	68f8      	ldr	r0, [r7, #12]
 800e890:	f7ff ff64 	bl	800e75c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e894:	e007      	b.n	800e8a6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	691a      	ldr	r2, [r3, #16]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0208 	orr.w	r2, r2, #8
 800e8a4:	611a      	str	r2, [r3, #16]
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ba:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f7ff ff57 	bl	800e770 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b084      	sub	sp, #16
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f7ff ff53 	bl	800e784 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8de:	bf00      	nop
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f7ff ff4f 	bl	800e798 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8fa:	bf00      	nop
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b084      	sub	sp, #16
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7f9 f8c9 	bl	8007aa8 <HAL_DMA_GetError>
 800e916:	4603      	mov	r3, r0
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d011      	beq.n	800e940 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 f82d 	bl	800e97c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e928:	f043 0210 	orr.w	r2, r3, #16
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7ff ff36 	bl	800e7ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e940:	bf00      	nop
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e954:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2201      	movs	r2, #1
 800e96a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff ff1c 	bl	800e7ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e974:	bf00      	nop
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	695b      	ldr	r3, [r3, #20]
 800e98a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f042 0208 	orr.w	r2, r2, #8
 800e99a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f042 0210 	orr.w	r2, r2, #16
 800e9aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f022 0201 	bic.w	r2, r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	6919      	ldr	r1, [r3, #16]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	4b3c      	ldr	r3, [pc, #240]	; (800eab8 <SPI_CloseTransfer+0x13c>)
 800e9c8:	400b      	ands	r3, r1
 800e9ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689a      	ldr	r2, [r3, #8]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e9da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b04      	cmp	r3, #4
 800e9e6:	d014      	beq.n	800ea12 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f003 0320 	and.w	r3, r3, #32
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00f      	beq.n	800ea12 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	699a      	ldr	r2, [r3, #24]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f042 0220 	orr.w	r2, r2, #32
 800ea10:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	2b03      	cmp	r3, #3
 800ea1c:	d014      	beq.n	800ea48 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00f      	beq.n	800ea48 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea2e:	f043 0204 	orr.w	r2, r3, #4
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	699a      	ldr	r2, [r3, #24]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea46:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00f      	beq.n	800ea72 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea58:	f043 0201 	orr.w	r2, r3, #1
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	699a      	ldr	r2, [r3, #24]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea70:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00f      	beq.n	800ea9c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea82:	f043 0208 	orr.w	r2, r3, #8
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	699a      	ldr	r2, [r3, #24]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea9a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eaac:	bf00      	nop
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	fffffc90 	.word	0xfffffc90

0800eabc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b085      	sub	sp, #20
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac8:	095b      	lsrs	r3, r3, #5
 800eaca:	3301      	adds	r3, #1
 800eacc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	3301      	adds	r3, #1
 800ead4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	3307      	adds	r3, #7
 800eada:	08db      	lsrs	r3, r3, #3
 800eadc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	fb02 f303 	mul.w	r3, r2, r3
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d101      	bne.n	800eb04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	e049      	b.n	800eb98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7f5 f9c5 	bl	8003ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2202      	movs	r2, #2
 800eb22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	4619      	mov	r1, r3
 800eb30:	4610      	mov	r0, r2
 800eb32:	f000 faed 	bl	800f110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d001      	beq.n	800ebb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e054      	b.n	800ec62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68da      	ldr	r2, [r3, #12]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f042 0201 	orr.w	r2, r2, #1
 800ebce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a26      	ldr	r2, [pc, #152]	; (800ec70 <HAL_TIM_Base_Start_IT+0xd0>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d022      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebe2:	d01d      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a22      	ldr	r2, [pc, #136]	; (800ec74 <HAL_TIM_Base_Start_IT+0xd4>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d018      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a21      	ldr	r2, [pc, #132]	; (800ec78 <HAL_TIM_Base_Start_IT+0xd8>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d013      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a1f      	ldr	r2, [pc, #124]	; (800ec7c <HAL_TIM_Base_Start_IT+0xdc>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d00e      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	4a1e      	ldr	r2, [pc, #120]	; (800ec80 <HAL_TIM_Base_Start_IT+0xe0>)
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d009      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a1c      	ldr	r2, [pc, #112]	; (800ec84 <HAL_TIM_Base_Start_IT+0xe4>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d004      	beq.n	800ec20 <HAL_TIM_Base_Start_IT+0x80>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4a1b      	ldr	r2, [pc, #108]	; (800ec88 <HAL_TIM_Base_Start_IT+0xe8>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d115      	bne.n	800ec4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	689a      	ldr	r2, [r3, #8]
 800ec26:	4b19      	ldr	r3, [pc, #100]	; (800ec8c <HAL_TIM_Base_Start_IT+0xec>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b06      	cmp	r3, #6
 800ec30:	d015      	beq.n	800ec5e <HAL_TIM_Base_Start_IT+0xbe>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec38:	d011      	beq.n	800ec5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f042 0201 	orr.w	r2, r2, #1
 800ec48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec4a:	e008      	b.n	800ec5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f042 0201 	orr.w	r2, r2, #1
 800ec5a:	601a      	str	r2, [r3, #0]
 800ec5c:	e000      	b.n	800ec60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	40010000 	.word	0x40010000
 800ec74:	40000400 	.word	0x40000400
 800ec78:	40000800 	.word	0x40000800
 800ec7c:	40000c00 	.word	0x40000c00
 800ec80:	40010400 	.word	0x40010400
 800ec84:	40001800 	.word	0x40001800
 800ec88:	40014000 	.word	0x40014000
 800ec8c:	00010007 	.word	0x00010007

0800ec90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	f003 0302 	and.w	r3, r3, #2
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d122      	bne.n	800ecec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f003 0302 	and.w	r3, r3, #2
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d11b      	bne.n	800ecec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f06f 0202 	mvn.w	r2, #2
 800ecbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	699b      	ldr	r3, [r3, #24]
 800ecca:	f003 0303 	and.w	r3, r3, #3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 f9fe 	bl	800f0d4 <HAL_TIM_IC_CaptureCallback>
 800ecd8:	e005      	b.n	800ece6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f9f0 	bl	800f0c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fa01 	bl	800f0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	f003 0304 	and.w	r3, r3, #4
 800ecf6:	2b04      	cmp	r3, #4
 800ecf8:	d122      	bne.n	800ed40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	f003 0304 	and.w	r3, r3, #4
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d11b      	bne.n	800ed40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f06f 0204 	mvn.w	r2, #4
 800ed10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2202      	movs	r2, #2
 800ed16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d003      	beq.n	800ed2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f9d4 	bl	800f0d4 <HAL_TIM_IC_CaptureCallback>
 800ed2c:	e005      	b.n	800ed3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9c6 	bl	800f0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f9d7 	bl	800f0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	f003 0308 	and.w	r3, r3, #8
 800ed4a:	2b08      	cmp	r3, #8
 800ed4c:	d122      	bne.n	800ed94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	f003 0308 	and.w	r3, r3, #8
 800ed58:	2b08      	cmp	r3, #8
 800ed5a:	d11b      	bne.n	800ed94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f06f 0208 	mvn.w	r2, #8
 800ed64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2204      	movs	r2, #4
 800ed6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	69db      	ldr	r3, [r3, #28]
 800ed72:	f003 0303 	and.w	r3, r3, #3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 f9aa 	bl	800f0d4 <HAL_TIM_IC_CaptureCallback>
 800ed80:	e005      	b.n	800ed8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 f99c 	bl	800f0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f9ad 	bl	800f0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	f003 0310 	and.w	r3, r3, #16
 800ed9e:	2b10      	cmp	r3, #16
 800eda0:	d122      	bne.n	800ede8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	f003 0310 	and.w	r3, r3, #16
 800edac:	2b10      	cmp	r3, #16
 800edae:	d11b      	bne.n	800ede8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f06f 0210 	mvn.w	r2, #16
 800edb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2208      	movs	r2, #8
 800edbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f980 	bl	800f0d4 <HAL_TIM_IC_CaptureCallback>
 800edd4:	e005      	b.n	800ede2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f972 	bl	800f0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f983 	bl	800f0e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	f003 0301 	and.w	r3, r3, #1
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d10e      	bne.n	800ee14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d107      	bne.n	800ee14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	f06f 0201 	mvn.w	r2, #1
 800ee0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7f4 fc44 	bl	800369c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee1e:	2b80      	cmp	r3, #128	; 0x80
 800ee20:	d10e      	bne.n	800ee40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee2c:	2b80      	cmp	r3, #128	; 0x80
 800ee2e:	d107      	bne.n	800ee40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fb38 	bl	800f4b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee4e:	d10e      	bne.n	800ee6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5a:	2b80      	cmp	r3, #128	; 0x80
 800ee5c:	d107      	bne.n	800ee6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fb2b 	bl	800f4c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee78:	2b40      	cmp	r3, #64	; 0x40
 800ee7a:	d10e      	bne.n	800ee9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee86:	2b40      	cmp	r3, #64	; 0x40
 800ee88:	d107      	bne.n	800ee9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 f931 	bl	800f0fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	691b      	ldr	r3, [r3, #16]
 800eea0:	f003 0320 	and.w	r3, r3, #32
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d10e      	bne.n	800eec6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b20      	cmp	r3, #32
 800eeb4:	d107      	bne.n	800eec6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f06f 0220 	mvn.w	r2, #32
 800eebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 faeb 	bl	800f49c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eec6:	bf00      	nop
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
	...

0800eed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eeda:	2300      	movs	r3, #0
 800eedc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d101      	bne.n	800eeec <HAL_TIM_ConfigClockSource+0x1c>
 800eee8:	2302      	movs	r3, #2
 800eeea:	e0dc      	b.n	800f0a6 <HAL_TIM_ConfigClockSource+0x1d6>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	4b6a      	ldr	r3, [pc, #424]	; (800f0b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ef08:	4013      	ands	r3, r2
 800ef0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ef12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a64      	ldr	r2, [pc, #400]	; (800f0b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	f000 80a9 	beq.w	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800ef28:	4a62      	ldr	r2, [pc, #392]	; (800f0b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	f200 80ae 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef30:	4a61      	ldr	r2, [pc, #388]	; (800f0b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	f000 80a1 	beq.w	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800ef38:	4a5f      	ldr	r2, [pc, #380]	; (800f0b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	f200 80a6 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef40:	4a5e      	ldr	r2, [pc, #376]	; (800f0bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	f000 8099 	beq.w	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800ef48:	4a5c      	ldr	r2, [pc, #368]	; (800f0bc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	f200 809e 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ef54:	f000 8091 	beq.w	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800ef58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ef5c:	f200 8096 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef64:	f000 8089 	beq.w	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800ef68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef6c:	f200 808e 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef74:	d03e      	beq.n	800eff4 <HAL_TIM_ConfigClockSource+0x124>
 800ef76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef7a:	f200 8087 	bhi.w	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef82:	f000 8086 	beq.w	800f092 <HAL_TIM_ConfigClockSource+0x1c2>
 800ef86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef8a:	d87f      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef8c:	2b70      	cmp	r3, #112	; 0x70
 800ef8e:	d01a      	beq.n	800efc6 <HAL_TIM_ConfigClockSource+0xf6>
 800ef90:	2b70      	cmp	r3, #112	; 0x70
 800ef92:	d87b      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef94:	2b60      	cmp	r3, #96	; 0x60
 800ef96:	d050      	beq.n	800f03a <HAL_TIM_ConfigClockSource+0x16a>
 800ef98:	2b60      	cmp	r3, #96	; 0x60
 800ef9a:	d877      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800ef9c:	2b50      	cmp	r3, #80	; 0x50
 800ef9e:	d03c      	beq.n	800f01a <HAL_TIM_ConfigClockSource+0x14a>
 800efa0:	2b50      	cmp	r3, #80	; 0x50
 800efa2:	d873      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800efa4:	2b40      	cmp	r3, #64	; 0x40
 800efa6:	d058      	beq.n	800f05a <HAL_TIM_ConfigClockSource+0x18a>
 800efa8:	2b40      	cmp	r3, #64	; 0x40
 800efaa:	d86f      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800efac:	2b30      	cmp	r3, #48	; 0x30
 800efae:	d064      	beq.n	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800efb0:	2b30      	cmp	r3, #48	; 0x30
 800efb2:	d86b      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800efb4:	2b20      	cmp	r3, #32
 800efb6:	d060      	beq.n	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800efb8:	2b20      	cmp	r3, #32
 800efba:	d867      	bhi.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d05c      	beq.n	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800efc0:	2b10      	cmp	r3, #16
 800efc2:	d05a      	beq.n	800f07a <HAL_TIM_ConfigClockSource+0x1aa>
 800efc4:	e062      	b.n	800f08c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6818      	ldr	r0, [r3, #0]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	6899      	ldr	r1, [r3, #8]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	f000 f9b3 	bl	800f340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800efe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	609a      	str	r2, [r3, #8]
      break;
 800eff2:	e04f      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	6899      	ldr	r1, [r3, #8]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	685a      	ldr	r2, [r3, #4]
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	f000 f99c 	bl	800f340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	689a      	ldr	r2, [r3, #8]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f016:	609a      	str	r2, [r3, #8]
      break;
 800f018:	e03c      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6818      	ldr	r0, [r3, #0]
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	6859      	ldr	r1, [r3, #4]
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	461a      	mov	r2, r3
 800f028:	f000 f90c 	bl	800f244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2150      	movs	r1, #80	; 0x50
 800f032:	4618      	mov	r0, r3
 800f034:	f000 f966 	bl	800f304 <TIM_ITRx_SetConfig>
      break;
 800f038:	e02c      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6818      	ldr	r0, [r3, #0]
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	6859      	ldr	r1, [r3, #4]
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	461a      	mov	r2, r3
 800f048:	f000 f92b 	bl	800f2a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2160      	movs	r1, #96	; 0x60
 800f052:	4618      	mov	r0, r3
 800f054:	f000 f956 	bl	800f304 <TIM_ITRx_SetConfig>
      break;
 800f058:	e01c      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6818      	ldr	r0, [r3, #0]
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	6859      	ldr	r1, [r3, #4]
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	461a      	mov	r2, r3
 800f068:	f000 f8ec 	bl	800f244 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2140      	movs	r1, #64	; 0x40
 800f072:	4618      	mov	r0, r3
 800f074:	f000 f946 	bl	800f304 <TIM_ITRx_SetConfig>
      break;
 800f078:	e00c      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4619      	mov	r1, r3
 800f084:	4610      	mov	r0, r2
 800f086:	f000 f93d 	bl	800f304 <TIM_ITRx_SetConfig>
      break;
 800f08a:	e003      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	73fb      	strb	r3, [r7, #15]
      break;
 800f090:	e000      	b.n	800f094 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	ffceff88 	.word	0xffceff88
 800f0b4:	00100040 	.word	0x00100040
 800f0b8:	00100030 	.word	0x00100030
 800f0bc:	00100020 	.word	0x00100020

0800f0c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f0c8:	bf00      	nop
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0f0:	bf00      	nop
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4a40      	ldr	r2, [pc, #256]	; (800f224 <TIM_Base_SetConfig+0x114>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d013      	beq.n	800f150 <TIM_Base_SetConfig+0x40>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f12e:	d00f      	beq.n	800f150 <TIM_Base_SetConfig+0x40>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	4a3d      	ldr	r2, [pc, #244]	; (800f228 <TIM_Base_SetConfig+0x118>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d00b      	beq.n	800f150 <TIM_Base_SetConfig+0x40>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4a3c      	ldr	r2, [pc, #240]	; (800f22c <TIM_Base_SetConfig+0x11c>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d007      	beq.n	800f150 <TIM_Base_SetConfig+0x40>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a3b      	ldr	r2, [pc, #236]	; (800f230 <TIM_Base_SetConfig+0x120>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d003      	beq.n	800f150 <TIM_Base_SetConfig+0x40>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a3a      	ldr	r2, [pc, #232]	; (800f234 <TIM_Base_SetConfig+0x124>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d108      	bne.n	800f162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	4313      	orrs	r3, r2
 800f160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4a2f      	ldr	r2, [pc, #188]	; (800f224 <TIM_Base_SetConfig+0x114>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d01f      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f170:	d01b      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4a2c      	ldr	r2, [pc, #176]	; (800f228 <TIM_Base_SetConfig+0x118>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d017      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4a2b      	ldr	r2, [pc, #172]	; (800f22c <TIM_Base_SetConfig+0x11c>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d013      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	4a2a      	ldr	r2, [pc, #168]	; (800f230 <TIM_Base_SetConfig+0x120>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d00f      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4a29      	ldr	r2, [pc, #164]	; (800f234 <TIM_Base_SetConfig+0x124>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d00b      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4a28      	ldr	r2, [pc, #160]	; (800f238 <TIM_Base_SetConfig+0x128>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d007      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4a27      	ldr	r2, [pc, #156]	; (800f23c <TIM_Base_SetConfig+0x12c>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d003      	beq.n	800f1aa <TIM_Base_SetConfig+0x9a>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a26      	ldr	r2, [pc, #152]	; (800f240 <TIM_Base_SetConfig+0x130>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d108      	bne.n	800f1bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a10      	ldr	r2, [pc, #64]	; (800f224 <TIM_Base_SetConfig+0x114>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d00f      	beq.n	800f208 <TIM_Base_SetConfig+0xf8>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a12      	ldr	r2, [pc, #72]	; (800f234 <TIM_Base_SetConfig+0x124>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d00b      	beq.n	800f208 <TIM_Base_SetConfig+0xf8>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a11      	ldr	r2, [pc, #68]	; (800f238 <TIM_Base_SetConfig+0x128>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d007      	beq.n	800f208 <TIM_Base_SetConfig+0xf8>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a10      	ldr	r2, [pc, #64]	; (800f23c <TIM_Base_SetConfig+0x12c>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d003      	beq.n	800f208 <TIM_Base_SetConfig+0xf8>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a0f      	ldr	r2, [pc, #60]	; (800f240 <TIM_Base_SetConfig+0x130>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d103      	bne.n	800f210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	691a      	ldr	r2, [r3, #16]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2201      	movs	r2, #1
 800f214:	615a      	str	r2, [r3, #20]
}
 800f216:	bf00      	nop
 800f218:	3714      	adds	r7, #20
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	40010000 	.word	0x40010000
 800f228:	40000400 	.word	0x40000400
 800f22c:	40000800 	.word	0x40000800
 800f230:	40000c00 	.word	0x40000c00
 800f234:	40010400 	.word	0x40010400
 800f238:	40014000 	.word	0x40014000
 800f23c:	40014400 	.word	0x40014400
 800f240:	40014800 	.word	0x40014800

0800f244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	f023 0201 	bic.w	r2, r3, #1
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	699b      	ldr	r3, [r3, #24]
 800f266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f26e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	011b      	lsls	r3, r3, #4
 800f274:	693a      	ldr	r2, [r7, #16]
 800f276:	4313      	orrs	r3, r2
 800f278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f023 030a 	bic.w	r3, r3, #10
 800f280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	4313      	orrs	r3, r2
 800f288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	621a      	str	r2, [r3, #32]
}
 800f296:	bf00      	nop
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f2a2:	b480      	push	{r7}
 800f2a4:	b087      	sub	sp, #28
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	60f8      	str	r0, [r7, #12]
 800f2aa:	60b9      	str	r1, [r7, #8]
 800f2ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	f023 0210 	bic.w	r2, r3, #16
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6a1b      	ldr	r3, [r3, #32]
 800f2c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f2cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	031b      	lsls	r3, r3, #12
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f2de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	011b      	lsls	r3, r3, #4
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	621a      	str	r2, [r3, #32]
}
 800f2f6:	bf00      	nop
 800f2f8:	371c      	adds	r7, #28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
	...

0800f304 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	4b09      	ldr	r3, [pc, #36]	; (800f33c <TIM_ITRx_SetConfig+0x38>)
 800f318:	4013      	ands	r3, r2
 800f31a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	4313      	orrs	r3, r2
 800f322:	f043 0307 	orr.w	r3, r3, #7
 800f326:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	609a      	str	r2, [r3, #8]
}
 800f32e:	bf00      	nop
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	ffcfff8f 	.word	0xffcfff8f

0800f340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f35a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	021a      	lsls	r2, r3, #8
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	431a      	orrs	r2, r3
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	4313      	orrs	r3, r2
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	609a      	str	r2, [r3, #8]
}
 800f374:	bf00      	nop
 800f376:	371c      	adds	r7, #28
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f390:	2b01      	cmp	r3, #1
 800f392:	d101      	bne.n	800f398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f394:	2302      	movs	r3, #2
 800f396:	e06d      	b.n	800f474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2202      	movs	r2, #2
 800f3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a30      	ldr	r2, [pc, #192]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d004      	beq.n	800f3cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	4a2f      	ldr	r2, [pc, #188]	; (800f484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d108      	bne.n	800f3de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f3d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a20      	ldr	r2, [pc, #128]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d022      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f40a:	d01d      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a1d      	ldr	r2, [pc, #116]	; (800f488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d018      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a1c      	ldr	r2, [pc, #112]	; (800f48c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d013      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a1a      	ldr	r2, [pc, #104]	; (800f490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d00e      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a15      	ldr	r2, [pc, #84]	; (800f484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d009      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4a16      	ldr	r2, [pc, #88]	; (800f494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d004      	beq.n	800f448 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4a15      	ldr	r2, [pc, #84]	; (800f498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d10c      	bne.n	800f462 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f44e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	4313      	orrs	r3, r2
 800f458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	68ba      	ldr	r2, [r7, #8]
 800f460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f472:	2300      	movs	r3, #0
}
 800f474:	4618      	mov	r0, r3
 800f476:	3714      	adds	r7, #20
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	40010000 	.word	0x40010000
 800f484:	40010400 	.word	0x40010400
 800f488:	40000400 	.word	0x40000400
 800f48c:	40000800 	.word	0x40000800
 800f490:	40000c00 	.word	0x40000c00
 800f494:	40001800 	.word	0x40001800
 800f498:	40014000 	.word	0x40014000

0800f49c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4a4:	bf00      	nop
 800f4a6:	370c      	adds	r7, #12
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e042      	b.n	800f570 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d106      	bne.n	800f502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f4 febd 	bl	800427c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2224      	movs	r2, #36	; 0x24
 800f506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f022 0201 	bic.w	r2, r2, #1
 800f518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fd68 	bl	800fff0 <UART_SetConfig>
 800f520:	4603      	mov	r3, r0
 800f522:	2b01      	cmp	r3, #1
 800f524:	d101      	bne.n	800f52a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	e022      	b.n	800f570 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d002      	beq.n	800f538 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f001 fac4 	bl	8010ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	685a      	ldr	r2, [r3, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	689a      	ldr	r2, [r3, #8]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f042 0201 	orr.w	r2, r2, #1
 800f566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f001 fb4b 	bl	8010c04 <UART_CheckIdleState>
 800f56e:	4603      	mov	r3, r0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b08a      	sub	sp, #40	; 0x28
 800f57c:	af02      	add	r7, sp, #8
 800f57e:	60f8      	str	r0, [r7, #12]
 800f580:	60b9      	str	r1, [r7, #8]
 800f582:	603b      	str	r3, [r7, #0]
 800f584:	4613      	mov	r3, r2
 800f586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f58e:	2b20      	cmp	r3, #32
 800f590:	f040 8083 	bne.w	800f69a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d002      	beq.n	800f5a0 <HAL_UART_Transmit+0x28>
 800f59a:	88fb      	ldrh	r3, [r7, #6]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e07b      	b.n	800f69c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d101      	bne.n	800f5b2 <HAL_UART_Transmit+0x3a>
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	e074      	b.n	800f69c <HAL_UART_Transmit+0x124>
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2221      	movs	r2, #33	; 0x21
 800f5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5ca:	f7f5 febf 	bl	800534c <HAL_GetTick>
 800f5ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	88fa      	ldrh	r2, [r7, #6]
 800f5d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	88fa      	ldrh	r2, [r7, #6]
 800f5dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5e8:	d108      	bne.n	800f5fc <HAL_UART_Transmit+0x84>
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d104      	bne.n	800f5fc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	61bb      	str	r3, [r7, #24]
 800f5fa:	e003      	b.n	800f604 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f600:	2300      	movs	r3, #0
 800f602:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f60c:	e02c      	b.n	800f668 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	2200      	movs	r2, #0
 800f616:	2180      	movs	r1, #128	; 0x80
 800f618:	68f8      	ldr	r0, [r7, #12]
 800f61a:	f001 fb3e 	bl	8010c9a <UART_WaitOnFlagUntilTimeout>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f624:	2303      	movs	r3, #3
 800f626:	e039      	b.n	800f69c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d10b      	bne.n	800f646 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f63c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	3302      	adds	r3, #2
 800f642:	61bb      	str	r3, [r7, #24]
 800f644:	e007      	b.n	800f656 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	781a      	ldrb	r2, [r3, #0]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	3301      	adds	r3, #1
 800f654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	3b01      	subs	r3, #1
 800f660:	b29a      	uxth	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f66e:	b29b      	uxth	r3, r3
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1cc      	bne.n	800f60e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	2200      	movs	r2, #0
 800f67c:	2140      	movs	r1, #64	; 0x40
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f001 fb0b 	bl	8010c9a <UART_WaitOnFlagUntilTimeout>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f68a:	2303      	movs	r3, #3
 800f68c:	e006      	b.n	800f69c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2220      	movs	r2, #32
 800f692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	e000      	b.n	800f69c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f69a:	2302      	movs	r3, #2
  }
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3720      	adds	r7, #32
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08a      	sub	sp, #40	; 0x28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6b8:	2b20      	cmp	r3, #32
 800f6ba:	d142      	bne.n	800f742 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <HAL_UART_Receive_IT+0x24>
 800f6c2:	88fb      	ldrh	r3, [r7, #6]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e03b      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d101      	bne.n	800f6da <HAL_UART_Receive_IT+0x36>
 800f6d6:	2302      	movs	r3, #2
 800f6d8:	e034      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a17      	ldr	r2, [pc, #92]	; (800f74c <HAL_UART_Receive_IT+0xa8>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d01f      	beq.n	800f732 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d018      	beq.n	800f732 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	613b      	str	r3, [r7, #16]
   return(result);
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f714:	627b      	str	r3, [r7, #36]	; 0x24
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	623b      	str	r3, [r7, #32]
 800f720:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	69f9      	ldr	r1, [r7, #28]
 800f724:	6a3a      	ldr	r2, [r7, #32]
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f732:	88fb      	ldrh	r3, [r7, #6]
 800f734:	461a      	mov	r2, r3
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f001 fb77 	bl	8010e2c <UART_Start_Receive_IT>
 800f73e:	4603      	mov	r3, r0
 800f740:	e000      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f742:	2302      	movs	r3, #2
  }
}
 800f744:	4618      	mov	r0, r3
 800f746:	3728      	adds	r7, #40	; 0x28
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	58000c00 	.word	0x58000c00

0800f750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	4613      	mov	r3, r2
 800f75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f764:	2b20      	cmp	r3, #32
 800f766:	d17a      	bne.n	800f85e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d002      	beq.n	800f774 <HAL_UART_Transmit_DMA+0x24>
 800f76e:	88fb      	ldrh	r3, [r7, #6]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f774:	2301      	movs	r3, #1
 800f776:	e073      	b.n	800f860 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d101      	bne.n	800f786 <HAL_UART_Transmit_DMA+0x36>
 800f782:	2302      	movs	r3, #2
 800f784:	e06c      	b.n	800f860 <HAL_UART_Transmit_DMA+0x110>
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	2201      	movs	r2, #1
 800f78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	88fa      	ldrh	r2, [r7, #6]
 800f798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	88fa      	ldrh	r2, [r7, #6]
 800f7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2221      	movs	r2, #33	; 0x21
 800f7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d02c      	beq.n	800f816 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7c0:	4a29      	ldr	r2, [pc, #164]	; (800f868 <HAL_UART_Transmit_DMA+0x118>)
 800f7c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7c8:	4a28      	ldr	r2, [pc, #160]	; (800f86c <HAL_UART_Transmit_DMA+0x11c>)
 800f7ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7d0:	4a27      	ldr	r2, [pc, #156]	; (800f870 <HAL_UART_Transmit_DMA+0x120>)
 800f7d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7d8:	2200      	movs	r2, #0
 800f7da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3328      	adds	r3, #40	; 0x28
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	88fb      	ldrh	r3, [r7, #6]
 800f7f0:	f7f6 fa54 	bl	8005c9c <HAL_DMA_Start_IT>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00d      	beq.n	800f816 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2210      	movs	r2, #16
 800f7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2220      	movs	r2, #32
 800f80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f812:	2301      	movs	r3, #1
 800f814:	e024      	b.n	800f860 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2240      	movs	r2, #64	; 0x40
 800f81c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	3308      	adds	r3, #8
 800f82c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	e853 3f00 	ldrex	r3, [r3]
 800f834:	613b      	str	r3, [r7, #16]
   return(result);
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f83c:	627b      	str	r3, [r7, #36]	; 0x24
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3308      	adds	r3, #8
 800f844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f846:	623a      	str	r2, [r7, #32]
 800f848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84a:	69f9      	ldr	r1, [r7, #28]
 800f84c:	6a3a      	ldr	r2, [r7, #32]
 800f84e:	e841 2300 	strex	r3, r2, [r1]
 800f852:	61bb      	str	r3, [r7, #24]
   return(result);
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d1e5      	bne.n	800f826 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e000      	b.n	800f860 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800f85e:	2302      	movs	r3, #2
  }
}
 800f860:	4618      	mov	r0, r3
 800f862:	3728      	adds	r7, #40	; 0x28
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}
 800f868:	080111d1 	.word	0x080111d1
 800f86c:	08011267 	.word	0x08011267
 800f870:	08011283 	.word	0x08011283

0800f874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b0ba      	sub	sp, #232	; 0xe8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	69db      	ldr	r3, [r3, #28]
 800f882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f89a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f89e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f8a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d11b      	bne.n	800f8e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d015      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8c0:	f003 0320 	and.w	r3, r3, #32
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d105      	bne.n	800f8d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d009      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 835a 	beq.w	800ff92 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	4798      	blx	r3
      }
      return;
 800f8e6:	e354      	b.n	800ff92 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f8e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 811f 	beq.w	800fb30 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f8f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f8f6:	4b8b      	ldr	r3, [pc, #556]	; (800fb24 <HAL_UART_IRQHandler+0x2b0>)
 800f8f8:	4013      	ands	r3, r2
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f8fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f902:	4b89      	ldr	r3, [pc, #548]	; (800fb28 <HAL_UART_IRQHandler+0x2b4>)
 800f904:	4013      	ands	r3, r2
 800f906:	2b00      	cmp	r3, #0
 800f908:	f000 8112 	beq.w	800fb30 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	2b00      	cmp	r3, #0
 800f916:	d011      	beq.n	800f93c <HAL_UART_IRQHandler+0xc8>
 800f918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00b      	beq.n	800f93c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2201      	movs	r2, #1
 800f92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f932:	f043 0201 	orr.w	r2, r3, #1
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f940:	f003 0302 	and.w	r3, r3, #2
 800f944:	2b00      	cmp	r3, #0
 800f946:	d011      	beq.n	800f96c <HAL_UART_IRQHandler+0xf8>
 800f948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f94c:	f003 0301 	and.w	r3, r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00b      	beq.n	800f96c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2202      	movs	r2, #2
 800f95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f962:	f043 0204 	orr.w	r2, r3, #4
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f970:	f003 0304 	and.w	r3, r3, #4
 800f974:	2b00      	cmp	r3, #0
 800f976:	d011      	beq.n	800f99c <HAL_UART_IRQHandler+0x128>
 800f978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f97c:	f003 0301 	and.w	r3, r3, #1
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00b      	beq.n	800f99c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2204      	movs	r2, #4
 800f98a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f992:	f043 0202 	orr.w	r2, r3, #2
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9a0:	f003 0308 	and.w	r3, r3, #8
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d017      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9ac:	f003 0320 	and.w	r3, r3, #32
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d105      	bne.n	800f9c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f9b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f9b8:	4b5a      	ldr	r3, [pc, #360]	; (800fb24 <HAL_UART_IRQHandler+0x2b0>)
 800f9ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00b      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2208      	movs	r2, #8
 800f9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ce:	f043 0208 	orr.w	r2, r3, #8
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d012      	beq.n	800fa0a <HAL_UART_IRQHandler+0x196>
 800f9e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00c      	beq.n	800fa0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa00:	f043 0220 	orr.w	r2, r3, #32
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f000 82c0 	beq.w	800ff96 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1a:	f003 0320 	and.w	r3, r3, #32
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d013      	beq.n	800fa4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa26:	f003 0320 	and.w	r3, r3, #32
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d105      	bne.n	800fa3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d007      	beq.n	800fa4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d003      	beq.n	800fa4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa5e:	2b40      	cmp	r3, #64	; 0x40
 800fa60:	d005      	beq.n	800fa6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fa66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d04f      	beq.n	800fb0e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f001 fb48 	bl	8011104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	689b      	ldr	r3, [r3, #8]
 800fa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7e:	2b40      	cmp	r3, #64	; 0x40
 800fa80:	d141      	bne.n	800fb06 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	3308      	adds	r3, #8
 800fa88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fa90:	e853 3f00 	ldrex	r3, [r3]
 800fa94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fa98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800faa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3308      	adds	r3, #8
 800faaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800faae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800faba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fabe:	e841 2300 	strex	r3, r2, [r1]
 800fac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1d9      	bne.n	800fa82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d013      	beq.n	800fafe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fada:	4a14      	ldr	r2, [pc, #80]	; (800fb2c <HAL_UART_IRQHandler+0x2b8>)
 800fadc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f6 fe62 	bl	80067ac <HAL_DMA_Abort_IT>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d017      	beq.n	800fb1e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fafc:	e00f      	b.n	800fb1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fa60 	bl	800ffc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb04:	e00b      	b.n	800fb1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 fa5c 	bl	800ffc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb0c:	e007      	b.n	800fb1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 fa58 	bl	800ffc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2200      	movs	r2, #0
 800fb18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800fb1c:	e23b      	b.n	800ff96 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb1e:	bf00      	nop
    return;
 800fb20:	e239      	b.n	800ff96 <HAL_UART_IRQHandler+0x722>
 800fb22:	bf00      	nop
 800fb24:	10000001 	.word	0x10000001
 800fb28:	04000120 	.word	0x04000120
 800fb2c:	08011303 	.word	0x08011303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	f040 81ce 	bne.w	800fed6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb3e:	f003 0310 	and.w	r3, r3, #16
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 81c7 	beq.w	800fed6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb4c:	f003 0310 	and.w	r3, r3, #16
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 81c0 	beq.w	800fed6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2210      	movs	r2, #16
 800fb5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb68:	2b40      	cmp	r3, #64	; 0x40
 800fb6a:	f040 813b 	bne.w	800fde4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a8b      	ldr	r2, [pc, #556]	; (800fda4 <HAL_UART_IRQHandler+0x530>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d059      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a89      	ldr	r2, [pc, #548]	; (800fda8 <HAL_UART_IRQHandler+0x534>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d053      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a87      	ldr	r2, [pc, #540]	; (800fdac <HAL_UART_IRQHandler+0x538>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d04d      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a85      	ldr	r2, [pc, #532]	; (800fdb0 <HAL_UART_IRQHandler+0x53c>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d047      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a83      	ldr	r2, [pc, #524]	; (800fdb4 <HAL_UART_IRQHandler+0x540>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d041      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a81      	ldr	r2, [pc, #516]	; (800fdb8 <HAL_UART_IRQHandler+0x544>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d03b      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a7f      	ldr	r2, [pc, #508]	; (800fdbc <HAL_UART_IRQHandler+0x548>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d035      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a7d      	ldr	r2, [pc, #500]	; (800fdc0 <HAL_UART_IRQHandler+0x54c>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d02f      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a7b      	ldr	r2, [pc, #492]	; (800fdc4 <HAL_UART_IRQHandler+0x550>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d029      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a79      	ldr	r2, [pc, #484]	; (800fdc8 <HAL_UART_IRQHandler+0x554>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d023      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a77      	ldr	r2, [pc, #476]	; (800fdcc <HAL_UART_IRQHandler+0x558>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d01d      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a75      	ldr	r2, [pc, #468]	; (800fdd0 <HAL_UART_IRQHandler+0x55c>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d017      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a73      	ldr	r2, [pc, #460]	; (800fdd4 <HAL_UART_IRQHandler+0x560>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d011      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a71      	ldr	r2, [pc, #452]	; (800fdd8 <HAL_UART_IRQHandler+0x564>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d00b      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a6f      	ldr	r2, [pc, #444]	; (800fddc <HAL_UART_IRQHandler+0x568>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d005      	beq.n	800fc2e <HAL_UART_IRQHandler+0x3ba>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a6d      	ldr	r2, [pc, #436]	; (800fde0 <HAL_UART_IRQHandler+0x56c>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d105      	bne.n	800fc3a <HAL_UART_IRQHandler+0x3c6>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	e004      	b.n	800fc44 <HAL_UART_IRQHandler+0x3d0>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fc48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 81a4 	beq.w	800ff9a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	f080 819c 	bcs.w	800ff9a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc70:	69db      	ldr	r3, [r3, #28]
 800fc72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc76:	f000 8086 	beq.w	800fd86 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc86:	e853 3f00 	ldrex	r3, [r3]
 800fc8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fc8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fca8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fcb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fcb4:	e841 2300 	strex	r3, r2, [r1]
 800fcb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fcbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1da      	bne.n	800fc7a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3308      	adds	r3, #8
 800fcca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcce:	e853 3f00 	ldrex	r3, [r3]
 800fcd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fcd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcd6:	f023 0301 	bic.w	r3, r3, #1
 800fcda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3308      	adds	r3, #8
 800fce4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fce8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fcec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fcf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fcfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e1      	bne.n	800fcc4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3308      	adds	r3, #8
 800fd06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd0a:	e853 3f00 	ldrex	r3, [r3]
 800fd0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fd10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	3308      	adds	r3, #8
 800fd20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fd24:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fd26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fd2c:	e841 2300 	strex	r3, r2, [r1]
 800fd30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fd32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1e3      	bne.n	800fd00 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2220      	movs	r2, #32
 800fd3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd4e:	e853 3f00 	ldrex	r3, [r3]
 800fd52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd56:	f023 0310 	bic.w	r3, r3, #16
 800fd5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd68:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd70:	e841 2300 	strex	r3, r2, [r1]
 800fd74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e4      	bne.n	800fd46 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7f6 f9f5 	bl	8006170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	b29b      	uxth	r3, r3
 800fd98:	4619      	mov	r1, r3
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f91c 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fda0:	e0fb      	b.n	800ff9a <HAL_UART_IRQHandler+0x726>
 800fda2:	bf00      	nop
 800fda4:	40020010 	.word	0x40020010
 800fda8:	40020028 	.word	0x40020028
 800fdac:	40020040 	.word	0x40020040
 800fdb0:	40020058 	.word	0x40020058
 800fdb4:	40020070 	.word	0x40020070
 800fdb8:	40020088 	.word	0x40020088
 800fdbc:	400200a0 	.word	0x400200a0
 800fdc0:	400200b8 	.word	0x400200b8
 800fdc4:	40020410 	.word	0x40020410
 800fdc8:	40020428 	.word	0x40020428
 800fdcc:	40020440 	.word	0x40020440
 800fdd0:	40020458 	.word	0x40020458
 800fdd4:	40020470 	.word	0x40020470
 800fdd8:	40020488 	.word	0x40020488
 800fddc:	400204a0 	.word	0x400204a0
 800fde0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f000 80cc 	beq.w	800ff9e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800fe06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 80c7 	beq.w	800ff9e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fe32:	647b      	str	r3, [r7, #68]	; 0x44
 800fe34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe3a:	e841 2300 	strex	r3, r2, [r1]
 800fe3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1e4      	bne.n	800fe10 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	3308      	adds	r3, #8
 800fe4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe50:	e853 3f00 	ldrex	r3, [r3]
 800fe54:	623b      	str	r3, [r7, #32]
   return(result);
 800fe56:	6a3a      	ldr	r2, [r7, #32]
 800fe58:	4b54      	ldr	r3, [pc, #336]	; (800ffac <HAL_UART_IRQHandler+0x738>)
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3308      	adds	r3, #8
 800fe66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fe6a:	633a      	str	r2, [r7, #48]	; 0x30
 800fe6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe72:	e841 2300 	strex	r3, r2, [r1]
 800fe76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1e3      	bne.n	800fe46 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2220      	movs	r2, #32
 800fe82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	e853 3f00 	ldrex	r3, [r3]
 800fe9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 0310 	bic.w	r3, r3, #16
 800fea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800feb4:	61fb      	str	r3, [r7, #28]
 800feb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb8:	69b9      	ldr	r1, [r7, #24]
 800feba:	69fa      	ldr	r2, [r7, #28]
 800febc:	e841 2300 	strex	r3, r2, [r1]
 800fec0:	617b      	str	r3, [r7, #20]
   return(result);
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d1e4      	bne.n	800fe92 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fecc:	4619      	mov	r1, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 f882 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fed4:	e063      	b.n	800ff9e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00e      	beq.n	800ff00 <HAL_UART_IRQHandler+0x68c>
 800fee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800feea:	2b00      	cmp	r3, #0
 800feec:	d008      	beq.n	800ff00 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f001 fe9f 	bl	8011c3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fefe:	e051      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ff00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d014      	beq.n	800ff36 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ff0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d105      	bne.n	800ff24 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ff18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d008      	beq.n	800ff36 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d03a      	beq.n	800ffa2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	4798      	blx	r3
    }
    return;
 800ff34:	e035      	b.n	800ffa2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ff36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d009      	beq.n	800ff56 <HAL_UART_IRQHandler+0x6e2>
 800ff42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f001 f9ed 	bl	801132e <UART_EndTransmit_IT>
    return;
 800ff54:	e026      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ff56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d009      	beq.n	800ff76 <HAL_UART_IRQHandler+0x702>
 800ff62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d003      	beq.n	800ff76 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f001 fe78 	bl	8011c64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff74:	e016      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ff76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d010      	beq.n	800ffa4 <HAL_UART_IRQHandler+0x730>
 800ff82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	da0c      	bge.n	800ffa4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f001 fe60 	bl	8011c50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff90:	e008      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
      return;
 800ff92:	bf00      	nop
 800ff94:	e006      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
    return;
 800ff96:	bf00      	nop
 800ff98:	e004      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
      return;
 800ff9a:	bf00      	nop
 800ff9c:	e002      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
      return;
 800ff9e:	bf00      	nop
 800ffa0:	e000      	b.n	800ffa4 <HAL_UART_IRQHandler+0x730>
    return;
 800ffa2:	bf00      	nop
  }
}
 800ffa4:	37e8      	adds	r7, #232	; 0xe8
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	effffffe 	.word	0xeffffffe

0800ffb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ffe4:	bf00      	nop
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fff4:	b092      	sub	sp, #72	; 0x48
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	689a      	ldr	r2, [r3, #8]
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	431a      	orrs	r2, r3
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	695b      	ldr	r3, [r3, #20]
 801000e:	431a      	orrs	r2, r3
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	4313      	orrs	r3, r2
 8010016:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	4bbe      	ldr	r3, [pc, #760]	; (8010318 <UART_SetConfig+0x328>)
 8010020:	4013      	ands	r3, r2
 8010022:	697a      	ldr	r2, [r7, #20]
 8010024:	6812      	ldr	r2, [r2, #0]
 8010026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010028:	430b      	orrs	r3, r1
 801002a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	68da      	ldr	r2, [r3, #12]
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	430a      	orrs	r2, r1
 8010040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4ab3      	ldr	r2, [pc, #716]	; (801031c <UART_SetConfig+0x32c>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d004      	beq.n	801005c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	6a1b      	ldr	r3, [r3, #32]
 8010056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010058:	4313      	orrs	r3, r2
 801005a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	689a      	ldr	r2, [r3, #8]
 8010062:	4baf      	ldr	r3, [pc, #700]	; (8010320 <UART_SetConfig+0x330>)
 8010064:	4013      	ands	r3, r2
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	6812      	ldr	r2, [r2, #0]
 801006a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801006c:	430b      	orrs	r3, r1
 801006e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010076:	f023 010f 	bic.w	r1, r3, #15
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	430a      	orrs	r2, r1
 8010084:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4aa6      	ldr	r2, [pc, #664]	; (8010324 <UART_SetConfig+0x334>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d177      	bne.n	8010180 <UART_SetConfig+0x190>
 8010090:	4ba5      	ldr	r3, [pc, #660]	; (8010328 <UART_SetConfig+0x338>)
 8010092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010098:	2b28      	cmp	r3, #40	; 0x28
 801009a:	d86d      	bhi.n	8010178 <UART_SetConfig+0x188>
 801009c:	a201      	add	r2, pc, #4	; (adr r2, 80100a4 <UART_SetConfig+0xb4>)
 801009e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a2:	bf00      	nop
 80100a4:	08010149 	.word	0x08010149
 80100a8:	08010179 	.word	0x08010179
 80100ac:	08010179 	.word	0x08010179
 80100b0:	08010179 	.word	0x08010179
 80100b4:	08010179 	.word	0x08010179
 80100b8:	08010179 	.word	0x08010179
 80100bc:	08010179 	.word	0x08010179
 80100c0:	08010179 	.word	0x08010179
 80100c4:	08010151 	.word	0x08010151
 80100c8:	08010179 	.word	0x08010179
 80100cc:	08010179 	.word	0x08010179
 80100d0:	08010179 	.word	0x08010179
 80100d4:	08010179 	.word	0x08010179
 80100d8:	08010179 	.word	0x08010179
 80100dc:	08010179 	.word	0x08010179
 80100e0:	08010179 	.word	0x08010179
 80100e4:	08010159 	.word	0x08010159
 80100e8:	08010179 	.word	0x08010179
 80100ec:	08010179 	.word	0x08010179
 80100f0:	08010179 	.word	0x08010179
 80100f4:	08010179 	.word	0x08010179
 80100f8:	08010179 	.word	0x08010179
 80100fc:	08010179 	.word	0x08010179
 8010100:	08010179 	.word	0x08010179
 8010104:	08010161 	.word	0x08010161
 8010108:	08010179 	.word	0x08010179
 801010c:	08010179 	.word	0x08010179
 8010110:	08010179 	.word	0x08010179
 8010114:	08010179 	.word	0x08010179
 8010118:	08010179 	.word	0x08010179
 801011c:	08010179 	.word	0x08010179
 8010120:	08010179 	.word	0x08010179
 8010124:	08010169 	.word	0x08010169
 8010128:	08010179 	.word	0x08010179
 801012c:	08010179 	.word	0x08010179
 8010130:	08010179 	.word	0x08010179
 8010134:	08010179 	.word	0x08010179
 8010138:	08010179 	.word	0x08010179
 801013c:	08010179 	.word	0x08010179
 8010140:	08010179 	.word	0x08010179
 8010144:	08010171 	.word	0x08010171
 8010148:	2301      	movs	r3, #1
 801014a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801014e:	e222      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010150:	2304      	movs	r3, #4
 8010152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010156:	e21e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010158:	2308      	movs	r3, #8
 801015a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801015e:	e21a      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010160:	2310      	movs	r3, #16
 8010162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010166:	e216      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010168:	2320      	movs	r3, #32
 801016a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801016e:	e212      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010170:	2340      	movs	r3, #64	; 0x40
 8010172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010176:	e20e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010178:	2380      	movs	r3, #128	; 0x80
 801017a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801017e:	e20a      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a69      	ldr	r2, [pc, #420]	; (801032c <UART_SetConfig+0x33c>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d130      	bne.n	80101ec <UART_SetConfig+0x1fc>
 801018a:	4b67      	ldr	r3, [pc, #412]	; (8010328 <UART_SetConfig+0x338>)
 801018c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801018e:	f003 0307 	and.w	r3, r3, #7
 8010192:	2b05      	cmp	r3, #5
 8010194:	d826      	bhi.n	80101e4 <UART_SetConfig+0x1f4>
 8010196:	a201      	add	r2, pc, #4	; (adr r2, 801019c <UART_SetConfig+0x1ac>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101b5 	.word	0x080101b5
 80101a0:	080101bd 	.word	0x080101bd
 80101a4:	080101c5 	.word	0x080101c5
 80101a8:	080101cd 	.word	0x080101cd
 80101ac:	080101d5 	.word	0x080101d5
 80101b0:	080101dd 	.word	0x080101dd
 80101b4:	2300      	movs	r3, #0
 80101b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ba:	e1ec      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101bc:	2304      	movs	r3, #4
 80101be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101c2:	e1e8      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101c4:	2308      	movs	r3, #8
 80101c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ca:	e1e4      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101cc:	2310      	movs	r3, #16
 80101ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101d2:	e1e0      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101d4:	2320      	movs	r3, #32
 80101d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101da:	e1dc      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101dc:	2340      	movs	r3, #64	; 0x40
 80101de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101e2:	e1d8      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101e4:	2380      	movs	r3, #128	; 0x80
 80101e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ea:	e1d4      	b.n	8010596 <UART_SetConfig+0x5a6>
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a4f      	ldr	r2, [pc, #316]	; (8010330 <UART_SetConfig+0x340>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d130      	bne.n	8010258 <UART_SetConfig+0x268>
 80101f6:	4b4c      	ldr	r3, [pc, #304]	; (8010328 <UART_SetConfig+0x338>)
 80101f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101fa:	f003 0307 	and.w	r3, r3, #7
 80101fe:	2b05      	cmp	r3, #5
 8010200:	d826      	bhi.n	8010250 <UART_SetConfig+0x260>
 8010202:	a201      	add	r2, pc, #4	; (adr r2, 8010208 <UART_SetConfig+0x218>)
 8010204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010208:	08010221 	.word	0x08010221
 801020c:	08010229 	.word	0x08010229
 8010210:	08010231 	.word	0x08010231
 8010214:	08010239 	.word	0x08010239
 8010218:	08010241 	.word	0x08010241
 801021c:	08010249 	.word	0x08010249
 8010220:	2300      	movs	r3, #0
 8010222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010226:	e1b6      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010228:	2304      	movs	r3, #4
 801022a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801022e:	e1b2      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010230:	2308      	movs	r3, #8
 8010232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010236:	e1ae      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010238:	2310      	movs	r3, #16
 801023a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801023e:	e1aa      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010240:	2320      	movs	r3, #32
 8010242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010246:	e1a6      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010248:	2340      	movs	r3, #64	; 0x40
 801024a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801024e:	e1a2      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010250:	2380      	movs	r3, #128	; 0x80
 8010252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010256:	e19e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a35      	ldr	r2, [pc, #212]	; (8010334 <UART_SetConfig+0x344>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d130      	bne.n	80102c4 <UART_SetConfig+0x2d4>
 8010262:	4b31      	ldr	r3, [pc, #196]	; (8010328 <UART_SetConfig+0x338>)
 8010264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010266:	f003 0307 	and.w	r3, r3, #7
 801026a:	2b05      	cmp	r3, #5
 801026c:	d826      	bhi.n	80102bc <UART_SetConfig+0x2cc>
 801026e:	a201      	add	r2, pc, #4	; (adr r2, 8010274 <UART_SetConfig+0x284>)
 8010270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010274:	0801028d 	.word	0x0801028d
 8010278:	08010295 	.word	0x08010295
 801027c:	0801029d 	.word	0x0801029d
 8010280:	080102a5 	.word	0x080102a5
 8010284:	080102ad 	.word	0x080102ad
 8010288:	080102b5 	.word	0x080102b5
 801028c:	2300      	movs	r3, #0
 801028e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010292:	e180      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010294:	2304      	movs	r3, #4
 8010296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801029a:	e17c      	b.n	8010596 <UART_SetConfig+0x5a6>
 801029c:	2308      	movs	r3, #8
 801029e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102a2:	e178      	b.n	8010596 <UART_SetConfig+0x5a6>
 80102a4:	2310      	movs	r3, #16
 80102a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102aa:	e174      	b.n	8010596 <UART_SetConfig+0x5a6>
 80102ac:	2320      	movs	r3, #32
 80102ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102b2:	e170      	b.n	8010596 <UART_SetConfig+0x5a6>
 80102b4:	2340      	movs	r3, #64	; 0x40
 80102b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102ba:	e16c      	b.n	8010596 <UART_SetConfig+0x5a6>
 80102bc:	2380      	movs	r3, #128	; 0x80
 80102be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102c2:	e168      	b.n	8010596 <UART_SetConfig+0x5a6>
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a1b      	ldr	r2, [pc, #108]	; (8010338 <UART_SetConfig+0x348>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d142      	bne.n	8010354 <UART_SetConfig+0x364>
 80102ce:	4b16      	ldr	r3, [pc, #88]	; (8010328 <UART_SetConfig+0x338>)
 80102d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102d2:	f003 0307 	and.w	r3, r3, #7
 80102d6:	2b05      	cmp	r3, #5
 80102d8:	d838      	bhi.n	801034c <UART_SetConfig+0x35c>
 80102da:	a201      	add	r2, pc, #4	; (adr r2, 80102e0 <UART_SetConfig+0x2f0>)
 80102dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e0:	080102f9 	.word	0x080102f9
 80102e4:	08010301 	.word	0x08010301
 80102e8:	08010309 	.word	0x08010309
 80102ec:	08010311 	.word	0x08010311
 80102f0:	0801033d 	.word	0x0801033d
 80102f4:	08010345 	.word	0x08010345
 80102f8:	2300      	movs	r3, #0
 80102fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102fe:	e14a      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010300:	2304      	movs	r3, #4
 8010302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010306:	e146      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010308:	2308      	movs	r3, #8
 801030a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801030e:	e142      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010310:	2310      	movs	r3, #16
 8010312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010316:	e13e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010318:	cfff69f3 	.word	0xcfff69f3
 801031c:	58000c00 	.word	0x58000c00
 8010320:	11fff4ff 	.word	0x11fff4ff
 8010324:	40011000 	.word	0x40011000
 8010328:	58024400 	.word	0x58024400
 801032c:	40004400 	.word	0x40004400
 8010330:	40004800 	.word	0x40004800
 8010334:	40004c00 	.word	0x40004c00
 8010338:	40005000 	.word	0x40005000
 801033c:	2320      	movs	r3, #32
 801033e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010342:	e128      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010344:	2340      	movs	r3, #64	; 0x40
 8010346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801034a:	e124      	b.n	8010596 <UART_SetConfig+0x5a6>
 801034c:	2380      	movs	r3, #128	; 0x80
 801034e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010352:	e120      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4acb      	ldr	r2, [pc, #812]	; (8010688 <UART_SetConfig+0x698>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d176      	bne.n	801044c <UART_SetConfig+0x45c>
 801035e:	4bcb      	ldr	r3, [pc, #812]	; (801068c <UART_SetConfig+0x69c>)
 8010360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010366:	2b28      	cmp	r3, #40	; 0x28
 8010368:	d86c      	bhi.n	8010444 <UART_SetConfig+0x454>
 801036a:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <UART_SetConfig+0x380>)
 801036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010370:	08010415 	.word	0x08010415
 8010374:	08010445 	.word	0x08010445
 8010378:	08010445 	.word	0x08010445
 801037c:	08010445 	.word	0x08010445
 8010380:	08010445 	.word	0x08010445
 8010384:	08010445 	.word	0x08010445
 8010388:	08010445 	.word	0x08010445
 801038c:	08010445 	.word	0x08010445
 8010390:	0801041d 	.word	0x0801041d
 8010394:	08010445 	.word	0x08010445
 8010398:	08010445 	.word	0x08010445
 801039c:	08010445 	.word	0x08010445
 80103a0:	08010445 	.word	0x08010445
 80103a4:	08010445 	.word	0x08010445
 80103a8:	08010445 	.word	0x08010445
 80103ac:	08010445 	.word	0x08010445
 80103b0:	08010425 	.word	0x08010425
 80103b4:	08010445 	.word	0x08010445
 80103b8:	08010445 	.word	0x08010445
 80103bc:	08010445 	.word	0x08010445
 80103c0:	08010445 	.word	0x08010445
 80103c4:	08010445 	.word	0x08010445
 80103c8:	08010445 	.word	0x08010445
 80103cc:	08010445 	.word	0x08010445
 80103d0:	0801042d 	.word	0x0801042d
 80103d4:	08010445 	.word	0x08010445
 80103d8:	08010445 	.word	0x08010445
 80103dc:	08010445 	.word	0x08010445
 80103e0:	08010445 	.word	0x08010445
 80103e4:	08010445 	.word	0x08010445
 80103e8:	08010445 	.word	0x08010445
 80103ec:	08010445 	.word	0x08010445
 80103f0:	08010435 	.word	0x08010435
 80103f4:	08010445 	.word	0x08010445
 80103f8:	08010445 	.word	0x08010445
 80103fc:	08010445 	.word	0x08010445
 8010400:	08010445 	.word	0x08010445
 8010404:	08010445 	.word	0x08010445
 8010408:	08010445 	.word	0x08010445
 801040c:	08010445 	.word	0x08010445
 8010410:	0801043d 	.word	0x0801043d
 8010414:	2301      	movs	r3, #1
 8010416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801041a:	e0bc      	b.n	8010596 <UART_SetConfig+0x5a6>
 801041c:	2304      	movs	r3, #4
 801041e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010422:	e0b8      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010424:	2308      	movs	r3, #8
 8010426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801042a:	e0b4      	b.n	8010596 <UART_SetConfig+0x5a6>
 801042c:	2310      	movs	r3, #16
 801042e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010432:	e0b0      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010434:	2320      	movs	r3, #32
 8010436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801043a:	e0ac      	b.n	8010596 <UART_SetConfig+0x5a6>
 801043c:	2340      	movs	r3, #64	; 0x40
 801043e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010442:	e0a8      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010444:	2380      	movs	r3, #128	; 0x80
 8010446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801044a:	e0a4      	b.n	8010596 <UART_SetConfig+0x5a6>
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4a8f      	ldr	r2, [pc, #572]	; (8010690 <UART_SetConfig+0x6a0>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d130      	bne.n	80104b8 <UART_SetConfig+0x4c8>
 8010456:	4b8d      	ldr	r3, [pc, #564]	; (801068c <UART_SetConfig+0x69c>)
 8010458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801045a:	f003 0307 	and.w	r3, r3, #7
 801045e:	2b05      	cmp	r3, #5
 8010460:	d826      	bhi.n	80104b0 <UART_SetConfig+0x4c0>
 8010462:	a201      	add	r2, pc, #4	; (adr r2, 8010468 <UART_SetConfig+0x478>)
 8010464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010468:	08010481 	.word	0x08010481
 801046c:	08010489 	.word	0x08010489
 8010470:	08010491 	.word	0x08010491
 8010474:	08010499 	.word	0x08010499
 8010478:	080104a1 	.word	0x080104a1
 801047c:	080104a9 	.word	0x080104a9
 8010480:	2300      	movs	r3, #0
 8010482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010486:	e086      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010488:	2304      	movs	r3, #4
 801048a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801048e:	e082      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010490:	2308      	movs	r3, #8
 8010492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010496:	e07e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010498:	2310      	movs	r3, #16
 801049a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801049e:	e07a      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104a0:	2320      	movs	r3, #32
 80104a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104a6:	e076      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104a8:	2340      	movs	r3, #64	; 0x40
 80104aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ae:	e072      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104b0:	2380      	movs	r3, #128	; 0x80
 80104b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104b6:	e06e      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a75      	ldr	r2, [pc, #468]	; (8010694 <UART_SetConfig+0x6a4>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d130      	bne.n	8010524 <UART_SetConfig+0x534>
 80104c2:	4b72      	ldr	r3, [pc, #456]	; (801068c <UART_SetConfig+0x69c>)
 80104c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b05      	cmp	r3, #5
 80104cc:	d826      	bhi.n	801051c <UART_SetConfig+0x52c>
 80104ce:	a201      	add	r2, pc, #4	; (adr r2, 80104d4 <UART_SetConfig+0x4e4>)
 80104d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d4:	080104ed 	.word	0x080104ed
 80104d8:	080104f5 	.word	0x080104f5
 80104dc:	080104fd 	.word	0x080104fd
 80104e0:	08010505 	.word	0x08010505
 80104e4:	0801050d 	.word	0x0801050d
 80104e8:	08010515 	.word	0x08010515
 80104ec:	2300      	movs	r3, #0
 80104ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104f2:	e050      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104f4:	2304      	movs	r3, #4
 80104f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104fa:	e04c      	b.n	8010596 <UART_SetConfig+0x5a6>
 80104fc:	2308      	movs	r3, #8
 80104fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010502:	e048      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010504:	2310      	movs	r3, #16
 8010506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801050a:	e044      	b.n	8010596 <UART_SetConfig+0x5a6>
 801050c:	2320      	movs	r3, #32
 801050e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010512:	e040      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010514:	2340      	movs	r3, #64	; 0x40
 8010516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801051a:	e03c      	b.n	8010596 <UART_SetConfig+0x5a6>
 801051c:	2380      	movs	r3, #128	; 0x80
 801051e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010522:	e038      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a5b      	ldr	r2, [pc, #364]	; (8010698 <UART_SetConfig+0x6a8>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d130      	bne.n	8010590 <UART_SetConfig+0x5a0>
 801052e:	4b57      	ldr	r3, [pc, #348]	; (801068c <UART_SetConfig+0x69c>)
 8010530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010532:	f003 0307 	and.w	r3, r3, #7
 8010536:	2b05      	cmp	r3, #5
 8010538:	d826      	bhi.n	8010588 <UART_SetConfig+0x598>
 801053a:	a201      	add	r2, pc, #4	; (adr r2, 8010540 <UART_SetConfig+0x550>)
 801053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010540:	08010559 	.word	0x08010559
 8010544:	08010561 	.word	0x08010561
 8010548:	08010569 	.word	0x08010569
 801054c:	08010571 	.word	0x08010571
 8010550:	08010579 	.word	0x08010579
 8010554:	08010581 	.word	0x08010581
 8010558:	2302      	movs	r3, #2
 801055a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801055e:	e01a      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010560:	2304      	movs	r3, #4
 8010562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010566:	e016      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010568:	2308      	movs	r3, #8
 801056a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801056e:	e012      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010570:	2310      	movs	r3, #16
 8010572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010576:	e00e      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010578:	2320      	movs	r3, #32
 801057a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801057e:	e00a      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010580:	2340      	movs	r3, #64	; 0x40
 8010582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010586:	e006      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010588:	2380      	movs	r3, #128	; 0x80
 801058a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058e:	e002      	b.n	8010596 <UART_SetConfig+0x5a6>
 8010590:	2380      	movs	r3, #128	; 0x80
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4a3f      	ldr	r2, [pc, #252]	; (8010698 <UART_SetConfig+0x6a8>)
 801059c:	4293      	cmp	r3, r2
 801059e:	f040 80f8 	bne.w	8010792 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80105a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80105a6:	2b20      	cmp	r3, #32
 80105a8:	dc46      	bgt.n	8010638 <UART_SetConfig+0x648>
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	f2c0 8082 	blt.w	80106b4 <UART_SetConfig+0x6c4>
 80105b0:	3b02      	subs	r3, #2
 80105b2:	2b1e      	cmp	r3, #30
 80105b4:	d87e      	bhi.n	80106b4 <UART_SetConfig+0x6c4>
 80105b6:	a201      	add	r2, pc, #4	; (adr r2, 80105bc <UART_SetConfig+0x5cc>)
 80105b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105bc:	0801063f 	.word	0x0801063f
 80105c0:	080106b5 	.word	0x080106b5
 80105c4:	08010647 	.word	0x08010647
 80105c8:	080106b5 	.word	0x080106b5
 80105cc:	080106b5 	.word	0x080106b5
 80105d0:	080106b5 	.word	0x080106b5
 80105d4:	08010657 	.word	0x08010657
 80105d8:	080106b5 	.word	0x080106b5
 80105dc:	080106b5 	.word	0x080106b5
 80105e0:	080106b5 	.word	0x080106b5
 80105e4:	080106b5 	.word	0x080106b5
 80105e8:	080106b5 	.word	0x080106b5
 80105ec:	080106b5 	.word	0x080106b5
 80105f0:	080106b5 	.word	0x080106b5
 80105f4:	08010667 	.word	0x08010667
 80105f8:	080106b5 	.word	0x080106b5
 80105fc:	080106b5 	.word	0x080106b5
 8010600:	080106b5 	.word	0x080106b5
 8010604:	080106b5 	.word	0x080106b5
 8010608:	080106b5 	.word	0x080106b5
 801060c:	080106b5 	.word	0x080106b5
 8010610:	080106b5 	.word	0x080106b5
 8010614:	080106b5 	.word	0x080106b5
 8010618:	080106b5 	.word	0x080106b5
 801061c:	080106b5 	.word	0x080106b5
 8010620:	080106b5 	.word	0x080106b5
 8010624:	080106b5 	.word	0x080106b5
 8010628:	080106b5 	.word	0x080106b5
 801062c:	080106b5 	.word	0x080106b5
 8010630:	080106b5 	.word	0x080106b5
 8010634:	080106a7 	.word	0x080106a7
 8010638:	2b40      	cmp	r3, #64	; 0x40
 801063a:	d037      	beq.n	80106ac <UART_SetConfig+0x6bc>
 801063c:	e03a      	b.n	80106b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801063e:	f7fc fcf5 	bl	800d02c <HAL_RCCEx_GetD3PCLK1Freq>
 8010642:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010644:	e03c      	b.n	80106c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801064a:	4618      	mov	r0, r3
 801064c:	f7fc fd04 	bl	800d058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010654:	e034      	b.n	80106c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010656:	f107 0318 	add.w	r3, r7, #24
 801065a:	4618      	mov	r0, r3
 801065c:	f7fc fe50 	bl	800d300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010664:	e02c      	b.n	80106c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010666:	4b09      	ldr	r3, [pc, #36]	; (801068c <UART_SetConfig+0x69c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f003 0320 	and.w	r3, r3, #32
 801066e:	2b00      	cmp	r3, #0
 8010670:	d016      	beq.n	80106a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010672:	4b06      	ldr	r3, [pc, #24]	; (801068c <UART_SetConfig+0x69c>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	08db      	lsrs	r3, r3, #3
 8010678:	f003 0303 	and.w	r3, r3, #3
 801067c:	4a07      	ldr	r2, [pc, #28]	; (801069c <UART_SetConfig+0x6ac>)
 801067e:	fa22 f303 	lsr.w	r3, r2, r3
 8010682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010684:	e01c      	b.n	80106c0 <UART_SetConfig+0x6d0>
 8010686:	bf00      	nop
 8010688:	40011400 	.word	0x40011400
 801068c:	58024400 	.word	0x58024400
 8010690:	40007800 	.word	0x40007800
 8010694:	40007c00 	.word	0x40007c00
 8010698:	58000c00 	.word	0x58000c00
 801069c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80106a0:	4b9d      	ldr	r3, [pc, #628]	; (8010918 <UART_SetConfig+0x928>)
 80106a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106a4:	e00c      	b.n	80106c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80106a6:	4b9d      	ldr	r3, [pc, #628]	; (801091c <UART_SetConfig+0x92c>)
 80106a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106aa:	e009      	b.n	80106c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106b2:	e005      	b.n	80106c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80106b4:	2300      	movs	r3, #0
 80106b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80106b8:	2301      	movs	r3, #1
 80106ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80106be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80106c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f000 81de 	beq.w	8010a84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106cc:	4a94      	ldr	r2, [pc, #592]	; (8010920 <UART_SetConfig+0x930>)
 80106ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106d2:	461a      	mov	r2, r3
 80106d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80106da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	685a      	ldr	r2, [r3, #4]
 80106e0:	4613      	mov	r3, r2
 80106e2:	005b      	lsls	r3, r3, #1
 80106e4:	4413      	add	r3, r2
 80106e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d305      	bcc.n	80106f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80106f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d903      	bls.n	8010700 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80106f8:	2301      	movs	r3, #1
 80106fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80106fe:	e1c1      	b.n	8010a84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010702:	2200      	movs	r2, #0
 8010704:	60bb      	str	r3, [r7, #8]
 8010706:	60fa      	str	r2, [r7, #12]
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070c:	4a84      	ldr	r2, [pc, #528]	; (8010920 <UART_SetConfig+0x930>)
 801070e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010712:	b29b      	uxth	r3, r3
 8010714:	2200      	movs	r2, #0
 8010716:	603b      	str	r3, [r7, #0]
 8010718:	607a      	str	r2, [r7, #4]
 801071a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801071e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010722:	f7ef fe2d 	bl	8000380 <__aeabi_uldivmod>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	4610      	mov	r0, r2
 801072c:	4619      	mov	r1, r3
 801072e:	f04f 0200 	mov.w	r2, #0
 8010732:	f04f 0300 	mov.w	r3, #0
 8010736:	020b      	lsls	r3, r1, #8
 8010738:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801073c:	0202      	lsls	r2, r0, #8
 801073e:	6979      	ldr	r1, [r7, #20]
 8010740:	6849      	ldr	r1, [r1, #4]
 8010742:	0849      	lsrs	r1, r1, #1
 8010744:	2000      	movs	r0, #0
 8010746:	460c      	mov	r4, r1
 8010748:	4605      	mov	r5, r0
 801074a:	eb12 0804 	adds.w	r8, r2, r4
 801074e:	eb43 0905 	adc.w	r9, r3, r5
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	469a      	mov	sl, r3
 801075a:	4693      	mov	fp, r2
 801075c:	4652      	mov	r2, sl
 801075e:	465b      	mov	r3, fp
 8010760:	4640      	mov	r0, r8
 8010762:	4649      	mov	r1, r9
 8010764:	f7ef fe0c 	bl	8000380 <__aeabi_uldivmod>
 8010768:	4602      	mov	r2, r0
 801076a:	460b      	mov	r3, r1
 801076c:	4613      	mov	r3, r2
 801076e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010776:	d308      	bcc.n	801078a <UART_SetConfig+0x79a>
 8010778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801077e:	d204      	bcs.n	801078a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010786:	60da      	str	r2, [r3, #12]
 8010788:	e17c      	b.n	8010a84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010790:	e178      	b.n	8010a84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801079a:	f040 80c5 	bne.w	8010928 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801079e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80107a2:	2b20      	cmp	r3, #32
 80107a4:	dc48      	bgt.n	8010838 <UART_SetConfig+0x848>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	db7b      	blt.n	80108a2 <UART_SetConfig+0x8b2>
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	d879      	bhi.n	80108a2 <UART_SetConfig+0x8b2>
 80107ae:	a201      	add	r2, pc, #4	; (adr r2, 80107b4 <UART_SetConfig+0x7c4>)
 80107b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b4:	0801083f 	.word	0x0801083f
 80107b8:	08010847 	.word	0x08010847
 80107bc:	080108a3 	.word	0x080108a3
 80107c0:	080108a3 	.word	0x080108a3
 80107c4:	0801084f 	.word	0x0801084f
 80107c8:	080108a3 	.word	0x080108a3
 80107cc:	080108a3 	.word	0x080108a3
 80107d0:	080108a3 	.word	0x080108a3
 80107d4:	0801085f 	.word	0x0801085f
 80107d8:	080108a3 	.word	0x080108a3
 80107dc:	080108a3 	.word	0x080108a3
 80107e0:	080108a3 	.word	0x080108a3
 80107e4:	080108a3 	.word	0x080108a3
 80107e8:	080108a3 	.word	0x080108a3
 80107ec:	080108a3 	.word	0x080108a3
 80107f0:	080108a3 	.word	0x080108a3
 80107f4:	0801086f 	.word	0x0801086f
 80107f8:	080108a3 	.word	0x080108a3
 80107fc:	080108a3 	.word	0x080108a3
 8010800:	080108a3 	.word	0x080108a3
 8010804:	080108a3 	.word	0x080108a3
 8010808:	080108a3 	.word	0x080108a3
 801080c:	080108a3 	.word	0x080108a3
 8010810:	080108a3 	.word	0x080108a3
 8010814:	080108a3 	.word	0x080108a3
 8010818:	080108a3 	.word	0x080108a3
 801081c:	080108a3 	.word	0x080108a3
 8010820:	080108a3 	.word	0x080108a3
 8010824:	080108a3 	.word	0x080108a3
 8010828:	080108a3 	.word	0x080108a3
 801082c:	080108a3 	.word	0x080108a3
 8010830:	080108a3 	.word	0x080108a3
 8010834:	08010895 	.word	0x08010895
 8010838:	2b40      	cmp	r3, #64	; 0x40
 801083a:	d02e      	beq.n	801089a <UART_SetConfig+0x8aa>
 801083c:	e031      	b.n	80108a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801083e:	f7fb fc83 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
 8010842:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010844:	e033      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010846:	f7fb fc95 	bl	800c174 <HAL_RCC_GetPCLK2Freq>
 801084a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801084c:	e02f      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010852:	4618      	mov	r0, r3
 8010854:	f7fc fc00 	bl	800d058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801085c:	e027      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801085e:	f107 0318 	add.w	r3, r7, #24
 8010862:	4618      	mov	r0, r3
 8010864:	f7fc fd4c 	bl	800d300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801086c:	e01f      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801086e:	4b2d      	ldr	r3, [pc, #180]	; (8010924 <UART_SetConfig+0x934>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0320 	and.w	r3, r3, #32
 8010876:	2b00      	cmp	r3, #0
 8010878:	d009      	beq.n	801088e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801087a:	4b2a      	ldr	r3, [pc, #168]	; (8010924 <UART_SetConfig+0x934>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	08db      	lsrs	r3, r3, #3
 8010880:	f003 0303 	and.w	r3, r3, #3
 8010884:	4a24      	ldr	r2, [pc, #144]	; (8010918 <UART_SetConfig+0x928>)
 8010886:	fa22 f303 	lsr.w	r3, r2, r3
 801088a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801088c:	e00f      	b.n	80108ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801088e:	4b22      	ldr	r3, [pc, #136]	; (8010918 <UART_SetConfig+0x928>)
 8010890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010892:	e00c      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010894:	4b21      	ldr	r3, [pc, #132]	; (801091c <UART_SetConfig+0x92c>)
 8010896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010898:	e009      	b.n	80108ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801089a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801089e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108a0:	e005      	b.n	80108ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80108a2:	2300      	movs	r3, #0
 80108a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80108a6:	2301      	movs	r3, #1
 80108a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80108ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80108ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 80e7 	beq.w	8010a84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ba:	4a19      	ldr	r2, [pc, #100]	; (8010920 <UART_SetConfig+0x930>)
 80108bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108c0:	461a      	mov	r2, r3
 80108c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80108c8:	005a      	lsls	r2, r3, #1
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	085b      	lsrs	r3, r3, #1
 80108d0:	441a      	add	r2, r3
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80108da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	2b0f      	cmp	r3, #15
 80108e0:	d916      	bls.n	8010910 <UART_SetConfig+0x920>
 80108e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108e8:	d212      	bcs.n	8010910 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80108ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	f023 030f 	bic.w	r3, r3, #15
 80108f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80108f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f6:	085b      	lsrs	r3, r3, #1
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	b29a      	uxth	r2, r3
 8010900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010902:	4313      	orrs	r3, r2
 8010904:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801090c:	60da      	str	r2, [r3, #12]
 801090e:	e0b9      	b.n	8010a84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010916:	e0b5      	b.n	8010a84 <UART_SetConfig+0xa94>
 8010918:	03d09000 	.word	0x03d09000
 801091c:	003d0900 	.word	0x003d0900
 8010920:	08030704 	.word	0x08030704
 8010924:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010928:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801092c:	2b20      	cmp	r3, #32
 801092e:	dc49      	bgt.n	80109c4 <UART_SetConfig+0x9d4>
 8010930:	2b00      	cmp	r3, #0
 8010932:	db7c      	blt.n	8010a2e <UART_SetConfig+0xa3e>
 8010934:	2b20      	cmp	r3, #32
 8010936:	d87a      	bhi.n	8010a2e <UART_SetConfig+0xa3e>
 8010938:	a201      	add	r2, pc, #4	; (adr r2, 8010940 <UART_SetConfig+0x950>)
 801093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093e:	bf00      	nop
 8010940:	080109cb 	.word	0x080109cb
 8010944:	080109d3 	.word	0x080109d3
 8010948:	08010a2f 	.word	0x08010a2f
 801094c:	08010a2f 	.word	0x08010a2f
 8010950:	080109db 	.word	0x080109db
 8010954:	08010a2f 	.word	0x08010a2f
 8010958:	08010a2f 	.word	0x08010a2f
 801095c:	08010a2f 	.word	0x08010a2f
 8010960:	080109eb 	.word	0x080109eb
 8010964:	08010a2f 	.word	0x08010a2f
 8010968:	08010a2f 	.word	0x08010a2f
 801096c:	08010a2f 	.word	0x08010a2f
 8010970:	08010a2f 	.word	0x08010a2f
 8010974:	08010a2f 	.word	0x08010a2f
 8010978:	08010a2f 	.word	0x08010a2f
 801097c:	08010a2f 	.word	0x08010a2f
 8010980:	080109fb 	.word	0x080109fb
 8010984:	08010a2f 	.word	0x08010a2f
 8010988:	08010a2f 	.word	0x08010a2f
 801098c:	08010a2f 	.word	0x08010a2f
 8010990:	08010a2f 	.word	0x08010a2f
 8010994:	08010a2f 	.word	0x08010a2f
 8010998:	08010a2f 	.word	0x08010a2f
 801099c:	08010a2f 	.word	0x08010a2f
 80109a0:	08010a2f 	.word	0x08010a2f
 80109a4:	08010a2f 	.word	0x08010a2f
 80109a8:	08010a2f 	.word	0x08010a2f
 80109ac:	08010a2f 	.word	0x08010a2f
 80109b0:	08010a2f 	.word	0x08010a2f
 80109b4:	08010a2f 	.word	0x08010a2f
 80109b8:	08010a2f 	.word	0x08010a2f
 80109bc:	08010a2f 	.word	0x08010a2f
 80109c0:	08010a21 	.word	0x08010a21
 80109c4:	2b40      	cmp	r3, #64	; 0x40
 80109c6:	d02e      	beq.n	8010a26 <UART_SetConfig+0xa36>
 80109c8:	e031      	b.n	8010a2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80109ca:	f7fb fbbd 	bl	800c148 <HAL_RCC_GetPCLK1Freq>
 80109ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109d0:	e033      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80109d2:	f7fb fbcf 	bl	800c174 <HAL_RCC_GetPCLK2Freq>
 80109d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109d8:	e02f      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fc fb3a 	bl	800d058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109e8:	e027      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109ea:	f107 0318 	add.w	r3, r7, #24
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fc fc86 	bl	800d300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f8:	e01f      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109fa:	4b2d      	ldr	r3, [pc, #180]	; (8010ab0 <UART_SetConfig+0xac0>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f003 0320 	and.w	r3, r3, #32
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d009      	beq.n	8010a1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a06:	4b2a      	ldr	r3, [pc, #168]	; (8010ab0 <UART_SetConfig+0xac0>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	08db      	lsrs	r3, r3, #3
 8010a0c:	f003 0303 	and.w	r3, r3, #3
 8010a10:	4a28      	ldr	r2, [pc, #160]	; (8010ab4 <UART_SetConfig+0xac4>)
 8010a12:	fa22 f303 	lsr.w	r3, r2, r3
 8010a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a18:	e00f      	b.n	8010a3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010a1a:	4b26      	ldr	r3, [pc, #152]	; (8010ab4 <UART_SetConfig+0xac4>)
 8010a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a1e:	e00c      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a20:	4b25      	ldr	r3, [pc, #148]	; (8010ab8 <UART_SetConfig+0xac8>)
 8010a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a24:	e009      	b.n	8010a3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a2c:	e005      	b.n	8010a3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010a32:	2301      	movs	r3, #1
 8010a34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010a38:	bf00      	nop
    }

    if (pclk != 0U)
 8010a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d021      	beq.n	8010a84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a44:	4a1d      	ldr	r2, [pc, #116]	; (8010abc <UART_SetConfig+0xacc>)
 8010a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	085b      	lsrs	r3, r3, #1
 8010a58:	441a      	add	r2, r3
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	2b0f      	cmp	r3, #15
 8010a68:	d909      	bls.n	8010a7e <UART_SetConfig+0xa8e>
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a70:	d205      	bcs.n	8010a7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	60da      	str	r2, [r3, #12]
 8010a7c:	e002      	b.n	8010a84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	2201      	movs	r2, #1
 8010a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	2200      	movs	r2, #0
 8010a98:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010aa0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3748      	adds	r7, #72	; 0x48
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010aae:	bf00      	nop
 8010ab0:	58024400 	.word	0x58024400
 8010ab4:	03d09000 	.word	0x03d09000
 8010ab8:	003d0900 	.word	0x003d0900
 8010abc:	08030704 	.word	0x08030704

08010ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010acc:	f003 0301 	and.w	r3, r3, #1
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00a      	beq.n	8010aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	430a      	orrs	r2, r1
 8010ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	f003 0302 	and.w	r3, r3, #2
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d00a      	beq.n	8010b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	430a      	orrs	r2, r1
 8010b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b10:	f003 0304 	and.w	r3, r3, #4
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00a      	beq.n	8010b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	430a      	orrs	r2, r1
 8010b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b32:	f003 0308 	and.w	r3, r3, #8
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00a      	beq.n	8010b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	430a      	orrs	r2, r1
 8010b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b54:	f003 0310 	and.w	r3, r3, #16
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d00a      	beq.n	8010b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	430a      	orrs	r2, r1
 8010b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b76:	f003 0320 	and.w	r3, r3, #32
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00a      	beq.n	8010b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	430a      	orrs	r2, r1
 8010b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d01a      	beq.n	8010bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010bbe:	d10a      	bne.n	8010bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	430a      	orrs	r2, r1
 8010bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00a      	beq.n	8010bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	430a      	orrs	r2, r1
 8010bf6:	605a      	str	r2, [r3, #4]
  }
}
 8010bf8:	bf00      	nop
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b086      	sub	sp, #24
 8010c08:	af02      	add	r7, sp, #8
 8010c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010c14:	f7f4 fb9a 	bl	800534c <HAL_GetTick>
 8010c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f003 0308 	and.w	r3, r3, #8
 8010c24:	2b08      	cmp	r3, #8
 8010c26:	d10e      	bne.n	8010c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010c2c:	9300      	str	r3, [sp, #0]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2200      	movs	r2, #0
 8010c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 f82f 	bl	8010c9a <UART_WaitOnFlagUntilTimeout>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010c42:	2303      	movs	r3, #3
 8010c44:	e025      	b.n	8010c92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	2b04      	cmp	r3, #4
 8010c52:	d10e      	bne.n	8010c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f819 	bl	8010c9a <UART_WaitOnFlagUntilTimeout>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010c6e:	2303      	movs	r3, #3
 8010c70:	e00f      	b.n	8010c92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2220      	movs	r2, #32
 8010c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2220      	movs	r2, #32
 8010c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010c90:	2300      	movs	r3, #0
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b09c      	sub	sp, #112	; 0x70
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	60f8      	str	r0, [r7, #12]
 8010ca2:	60b9      	str	r1, [r7, #8]
 8010ca4:	603b      	str	r3, [r7, #0]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010caa:	e0a9      	b.n	8010e00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cb2:	f000 80a5 	beq.w	8010e00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010cb6:	f7f4 fb49 	bl	800534c <HAL_GetTick>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d302      	bcc.n	8010ccc <UART_WaitOnFlagUntilTimeout+0x32>
 8010cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d140      	bne.n	8010d4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd4:	e853 3f00 	ldrex	r3, [r3]
 8010cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010cec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010cf2:	e841 2300 	strex	r3, r2, [r1]
 8010cf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d1e6      	bne.n	8010ccc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	3308      	adds	r3, #8
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d08:	e853 3f00 	ldrex	r3, [r3]
 8010d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d10:	f023 0301 	bic.w	r3, r3, #1
 8010d14:	663b      	str	r3, [r7, #96]	; 0x60
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3308      	adds	r3, #8
 8010d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010d1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8010d20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d26:	e841 2300 	strex	r3, r2, [r1]
 8010d2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1e5      	bne.n	8010cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2220      	movs	r2, #32
 8010d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2220      	movs	r2, #32
 8010d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2200      	movs	r2, #0
 8010d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010d4a:	2303      	movs	r3, #3
 8010d4c:	e069      	b.n	8010e22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f003 0304 	and.w	r3, r3, #4
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d051      	beq.n	8010e00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	69db      	ldr	r3, [r3, #28]
 8010d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d6a:	d149      	bne.n	8010e00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7e:	e853 3f00 	ldrex	r3, [r3]
 8010d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	461a      	mov	r2, r3
 8010d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d94:	637b      	str	r3, [r7, #52]	; 0x34
 8010d96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d9c:	e841 2300 	strex	r3, r2, [r1]
 8010da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d1e6      	bne.n	8010d76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3308      	adds	r3, #8
 8010dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	e853 3f00 	ldrex	r3, [r3]
 8010db6:	613b      	str	r3, [r7, #16]
   return(result);
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	f023 0301 	bic.w	r3, r3, #1
 8010dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010dc8:	623a      	str	r2, [r7, #32]
 8010dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dcc:	69f9      	ldr	r1, [r7, #28]
 8010dce:	6a3a      	ldr	r2, [r7, #32]
 8010dd0:	e841 2300 	strex	r3, r2, [r1]
 8010dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1e5      	bne.n	8010da8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	2220      	movs	r2, #32
 8010de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2220      	movs	r2, #32
 8010de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2220      	movs	r2, #32
 8010df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010dfc:	2303      	movs	r3, #3
 8010dfe:	e010      	b.n	8010e22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	69da      	ldr	r2, [r3, #28]
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	4013      	ands	r3, r2
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	bf0c      	ite	eq
 8010e10:	2301      	moveq	r3, #1
 8010e12:	2300      	movne	r3, #0
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	461a      	mov	r2, r3
 8010e18:	79fb      	ldrb	r3, [r7, #7]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	f43f af46 	beq.w	8010cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e20:	2300      	movs	r3, #0
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3770      	adds	r7, #112	; 0x70
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
	...

08010e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b0a3      	sub	sp, #140	; 0x8c
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	60f8      	str	r0, [r7, #12]
 8010e34:	60b9      	str	r1, [r7, #8]
 8010e36:	4613      	mov	r3, r2
 8010e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	68ba      	ldr	r2, [r7, #8]
 8010e3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	88fa      	ldrh	r2, [r7, #6]
 8010e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	88fa      	ldrh	r2, [r7, #6]
 8010e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2200      	movs	r2, #0
 8010e54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e5e:	d10e      	bne.n	8010e7e <UART_Start_Receive_IT+0x52>
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	691b      	ldr	r3, [r3, #16]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d105      	bne.n	8010e74 <UART_Start_Receive_IT+0x48>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e72:	e02d      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	22ff      	movs	r2, #255	; 0xff
 8010e78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e7c:	e028      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d10d      	bne.n	8010ea2 <UART_Start_Receive_IT+0x76>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d104      	bne.n	8010e98 <UART_Start_Receive_IT+0x6c>
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	22ff      	movs	r2, #255	; 0xff
 8010e92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010e96:	e01b      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	227f      	movs	r2, #127	; 0x7f
 8010e9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010ea0:	e016      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	689b      	ldr	r3, [r3, #8]
 8010ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010eaa:	d10d      	bne.n	8010ec8 <UART_Start_Receive_IT+0x9c>
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d104      	bne.n	8010ebe <UART_Start_Receive_IT+0x92>
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	227f      	movs	r2, #127	; 0x7f
 8010eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010ebc:	e008      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	223f      	movs	r2, #63	; 0x3f
 8010ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010ec6:	e003      	b.n	8010ed0 <UART_Start_Receive_IT+0xa4>
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2222      	movs	r2, #34	; 0x22
 8010edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3308      	adds	r3, #8
 8010ee6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eea:	e853 3f00 	ldrex	r3, [r3]
 8010eee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ef2:	f043 0301 	orr.w	r3, r3, #1
 8010ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	3308      	adds	r3, #8
 8010f00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010f04:	673a      	str	r2, [r7, #112]	; 0x70
 8010f06:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010f0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010f0c:	e841 2300 	strex	r3, r2, [r1]
 8010f10:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d1e3      	bne.n	8010ee0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f20:	d153      	bne.n	8010fca <UART_Start_Receive_IT+0x19e>
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f28:	88fa      	ldrh	r2, [r7, #6]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d34d      	bcc.n	8010fca <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	689b      	ldr	r3, [r3, #8]
 8010f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f36:	d107      	bne.n	8010f48 <UART_Start_Receive_IT+0x11c>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	691b      	ldr	r3, [r3, #16]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d103      	bne.n	8010f48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	4a4b      	ldr	r2, [pc, #300]	; (8011070 <UART_Start_Receive_IT+0x244>)
 8010f44:	671a      	str	r2, [r3, #112]	; 0x70
 8010f46:	e002      	b.n	8010f4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	4a4a      	ldr	r2, [pc, #296]	; (8011074 <UART_Start_Receive_IT+0x248>)
 8010f4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2200      	movs	r2, #0
 8010f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d01a      	beq.n	8010f94 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f66:	e853 3f00 	ldrex	r3, [r3]
 8010f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f88:	e841 2300 	strex	r3, r2, [r1]
 8010f8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1e4      	bne.n	8010f5e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	3308      	adds	r3, #8
 8010f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9e:	e853 3f00 	ldrex	r3, [r3]
 8010fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3308      	adds	r3, #8
 8010fb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010fb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8010fb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fbc:	e841 2300 	strex	r3, r2, [r1]
 8010fc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1e5      	bne.n	8010f94 <UART_Start_Receive_IT+0x168>
 8010fc8:	e04a      	b.n	8011060 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fd2:	d107      	bne.n	8010fe4 <UART_Start_Receive_IT+0x1b8>
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	691b      	ldr	r3, [r3, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d103      	bne.n	8010fe4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	4a26      	ldr	r2, [pc, #152]	; (8011078 <UART_Start_Receive_IT+0x24c>)
 8010fe0:	671a      	str	r2, [r3, #112]	; 0x70
 8010fe2:	e002      	b.n	8010fea <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	4a25      	ldr	r2, [pc, #148]	; (801107c <UART_Start_Receive_IT+0x250>)
 8010fe8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d019      	beq.n	801102e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	e853 3f00 	ldrex	r3, [r3]
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801100e:	677b      	str	r3, [r7, #116]	; 0x74
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	461a      	mov	r2, r3
 8011016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011018:	637b      	str	r3, [r7, #52]	; 0x34
 801101a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801101e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011020:	e841 2300 	strex	r3, r2, [r1]
 8011024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1e6      	bne.n	8010ffa <UART_Start_Receive_IT+0x1ce>
 801102c:	e018      	b.n	8011060 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	e853 3f00 	ldrex	r3, [r3]
 801103a:	613b      	str	r3, [r7, #16]
   return(result);
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	f043 0320 	orr.w	r3, r3, #32
 8011042:	67bb      	str	r3, [r7, #120]	; 0x78
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	461a      	mov	r2, r3
 801104a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801104c:	623b      	str	r3, [r7, #32]
 801104e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011050:	69f9      	ldr	r1, [r7, #28]
 8011052:	6a3a      	ldr	r2, [r7, #32]
 8011054:	e841 2300 	strex	r3, r2, [r1]
 8011058:	61bb      	str	r3, [r7, #24]
   return(result);
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d1e6      	bne.n	801102e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	378c      	adds	r7, #140	; 0x8c
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	0801193d 	.word	0x0801193d
 8011074:	08011645 	.word	0x08011645
 8011078:	080114e5 	.word	0x080114e5
 801107c:	08011385 	.word	0x08011385

08011080 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011080:	b480      	push	{r7}
 8011082:	b08f      	sub	sp, #60	; 0x3c
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	e853 3f00 	ldrex	r3, [r3]
 8011094:	61fb      	str	r3, [r7, #28]
   return(result);
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801109c:	637b      	str	r3, [r7, #52]	; 0x34
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	461a      	mov	r2, r3
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80110ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110ae:	e841 2300 	strex	r3, r2, [r1]
 80110b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80110b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1e6      	bne.n	8011088 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	3308      	adds	r3, #8
 80110c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	e853 3f00 	ldrex	r3, [r3]
 80110c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80110d0:	633b      	str	r3, [r7, #48]	; 0x30
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	3308      	adds	r3, #8
 80110d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110da:	61ba      	str	r2, [r7, #24]
 80110dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110de:	6979      	ldr	r1, [r7, #20]
 80110e0:	69ba      	ldr	r2, [r7, #24]
 80110e2:	e841 2300 	strex	r3, r2, [r1]
 80110e6:	613b      	str	r3, [r7, #16]
   return(result);
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1e5      	bne.n	80110ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2220      	movs	r2, #32
 80110f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80110f6:	bf00      	nop
 80110f8:	373c      	adds	r7, #60	; 0x3c
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
	...

08011104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011104:	b480      	push	{r7}
 8011106:	b095      	sub	sp, #84	; 0x54
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011114:	e853 3f00 	ldrex	r3, [r3]
 8011118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	461a      	mov	r2, r3
 8011128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112a:	643b      	str	r3, [r7, #64]	; 0x40
 801112c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801112e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011132:	e841 2300 	strex	r3, r2, [r1]
 8011136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1e6      	bne.n	801110c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	3308      	adds	r3, #8
 8011144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011146:	6a3b      	ldr	r3, [r7, #32]
 8011148:	e853 3f00 	ldrex	r3, [r3]
 801114c:	61fb      	str	r3, [r7, #28]
   return(result);
 801114e:	69fa      	ldr	r2, [r7, #28]
 8011150:	4b1e      	ldr	r3, [pc, #120]	; (80111cc <UART_EndRxTransfer+0xc8>)
 8011152:	4013      	ands	r3, r2
 8011154:	64bb      	str	r3, [r7, #72]	; 0x48
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	3308      	adds	r3, #8
 801115c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801115e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011166:	e841 2300 	strex	r3, r2, [r1]
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1e5      	bne.n	801113e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011176:	2b01      	cmp	r3, #1
 8011178:	d118      	bne.n	80111ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	e853 3f00 	ldrex	r3, [r3]
 8011186:	60bb      	str	r3, [r7, #8]
   return(result);
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	f023 0310 	bic.w	r3, r3, #16
 801118e:	647b      	str	r3, [r7, #68]	; 0x44
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	461a      	mov	r2, r3
 8011196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011198:	61bb      	str	r3, [r7, #24]
 801119a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801119c:	6979      	ldr	r1, [r7, #20]
 801119e:	69ba      	ldr	r2, [r7, #24]
 80111a0:	e841 2300 	strex	r3, r2, [r1]
 80111a4:	613b      	str	r3, [r7, #16]
   return(result);
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1e6      	bne.n	801117a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2220      	movs	r2, #32
 80111b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80111c0:	bf00      	nop
 80111c2:	3754      	adds	r7, #84	; 0x54
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	effffffe 	.word	0xeffffffe

080111d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b090      	sub	sp, #64	; 0x40
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	69db      	ldr	r3, [r3, #28]
 80111e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111e6:	d037      	beq.n	8011258 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80111e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ea:	2200      	movs	r2, #0
 80111ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80111f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3308      	adds	r3, #8
 80111f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fa:	e853 3f00 	ldrex	r3, [r3]
 80111fe:	623b      	str	r3, [r7, #32]
   return(result);
 8011200:	6a3b      	ldr	r3, [r7, #32]
 8011202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011206:	63bb      	str	r3, [r7, #56]	; 0x38
 8011208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3308      	adds	r3, #8
 801120e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011210:	633a      	str	r2, [r7, #48]	; 0x30
 8011212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011218:	e841 2300 	strex	r3, r2, [r1]
 801121c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1e5      	bne.n	80111f0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	e853 3f00 	ldrex	r3, [r3]
 8011230:	60fb      	str	r3, [r7, #12]
   return(result);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011238:	637b      	str	r3, [r7, #52]	; 0x34
 801123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	461a      	mov	r2, r3
 8011240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011242:	61fb      	str	r3, [r7, #28]
 8011244:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011246:	69b9      	ldr	r1, [r7, #24]
 8011248:	69fa      	ldr	r2, [r7, #28]
 801124a:	e841 2300 	strex	r3, r2, [r1]
 801124e:	617b      	str	r3, [r7, #20]
   return(result);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1e6      	bne.n	8011224 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011256:	e002      	b.n	801125e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011258:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801125a:	f7f2 f8d9 	bl	8003410 <HAL_UART_TxCpltCallback>
}
 801125e:	bf00      	nop
 8011260:	3740      	adds	r7, #64	; 0x40
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b084      	sub	sp, #16
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011272:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f7fe fe9b 	bl	800ffb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801127a:	bf00      	nop
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}

08011282 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011282:	b580      	push	{r7, lr}
 8011284:	b086      	sub	sp, #24
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801128e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011296:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801129e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112aa:	2b80      	cmp	r3, #128	; 0x80
 80112ac:	d109      	bne.n	80112c2 <UART_DMAError+0x40>
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	2b21      	cmp	r3, #33	; 0x21
 80112b2:	d106      	bne.n	80112c2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80112bc:	6978      	ldr	r0, [r7, #20]
 80112be:	f7ff fedf 	bl	8011080 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112cc:	2b40      	cmp	r3, #64	; 0x40
 80112ce:	d109      	bne.n	80112e4 <UART_DMAError+0x62>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2b22      	cmp	r3, #34	; 0x22
 80112d4:	d106      	bne.n	80112e4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2200      	movs	r2, #0
 80112da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80112de:	6978      	ldr	r0, [r7, #20]
 80112e0:	f7ff ff10 	bl	8011104 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80112ea:	f043 0210 	orr.w	r2, r3, #16
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80112f4:	6978      	ldr	r0, [r7, #20]
 80112f6:	f7fe fe65 	bl	800ffc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80112fa:	bf00      	nop
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011302:	b580      	push	{r7, lr}
 8011304:	b084      	sub	sp, #16
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801130e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2200      	movs	r2, #0
 8011314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7fe fe4f 	bl	800ffc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011326:	bf00      	nop
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b088      	sub	sp, #32
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	e853 3f00 	ldrex	r3, [r3]
 8011342:	60bb      	str	r3, [r7, #8]
   return(result);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801134a:	61fb      	str	r3, [r7, #28]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	461a      	mov	r2, r3
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	61bb      	str	r3, [r7, #24]
 8011356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011358:	6979      	ldr	r1, [r7, #20]
 801135a:	69ba      	ldr	r2, [r7, #24]
 801135c:	e841 2300 	strex	r3, r2, [r1]
 8011360:	613b      	str	r3, [r7, #16]
   return(result);
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1e6      	bne.n	8011336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2220      	movs	r2, #32
 801136c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2200      	movs	r2, #0
 8011374:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f7f2 f84a 	bl	8003410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801137c:	bf00      	nop
 801137e:	3720      	adds	r7, #32
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b096      	sub	sp, #88	; 0x58
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011392:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801139c:	2b22      	cmp	r3, #34	; 0x22
 801139e:	f040 8095 	bne.w	80114cc <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80113ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80113b0:	b2d9      	uxtb	r1, r3
 80113b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113bc:	400a      	ands	r2, r1
 80113be:	b2d2      	uxtb	r2, r2
 80113c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113c6:	1c5a      	adds	r2, r3, #1
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	3b01      	subs	r3, #1
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d178      	bne.n	80114dc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f2:	e853 3f00 	ldrex	r3, [r3]
 80113f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80113f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80113fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	461a      	mov	r2, r3
 8011406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011408:	647b      	str	r3, [r7, #68]	; 0x44
 801140a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801140e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011410:	e841 2300 	strex	r3, r2, [r1]
 8011414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011418:	2b00      	cmp	r3, #0
 801141a:	d1e6      	bne.n	80113ea <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3308      	adds	r3, #8
 8011422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011426:	e853 3f00 	ldrex	r3, [r3]
 801142a:	623b      	str	r3, [r7, #32]
   return(result);
 801142c:	6a3b      	ldr	r3, [r7, #32]
 801142e:	f023 0301 	bic.w	r3, r3, #1
 8011432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3308      	adds	r3, #8
 801143a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801143c:	633a      	str	r2, [r7, #48]	; 0x30
 801143e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011444:	e841 2300 	strex	r3, r2, [r1]
 8011448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144c:	2b00      	cmp	r3, #0
 801144e:	d1e5      	bne.n	801141c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2220      	movs	r2, #32
 8011454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011462:	2b01      	cmp	r3, #1
 8011464:	d12e      	bne.n	80114c4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2200      	movs	r2, #0
 801146a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	e853 3f00 	ldrex	r3, [r3]
 8011478:	60fb      	str	r3, [r7, #12]
   return(result);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f023 0310 	bic.w	r3, r3, #16
 8011480:	64bb      	str	r3, [r7, #72]	; 0x48
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	461a      	mov	r2, r3
 8011488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801148a:	61fb      	str	r3, [r7, #28]
 801148c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148e:	69b9      	ldr	r1, [r7, #24]
 8011490:	69fa      	ldr	r2, [r7, #28]
 8011492:	e841 2300 	strex	r3, r2, [r1]
 8011496:	617b      	str	r3, [r7, #20]
   return(result);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1e6      	bne.n	801146c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	f003 0310 	and.w	r3, r3, #16
 80114a8:	2b10      	cmp	r3, #16
 80114aa:	d103      	bne.n	80114b4 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2210      	movs	r2, #16
 80114b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80114ba:	4619      	mov	r1, r3
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f7fe fd8b 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80114c2:	e00b      	b.n	80114dc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7f1 ffc5 	bl	8003454 <HAL_UART_RxCpltCallback>
}
 80114ca:	e007      	b.n	80114dc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	699a      	ldr	r2, [r3, #24]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f042 0208 	orr.w	r2, r2, #8
 80114da:	619a      	str	r2, [r3, #24]
}
 80114dc:	bf00      	nop
 80114de:	3758      	adds	r7, #88	; 0x58
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b096      	sub	sp, #88	; 0x58
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114fc:	2b22      	cmp	r3, #34	; 0x22
 80114fe:	f040 8095 	bne.w	801162c <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011508:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011510:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8011512:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8011516:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801151a:	4013      	ands	r3, r2
 801151c:	b29a      	uxth	r2, r3
 801151e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011520:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011526:	1c9a      	adds	r2, r3, #2
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011532:	b29b      	uxth	r3, r3
 8011534:	3b01      	subs	r3, #1
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011544:	b29b      	uxth	r3, r3
 8011546:	2b00      	cmp	r3, #0
 8011548:	d178      	bne.n	801163c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011552:	e853 3f00 	ldrex	r3, [r3]
 8011556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801155e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	461a      	mov	r2, r3
 8011566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011568:	643b      	str	r3, [r7, #64]	; 0x40
 801156a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801156e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011570:	e841 2300 	strex	r3, r2, [r1]
 8011574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1e6      	bne.n	801154a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	3308      	adds	r3, #8
 8011582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011584:	6a3b      	ldr	r3, [r7, #32]
 8011586:	e853 3f00 	ldrex	r3, [r3]
 801158a:	61fb      	str	r3, [r7, #28]
   return(result);
 801158c:	69fb      	ldr	r3, [r7, #28]
 801158e:	f023 0301 	bic.w	r3, r3, #1
 8011592:	64bb      	str	r3, [r7, #72]	; 0x48
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	3308      	adds	r3, #8
 801159a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801159c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801159e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115a4:	e841 2300 	strex	r3, r2, [r1]
 80115a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d1e5      	bne.n	801157c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2220      	movs	r2, #32
 80115b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2200      	movs	r2, #0
 80115bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d12e      	bne.n	8011624 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	e853 3f00 	ldrex	r3, [r3]
 80115d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	f023 0310 	bic.w	r3, r3, #16
 80115e0:	647b      	str	r3, [r7, #68]	; 0x44
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	461a      	mov	r2, r3
 80115e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ea:	61bb      	str	r3, [r7, #24]
 80115ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ee:	6979      	ldr	r1, [r7, #20]
 80115f0:	69ba      	ldr	r2, [r7, #24]
 80115f2:	e841 2300 	strex	r3, r2, [r1]
 80115f6:	613b      	str	r3, [r7, #16]
   return(result);
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1e6      	bne.n	80115cc <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	69db      	ldr	r3, [r3, #28]
 8011604:	f003 0310 	and.w	r3, r3, #16
 8011608:	2b10      	cmp	r3, #16
 801160a:	d103      	bne.n	8011614 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2210      	movs	r2, #16
 8011612:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801161a:	4619      	mov	r1, r3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f7fe fcdb 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011622:	e00b      	b.n	801163c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7f1 ff15 	bl	8003454 <HAL_UART_RxCpltCallback>
}
 801162a:	e007      	b.n	801163c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	699a      	ldr	r2, [r3, #24]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f042 0208 	orr.w	r2, r2, #8
 801163a:	619a      	str	r2, [r3, #24]
}
 801163c:	bf00      	nop
 801163e:	3758      	adds	r7, #88	; 0x58
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b0a6      	sub	sp, #152	; 0x98
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011652:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	69db      	ldr	r3, [r3, #28]
 801165c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801167a:	2b22      	cmp	r3, #34	; 0x22
 801167c:	f040 814d 	bne.w	801191a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011686:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801168a:	e0f4      	b.n	8011876 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011692:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011696:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801169a:	b2d9      	uxtb	r1, r3
 801169c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116a6:	400a      	ands	r2, r1
 80116a8:	b2d2      	uxtb	r2, r2
 80116aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116bc:	b29b      	uxth	r3, r3
 80116be:	3b01      	subs	r3, #1
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	69db      	ldr	r3, [r3, #28]
 80116ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80116d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116d6:	f003 0307 	and.w	r3, r3, #7
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d053      	beq.n	8011786 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80116de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d011      	beq.n	801170e <UART_RxISR_8BIT_FIFOEN+0xca>
 80116ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80116ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00b      	beq.n	801170e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2201      	movs	r2, #1
 80116fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011704:	f043 0201 	orr.w	r2, r3, #1
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801170e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011712:	f003 0302 	and.w	r3, r3, #2
 8011716:	2b00      	cmp	r3, #0
 8011718:	d011      	beq.n	801173e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801171a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801171e:	f003 0301 	and.w	r3, r3, #1
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00b      	beq.n	801173e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2202      	movs	r2, #2
 801172c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011734:	f043 0204 	orr.w	r2, r3, #4
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801173e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011742:	f003 0304 	and.w	r3, r3, #4
 8011746:	2b00      	cmp	r3, #0
 8011748:	d011      	beq.n	801176e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801174a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801174e:	f003 0301 	and.w	r3, r3, #1
 8011752:	2b00      	cmp	r3, #0
 8011754:	d00b      	beq.n	801176e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2204      	movs	r2, #4
 801175c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011764:	f043 0202 	orr.w	r2, r3, #2
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7fe fc23 	bl	800ffc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801178c:	b29b      	uxth	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d171      	bne.n	8011876 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801179a:	e853 3f00 	ldrex	r3, [r3]
 801179e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80117a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	461a      	mov	r2, r3
 80117b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80117b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80117b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80117ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80117bc:	e841 2300 	strex	r3, r2, [r1]
 80117c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80117c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1e4      	bne.n	8011792 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3308      	adds	r3, #8
 80117ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117d2:	e853 3f00 	ldrex	r3, [r3]
 80117d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80117d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117da:	4b56      	ldr	r3, [pc, #344]	; (8011934 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80117dc:	4013      	ands	r3, r2
 80117de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3308      	adds	r3, #8
 80117e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80117e8:	657a      	str	r2, [r7, #84]	; 0x54
 80117ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80117ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117f0:	e841 2300 	strex	r3, r2, [r1]
 80117f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80117f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1e5      	bne.n	80117c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2220      	movs	r2, #32
 8011800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801180e:	2b01      	cmp	r3, #1
 8011810:	d12e      	bne.n	8011870 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011820:	e853 3f00 	ldrex	r3, [r3]
 8011824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	f023 0310 	bic.w	r3, r3, #16
 801182c:	67bb      	str	r3, [r7, #120]	; 0x78
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	461a      	mov	r2, r3
 8011834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011836:	643b      	str	r3, [r7, #64]	; 0x40
 8011838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801183c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801183e:	e841 2300 	strex	r3, r2, [r1]
 8011842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1e6      	bne.n	8011818 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	69db      	ldr	r3, [r3, #28]
 8011850:	f003 0310 	and.w	r3, r3, #16
 8011854:	2b10      	cmp	r3, #16
 8011856:	d103      	bne.n	8011860 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2210      	movs	r2, #16
 801185e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011866:	4619      	mov	r1, r3
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7fe fbb5 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
 801186e:	e002      	b.n	8011876 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7f1 fdef 	bl	8003454 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011876:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801187a:	2b00      	cmp	r3, #0
 801187c:	d006      	beq.n	801188c <UART_RxISR_8BIT_FIFOEN+0x248>
 801187e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011882:	f003 0320 	and.w	r3, r3, #32
 8011886:	2b00      	cmp	r3, #0
 8011888:	f47f af00 	bne.w	801168c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011892:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011896:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801189a:	2b00      	cmp	r3, #0
 801189c:	d045      	beq.n	801192a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d23e      	bcs.n	801192a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	3308      	adds	r3, #8
 80118b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	e853 3f00 	ldrex	r3, [r3]
 80118ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80118c2:	673b      	str	r3, [r7, #112]	; 0x70
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3308      	adds	r3, #8
 80118ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80118cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80118ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118d4:	e841 2300 	strex	r3, r2, [r1]
 80118d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1e5      	bne.n	80118ac <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a15      	ldr	r2, [pc, #84]	; (8011938 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80118e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	f043 0320 	orr.w	r3, r3, #32
 80118fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011904:	61bb      	str	r3, [r7, #24]
 8011906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011908:	6979      	ldr	r1, [r7, #20]
 801190a:	69ba      	ldr	r2, [r7, #24]
 801190c:	e841 2300 	strex	r3, r2, [r1]
 8011910:	613b      	str	r3, [r7, #16]
   return(result);
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1e6      	bne.n	80118e6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011918:	e007      	b.n	801192a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	699a      	ldr	r2, [r3, #24]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f042 0208 	orr.w	r2, r2, #8
 8011928:	619a      	str	r2, [r3, #24]
}
 801192a:	bf00      	nop
 801192c:	3798      	adds	r7, #152	; 0x98
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	effffffe 	.word	0xeffffffe
 8011938:	08011385 	.word	0x08011385

0801193c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b0a8      	sub	sp, #160	; 0xa0
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801194a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	69db      	ldr	r3, [r3, #28]
 8011954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011972:	2b22      	cmp	r3, #34	; 0x22
 8011974:	f040 8151 	bne.w	8011c1a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801197e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011982:	e0f8      	b.n	8011b76 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011992:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8011996:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801199a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801199e:	4013      	ands	r3, r2
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80119a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119ac:	1c9a      	adds	r2, r3, #2
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	3b01      	subs	r3, #1
 80119bc:	b29a      	uxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	69db      	ldr	r3, [r3, #28]
 80119ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80119ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80119d2:	f003 0307 	and.w	r3, r3, #7
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d053      	beq.n	8011a82 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80119da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80119de:	f003 0301 	and.w	r3, r3, #1
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d011      	beq.n	8011a0a <UART_RxISR_16BIT_FIFOEN+0xce>
 80119e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80119ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00b      	beq.n	8011a0a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2201      	movs	r2, #1
 80119f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a00:	f043 0201 	orr.w	r2, r3, #1
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a0e:	f003 0302 	and.w	r3, r3, #2
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d011      	beq.n	8011a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00b      	beq.n	8011a3a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2202      	movs	r2, #2
 8011a28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a30:	f043 0204 	orr.w	r2, r3, #4
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a3e:	f003 0304 	and.w	r3, r3, #4
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d011      	beq.n	8011a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011a4a:	f003 0301 	and.w	r3, r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00b      	beq.n	8011a6a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2204      	movs	r2, #4
 8011a58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a60:	f043 0202 	orr.w	r2, r3, #2
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d006      	beq.n	8011a82 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f7fe faa5 	bl	800ffc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d173      	bne.n	8011b76 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011a96:	e853 3f00 	ldrex	r3, [r3]
 8011a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	461a      	mov	r2, r3
 8011aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ab2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ab4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011ab6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011ab8:	e841 2300 	strex	r3, r2, [r1]
 8011abc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d1e4      	bne.n	8011a8e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	3308      	adds	r3, #8
 8011aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ace:	e853 3f00 	ldrex	r3, [r3]
 8011ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ad6:	4b57      	ldr	r3, [pc, #348]	; (8011c34 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8011ad8:	4013      	ands	r3, r2
 8011ada:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	3308      	adds	r3, #8
 8011ae4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8011aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011af0:	e841 2300 	strex	r3, r2, [r1]
 8011af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1e3      	bne.n	8011ac4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2220      	movs	r2, #32
 8011b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b0e:	2b01      	cmp	r3, #1
 8011b10:	d12e      	bne.n	8011b70 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b20:	e853 3f00 	ldrex	r3, [r3]
 8011b24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b28:	f023 0310 	bic.w	r3, r3, #16
 8011b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b36:	647b      	str	r3, [r7, #68]	; 0x44
 8011b38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b3e:	e841 2300 	strex	r3, r2, [r1]
 8011b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d1e6      	bne.n	8011b18 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	69db      	ldr	r3, [r3, #28]
 8011b50:	f003 0310 	and.w	r3, r3, #16
 8011b54:	2b10      	cmp	r3, #16
 8011b56:	d103      	bne.n	8011b60 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2210      	movs	r2, #16
 8011b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7fe fa35 	bl	800ffd8 <HAL_UARTEx_RxEventCallback>
 8011b6e:	e002      	b.n	8011b76 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7f1 fc6f 	bl	8003454 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011b76:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d006      	beq.n	8011b8c <UART_RxISR_16BIT_FIFOEN+0x250>
 8011b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011b82:	f003 0320 	and.w	r3, r3, #32
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f47f aefc 	bne.w	8011984 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b92:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011b96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d045      	beq.n	8011c2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ba4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d23e      	bcs.n	8011c2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	3308      	adds	r3, #8
 8011bb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	e853 3f00 	ldrex	r3, [r3]
 8011bba:	623b      	str	r3, [r7, #32]
   return(result);
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	3308      	adds	r3, #8
 8011bca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8011bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bd4:	e841 2300 	strex	r3, r2, [r1]
 8011bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1e5      	bne.n	8011bac <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011be4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	e853 3f00 	ldrex	r3, [r3]
 8011bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f043 0320 	orr.w	r3, r3, #32
 8011bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	461a      	mov	r2, r3
 8011c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c04:	61fb      	str	r3, [r7, #28]
 8011c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c08:	69b9      	ldr	r1, [r7, #24]
 8011c0a:	69fa      	ldr	r2, [r7, #28]
 8011c0c:	e841 2300 	strex	r3, r2, [r1]
 8011c10:	617b      	str	r3, [r7, #20]
   return(result);
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1e6      	bne.n	8011be6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c18:	e007      	b.n	8011c2a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	699a      	ldr	r2, [r3, #24]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f042 0208 	orr.w	r2, r2, #8
 8011c28:	619a      	str	r2, [r3, #24]
}
 8011c2a:	bf00      	nop
 8011c2c:	37a0      	adds	r7, #160	; 0xa0
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	effffffe 	.word	0xeffffffe
 8011c38:	080114e5 	.word	0x080114e5

08011c3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b083      	sub	sp, #12
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011c58:	bf00      	nop
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011c6c:	bf00      	nop
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr

08011c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d101      	bne.n	8011c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	e027      	b.n	8011cde <HAL_UARTEx_DisableFifoMode+0x66>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2201      	movs	r2, #1
 8011c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2224      	movs	r2, #36	; 0x24
 8011c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f022 0201 	bic.w	r2, r2, #1
 8011cb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2220      	movs	r2, #32
 8011cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011cdc:	2300      	movs	r3, #0
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b084      	sub	sp, #16
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d101      	bne.n	8011d02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e02d      	b.n	8011d5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2201      	movs	r2, #1
 8011d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2224      	movs	r2, #36	; 0x24
 8011d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f022 0201 	bic.w	r2, r2, #1
 8011d28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	683a      	ldr	r2, [r7, #0]
 8011d3a:	430a      	orrs	r2, r1
 8011d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 f850 	bl	8011de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2220      	movs	r2, #32
 8011d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b084      	sub	sp, #16
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
 8011d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d7a:	2302      	movs	r3, #2
 8011d7c:	e02d      	b.n	8011dda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2224      	movs	r2, #36	; 0x24
 8011d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f022 0201 	bic.w	r2, r2, #1
 8011da4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	683a      	ldr	r2, [r7, #0]
 8011db6:	430a      	orrs	r2, r1
 8011db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 f812 	bl	8011de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2220      	movs	r2, #32
 8011dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d108      	bne.n	8011e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e04:	e031      	b.n	8011e6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e06:	2310      	movs	r3, #16
 8011e08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e0a:	2310      	movs	r3, #16
 8011e0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	0e5b      	lsrs	r3, r3, #25
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	f003 0307 	and.w	r3, r3, #7
 8011e1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	0f5b      	lsrs	r3, r3, #29
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 0307 	and.w	r3, r3, #7
 8011e2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e2e:	7bbb      	ldrb	r3, [r7, #14]
 8011e30:	7b3a      	ldrb	r2, [r7, #12]
 8011e32:	4911      	ldr	r1, [pc, #68]	; (8011e78 <UARTEx_SetNbDataToProcess+0x94>)
 8011e34:	5c8a      	ldrb	r2, [r1, r2]
 8011e36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e3a:	7b3a      	ldrb	r2, [r7, #12]
 8011e3c:	490f      	ldr	r1, [pc, #60]	; (8011e7c <UARTEx_SetNbDataToProcess+0x98>)
 8011e3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	7b7a      	ldrb	r2, [r7, #13]
 8011e50:	4909      	ldr	r1, [pc, #36]	; (8011e78 <UARTEx_SetNbDataToProcess+0x94>)
 8011e52:	5c8a      	ldrb	r2, [r1, r2]
 8011e54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e58:	7b7a      	ldrb	r2, [r7, #13]
 8011e5a:	4908      	ldr	r1, [pc, #32]	; (8011e7c <UARTEx_SetNbDataToProcess+0x98>)
 8011e5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e6a:	bf00      	nop
 8011e6c:	3714      	adds	r7, #20
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	0803071c 	.word	0x0803071c
 8011e7c:	08030724 	.word	0x08030724

08011e80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e80:	b084      	sub	sp, #16
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b084      	sub	sp, #16
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	f107 001c 	add.w	r0, r7, #28
 8011e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	d120      	bne.n	8011eda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	68da      	ldr	r2, [r3, #12]
 8011ea8:	4b2a      	ldr	r3, [pc, #168]	; (8011f54 <USB_CoreInit+0xd4>)
 8011eaa:	4013      	ands	r3, r2
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d105      	bne.n	8011ece <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f001 fb4e 	bl	8013570 <USB_CoreReset>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73fb      	strb	r3, [r7, #15]
 8011ed8:	e01a      	b.n	8011f10 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f001 fb42 	bl	8013570 <USB_CoreReset>
 8011eec:	4603      	mov	r3, r0
 8011eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011efa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	639a      	str	r2, [r3, #56]	; 0x38
 8011f02:	e005      	b.n	8011f10 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	d116      	bne.n	8011f44 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011f24:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <USB_CoreInit+0xd8>)
 8011f26:	4313      	orrs	r3, r2
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	689b      	ldr	r3, [r3, #8]
 8011f30:	f043 0206 	orr.w	r2, r3, #6
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	f043 0220 	orr.w	r2, r3, #32
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f50:	b004      	add	sp, #16
 8011f52:	4770      	bx	lr
 8011f54:	ffbdffbf 	.word	0xffbdffbf
 8011f58:	03ee0000 	.word	0x03ee0000

08011f5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	4613      	mov	r3, r2
 8011f68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011f6a:	79fb      	ldrb	r3, [r7, #7]
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d165      	bne.n	801203c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	4a41      	ldr	r2, [pc, #260]	; (8012078 <USB_SetTurnaroundTime+0x11c>)
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d906      	bls.n	8011f86 <USB_SetTurnaroundTime+0x2a>
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	4a40      	ldr	r2, [pc, #256]	; (801207c <USB_SetTurnaroundTime+0x120>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d202      	bcs.n	8011f86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011f80:	230f      	movs	r3, #15
 8011f82:	617b      	str	r3, [r7, #20]
 8011f84:	e062      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	4a3c      	ldr	r2, [pc, #240]	; (801207c <USB_SetTurnaroundTime+0x120>)
 8011f8a:	4293      	cmp	r3, r2
 8011f8c:	d306      	bcc.n	8011f9c <USB_SetTurnaroundTime+0x40>
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	4a3b      	ldr	r2, [pc, #236]	; (8012080 <USB_SetTurnaroundTime+0x124>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d202      	bcs.n	8011f9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011f96:	230e      	movs	r3, #14
 8011f98:	617b      	str	r3, [r7, #20]
 8011f9a:	e057      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	4a38      	ldr	r2, [pc, #224]	; (8012080 <USB_SetTurnaroundTime+0x124>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d306      	bcc.n	8011fb2 <USB_SetTurnaroundTime+0x56>
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	4a37      	ldr	r2, [pc, #220]	; (8012084 <USB_SetTurnaroundTime+0x128>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d202      	bcs.n	8011fb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011fac:	230d      	movs	r3, #13
 8011fae:	617b      	str	r3, [r7, #20]
 8011fb0:	e04c      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	4a33      	ldr	r2, [pc, #204]	; (8012084 <USB_SetTurnaroundTime+0x128>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d306      	bcc.n	8011fc8 <USB_SetTurnaroundTime+0x6c>
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	4a32      	ldr	r2, [pc, #200]	; (8012088 <USB_SetTurnaroundTime+0x12c>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d802      	bhi.n	8011fc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011fc2:	230c      	movs	r3, #12
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	e041      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	4a2f      	ldr	r2, [pc, #188]	; (8012088 <USB_SetTurnaroundTime+0x12c>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d906      	bls.n	8011fde <USB_SetTurnaroundTime+0x82>
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4a2e      	ldr	r2, [pc, #184]	; (801208c <USB_SetTurnaroundTime+0x130>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d802      	bhi.n	8011fde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011fd8:	230b      	movs	r3, #11
 8011fda:	617b      	str	r3, [r7, #20]
 8011fdc:	e036      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	4a2a      	ldr	r2, [pc, #168]	; (801208c <USB_SetTurnaroundTime+0x130>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d906      	bls.n	8011ff4 <USB_SetTurnaroundTime+0x98>
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	4a29      	ldr	r2, [pc, #164]	; (8012090 <USB_SetTurnaroundTime+0x134>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d802      	bhi.n	8011ff4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011fee:	230a      	movs	r3, #10
 8011ff0:	617b      	str	r3, [r7, #20]
 8011ff2:	e02b      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	4a26      	ldr	r2, [pc, #152]	; (8012090 <USB_SetTurnaroundTime+0x134>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d906      	bls.n	801200a <USB_SetTurnaroundTime+0xae>
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	4a25      	ldr	r2, [pc, #148]	; (8012094 <USB_SetTurnaroundTime+0x138>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d202      	bcs.n	801200a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012004:	2309      	movs	r3, #9
 8012006:	617b      	str	r3, [r7, #20]
 8012008:	e020      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	4a21      	ldr	r2, [pc, #132]	; (8012094 <USB_SetTurnaroundTime+0x138>)
 801200e:	4293      	cmp	r3, r2
 8012010:	d306      	bcc.n	8012020 <USB_SetTurnaroundTime+0xc4>
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	4a20      	ldr	r2, [pc, #128]	; (8012098 <USB_SetTurnaroundTime+0x13c>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d802      	bhi.n	8012020 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801201a:	2308      	movs	r3, #8
 801201c:	617b      	str	r3, [r7, #20]
 801201e:	e015      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	4a1d      	ldr	r2, [pc, #116]	; (8012098 <USB_SetTurnaroundTime+0x13c>)
 8012024:	4293      	cmp	r3, r2
 8012026:	d906      	bls.n	8012036 <USB_SetTurnaroundTime+0xda>
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	4a1c      	ldr	r2, [pc, #112]	; (801209c <USB_SetTurnaroundTime+0x140>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d202      	bcs.n	8012036 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012030:	2307      	movs	r3, #7
 8012032:	617b      	str	r3, [r7, #20]
 8012034:	e00a      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012036:	2306      	movs	r3, #6
 8012038:	617b      	str	r3, [r7, #20]
 801203a:	e007      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801203c:	79fb      	ldrb	r3, [r7, #7]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d102      	bne.n	8012048 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012042:	2309      	movs	r3, #9
 8012044:	617b      	str	r3, [r7, #20]
 8012046:	e001      	b.n	801204c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012048:	2309      	movs	r3, #9
 801204a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	68da      	ldr	r2, [r3, #12]
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	029b      	lsls	r3, r3, #10
 8012060:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012064:	431a      	orrs	r2, r3
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801206a:	2300      	movs	r3, #0
}
 801206c:	4618      	mov	r0, r3
 801206e:	371c      	adds	r7, #28
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	00d8acbf 	.word	0x00d8acbf
 801207c:	00e4e1c0 	.word	0x00e4e1c0
 8012080:	00f42400 	.word	0x00f42400
 8012084:	01067380 	.word	0x01067380
 8012088:	011a499f 	.word	0x011a499f
 801208c:	01312cff 	.word	0x01312cff
 8012090:	014ca43f 	.word	0x014ca43f
 8012094:	016e3600 	.word	0x016e3600
 8012098:	01a6ab1f 	.word	0x01a6ab1f
 801209c:	01e84800 	.word	0x01e84800

080120a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	f043 0201 	orr.w	r2, r3, #1
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80120c2:	b480      	push	{r7}
 80120c4:	b083      	sub	sp, #12
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	f023 0201 	bic.w	r2, r3, #1
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80120d6:	2300      	movs	r3, #0
}
 80120d8:	4618      	mov	r0, r3
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	460b      	mov	r3, r1
 80120ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80120f0:	2300      	movs	r3, #0
 80120f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012100:	78fb      	ldrb	r3, [r7, #3]
 8012102:	2b01      	cmp	r3, #1
 8012104:	d115      	bne.n	8012132 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012112:	2001      	movs	r0, #1
 8012114:	f7f3 f926 	bl	8005364 <HAL_Delay>
      ms++;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	3301      	adds	r3, #1
 801211c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f001 f995 	bl	801344e <USB_GetMode>
 8012124:	4603      	mov	r3, r0
 8012126:	2b01      	cmp	r3, #1
 8012128:	d01e      	beq.n	8012168 <USB_SetCurrentMode+0x84>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2b31      	cmp	r3, #49	; 0x31
 801212e:	d9f0      	bls.n	8012112 <USB_SetCurrentMode+0x2e>
 8012130:	e01a      	b.n	8012168 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012132:	78fb      	ldrb	r3, [r7, #3]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d115      	bne.n	8012164 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012144:	2001      	movs	r0, #1
 8012146:	f7f3 f90d 	bl	8005364 <HAL_Delay>
      ms++;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	3301      	adds	r3, #1
 801214e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f001 f97c 	bl	801344e <USB_GetMode>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d005      	beq.n	8012168 <USB_SetCurrentMode+0x84>
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b31      	cmp	r3, #49	; 0x31
 8012160:	d9f0      	bls.n	8012144 <USB_SetCurrentMode+0x60>
 8012162:	e001      	b.n	8012168 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012164:	2301      	movs	r3, #1
 8012166:	e005      	b.n	8012174 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b32      	cmp	r3, #50	; 0x32
 801216c:	d101      	bne.n	8012172 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801216e:	2301      	movs	r3, #1
 8012170:	e000      	b.n	8012174 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012172:	2300      	movs	r3, #0
}
 8012174:	4618      	mov	r0, r3
 8012176:	3710      	adds	r7, #16
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801217c:	b084      	sub	sp, #16
 801217e:	b580      	push	{r7, lr}
 8012180:	b086      	sub	sp, #24
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801218a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012196:	2300      	movs	r3, #0
 8012198:	613b      	str	r3, [r7, #16]
 801219a:	e009      	b.n	80121b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	3340      	adds	r3, #64	; 0x40
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	4413      	add	r3, r2
 80121a6:	2200      	movs	r2, #0
 80121a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	3301      	adds	r3, #1
 80121ae:	613b      	str	r3, [r7, #16]
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	2b0e      	cmp	r3, #14
 80121b4:	d9f2      	bls.n	801219c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80121b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d11c      	bne.n	80121f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121ca:	f043 0302 	orr.w	r3, r3, #2
 80121ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	601a      	str	r2, [r3, #0]
 80121f4:	e005      	b.n	8012202 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012208:	461a      	mov	r2, r3
 801220a:	2300      	movs	r3, #0
 801220c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012214:	4619      	mov	r1, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801221c:	461a      	mov	r2, r3
 801221e:	680b      	ldr	r3, [r1, #0]
 8012220:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012224:	2b01      	cmp	r3, #1
 8012226:	d10c      	bne.n	8012242 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222a:	2b00      	cmp	r3, #0
 801222c:	d104      	bne.n	8012238 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801222e:	2100      	movs	r1, #0
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f000 f961 	bl	80124f8 <USB_SetDevSpeed>
 8012236:	e008      	b.n	801224a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012238:	2101      	movs	r1, #1
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 f95c 	bl	80124f8 <USB_SetDevSpeed>
 8012240:	e003      	b.n	801224a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012242:	2103      	movs	r1, #3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 f957 	bl	80124f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801224a:	2110      	movs	r1, #16
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f000 f8f3 	bl	8012438 <USB_FlushTxFifo>
 8012252:	4603      	mov	r3, r0
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012258:	2301      	movs	r3, #1
 801225a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 f91d 	bl	801249c <USB_FlushRxFifo>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012268:	2301      	movs	r3, #1
 801226a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012272:	461a      	mov	r2, r3
 8012274:	2300      	movs	r3, #0
 8012276:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801227e:	461a      	mov	r2, r3
 8012280:	2300      	movs	r3, #0
 8012282:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801228a:	461a      	mov	r2, r3
 801228c:	2300      	movs	r3, #0
 801228e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012290:	2300      	movs	r3, #0
 8012292:	613b      	str	r3, [r7, #16]
 8012294:	e043      	b.n	801231e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	015a      	lsls	r2, r3, #5
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	4413      	add	r3, r2
 801229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122ac:	d118      	bne.n	80122e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10a      	bne.n	80122ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	015a      	lsls	r2, r3, #5
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4413      	add	r3, r2
 80122bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122c0:	461a      	mov	r2, r3
 80122c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80122c6:	6013      	str	r3, [r2, #0]
 80122c8:	e013      	b.n	80122f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	015a      	lsls	r2, r3, #5
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	4413      	add	r3, r2
 80122d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122d6:	461a      	mov	r2, r3
 80122d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80122dc:	6013      	str	r3, [r2, #0]
 80122de:	e008      	b.n	80122f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	015a      	lsls	r2, r3, #5
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	4413      	add	r3, r2
 80122e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122ec:	461a      	mov	r2, r3
 80122ee:	2300      	movs	r3, #0
 80122f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	015a      	lsls	r2, r3, #5
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	4413      	add	r3, r2
 80122fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122fe:	461a      	mov	r2, r3
 8012300:	2300      	movs	r3, #0
 8012302:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	015a      	lsls	r2, r3, #5
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	4413      	add	r3, r2
 801230c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012310:	461a      	mov	r2, r3
 8012312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	3301      	adds	r3, #1
 801231c:	613b      	str	r3, [r7, #16]
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	693a      	ldr	r2, [r7, #16]
 8012322:	429a      	cmp	r2, r3
 8012324:	d3b7      	bcc.n	8012296 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012326:	2300      	movs	r3, #0
 8012328:	613b      	str	r3, [r7, #16]
 801232a:	e043      	b.n	80123b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	015a      	lsls	r2, r3, #5
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	4413      	add	r3, r2
 8012334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801233e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012342:	d118      	bne.n	8012376 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	015a      	lsls	r2, r3, #5
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	4413      	add	r3, r2
 8012352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012356:	461a      	mov	r2, r3
 8012358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801235c:	6013      	str	r3, [r2, #0]
 801235e:	e013      	b.n	8012388 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	015a      	lsls	r2, r3, #5
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	4413      	add	r3, r2
 8012368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801236c:	461a      	mov	r2, r3
 801236e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012372:	6013      	str	r3, [r2, #0]
 8012374:	e008      	b.n	8012388 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	015a      	lsls	r2, r3, #5
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	4413      	add	r3, r2
 801237e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012382:	461a      	mov	r2, r3
 8012384:	2300      	movs	r3, #0
 8012386:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	015a      	lsls	r2, r3, #5
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	4413      	add	r3, r2
 8012390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012394:	461a      	mov	r2, r3
 8012396:	2300      	movs	r3, #0
 8012398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	015a      	lsls	r2, r3, #5
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	4413      	add	r3, r2
 80123a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123a6:	461a      	mov	r2, r3
 80123a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80123ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	3301      	adds	r3, #1
 80123b2:	613b      	str	r3, [r7, #16]
 80123b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b6:	693a      	ldr	r2, [r7, #16]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d3b7      	bcc.n	801232c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123c2:	691b      	ldr	r3, [r3, #16]
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80123ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80123dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80123de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d105      	bne.n	80123f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	699b      	ldr	r3, [r3, #24]
 80123e8:	f043 0210 	orr.w	r2, r3, #16
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	699a      	ldr	r2, [r3, #24]
 80123f4:	4b0e      	ldr	r3, [pc, #56]	; (8012430 <USB_DevInit+0x2b4>)
 80123f6:	4313      	orrs	r3, r2
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80123fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d005      	beq.n	801240e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	699b      	ldr	r3, [r3, #24]
 8012406:	f043 0208 	orr.w	r2, r3, #8
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801240e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012410:	2b01      	cmp	r3, #1
 8012412:	d105      	bne.n	8012420 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	699a      	ldr	r2, [r3, #24]
 8012418:	4b06      	ldr	r3, [pc, #24]	; (8012434 <USB_DevInit+0x2b8>)
 801241a:	4313      	orrs	r3, r2
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012420:	7dfb      	ldrb	r3, [r7, #23]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3718      	adds	r7, #24
 8012426:	46bd      	mov	sp, r7
 8012428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801242c:	b004      	add	sp, #16
 801242e:	4770      	bx	lr
 8012430:	803c3800 	.word	0x803c3800
 8012434:	40000004 	.word	0x40000004

08012438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012442:	2300      	movs	r3, #0
 8012444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3301      	adds	r3, #1
 801244a:	60fb      	str	r3, [r7, #12]
 801244c:	4a12      	ldr	r2, [pc, #72]	; (8012498 <USB_FlushTxFifo+0x60>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d901      	bls.n	8012456 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012452:	2303      	movs	r3, #3
 8012454:	e01a      	b.n	801248c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	691b      	ldr	r3, [r3, #16]
 801245a:	2b00      	cmp	r3, #0
 801245c:	daf3      	bge.n	8012446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	019b      	lsls	r3, r3, #6
 8012466:	f043 0220 	orr.w	r2, r3, #32
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3301      	adds	r3, #1
 8012472:	60fb      	str	r3, [r7, #12]
 8012474:	4a08      	ldr	r2, [pc, #32]	; (8012498 <USB_FlushTxFifo+0x60>)
 8012476:	4293      	cmp	r3, r2
 8012478:	d901      	bls.n	801247e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 801247a:	2303      	movs	r3, #3
 801247c:	e006      	b.n	801248c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	f003 0320 	and.w	r3, r3, #32
 8012486:	2b20      	cmp	r3, #32
 8012488:	d0f1      	beq.n	801246e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 801248a:	2300      	movs	r3, #0
}
 801248c:	4618      	mov	r0, r3
 801248e:	3714      	adds	r7, #20
 8012490:	46bd      	mov	sp, r7
 8012492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012496:	4770      	bx	lr
 8012498:	00030d40 	.word	0x00030d40

0801249c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801249c:	b480      	push	{r7}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80124a4:	2300      	movs	r3, #0
 80124a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	3301      	adds	r3, #1
 80124ac:	60fb      	str	r3, [r7, #12]
 80124ae:	4a11      	ldr	r2, [pc, #68]	; (80124f4 <USB_FlushRxFifo+0x58>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d901      	bls.n	80124b8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80124b4:	2303      	movs	r3, #3
 80124b6:	e017      	b.n	80124e8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	691b      	ldr	r3, [r3, #16]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	daf3      	bge.n	80124a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80124c0:	2300      	movs	r3, #0
 80124c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2210      	movs	r2, #16
 80124c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	4a08      	ldr	r2, [pc, #32]	; (80124f4 <USB_FlushRxFifo+0x58>)
 80124d2:	4293      	cmp	r3, r2
 80124d4:	d901      	bls.n	80124da <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80124d6:	2303      	movs	r3, #3
 80124d8:	e006      	b.n	80124e8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	691b      	ldr	r3, [r3, #16]
 80124de:	f003 0310 	and.w	r3, r3, #16
 80124e2:	2b10      	cmp	r3, #16
 80124e4:	d0f1      	beq.n	80124ca <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80124e6:	2300      	movs	r3, #0
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3714      	adds	r7, #20
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr
 80124f4:	00030d40 	.word	0x00030d40

080124f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b085      	sub	sp, #20
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	460b      	mov	r3, r1
 8012502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	68f9      	ldr	r1, [r7, #12]
 8012514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012518:	4313      	orrs	r3, r2
 801251a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801251c:	2300      	movs	r3, #0
}
 801251e:	4618      	mov	r0, r3
 8012520:	3714      	adds	r7, #20
 8012522:	46bd      	mov	sp, r7
 8012524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012528:	4770      	bx	lr

0801252a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801252a:	b480      	push	{r7}
 801252c:	b087      	sub	sp, #28
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	f003 0306 	and.w	r3, r3, #6
 8012542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d102      	bne.n	8012550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801254a:	2300      	movs	r3, #0
 801254c:	75fb      	strb	r3, [r7, #23]
 801254e:	e00a      	b.n	8012566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b02      	cmp	r3, #2
 8012554:	d002      	beq.n	801255c <USB_GetDevSpeed+0x32>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2b06      	cmp	r3, #6
 801255a:	d102      	bne.n	8012562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801255c:	2302      	movs	r3, #2
 801255e:	75fb      	strb	r3, [r7, #23]
 8012560:	e001      	b.n	8012566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012562:	230f      	movs	r3, #15
 8012564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012566:	7dfb      	ldrb	r3, [r7, #23]
}
 8012568:	4618      	mov	r0, r3
 801256a:	371c      	adds	r7, #28
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012574:	b480      	push	{r7}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	785b      	ldrb	r3, [r3, #1]
 801258c:	2b01      	cmp	r3, #1
 801258e:	d139      	bne.n	8012604 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012596:	69da      	ldr	r2, [r3, #28]
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	f003 030f 	and.w	r3, r3, #15
 80125a0:	2101      	movs	r1, #1
 80125a2:	fa01 f303 	lsl.w	r3, r1, r3
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	68f9      	ldr	r1, [r7, #12]
 80125aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125ae:	4313      	orrs	r3, r2
 80125b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	015a      	lsls	r2, r3, #5
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	4413      	add	r3, r2
 80125ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d153      	bne.n	8012670 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	015a      	lsls	r2, r3, #5
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	4413      	add	r3, r2
 80125d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	689b      	ldr	r3, [r3, #8]
 80125da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	78db      	ldrb	r3, [r3, #3]
 80125e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80125e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	059b      	lsls	r3, r3, #22
 80125ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80125ec:	431a      	orrs	r2, r3
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	0159      	lsls	r1, r3, #5
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	440b      	add	r3, r1
 80125f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125fa:	4619      	mov	r1, r3
 80125fc:	4b20      	ldr	r3, [pc, #128]	; (8012680 <USB_ActivateEndpoint+0x10c>)
 80125fe:	4313      	orrs	r3, r2
 8012600:	600b      	str	r3, [r1, #0]
 8012602:	e035      	b.n	8012670 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801260a:	69da      	ldr	r2, [r3, #28]
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	f003 030f 	and.w	r3, r3, #15
 8012614:	2101      	movs	r1, #1
 8012616:	fa01 f303 	lsl.w	r3, r1, r3
 801261a:	041b      	lsls	r3, r3, #16
 801261c:	68f9      	ldr	r1, [r7, #12]
 801261e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012622:	4313      	orrs	r3, r2
 8012624:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	015a      	lsls	r2, r3, #5
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	4413      	add	r3, r2
 801262e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d119      	bne.n	8012670 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	015a      	lsls	r2, r3, #5
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4413      	add	r3, r2
 8012644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	78db      	ldrb	r3, [r3, #3]
 8012656:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012658:	430b      	orrs	r3, r1
 801265a:	431a      	orrs	r2, r3
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	0159      	lsls	r1, r3, #5
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	440b      	add	r3, r1
 8012664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012668:	4619      	mov	r1, r3
 801266a:	4b05      	ldr	r3, [pc, #20]	; (8012680 <USB_ActivateEndpoint+0x10c>)
 801266c:	4313      	orrs	r3, r2
 801266e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3714      	adds	r7, #20
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	10008000 	.word	0x10008000

08012684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012684:	b480      	push	{r7}
 8012686:	b085      	sub	sp, #20
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	785b      	ldrb	r3, [r3, #1]
 801269c:	2b01      	cmp	r3, #1
 801269e:	d161      	bne.n	8012764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	015a      	lsls	r2, r3, #5
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4413      	add	r3, r2
 80126a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126b6:	d11f      	bne.n	80126f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	015a      	lsls	r2, r3, #5
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	4413      	add	r3, r2
 80126c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	68ba      	ldr	r2, [r7, #8]
 80126c8:	0151      	lsls	r1, r2, #5
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	440a      	add	r2, r1
 80126ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80126d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	015a      	lsls	r2, r3, #5
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	4413      	add	r3, r2
 80126e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	0151      	lsls	r1, r2, #5
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	440a      	add	r2, r1
 80126ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80126f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f003 030f 	and.w	r3, r3, #15
 8012708:	2101      	movs	r1, #1
 801270a:	fa01 f303 	lsl.w	r3, r1, r3
 801270e:	b29b      	uxth	r3, r3
 8012710:	43db      	mvns	r3, r3
 8012712:	68f9      	ldr	r1, [r7, #12]
 8012714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012718:	4013      	ands	r3, r2
 801271a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012722:	69da      	ldr	r2, [r3, #28]
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 030f 	and.w	r3, r3, #15
 801272c:	2101      	movs	r1, #1
 801272e:	fa01 f303 	lsl.w	r3, r1, r3
 8012732:	b29b      	uxth	r3, r3
 8012734:	43db      	mvns	r3, r3
 8012736:	68f9      	ldr	r1, [r7, #12]
 8012738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801273c:	4013      	ands	r3, r2
 801273e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	015a      	lsls	r2, r3, #5
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	4413      	add	r3, r2
 8012748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	0159      	lsls	r1, r3, #5
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	440b      	add	r3, r1
 8012756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801275a:	4619      	mov	r1, r3
 801275c:	4b35      	ldr	r3, [pc, #212]	; (8012834 <USB_DeactivateEndpoint+0x1b0>)
 801275e:	4013      	ands	r3, r2
 8012760:	600b      	str	r3, [r1, #0]
 8012762:	e060      	b.n	8012826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4413      	add	r3, r2
 801276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801277a:	d11f      	bne.n	80127bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	015a      	lsls	r2, r3, #5
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	4413      	add	r3, r2
 8012784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	68ba      	ldr	r2, [r7, #8]
 801278c:	0151      	lsls	r1, r2, #5
 801278e:	68fa      	ldr	r2, [r7, #12]
 8012790:	440a      	add	r2, r1
 8012792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801279a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	015a      	lsls	r2, r3, #5
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	4413      	add	r3, r2
 80127a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	68ba      	ldr	r2, [r7, #8]
 80127ac:	0151      	lsls	r1, r2, #5
 80127ae:	68fa      	ldr	r2, [r7, #12]
 80127b0:	440a      	add	r2, r1
 80127b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80127ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	f003 030f 	and.w	r3, r3, #15
 80127cc:	2101      	movs	r1, #1
 80127ce:	fa01 f303 	lsl.w	r3, r1, r3
 80127d2:	041b      	lsls	r3, r3, #16
 80127d4:	43db      	mvns	r3, r3
 80127d6:	68f9      	ldr	r1, [r7, #12]
 80127d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127dc:	4013      	ands	r3, r2
 80127de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127e6:	69da      	ldr	r2, [r3, #28]
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	f003 030f 	and.w	r3, r3, #15
 80127f0:	2101      	movs	r1, #1
 80127f2:	fa01 f303 	lsl.w	r3, r1, r3
 80127f6:	041b      	lsls	r3, r3, #16
 80127f8:	43db      	mvns	r3, r3
 80127fa:	68f9      	ldr	r1, [r7, #12]
 80127fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012800:	4013      	ands	r3, r2
 8012802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	015a      	lsls	r2, r3, #5
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	4413      	add	r3, r2
 801280c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	0159      	lsls	r1, r3, #5
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	440b      	add	r3, r1
 801281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801281e:	4619      	mov	r1, r3
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <USB_DeactivateEndpoint+0x1b4>)
 8012822:	4013      	ands	r3, r2
 8012824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3714      	adds	r7, #20
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr
 8012834:	ec337800 	.word	0xec337800
 8012838:	eff37800 	.word	0xeff37800

0801283c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b08a      	sub	sp, #40	; 0x28
 8012840:	af02      	add	r7, sp, #8
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	785b      	ldrb	r3, [r3, #1]
 8012858:	2b01      	cmp	r3, #1
 801285a:	f040 8163 	bne.w	8012b24 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	695b      	ldr	r3, [r3, #20]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d132      	bne.n	80128cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	015a      	lsls	r2, r3, #5
 801286a:	69fb      	ldr	r3, [r7, #28]
 801286c:	4413      	add	r3, r2
 801286e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012872:	691a      	ldr	r2, [r3, #16]
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	0159      	lsls	r1, r3, #5
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	440b      	add	r3, r1
 801287c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012880:	4619      	mov	r1, r3
 8012882:	4ba5      	ldr	r3, [pc, #660]	; (8012b18 <USB_EPStartXfer+0x2dc>)
 8012884:	4013      	ands	r3, r2
 8012886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012888:	69bb      	ldr	r3, [r7, #24]
 801288a:	015a      	lsls	r2, r3, #5
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	4413      	add	r3, r2
 8012890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012894:	691b      	ldr	r3, [r3, #16]
 8012896:	69ba      	ldr	r2, [r7, #24]
 8012898:	0151      	lsls	r1, r2, #5
 801289a:	69fa      	ldr	r2, [r7, #28]
 801289c:	440a      	add	r2, r1
 801289e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80128a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	015a      	lsls	r2, r3, #5
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	4413      	add	r3, r2
 80128b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128b4:	691a      	ldr	r2, [r3, #16]
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	0159      	lsls	r1, r3, #5
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	440b      	add	r3, r1
 80128be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128c2:	4619      	mov	r1, r3
 80128c4:	4b95      	ldr	r3, [pc, #596]	; (8012b1c <USB_EPStartXfer+0x2e0>)
 80128c6:	4013      	ands	r3, r2
 80128c8:	610b      	str	r3, [r1, #16]
 80128ca:	e074      	b.n	80129b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	015a      	lsls	r2, r3, #5
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	4413      	add	r3, r2
 80128d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128d8:	691a      	ldr	r2, [r3, #16]
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	0159      	lsls	r1, r3, #5
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	440b      	add	r3, r1
 80128e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128e6:	4619      	mov	r1, r3
 80128e8:	4b8c      	ldr	r3, [pc, #560]	; (8012b1c <USB_EPStartXfer+0x2e0>)
 80128ea:	4013      	ands	r3, r2
 80128ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	015a      	lsls	r2, r3, #5
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	4413      	add	r3, r2
 80128f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128fa:	691a      	ldr	r2, [r3, #16]
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	0159      	lsls	r1, r3, #5
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	440b      	add	r3, r1
 8012904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012908:	4619      	mov	r1, r3
 801290a:	4b83      	ldr	r3, [pc, #524]	; (8012b18 <USB_EPStartXfer+0x2dc>)
 801290c:	4013      	ands	r3, r2
 801290e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	015a      	lsls	r2, r3, #5
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	4413      	add	r3, r2
 8012918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801291c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	6959      	ldr	r1, [r3, #20]
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	689b      	ldr	r3, [r3, #8]
 8012926:	440b      	add	r3, r1
 8012928:	1e59      	subs	r1, r3, #1
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012932:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012934:	4b7a      	ldr	r3, [pc, #488]	; (8012b20 <USB_EPStartXfer+0x2e4>)
 8012936:	400b      	ands	r3, r1
 8012938:	69b9      	ldr	r1, [r7, #24]
 801293a:	0148      	lsls	r0, r1, #5
 801293c:	69f9      	ldr	r1, [r7, #28]
 801293e:	4401      	add	r1, r0
 8012940:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012944:	4313      	orrs	r3, r2
 8012946:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	015a      	lsls	r2, r3, #5
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	4413      	add	r3, r2
 8012950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012954:	691a      	ldr	r2, [r3, #16]
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801295e:	69b9      	ldr	r1, [r7, #24]
 8012960:	0148      	lsls	r0, r1, #5
 8012962:	69f9      	ldr	r1, [r7, #28]
 8012964:	4401      	add	r1, r0
 8012966:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801296a:	4313      	orrs	r3, r2
 801296c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	78db      	ldrb	r3, [r3, #3]
 8012972:	2b01      	cmp	r3, #1
 8012974:	d11f      	bne.n	80129b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	015a      	lsls	r2, r3, #5
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	4413      	add	r3, r2
 801297e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012982:	691b      	ldr	r3, [r3, #16]
 8012984:	69ba      	ldr	r2, [r7, #24]
 8012986:	0151      	lsls	r1, r2, #5
 8012988:	69fa      	ldr	r2, [r7, #28]
 801298a:	440a      	add	r2, r1
 801298c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012990:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012994:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	015a      	lsls	r2, r3, #5
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	4413      	add	r3, r2
 801299e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a2:	691b      	ldr	r3, [r3, #16]
 80129a4:	69ba      	ldr	r2, [r7, #24]
 80129a6:	0151      	lsls	r1, r2, #5
 80129a8:	69fa      	ldr	r2, [r7, #28]
 80129aa:	440a      	add	r2, r1
 80129ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80129b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80129b6:	79fb      	ldrb	r3, [r7, #7]
 80129b8:	2b01      	cmp	r3, #1
 80129ba:	d14b      	bne.n	8012a54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	691b      	ldr	r3, [r3, #16]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d009      	beq.n	80129d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d0:	461a      	mov	r2, r3
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	691b      	ldr	r3, [r3, #16]
 80129d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	78db      	ldrb	r3, [r3, #3]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d128      	bne.n	8012a32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129e6:	689b      	ldr	r3, [r3, #8]
 80129e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d110      	bne.n	8012a12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	015a      	lsls	r2, r3, #5
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	4413      	add	r3, r2
 80129f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	0151      	lsls	r1, r2, #5
 8012a02:	69fa      	ldr	r2, [r7, #28]
 8012a04:	440a      	add	r2, r1
 8012a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	e00f      	b.n	8012a32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	015a      	lsls	r2, r3, #5
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	4413      	add	r3, r2
 8012a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	69ba      	ldr	r2, [r7, #24]
 8012a22:	0151      	lsls	r1, r2, #5
 8012a24:	69fa      	ldr	r2, [r7, #28]
 8012a26:	440a      	add	r2, r1
 8012a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	015a      	lsls	r2, r3, #5
 8012a36:	69fb      	ldr	r3, [r7, #28]
 8012a38:	4413      	add	r3, r2
 8012a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	69ba      	ldr	r2, [r7, #24]
 8012a42:	0151      	lsls	r1, r2, #5
 8012a44:	69fa      	ldr	r2, [r7, #28]
 8012a46:	440a      	add	r2, r1
 8012a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a50:	6013      	str	r3, [r2, #0]
 8012a52:	e133      	b.n	8012cbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	015a      	lsls	r2, r3, #5
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	69ba      	ldr	r2, [r7, #24]
 8012a64:	0151      	lsls	r1, r2, #5
 8012a66:	69fa      	ldr	r2, [r7, #28]
 8012a68:	440a      	add	r2, r1
 8012a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	78db      	ldrb	r3, [r3, #3]
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d015      	beq.n	8012aa8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	695b      	ldr	r3, [r3, #20]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 811b 	beq.w	8012cbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	f003 030f 	and.w	r3, r3, #15
 8012a96:	2101      	movs	r1, #1
 8012a98:	fa01 f303 	lsl.w	r3, r1, r3
 8012a9c:	69f9      	ldr	r1, [r7, #28]
 8012a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8012aa6:	e109      	b.n	8012cbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d110      	bne.n	8012ada <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	015a      	lsls	r2, r3, #5
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	4413      	add	r3, r2
 8012ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	69ba      	ldr	r2, [r7, #24]
 8012ac8:	0151      	lsls	r1, r2, #5
 8012aca:	69fa      	ldr	r2, [r7, #28]
 8012acc:	440a      	add	r2, r1
 8012ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ad6:	6013      	str	r3, [r2, #0]
 8012ad8:	e00f      	b.n	8012afa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	015a      	lsls	r2, r3, #5
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	69ba      	ldr	r2, [r7, #24]
 8012aea:	0151      	lsls	r1, r2, #5
 8012aec:	69fa      	ldr	r2, [r7, #28]
 8012aee:	440a      	add	r2, r1
 8012af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012af8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	68d9      	ldr	r1, [r3, #12]
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	781a      	ldrb	r2, [r3, #0]
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	695b      	ldr	r3, [r3, #20]
 8012b06:	b298      	uxth	r0, r3
 8012b08:	79fb      	ldrb	r3, [r7, #7]
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	68f8      	ldr	r0, [r7, #12]
 8012b10:	f000 fa38 	bl	8012f84 <USB_WritePacket>
 8012b14:	e0d2      	b.n	8012cbc <USB_EPStartXfer+0x480>
 8012b16:	bf00      	nop
 8012b18:	e007ffff 	.word	0xe007ffff
 8012b1c:	fff80000 	.word	0xfff80000
 8012b20:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	015a      	lsls	r2, r3, #5
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b30:	691a      	ldr	r2, [r3, #16]
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	0159      	lsls	r1, r3, #5
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	440b      	add	r3, r1
 8012b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b3e:	4619      	mov	r1, r3
 8012b40:	4b61      	ldr	r3, [pc, #388]	; (8012cc8 <USB_EPStartXfer+0x48c>)
 8012b42:	4013      	ands	r3, r2
 8012b44:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	015a      	lsls	r2, r3, #5
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b52:	691a      	ldr	r2, [r3, #16]
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	0159      	lsls	r1, r3, #5
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	440b      	add	r3, r1
 8012b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b60:	4619      	mov	r1, r3
 8012b62:	4b5a      	ldr	r3, [pc, #360]	; (8012ccc <USB_EPStartXfer+0x490>)
 8012b64:	4013      	ands	r3, r2
 8012b66:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	695b      	ldr	r3, [r3, #20]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d123      	bne.n	8012bb8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	015a      	lsls	r2, r3, #5
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	4413      	add	r3, r2
 8012b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b7c:	691a      	ldr	r2, [r3, #16]
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b86:	69b9      	ldr	r1, [r7, #24]
 8012b88:	0148      	lsls	r0, r1, #5
 8012b8a:	69f9      	ldr	r1, [r7, #28]
 8012b8c:	4401      	add	r1, r0
 8012b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b92:	4313      	orrs	r3, r2
 8012b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	015a      	lsls	r2, r3, #5
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ba2:	691b      	ldr	r3, [r3, #16]
 8012ba4:	69ba      	ldr	r2, [r7, #24]
 8012ba6:	0151      	lsls	r1, r2, #5
 8012ba8:	69fa      	ldr	r2, [r7, #28]
 8012baa:	440a      	add	r2, r1
 8012bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012bb4:	6113      	str	r3, [r2, #16]
 8012bb6:	e033      	b.n	8012c20 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	695a      	ldr	r2, [r3, #20]
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	689b      	ldr	r3, [r3, #8]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	1e5a      	subs	r2, r3, #1
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bcc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012bce:	69bb      	ldr	r3, [r7, #24]
 8012bd0:	015a      	lsls	r2, r3, #5
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bda:	691a      	ldr	r2, [r3, #16]
 8012bdc:	8afb      	ldrh	r3, [r7, #22]
 8012bde:	04d9      	lsls	r1, r3, #19
 8012be0:	4b3b      	ldr	r3, [pc, #236]	; (8012cd0 <USB_EPStartXfer+0x494>)
 8012be2:	400b      	ands	r3, r1
 8012be4:	69b9      	ldr	r1, [r7, #24]
 8012be6:	0148      	lsls	r0, r1, #5
 8012be8:	69f9      	ldr	r1, [r7, #28]
 8012bea:	4401      	add	r1, r0
 8012bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8012bf4:	69bb      	ldr	r3, [r7, #24]
 8012bf6:	015a      	lsls	r2, r3, #5
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c00:	691a      	ldr	r2, [r3, #16]
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	8af9      	ldrh	r1, [r7, #22]
 8012c08:	fb01 f303 	mul.w	r3, r1, r3
 8012c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012c10:	69b9      	ldr	r1, [r7, #24]
 8012c12:	0148      	lsls	r0, r1, #5
 8012c14:	69f9      	ldr	r1, [r7, #28]
 8012c16:	4401      	add	r1, r0
 8012c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012c20:	79fb      	ldrb	r3, [r7, #7]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d10d      	bne.n	8012c42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d009      	beq.n	8012c42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	68d9      	ldr	r1, [r3, #12]
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	015a      	lsls	r2, r3, #5
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	4413      	add	r3, r2
 8012c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c3e:	460a      	mov	r2, r1
 8012c40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	78db      	ldrb	r3, [r3, #3]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d128      	bne.n	8012c9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d110      	bne.n	8012c7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	015a      	lsls	r2, r3, #5
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	4413      	add	r3, r2
 8012c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	69ba      	ldr	r2, [r7, #24]
 8012c6a:	0151      	lsls	r1, r2, #5
 8012c6c:	69fa      	ldr	r2, [r7, #28]
 8012c6e:	440a      	add	r2, r1
 8012c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c78:	6013      	str	r3, [r2, #0]
 8012c7a:	e00f      	b.n	8012c9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	015a      	lsls	r2, r3, #5
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	4413      	add	r3, r2
 8012c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	69ba      	ldr	r2, [r7, #24]
 8012c8c:	0151      	lsls	r1, r2, #5
 8012c8e:	69fa      	ldr	r2, [r7, #28]
 8012c90:	440a      	add	r2, r1
 8012c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	015a      	lsls	r2, r3, #5
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	69ba      	ldr	r2, [r7, #24]
 8012cac:	0151      	lsls	r1, r2, #5
 8012cae:	69fa      	ldr	r2, [r7, #28]
 8012cb0:	440a      	add	r2, r1
 8012cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012cba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3720      	adds	r7, #32
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	fff80000 	.word	0xfff80000
 8012ccc:	e007ffff 	.word	0xe007ffff
 8012cd0:	1ff80000 	.word	0x1ff80000

08012cd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b087      	sub	sp, #28
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	60b9      	str	r1, [r7, #8]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	781b      	ldrb	r3, [r3, #0]
 8012cea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	785b      	ldrb	r3, [r3, #1]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	f040 80cd 	bne.w	8012e90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	695b      	ldr	r3, [r3, #20]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d132      	bne.n	8012d64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	015a      	lsls	r2, r3, #5
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	4413      	add	r3, r2
 8012d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d0a:	691a      	ldr	r2, [r3, #16]
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	0159      	lsls	r1, r3, #5
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	440b      	add	r3, r1
 8012d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4b98      	ldr	r3, [pc, #608]	; (8012f7c <USB_EP0StartXfer+0x2a8>)
 8012d1c:	4013      	ands	r3, r2
 8012d1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	015a      	lsls	r2, r3, #5
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	4413      	add	r3, r2
 8012d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2c:	691b      	ldr	r3, [r3, #16]
 8012d2e:	693a      	ldr	r2, [r7, #16]
 8012d30:	0151      	lsls	r1, r2, #5
 8012d32:	697a      	ldr	r2, [r7, #20]
 8012d34:	440a      	add	r2, r1
 8012d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	015a      	lsls	r2, r3, #5
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	4413      	add	r3, r2
 8012d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4c:	691a      	ldr	r2, [r3, #16]
 8012d4e:	693b      	ldr	r3, [r7, #16]
 8012d50:	0159      	lsls	r1, r3, #5
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	440b      	add	r3, r1
 8012d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	4b88      	ldr	r3, [pc, #544]	; (8012f80 <USB_EP0StartXfer+0x2ac>)
 8012d5e:	4013      	ands	r3, r2
 8012d60:	610b      	str	r3, [r1, #16]
 8012d62:	e04e      	b.n	8012e02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	015a      	lsls	r2, r3, #5
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d70:	691a      	ldr	r2, [r3, #16]
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	0159      	lsls	r1, r3, #5
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	440b      	add	r3, r1
 8012d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d7e:	4619      	mov	r1, r3
 8012d80:	4b7f      	ldr	r3, [pc, #508]	; (8012f80 <USB_EP0StartXfer+0x2ac>)
 8012d82:	4013      	ands	r3, r2
 8012d84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	015a      	lsls	r2, r3, #5
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d92:	691a      	ldr	r2, [r3, #16]
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	0159      	lsls	r1, r3, #5
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	440b      	add	r3, r1
 8012d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da0:	4619      	mov	r1, r3
 8012da2:	4b76      	ldr	r3, [pc, #472]	; (8012f7c <USB_EP0StartXfer+0x2a8>)
 8012da4:	4013      	ands	r3, r2
 8012da6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	695a      	ldr	r2, [r3, #20]
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d903      	bls.n	8012dbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	689a      	ldr	r2, [r3, #8]
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dc8:	691b      	ldr	r3, [r3, #16]
 8012dca:	693a      	ldr	r2, [r7, #16]
 8012dcc:	0151      	lsls	r1, r2, #5
 8012dce:	697a      	ldr	r2, [r7, #20]
 8012dd0:	440a      	add	r2, r1
 8012dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	4413      	add	r3, r2
 8012de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de8:	691a      	ldr	r2, [r3, #16]
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012df2:	6939      	ldr	r1, [r7, #16]
 8012df4:	0148      	lsls	r0, r1, #5
 8012df6:	6979      	ldr	r1, [r7, #20]
 8012df8:	4401      	add	r1, r0
 8012dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012dfe:	4313      	orrs	r3, r2
 8012e00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012e02:	79fb      	ldrb	r3, [r7, #7]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d11e      	bne.n	8012e46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	691b      	ldr	r3, [r3, #16]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d009      	beq.n	8012e24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	015a      	lsls	r2, r3, #5
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	4413      	add	r3, r2
 8012e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	691b      	ldr	r3, [r3, #16]
 8012e22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	015a      	lsls	r2, r3, #5
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	693a      	ldr	r2, [r7, #16]
 8012e34:	0151      	lsls	r1, r2, #5
 8012e36:	697a      	ldr	r2, [r7, #20]
 8012e38:	440a      	add	r2, r1
 8012e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e42:	6013      	str	r3, [r2, #0]
 8012e44:	e092      	b.n	8012f6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	015a      	lsls	r2, r3, #5
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	4413      	add	r3, r2
 8012e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	693a      	ldr	r2, [r7, #16]
 8012e56:	0151      	lsls	r1, r2, #5
 8012e58:	697a      	ldr	r2, [r7, #20]
 8012e5a:	440a      	add	r2, r1
 8012e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	695b      	ldr	r3, [r3, #20]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d07e      	beq.n	8012f6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	f003 030f 	and.w	r3, r3, #15
 8012e7e:	2101      	movs	r1, #1
 8012e80:	fa01 f303 	lsl.w	r3, r1, r3
 8012e84:	6979      	ldr	r1, [r7, #20]
 8012e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e8a:	4313      	orrs	r3, r2
 8012e8c:	634b      	str	r3, [r1, #52]	; 0x34
 8012e8e:	e06d      	b.n	8012f6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	015a      	lsls	r2, r3, #5
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	4413      	add	r3, r2
 8012e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e9c:	691a      	ldr	r2, [r3, #16]
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	0159      	lsls	r1, r3, #5
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	440b      	add	r3, r1
 8012ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eaa:	4619      	mov	r1, r3
 8012eac:	4b34      	ldr	r3, [pc, #208]	; (8012f80 <USB_EP0StartXfer+0x2ac>)
 8012eae:	4013      	ands	r3, r2
 8012eb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	015a      	lsls	r2, r3, #5
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	4413      	add	r3, r2
 8012eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ebe:	691a      	ldr	r2, [r3, #16]
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	0159      	lsls	r1, r3, #5
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	440b      	add	r3, r1
 8012ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ecc:	4619      	mov	r1, r3
 8012ece:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <USB_EP0StartXfer+0x2a8>)
 8012ed0:	4013      	ands	r3, r2
 8012ed2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	695b      	ldr	r3, [r3, #20]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	689a      	ldr	r2, [r3, #8]
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	015a      	lsls	r2, r3, #5
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	4413      	add	r3, r2
 8012eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	693a      	ldr	r2, [r7, #16]
 8012ef4:	0151      	lsls	r1, r2, #5
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	440a      	add	r2, r1
 8012efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	015a      	lsls	r2, r3, #5
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f10:	691a      	ldr	r2, [r3, #16]
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	689b      	ldr	r3, [r3, #8]
 8012f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f1a:	6939      	ldr	r1, [r7, #16]
 8012f1c:	0148      	lsls	r0, r1, #5
 8012f1e:	6979      	ldr	r1, [r7, #20]
 8012f20:	4401      	add	r1, r0
 8012f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012f26:	4313      	orrs	r3, r2
 8012f28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012f2a:	79fb      	ldrb	r3, [r7, #7]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d10d      	bne.n	8012f4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	68db      	ldr	r3, [r3, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d009      	beq.n	8012f4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	68d9      	ldr	r1, [r3, #12]
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f48:	460a      	mov	r2, r1
 8012f4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	015a      	lsls	r2, r3, #5
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	4413      	add	r3, r2
 8012f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	693a      	ldr	r2, [r7, #16]
 8012f5c:	0151      	lsls	r1, r2, #5
 8012f5e:	697a      	ldr	r2, [r7, #20]
 8012f60:	440a      	add	r2, r1
 8012f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012f6c:	2300      	movs	r3, #0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	371c      	adds	r7, #28
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	e007ffff 	.word	0xe007ffff
 8012f80:	fff80000 	.word	0xfff80000

08012f84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b089      	sub	sp, #36	; 0x24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	60f8      	str	r0, [r7, #12]
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	4611      	mov	r1, r2
 8012f90:	461a      	mov	r2, r3
 8012f92:	460b      	mov	r3, r1
 8012f94:	71fb      	strb	r3, [r7, #7]
 8012f96:	4613      	mov	r3, r2
 8012f98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d123      	bne.n	8012ff2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012faa:	88bb      	ldrh	r3, [r7, #4]
 8012fac:	3303      	adds	r3, #3
 8012fae:	089b      	lsrs	r3, r3, #2
 8012fb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	61bb      	str	r3, [r7, #24]
 8012fb6:	e018      	b.n	8012fea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	031a      	lsls	r2, r3, #12
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	69fb      	ldr	r3, [r7, #28]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012fd2:	69fb      	ldr	r3, [r7, #28]
 8012fd4:	3301      	adds	r3, #1
 8012fd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	61bb      	str	r3, [r7, #24]
 8012fea:	69ba      	ldr	r2, [r7, #24]
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	d3e2      	bcc.n	8012fb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012ff2:	2300      	movs	r3, #0
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3724      	adds	r7, #36	; 0x24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr

08013000 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013000:	b480      	push	{r7}
 8013002:	b08b      	sub	sp, #44	; 0x2c
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	4613      	mov	r3, r2
 801300c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013016:	88fb      	ldrh	r3, [r7, #6]
 8013018:	089b      	lsrs	r3, r3, #2
 801301a:	b29b      	uxth	r3, r3
 801301c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801301e:	88fb      	ldrh	r3, [r7, #6]
 8013020:	f003 0303 	and.w	r3, r3, #3
 8013024:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013026:	2300      	movs	r3, #0
 8013028:	623b      	str	r3, [r7, #32]
 801302a:	e014      	b.n	8013056 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013036:	601a      	str	r2, [r3, #0]
    pDest++;
 8013038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303a:	3301      	adds	r3, #1
 801303c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013040:	3301      	adds	r3, #1
 8013042:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013046:	3301      	adds	r3, #1
 8013048:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	3301      	adds	r3, #1
 801304e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	3301      	adds	r3, #1
 8013054:	623b      	str	r3, [r7, #32]
 8013056:	6a3a      	ldr	r2, [r7, #32]
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	429a      	cmp	r2, r3
 801305c:	d3e6      	bcc.n	801302c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801305e:	8bfb      	ldrh	r3, [r7, #30]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d01e      	beq.n	80130a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013064:	2300      	movs	r3, #0
 8013066:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801306e:	461a      	mov	r2, r3
 8013070:	f107 0310 	add.w	r3, r7, #16
 8013074:	6812      	ldr	r2, [r2, #0]
 8013076:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013078:	693a      	ldr	r2, [r7, #16]
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	b2db      	uxtb	r3, r3
 801307e:	00db      	lsls	r3, r3, #3
 8013080:	fa22 f303 	lsr.w	r3, r2, r3
 8013084:	b2da      	uxtb	r2, r3
 8013086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013088:	701a      	strb	r2, [r3, #0]
      i++;
 801308a:	6a3b      	ldr	r3, [r7, #32]
 801308c:	3301      	adds	r3, #1
 801308e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	3301      	adds	r3, #1
 8013094:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013096:	8bfb      	ldrh	r3, [r7, #30]
 8013098:	3b01      	subs	r3, #1
 801309a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801309c:	8bfb      	ldrh	r3, [r7, #30]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1ea      	bne.n	8013078 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	372c      	adds	r7, #44	; 0x2c
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	785b      	ldrb	r3, [r3, #1]
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d12c      	bne.n	8013126 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80130cc:	68bb      	ldr	r3, [r7, #8]
 80130ce:	015a      	lsls	r2, r3, #5
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	4413      	add	r3, r2
 80130d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	db12      	blt.n	8013104 <USB_EPSetStall+0x54>
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00f      	beq.n	8013104 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	015a      	lsls	r2, r3, #5
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	4413      	add	r3, r2
 80130ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68ba      	ldr	r2, [r7, #8]
 80130f4:	0151      	lsls	r1, r2, #5
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	440a      	add	r2, r1
 80130fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013102:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	015a      	lsls	r2, r3, #5
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	4413      	add	r3, r2
 801310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	0151      	lsls	r1, r2, #5
 8013116:	68fa      	ldr	r2, [r7, #12]
 8013118:	440a      	add	r2, r1
 801311a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801311e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013122:	6013      	str	r3, [r2, #0]
 8013124:	e02b      	b.n	801317e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	015a      	lsls	r2, r3, #5
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	4413      	add	r3, r2
 801312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	db12      	blt.n	801315e <USB_EPSetStall+0xae>
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00f      	beq.n	801315e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	015a      	lsls	r2, r3, #5
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	4413      	add	r3, r2
 8013146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	68ba      	ldr	r2, [r7, #8]
 801314e:	0151      	lsls	r1, r2, #5
 8013150:	68fa      	ldr	r2, [r7, #12]
 8013152:	440a      	add	r2, r1
 8013154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801315c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	015a      	lsls	r2, r3, #5
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	4413      	add	r3, r2
 8013166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	68ba      	ldr	r2, [r7, #8]
 801316e:	0151      	lsls	r1, r2, #5
 8013170:	68fa      	ldr	r2, [r7, #12]
 8013172:	440a      	add	r2, r1
 8013174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801317c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801317e:	2300      	movs	r3, #0
}
 8013180:	4618      	mov	r0, r3
 8013182:	3714      	adds	r7, #20
 8013184:	46bd      	mov	sp, r7
 8013186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318a:	4770      	bx	lr

0801318c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801318c:	b480      	push	{r7}
 801318e:	b085      	sub	sp, #20
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	785b      	ldrb	r3, [r3, #1]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d128      	bne.n	80131fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	015a      	lsls	r2, r3, #5
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	4413      	add	r3, r2
 80131b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	68ba      	ldr	r2, [r7, #8]
 80131b8:	0151      	lsls	r1, r2, #5
 80131ba:	68fa      	ldr	r2, [r7, #12]
 80131bc:	440a      	add	r2, r1
 80131be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80131c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	78db      	ldrb	r3, [r3, #3]
 80131cc:	2b03      	cmp	r3, #3
 80131ce:	d003      	beq.n	80131d8 <USB_EPClearStall+0x4c>
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	78db      	ldrb	r3, [r3, #3]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d138      	bne.n	801324a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	0151      	lsls	r1, r2, #5
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	440a      	add	r2, r1
 80131ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	e027      	b.n	801324a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	015a      	lsls	r2, r3, #5
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	4413      	add	r3, r2
 8013202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68ba      	ldr	r2, [r7, #8]
 801320a:	0151      	lsls	r1, r2, #5
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	440a      	add	r2, r1
 8013210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013214:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013218:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	78db      	ldrb	r3, [r3, #3]
 801321e:	2b03      	cmp	r3, #3
 8013220:	d003      	beq.n	801322a <USB_EPClearStall+0x9e>
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	78db      	ldrb	r3, [r3, #3]
 8013226:	2b02      	cmp	r3, #2
 8013228:	d10f      	bne.n	801324a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	015a      	lsls	r2, r3, #5
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	4413      	add	r3, r2
 8013232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	0151      	lsls	r1, r2, #5
 801323c:	68fa      	ldr	r2, [r7, #12]
 801323e:	440a      	add	r2, r1
 8013240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013248:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3714      	adds	r7, #20
 8013250:	46bd      	mov	sp, r7
 8013252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013256:	4770      	bx	lr

08013258 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013258:	b480      	push	{r7}
 801325a:	b085      	sub	sp, #20
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	460b      	mov	r3, r1
 8013262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013276:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801327a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	78fb      	ldrb	r3, [r7, #3]
 8013286:	011b      	lsls	r3, r3, #4
 8013288:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801328c:	68f9      	ldr	r1, [r7, #12]
 801328e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013292:	4313      	orrs	r3, r2
 8013294:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013296:	2300      	movs	r3, #0
}
 8013298:	4618      	mov	r0, r3
 801329a:	3714      	adds	r7, #20
 801329c:	46bd      	mov	sp, r7
 801329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a2:	4770      	bx	lr

080132a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80132be:	f023 0303 	bic.w	r3, r3, #3
 80132c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80132d2:	f023 0302 	bic.w	r3, r3, #2
 80132d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80132d8:	2300      	movs	r3, #0
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3714      	adds	r7, #20
 80132de:	46bd      	mov	sp, r7
 80132e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e4:	4770      	bx	lr

080132e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80132e6:	b480      	push	{r7}
 80132e8:	b085      	sub	sp, #20
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	68fa      	ldr	r2, [r7, #12]
 80132fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013300:	f023 0303 	bic.w	r3, r3, #3
 8013304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	68fa      	ldr	r2, [r7, #12]
 8013310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013314:	f043 0302 	orr.w	r3, r3, #2
 8013318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801331a:	2300      	movs	r3, #0
}
 801331c:	4618      	mov	r0, r3
 801331e:	3714      	adds	r7, #20
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	695b      	ldr	r3, [r3, #20]
 8013334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	4013      	ands	r3, r2
 801333e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013340:	68fb      	ldr	r3, [r7, #12]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr

0801334e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801334e:	b480      	push	{r7}
 8013350:	b085      	sub	sp, #20
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013360:	699b      	ldr	r3, [r3, #24]
 8013362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801336a:	69db      	ldr	r3, [r3, #28]
 801336c:	68ba      	ldr	r2, [r7, #8]
 801336e:	4013      	ands	r3, r2
 8013370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	0c1b      	lsrs	r3, r3, #16
}
 8013376:	4618      	mov	r0, r3
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013382:	b480      	push	{r7}
 8013384:	b085      	sub	sp, #20
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	68ba      	ldr	r2, [r7, #8]
 80133a2:	4013      	ands	r3, r2
 80133a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	b29b      	uxth	r3, r3
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3714      	adds	r7, #20
 80133ae:	46bd      	mov	sp, r7
 80133b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b4:	4770      	bx	lr

080133b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80133b6:	b480      	push	{r7}
 80133b8:	b085      	sub	sp, #20
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
 80133be:	460b      	mov	r3, r1
 80133c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80133c6:	78fb      	ldrb	r3, [r7, #3]
 80133c8:	015a      	lsls	r2, r3, #5
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	4413      	add	r3, r2
 80133ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133dc:	695b      	ldr	r3, [r3, #20]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	4013      	ands	r3, r2
 80133e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80133e4:	68bb      	ldr	r3, [r7, #8]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3714      	adds	r7, #20
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr

080133f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80133f2:	b480      	push	{r7}
 80133f4:	b087      	sub	sp, #28
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
 80133fa:	460b      	mov	r3, r1
 80133fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013408:	691b      	ldr	r3, [r3, #16]
 801340a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013414:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013416:	78fb      	ldrb	r3, [r7, #3]
 8013418:	f003 030f 	and.w	r3, r3, #15
 801341c:	68fa      	ldr	r2, [r7, #12]
 801341e:	fa22 f303 	lsr.w	r3, r2, r3
 8013422:	01db      	lsls	r3, r3, #7
 8013424:	b2db      	uxtb	r3, r3
 8013426:	693a      	ldr	r2, [r7, #16]
 8013428:	4313      	orrs	r3, r2
 801342a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801342c:	78fb      	ldrb	r3, [r7, #3]
 801342e:	015a      	lsls	r2, r3, #5
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	4413      	add	r3, r2
 8013434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	693a      	ldr	r2, [r7, #16]
 801343c:	4013      	ands	r3, r2
 801343e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013440:	68bb      	ldr	r3, [r7, #8]
}
 8013442:	4618      	mov	r0, r3
 8013444:	371c      	adds	r7, #28
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr

0801344e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801344e:	b480      	push	{r7}
 8013450:	b083      	sub	sp, #12
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	695b      	ldr	r3, [r3, #20]
 801345a:	f003 0301 	and.w	r3, r3, #1
}
 801345e:	4618      	mov	r0, r3
 8013460:	370c      	adds	r7, #12
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr
	...

0801346c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801346c:	b480      	push	{r7}
 801346e:	b085      	sub	sp, #20
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013486:	4619      	mov	r1, r3
 8013488:	4b09      	ldr	r3, [pc, #36]	; (80134b0 <USB_ActivateSetup+0x44>)
 801348a:	4013      	ands	r3, r2
 801348c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80134a2:	2300      	movs	r3, #0
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3714      	adds	r7, #20
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr
 80134b0:	fffff800 	.word	0xfffff800

080134b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b087      	sub	sp, #28
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	460b      	mov	r3, r1
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	333c      	adds	r3, #60	; 0x3c
 80134ca:	3304      	adds	r3, #4
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	4a26      	ldr	r2, [pc, #152]	; (801356c <USB_EP0_OutStart+0xb8>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d90a      	bls.n	80134ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134e8:	d101      	bne.n	80134ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80134ea:	2300      	movs	r3, #0
 80134ec:	e037      	b.n	801355e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f4:	461a      	mov	r2, r3
 80134f6:	2300      	movs	r3, #0
 80134f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013500:	691b      	ldr	r3, [r3, #16]
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801350c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	697a      	ldr	r2, [r7, #20]
 8013518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801351c:	f043 0318 	orr.w	r3, r3, #24
 8013520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013528:	691b      	ldr	r3, [r3, #16]
 801352a:	697a      	ldr	r2, [r7, #20]
 801352c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013530:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013536:	7afb      	ldrb	r3, [r7, #11]
 8013538:	2b01      	cmp	r3, #1
 801353a:	d10f      	bne.n	801355c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013542:	461a      	mov	r2, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	697a      	ldr	r2, [r7, #20]
 8013552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013556:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801355a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	371c      	adds	r7, #28
 8013562:	46bd      	mov	sp, r7
 8013564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013568:	4770      	bx	lr
 801356a:	bf00      	nop
 801356c:	4f54300a 	.word	0x4f54300a

08013570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013570:	b480      	push	{r7}
 8013572:	b085      	sub	sp, #20
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013578:	2300      	movs	r3, #0
 801357a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	3301      	adds	r3, #1
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	4a13      	ldr	r2, [pc, #76]	; (80135d0 <USB_CoreReset+0x60>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d901      	bls.n	801358c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8013588:	2303      	movs	r3, #3
 801358a:	e01a      	b.n	80135c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	691b      	ldr	r3, [r3, #16]
 8013590:	2b00      	cmp	r3, #0
 8013592:	daf3      	bge.n	801357c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013594:	2300      	movs	r3, #0
 8013596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	691b      	ldr	r3, [r3, #16]
 801359c:	f043 0201 	orr.w	r2, r3, #1
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3301      	adds	r3, #1
 80135a8:	60fb      	str	r3, [r7, #12]
 80135aa:	4a09      	ldr	r2, [pc, #36]	; (80135d0 <USB_CoreReset+0x60>)
 80135ac:	4293      	cmp	r3, r2
 80135ae:	d901      	bls.n	80135b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80135b0:	2303      	movs	r3, #3
 80135b2:	e006      	b.n	80135c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	691b      	ldr	r3, [r3, #16]
 80135b8:	f003 0301 	and.w	r3, r3, #1
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d0f1      	beq.n	80135a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80135c0:	2300      	movs	r3, #0
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	00030d40 	.word	0x00030d40

080135d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	460b      	mov	r3, r1
 80135de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80135e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80135e4:	f7f1 fd60 	bl	80050a8 <USBD_static_malloc>
 80135e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d105      	bne.n	80135fc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80135f8:	2302      	movs	r3, #2
 80135fa:	e066      	b.n	80136ca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	7c1b      	ldrb	r3, [r3, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d119      	bne.n	8013640 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013610:	2202      	movs	r2, #2
 8013612:	2181      	movs	r1, #129	; 0x81
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7f1 fc24 	bl	8004e62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2201      	movs	r2, #1
 801361e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013624:	2202      	movs	r2, #2
 8013626:	2101      	movs	r1, #1
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7f1 fc1a 	bl	8004e62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2201      	movs	r2, #1
 8013632:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2210      	movs	r2, #16
 801363a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801363e:	e016      	b.n	801366e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013640:	2340      	movs	r3, #64	; 0x40
 8013642:	2202      	movs	r2, #2
 8013644:	2181      	movs	r1, #129	; 0x81
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7f1 fc0b 	bl	8004e62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2201      	movs	r2, #1
 8013650:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013652:	2340      	movs	r3, #64	; 0x40
 8013654:	2202      	movs	r2, #2
 8013656:	2101      	movs	r1, #1
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7f1 fc02 	bl	8004e62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2201      	movs	r2, #1
 8013662:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2210      	movs	r2, #16
 801366a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801366e:	2308      	movs	r3, #8
 8013670:	2203      	movs	r2, #3
 8013672:	2182      	movs	r1, #130	; 0x82
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f7f1 fbf4 	bl	8004e62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2201      	movs	r2, #1
 801367e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2200      	movs	r2, #0
 8013690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	2200      	movs	r2, #0
 8013698:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7c1b      	ldrb	r3, [r3, #16]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d109      	bne.n	80136b8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80136aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136ae:	2101      	movs	r1, #1
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7f1 fcc5 	bl	8005040 <USBD_LL_PrepareReceive>
 80136b6:	e007      	b.n	80136c8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80136be:	2340      	movs	r3, #64	; 0x40
 80136c0:	2101      	movs	r1, #1
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f7f1 fcbc 	bl	8005040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
 80136da:	460b      	mov	r3, r1
 80136dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80136de:	2181      	movs	r1, #129	; 0x81
 80136e0:	6878      	ldr	r0, [r7, #4]
 80136e2:	f7f1 fbe4 	bl	8004eae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2200      	movs	r2, #0
 80136ea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80136ec:	2101      	movs	r1, #1
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7f1 fbdd 	bl	8004eae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80136fc:	2182      	movs	r1, #130	; 0x82
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7f1 fbd5 	bl	8004eae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2200      	movs	r2, #0
 8013708:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2200      	movs	r2, #0
 8013710:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00e      	beq.n	801373c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801372e:	4618      	mov	r0, r3
 8013730:	f7f1 fcc8 	bl	80050c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3708      	adds	r7, #8
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
	...

08013748 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b086      	sub	sp, #24
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801375a:	2300      	movs	r3, #0
 801375c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801375e:	2300      	movs	r3, #0
 8013760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013762:	2300      	movs	r3, #0
 8013764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d101      	bne.n	8013770 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801376c:	2303      	movs	r3, #3
 801376e:	e0af      	b.n	80138d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013778:	2b00      	cmp	r3, #0
 801377a:	d03f      	beq.n	80137fc <USBD_CDC_Setup+0xb4>
 801377c:	2b20      	cmp	r3, #32
 801377e:	f040 809f 	bne.w	80138c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	88db      	ldrh	r3, [r3, #6]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d02e      	beq.n	80137e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	b25b      	sxtb	r3, r3
 8013790:	2b00      	cmp	r3, #0
 8013792:	da16      	bge.n	80137c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	683a      	ldr	r2, [r7, #0]
 801379e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80137a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	88d2      	ldrh	r2, [r2, #6]
 80137a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	88db      	ldrh	r3, [r3, #6]
 80137ac:	2b07      	cmp	r3, #7
 80137ae:	bf28      	it	cs
 80137b0:	2307      	movcs	r3, #7
 80137b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	89fa      	ldrh	r2, [r7, #14]
 80137b8:	4619      	mov	r1, r3
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f001 fae9 	bl	8014d92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80137c0:	e085      	b.n	80138ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	785a      	ldrb	r2, [r3, #1]
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	88db      	ldrh	r3, [r3, #6]
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80137d8:	6939      	ldr	r1, [r7, #16]
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	88db      	ldrh	r3, [r3, #6]
 80137de:	461a      	mov	r2, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f001 fb02 	bl	8014dea <USBD_CtlPrepareRx>
      break;
 80137e6:	e072      	b.n	80138ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137ee:	689b      	ldr	r3, [r3, #8]
 80137f0:	683a      	ldr	r2, [r7, #0]
 80137f2:	7850      	ldrb	r0, [r2, #1]
 80137f4:	2200      	movs	r2, #0
 80137f6:	6839      	ldr	r1, [r7, #0]
 80137f8:	4798      	blx	r3
      break;
 80137fa:	e068      	b.n	80138ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	785b      	ldrb	r3, [r3, #1]
 8013800:	2b0b      	cmp	r3, #11
 8013802:	d852      	bhi.n	80138aa <USBD_CDC_Setup+0x162>
 8013804:	a201      	add	r2, pc, #4	; (adr r2, 801380c <USBD_CDC_Setup+0xc4>)
 8013806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801380a:	bf00      	nop
 801380c:	0801383d 	.word	0x0801383d
 8013810:	080138b9 	.word	0x080138b9
 8013814:	080138ab 	.word	0x080138ab
 8013818:	080138ab 	.word	0x080138ab
 801381c:	080138ab 	.word	0x080138ab
 8013820:	080138ab 	.word	0x080138ab
 8013824:	080138ab 	.word	0x080138ab
 8013828:	080138ab 	.word	0x080138ab
 801382c:	080138ab 	.word	0x080138ab
 8013830:	080138ab 	.word	0x080138ab
 8013834:	08013867 	.word	0x08013867
 8013838:	08013891 	.word	0x08013891
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013842:	b2db      	uxtb	r3, r3
 8013844:	2b03      	cmp	r3, #3
 8013846:	d107      	bne.n	8013858 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013848:	f107 030a 	add.w	r3, r7, #10
 801384c:	2202      	movs	r2, #2
 801384e:	4619      	mov	r1, r3
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f001 fa9e 	bl	8014d92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013856:	e032      	b.n	80138be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f001 fa28 	bl	8014cb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	75fb      	strb	r3, [r7, #23]
          break;
 8013864:	e02b      	b.n	80138be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801386c:	b2db      	uxtb	r3, r3
 801386e:	2b03      	cmp	r3, #3
 8013870:	d107      	bne.n	8013882 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013872:	f107 030d 	add.w	r3, r7, #13
 8013876:	2201      	movs	r2, #1
 8013878:	4619      	mov	r1, r3
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f001 fa89 	bl	8014d92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013880:	e01d      	b.n	80138be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013882:	6839      	ldr	r1, [r7, #0]
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f001 fa13 	bl	8014cb0 <USBD_CtlError>
            ret = USBD_FAIL;
 801388a:	2303      	movs	r3, #3
 801388c:	75fb      	strb	r3, [r7, #23]
          break;
 801388e:	e016      	b.n	80138be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013896:	b2db      	uxtb	r3, r3
 8013898:	2b03      	cmp	r3, #3
 801389a:	d00f      	beq.n	80138bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f001 fa06 	bl	8014cb0 <USBD_CtlError>
            ret = USBD_FAIL;
 80138a4:	2303      	movs	r3, #3
 80138a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80138a8:	e008      	b.n	80138bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80138aa:	6839      	ldr	r1, [r7, #0]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f001 f9ff 	bl	8014cb0 <USBD_CtlError>
          ret = USBD_FAIL;
 80138b2:	2303      	movs	r3, #3
 80138b4:	75fb      	strb	r3, [r7, #23]
          break;
 80138b6:	e002      	b.n	80138be <USBD_CDC_Setup+0x176>
          break;
 80138b8:	bf00      	nop
 80138ba:	e008      	b.n	80138ce <USBD_CDC_Setup+0x186>
          break;
 80138bc:	bf00      	nop
      }
      break;
 80138be:	e006      	b.n	80138ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80138c0:	6839      	ldr	r1, [r7, #0]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f001 f9f4 	bl	8014cb0 <USBD_CtlError>
      ret = USBD_FAIL;
 80138c8:	2303      	movs	r3, #3
 80138ca:	75fb      	strb	r3, [r7, #23]
      break;
 80138cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80138ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3718      	adds	r7, #24
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	460b      	mov	r3, r1
 80138e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80138ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d101      	bne.n	80138fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80138f6:	2303      	movs	r3, #3
 80138f8:	e04f      	b.n	801399a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013900:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013902:	78fa      	ldrb	r2, [r7, #3]
 8013904:	6879      	ldr	r1, [r7, #4]
 8013906:	4613      	mov	r3, r2
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	4413      	add	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	440b      	add	r3, r1
 8013910:	3318      	adds	r3, #24
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d029      	beq.n	801396c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013918:	78fa      	ldrb	r2, [r7, #3]
 801391a:	6879      	ldr	r1, [r7, #4]
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	009b      	lsls	r3, r3, #2
 8013924:	440b      	add	r3, r1
 8013926:	3318      	adds	r3, #24
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	78f9      	ldrb	r1, [r7, #3]
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	460b      	mov	r3, r1
 8013930:	00db      	lsls	r3, r3, #3
 8013932:	1a5b      	subs	r3, r3, r1
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	4403      	add	r3, r0
 8013938:	3344      	adds	r3, #68	; 0x44
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013940:	fb01 f303 	mul.w	r3, r1, r3
 8013944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013946:	2b00      	cmp	r3, #0
 8013948:	d110      	bne.n	801396c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801394a:	78fa      	ldrb	r2, [r7, #3]
 801394c:	6879      	ldr	r1, [r7, #4]
 801394e:	4613      	mov	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	4413      	add	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	440b      	add	r3, r1
 8013958:	3318      	adds	r3, #24
 801395a:	2200      	movs	r2, #0
 801395c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801395e:	78f9      	ldrb	r1, [r7, #3]
 8013960:	2300      	movs	r3, #0
 8013962:	2200      	movs	r2, #0
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f7f1 fb4a 	bl	8004ffe <USBD_LL_Transmit>
 801396a:	e015      	b.n	8013998 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2200      	movs	r2, #0
 8013970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00b      	beq.n	8013998 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013986:	691b      	ldr	r3, [r3, #16]
 8013988:	68ba      	ldr	r2, [r7, #8]
 801398a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013994:	78fa      	ldrb	r2, [r7, #3]
 8013996:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013998:	2300      	movs	r3, #0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3710      	adds	r7, #16
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b084      	sub	sp, #16
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	6078      	str	r0, [r7, #4]
 80139aa:	460b      	mov	r3, r1
 80139ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d101      	bne.n	80139c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80139c0:	2303      	movs	r3, #3
 80139c2:	e015      	b.n	80139f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80139c4:	78fb      	ldrb	r3, [r7, #3]
 80139c6:	4619      	mov	r1, r3
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7f1 fb5a 	bl	8005082 <USBD_LL_GetRxDataSize>
 80139ce:	4602      	mov	r2, r0
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80139ea:	4611      	mov	r1, r2
 80139ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80139ee:	2300      	movs	r3, #0
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3710      	adds	r7, #16
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d101      	bne.n	8013a12 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013a0e:	2303      	movs	r3, #3
 8013a10:	e01b      	b.n	8013a4a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d015      	beq.n	8013a48 <USBD_CDC_EP0_RxReady+0x50>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013a22:	2bff      	cmp	r3, #255	; 0xff
 8013a24:	d010      	beq.n	8013a48 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a2c:	689b      	ldr	r3, [r3, #8]
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013a34:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013a3c:	b292      	uxth	r2, r2
 8013a3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	22ff      	movs	r2, #255	; 0xff
 8013a44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013a48:	2300      	movs	r3, #0
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3710      	adds	r7, #16
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
	...

08013a54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2243      	movs	r2, #67	; 0x43
 8013a60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013a62:	4b03      	ldr	r3, [pc, #12]	; (8013a70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	370c      	adds	r7, #12
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr
 8013a70:	24000108 	.word	0x24000108

08013a74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2243      	movs	r2, #67	; 0x43
 8013a80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013a82:	4b03      	ldr	r3, [pc, #12]	; (8013a90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	370c      	adds	r7, #12
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr
 8013a90:	240000c4 	.word	0x240000c4

08013a94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2243      	movs	r2, #67	; 0x43
 8013aa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013aa2:	4b03      	ldr	r3, [pc, #12]	; (8013ab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	2400014c 	.word	0x2400014c

08013ab4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	220a      	movs	r2, #10
 8013ac0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013ac2:	4b03      	ldr	r3, [pc, #12]	; (8013ad0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	24000080 	.word	0x24000080

08013ad4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	e004      	b.n	8013af2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	683a      	ldr	r2, [r7, #0]
 8013aec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013af0:	2300      	movs	r3, #0
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	370c      	adds	r7, #12
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013afe:	b480      	push	{r7}
 8013b00:	b087      	sub	sp, #28
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	60f8      	str	r0, [r7, #12]
 8013b06:	60b9      	str	r1, [r7, #8]
 8013b08:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b10:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d101      	bne.n	8013b1c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b18:	2303      	movs	r3, #3
 8013b1a:	e008      	b.n	8013b2e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	68ba      	ldr	r2, [r7, #8]
 8013b20:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	371c      	adds	r7, #28
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013b3a:	b480      	push	{r7}
 8013b3c:	b085      	sub	sp, #20
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
 8013b42:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d101      	bne.n	8013b56 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013b52:	2303      	movs	r3, #3
 8013b54:	e004      	b.n	8013b60 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	683a      	ldr	r2, [r7, #0]
 8013b5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3714      	adds	r7, #20
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d101      	bne.n	8013b8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b86:	2303      	movs	r3, #3
 8013b88:	e016      	b.n	8013bb8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	7c1b      	ldrb	r3, [r3, #16]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d109      	bne.n	8013ba6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7f1 fa4e 	bl	8005040 <USBD_LL_PrepareReceive>
 8013ba4:	e007      	b.n	8013bb6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013bac:	2340      	movs	r3, #64	; 0x40
 8013bae:	2101      	movs	r1, #1
 8013bb0:	6878      	ldr	r0, [r7, #4]
 8013bb2:	f7f1 fa45 	bl	8005040 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013bb6:	2300      	movs	r3, #0
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3710      	adds	r7, #16
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b086      	sub	sp, #24
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d101      	bne.n	8013bd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013bd4:	2303      	movs	r3, #3
 8013bd6:	e01f      	b.n	8013c18 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	2200      	movs	r2, #0
 8013bec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d003      	beq.n	8013bfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2201      	movs	r2, #1
 8013c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	79fa      	ldrb	r2, [r7, #7]
 8013c0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	f7f1 f8bd 	bl	8004d8c <USBD_LL_Init>
 8013c12:	4603      	mov	r3, r0
 8013c14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3718      	adds	r7, #24
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d101      	bne.n	8013c38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013c34:	2303      	movs	r3, #3
 8013c36:	e016      	b.n	8013c66 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	683a      	ldr	r2, [r7, #0]
 8013c3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00b      	beq.n	8013c64 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c54:	f107 020e 	add.w	r2, r7, #14
 8013c58:	4610      	mov	r0, r2
 8013c5a:	4798      	blx	r3
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013c64:	2300      	movs	r3, #0
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7f1 f8d8 	bl	8004e2c <USBD_LL_Start>
 8013c7c:	4603      	mov	r3, r0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013c86:	b480      	push	{r7}
 8013c88:	b083      	sub	sp, #12
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c8e:	2300      	movs	r3, #0
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013ca8:	2303      	movs	r3, #3
 8013caa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d009      	beq.n	8013cca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	78fa      	ldrb	r2, [r7, #3]
 8013cc0:	4611      	mov	r1, r2
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	4798      	blx	r3
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d007      	beq.n	8013cfa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	78fa      	ldrb	r2, [r7, #3]
 8013cf4:	4611      	mov	r1, r2
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	4798      	blx	r3
  }

  return USBD_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d14:	6839      	ldr	r1, [r7, #0]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f000 ff90 	bl	8014c3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2201      	movs	r2, #1
 8013d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d38:	f003 031f 	and.w	r3, r3, #31
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d01a      	beq.n	8013d76 <USBD_LL_SetupStage+0x72>
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d822      	bhi.n	8013d8a <USBD_LL_SetupStage+0x86>
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d002      	beq.n	8013d4e <USBD_LL_SetupStage+0x4a>
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d00a      	beq.n	8013d62 <USBD_LL_SetupStage+0x5e>
 8013d4c:	e01d      	b.n	8013d8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d54:	4619      	mov	r1, r3
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f000 fa62 	bl	8014220 <USBD_StdDevReq>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d60:	e020      	b.n	8013da4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d68:	4619      	mov	r1, r3
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f000 fac6 	bl	80142fc <USBD_StdItfReq>
 8013d70:	4603      	mov	r3, r0
 8013d72:	73fb      	strb	r3, [r7, #15]
      break;
 8013d74:	e016      	b.n	8013da4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fb05 	bl	801438e <USBD_StdEPReq>
 8013d84:	4603      	mov	r3, r0
 8013d86:	73fb      	strb	r3, [r7, #15]
      break;
 8013d88:	e00c      	b.n	8013da4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	4619      	mov	r1, r3
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f7f1 f8a7 	bl	8004eec <USBD_LL_StallEP>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	73fb      	strb	r3, [r7, #15]
      break;
 8013da2:	bf00      	nop
  }

  return ret;
 8013da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3710      	adds	r7, #16
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}

08013dae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013dae:	b580      	push	{r7, lr}
 8013db0:	b086      	sub	sp, #24
 8013db2:	af00      	add	r7, sp, #0
 8013db4:	60f8      	str	r0, [r7, #12]
 8013db6:	460b      	mov	r3, r1
 8013db8:	607a      	str	r2, [r7, #4]
 8013dba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013dbc:	7afb      	ldrb	r3, [r7, #11]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d138      	bne.n	8013e34 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013dc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013dd0:	2b03      	cmp	r3, #3
 8013dd2:	d14a      	bne.n	8013e6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	689a      	ldr	r2, [r3, #8]
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	68db      	ldr	r3, [r3, #12]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d913      	bls.n	8013e08 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	689a      	ldr	r2, [r3, #8]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	1ad2      	subs	r2, r2, r3
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	68da      	ldr	r2, [r3, #12]
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	4293      	cmp	r3, r2
 8013df8:	bf28      	it	cs
 8013dfa:	4613      	movcs	r3, r2
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f001 f80f 	bl	8014e24 <USBD_CtlContinueRx>
 8013e06:	e030      	b.n	8013e6a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	2b03      	cmp	r3, #3
 8013e12:	d10b      	bne.n	8013e2c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e1a:	691b      	ldr	r3, [r3, #16]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d005      	beq.n	8013e2c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	68f8      	ldr	r0, [r7, #12]
 8013e2a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f001 f80a 	bl	8014e46 <USBD_CtlSendStatus>
 8013e32:	e01a      	b.n	8013e6a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e3a:	b2db      	uxtb	r3, r3
 8013e3c:	2b03      	cmp	r3, #3
 8013e3e:	d114      	bne.n	8013e6a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e46:	699b      	ldr	r3, [r3, #24]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d00e      	beq.n	8013e6a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	7afa      	ldrb	r2, [r7, #11]
 8013e56:	4611      	mov	r1, r2
 8013e58:	68f8      	ldr	r0, [r7, #12]
 8013e5a:	4798      	blx	r3
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013e60:	7dfb      	ldrb	r3, [r7, #23]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d001      	beq.n	8013e6a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
 8013e68:	e000      	b.n	8013e6c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013e6a:	2300      	movs	r3, #0
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3718      	adds	r7, #24
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	607a      	str	r2, [r7, #4]
 8013e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013e82:	7afb      	ldrb	r3, [r7, #11]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d16b      	bne.n	8013f60 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	3314      	adds	r3, #20
 8013e8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e94:	2b02      	cmp	r3, #2
 8013e96:	d156      	bne.n	8013f46 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	689a      	ldr	r2, [r3, #8]
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d914      	bls.n	8013ece <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	689a      	ldr	r2, [r3, #8]
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	1ad2      	subs	r2, r2, r3
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	689b      	ldr	r3, [r3, #8]
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	6879      	ldr	r1, [r7, #4]
 8013eba:	68f8      	ldr	r0, [r7, #12]
 8013ebc:	f000 ff84 	bl	8014dc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	68f8      	ldr	r0, [r7, #12]
 8013ec8:	f7f1 f8ba 	bl	8005040 <USBD_LL_PrepareReceive>
 8013ecc:	e03b      	b.n	8013f46 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	68da      	ldr	r2, [r3, #12]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d11c      	bne.n	8013f14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	685a      	ldr	r2, [r3, #4]
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d316      	bcc.n	8013f14 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013ee6:	693b      	ldr	r3, [r7, #16]
 8013ee8:	685a      	ldr	r2, [r3, #4]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d20f      	bcs.n	8013f14 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	2100      	movs	r1, #0
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f000 ff65 	bl	8014dc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2200      	movs	r2, #0
 8013f02:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f06:	2300      	movs	r3, #0
 8013f08:	2200      	movs	r2, #0
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f7f1 f897 	bl	8005040 <USBD_LL_PrepareReceive>
 8013f12:	e018      	b.n	8013f46 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	2b03      	cmp	r3, #3
 8013f1e:	d10b      	bne.n	8013f38 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f26:	68db      	ldr	r3, [r3, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d005      	beq.n	8013f38 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f38:	2180      	movs	r1, #128	; 0x80
 8013f3a:	68f8      	ldr	r0, [r7, #12]
 8013f3c:	f7f0 ffd6 	bl	8004eec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f000 ff93 	bl	8014e6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d122      	bne.n	8013f96 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f7ff fe98 	bl	8013c86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013f5e:	e01a      	b.n	8013f96 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	2b03      	cmp	r3, #3
 8013f6a:	d114      	bne.n	8013f96 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f72:	695b      	ldr	r3, [r3, #20]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00e      	beq.n	8013f96 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f7e:	695b      	ldr	r3, [r3, #20]
 8013f80:	7afa      	ldrb	r2, [r7, #11]
 8013f82:	4611      	mov	r1, r2
 8013f84:	68f8      	ldr	r0, [r7, #12]
 8013f86:	4798      	blx	r3
 8013f88:	4603      	mov	r3, r0
 8013f8a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013f8c:	7dfb      	ldrb	r3, [r7, #23]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013f92:	7dfb      	ldrb	r3, [r7, #23]
 8013f94:	e000      	b.n	8013f98 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3718      	adds	r7, #24
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2201      	movs	r2, #1
 8013fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d101      	bne.n	8013fd4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013fd0:	2303      	movs	r3, #3
 8013fd2:	e02f      	b.n	8014034 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00f      	beq.n	8013ffe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d009      	beq.n	8013ffe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	6852      	ldr	r2, [r2, #4]
 8013ff6:	b2d2      	uxtb	r2, r2
 8013ff8:	4611      	mov	r1, r2
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013ffe:	2340      	movs	r3, #64	; 0x40
 8014000:	2200      	movs	r2, #0
 8014002:	2100      	movs	r1, #0
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7f0 ff2c 	bl	8004e62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2201      	movs	r2, #1
 801400e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2240      	movs	r2, #64	; 0x40
 8014016:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801401a:	2340      	movs	r3, #64	; 0x40
 801401c:	2200      	movs	r2, #0
 801401e:	2180      	movs	r1, #128	; 0x80
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7f0 ff1e 	bl	8004e62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2201      	movs	r2, #1
 801402a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2240      	movs	r2, #64	; 0x40
 8014030:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801403c:	b480      	push	{r7}
 801403e:	b083      	sub	sp, #12
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	460b      	mov	r3, r1
 8014046:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	78fa      	ldrb	r2, [r7, #3]
 801404c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801406a:	b2da      	uxtb	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2204      	movs	r2, #4
 8014076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801407a:	2300      	movs	r3, #0
}
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr

08014088 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014088:	b480      	push	{r7}
 801408a:	b083      	sub	sp, #12
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014096:	b2db      	uxtb	r3, r3
 8014098:	2b04      	cmp	r3, #4
 801409a:	d106      	bne.n	80140aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80140a2:	b2da      	uxtb	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	370c      	adds	r7, #12
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr

080140b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d101      	bne.n	80140ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80140ca:	2303      	movs	r3, #3
 80140cc:	e012      	b.n	80140f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b03      	cmp	r3, #3
 80140d8:	d10b      	bne.n	80140f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140e0:	69db      	ldr	r3, [r3, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d005      	beq.n	80140f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ec:	69db      	ldr	r3, [r3, #28]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80140f2:	2300      	movs	r3, #0
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	460b      	mov	r3, r1
 8014106:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801410e:	2b00      	cmp	r3, #0
 8014110:	d101      	bne.n	8014116 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014112:	2303      	movs	r3, #3
 8014114:	e014      	b.n	8014140 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801411c:	b2db      	uxtb	r3, r3
 801411e:	2b03      	cmp	r3, #3
 8014120:	d10d      	bne.n	801413e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014128:	6a1b      	ldr	r3, [r3, #32]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014134:	6a1b      	ldr	r3, [r3, #32]
 8014136:	78fa      	ldrb	r2, [r7, #3]
 8014138:	4611      	mov	r1, r2
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801413e:	2300      	movs	r3, #0
}
 8014140:	4618      	mov	r0, r3
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	460b      	mov	r3, r1
 8014152:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801415a:	2b00      	cmp	r3, #0
 801415c:	d101      	bne.n	8014162 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801415e:	2303      	movs	r3, #3
 8014160:	e014      	b.n	801418c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014168:	b2db      	uxtb	r3, r3
 801416a:	2b03      	cmp	r3, #3
 801416c:	d10d      	bne.n	801418a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014176:	2b00      	cmp	r3, #0
 8014178:	d007      	beq.n	801418a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014182:	78fa      	ldrb	r2, [r7, #3]
 8014184:	4611      	mov	r1, r2
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801418a:	2300      	movs	r3, #0
}
 801418c:	4618      	mov	r0, r3
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014194:	b480      	push	{r7}
 8014196:	b083      	sub	sp, #12
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801419c:	2300      	movs	r3, #0
}
 801419e:	4618      	mov	r0, r3
 80141a0:	370c      	adds	r7, #12
 80141a2:	46bd      	mov	sp, r7
 80141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a8:	4770      	bx	lr

080141aa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b082      	sub	sp, #8
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2201      	movs	r2, #1
 80141b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d009      	beq.n	80141d8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	6852      	ldr	r2, [r2, #4]
 80141d0:	b2d2      	uxtb	r2, r2
 80141d2:	4611      	mov	r1, r2
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	4798      	blx	r3
  }

  return USBD_OK;
 80141d8:	2300      	movs	r3, #0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80141e2:	b480      	push	{r7}
 80141e4:	b087      	sub	sp, #28
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	3301      	adds	r3, #1
 80141f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014200:	8a3b      	ldrh	r3, [r7, #16]
 8014202:	021b      	lsls	r3, r3, #8
 8014204:	b21a      	sxth	r2, r3
 8014206:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801420a:	4313      	orrs	r3, r2
 801420c:	b21b      	sxth	r3, r3
 801420e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014210:	89fb      	ldrh	r3, [r7, #14]
}
 8014212:	4618      	mov	r0, r3
 8014214:	371c      	adds	r7, #28
 8014216:	46bd      	mov	sp, r7
 8014218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421c:	4770      	bx	lr
	...

08014220 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801422a:	2300      	movs	r3, #0
 801422c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014236:	2b40      	cmp	r3, #64	; 0x40
 8014238:	d005      	beq.n	8014246 <USBD_StdDevReq+0x26>
 801423a:	2b40      	cmp	r3, #64	; 0x40
 801423c:	d853      	bhi.n	80142e6 <USBD_StdDevReq+0xc6>
 801423e:	2b00      	cmp	r3, #0
 8014240:	d00b      	beq.n	801425a <USBD_StdDevReq+0x3a>
 8014242:	2b20      	cmp	r3, #32
 8014244:	d14f      	bne.n	80142e6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801424c:	689b      	ldr	r3, [r3, #8]
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	4798      	blx	r3
 8014254:	4603      	mov	r3, r0
 8014256:	73fb      	strb	r3, [r7, #15]
      break;
 8014258:	e04a      	b.n	80142f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	785b      	ldrb	r3, [r3, #1]
 801425e:	2b09      	cmp	r3, #9
 8014260:	d83b      	bhi.n	80142da <USBD_StdDevReq+0xba>
 8014262:	a201      	add	r2, pc, #4	; (adr r2, 8014268 <USBD_StdDevReq+0x48>)
 8014264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014268:	080142bd 	.word	0x080142bd
 801426c:	080142d1 	.word	0x080142d1
 8014270:	080142db 	.word	0x080142db
 8014274:	080142c7 	.word	0x080142c7
 8014278:	080142db 	.word	0x080142db
 801427c:	0801429b 	.word	0x0801429b
 8014280:	08014291 	.word	0x08014291
 8014284:	080142db 	.word	0x080142db
 8014288:	080142b3 	.word	0x080142b3
 801428c:	080142a5 	.word	0x080142a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014290:	6839      	ldr	r1, [r7, #0]
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f000 f9de 	bl	8014654 <USBD_GetDescriptor>
          break;
 8014298:	e024      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801429a:	6839      	ldr	r1, [r7, #0]
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f000 fb43 	bl	8014928 <USBD_SetAddress>
          break;
 80142a2:	e01f      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80142a4:	6839      	ldr	r1, [r7, #0]
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 fb82 	bl	80149b0 <USBD_SetConfig>
 80142ac:	4603      	mov	r3, r0
 80142ae:	73fb      	strb	r3, [r7, #15]
          break;
 80142b0:	e018      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80142b2:	6839      	ldr	r1, [r7, #0]
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f000 fc21 	bl	8014afc <USBD_GetConfig>
          break;
 80142ba:	e013      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 fc52 	bl	8014b68 <USBD_GetStatus>
          break;
 80142c4:	e00e      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fc81 	bl	8014bd0 <USBD_SetFeature>
          break;
 80142ce:	e009      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80142d0:	6839      	ldr	r1, [r7, #0]
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fc90 	bl	8014bf8 <USBD_ClrFeature>
          break;
 80142d8:	e004      	b.n	80142e4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80142da:	6839      	ldr	r1, [r7, #0]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fce7 	bl	8014cb0 <USBD_CtlError>
          break;
 80142e2:	bf00      	nop
      }
      break;
 80142e4:	e004      	b.n	80142f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80142e6:	6839      	ldr	r1, [r7, #0]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f000 fce1 	bl	8014cb0 <USBD_CtlError>
      break;
 80142ee:	bf00      	nop
  }

  return ret;
 80142f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3710      	adds	r7, #16
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop

080142fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014306:	2300      	movs	r3, #0
 8014308:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014312:	2b40      	cmp	r3, #64	; 0x40
 8014314:	d005      	beq.n	8014322 <USBD_StdItfReq+0x26>
 8014316:	2b40      	cmp	r3, #64	; 0x40
 8014318:	d82f      	bhi.n	801437a <USBD_StdItfReq+0x7e>
 801431a:	2b00      	cmp	r3, #0
 801431c:	d001      	beq.n	8014322 <USBD_StdItfReq+0x26>
 801431e:	2b20      	cmp	r3, #32
 8014320:	d12b      	bne.n	801437a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014328:	b2db      	uxtb	r3, r3
 801432a:	3b01      	subs	r3, #1
 801432c:	2b02      	cmp	r3, #2
 801432e:	d81d      	bhi.n	801436c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	889b      	ldrh	r3, [r3, #4]
 8014334:	b2db      	uxtb	r3, r3
 8014336:	2b01      	cmp	r3, #1
 8014338:	d813      	bhi.n	8014362 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014340:	689b      	ldr	r3, [r3, #8]
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	4798      	blx	r3
 8014348:	4603      	mov	r3, r0
 801434a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	88db      	ldrh	r3, [r3, #6]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d110      	bne.n	8014376 <USBD_StdItfReq+0x7a>
 8014354:	7bfb      	ldrb	r3, [r7, #15]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d10d      	bne.n	8014376 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f000 fd73 	bl	8014e46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014360:	e009      	b.n	8014376 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 fca3 	bl	8014cb0 <USBD_CtlError>
          break;
 801436a:	e004      	b.n	8014376 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801436c:	6839      	ldr	r1, [r7, #0]
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f000 fc9e 	bl	8014cb0 <USBD_CtlError>
          break;
 8014374:	e000      	b.n	8014378 <USBD_StdItfReq+0x7c>
          break;
 8014376:	bf00      	nop
      }
      break;
 8014378:	e004      	b.n	8014384 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801437a:	6839      	ldr	r1, [r7, #0]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f000 fc97 	bl	8014cb0 <USBD_CtlError>
      break;
 8014382:	bf00      	nop
  }

  return ret;
 8014384:	7bfb      	ldrb	r3, [r7, #15]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3710      	adds	r7, #16
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801438e:	b580      	push	{r7, lr}
 8014390:	b084      	sub	sp, #16
 8014392:	af00      	add	r7, sp, #0
 8014394:	6078      	str	r0, [r7, #4]
 8014396:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014398:	2300      	movs	r3, #0
 801439a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	889b      	ldrh	r3, [r3, #4]
 80143a0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143aa:	2b40      	cmp	r3, #64	; 0x40
 80143ac:	d007      	beq.n	80143be <USBD_StdEPReq+0x30>
 80143ae:	2b40      	cmp	r3, #64	; 0x40
 80143b0:	f200 8145 	bhi.w	801463e <USBD_StdEPReq+0x2b0>
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d00c      	beq.n	80143d2 <USBD_StdEPReq+0x44>
 80143b8:	2b20      	cmp	r3, #32
 80143ba:	f040 8140 	bne.w	801463e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143c4:	689b      	ldr	r3, [r3, #8]
 80143c6:	6839      	ldr	r1, [r7, #0]
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	4798      	blx	r3
 80143cc:	4603      	mov	r3, r0
 80143ce:	73fb      	strb	r3, [r7, #15]
      break;
 80143d0:	e13a      	b.n	8014648 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	785b      	ldrb	r3, [r3, #1]
 80143d6:	2b03      	cmp	r3, #3
 80143d8:	d007      	beq.n	80143ea <USBD_StdEPReq+0x5c>
 80143da:	2b03      	cmp	r3, #3
 80143dc:	f300 8129 	bgt.w	8014632 <USBD_StdEPReq+0x2a4>
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d07f      	beq.n	80144e4 <USBD_StdEPReq+0x156>
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d03c      	beq.n	8014462 <USBD_StdEPReq+0xd4>
 80143e8:	e123      	b.n	8014632 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d002      	beq.n	80143fc <USBD_StdEPReq+0x6e>
 80143f6:	2b03      	cmp	r3, #3
 80143f8:	d016      	beq.n	8014428 <USBD_StdEPReq+0x9a>
 80143fa:	e02c      	b.n	8014456 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143fc:	7bbb      	ldrb	r3, [r7, #14]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d00d      	beq.n	801441e <USBD_StdEPReq+0x90>
 8014402:	7bbb      	ldrb	r3, [r7, #14]
 8014404:	2b80      	cmp	r3, #128	; 0x80
 8014406:	d00a      	beq.n	801441e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014408:	7bbb      	ldrb	r3, [r7, #14]
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7f0 fd6d 	bl	8004eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014412:	2180      	movs	r1, #128	; 0x80
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f7f0 fd69 	bl	8004eec <USBD_LL_StallEP>
 801441a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801441c:	e020      	b.n	8014460 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801441e:	6839      	ldr	r1, [r7, #0]
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f000 fc45 	bl	8014cb0 <USBD_CtlError>
              break;
 8014426:	e01b      	b.n	8014460 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	885b      	ldrh	r3, [r3, #2]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d10e      	bne.n	801444e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d00b      	beq.n	801444e <USBD_StdEPReq+0xc0>
 8014436:	7bbb      	ldrb	r3, [r7, #14]
 8014438:	2b80      	cmp	r3, #128	; 0x80
 801443a:	d008      	beq.n	801444e <USBD_StdEPReq+0xc0>
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	88db      	ldrh	r3, [r3, #6]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d104      	bne.n	801444e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014444:	7bbb      	ldrb	r3, [r7, #14]
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7f0 fd4f 	bl	8004eec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fcf9 	bl	8014e46 <USBD_CtlSendStatus>

              break;
 8014454:	e004      	b.n	8014460 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fc29 	bl	8014cb0 <USBD_CtlError>
              break;
 801445e:	bf00      	nop
          }
          break;
 8014460:	e0ec      	b.n	801463c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014468:	b2db      	uxtb	r3, r3
 801446a:	2b02      	cmp	r3, #2
 801446c:	d002      	beq.n	8014474 <USBD_StdEPReq+0xe6>
 801446e:	2b03      	cmp	r3, #3
 8014470:	d016      	beq.n	80144a0 <USBD_StdEPReq+0x112>
 8014472:	e030      	b.n	80144d6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00d      	beq.n	8014496 <USBD_StdEPReq+0x108>
 801447a:	7bbb      	ldrb	r3, [r7, #14]
 801447c:	2b80      	cmp	r3, #128	; 0x80
 801447e:	d00a      	beq.n	8014496 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014480:	7bbb      	ldrb	r3, [r7, #14]
 8014482:	4619      	mov	r1, r3
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7f0 fd31 	bl	8004eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801448a:	2180      	movs	r1, #128	; 0x80
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7f0 fd2d 	bl	8004eec <USBD_LL_StallEP>
 8014492:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014494:	e025      	b.n	80144e2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014496:	6839      	ldr	r1, [r7, #0]
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 fc09 	bl	8014cb0 <USBD_CtlError>
              break;
 801449e:	e020      	b.n	80144e2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	885b      	ldrh	r3, [r3, #2]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d11b      	bne.n	80144e0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80144a8:	7bbb      	ldrb	r3, [r7, #14]
 80144aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d004      	beq.n	80144bc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80144b2:	7bbb      	ldrb	r3, [r7, #14]
 80144b4:	4619      	mov	r1, r3
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7f0 fd37 	bl	8004f2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f000 fcc2 	bl	8014e46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144c8:	689b      	ldr	r3, [r3, #8]
 80144ca:	6839      	ldr	r1, [r7, #0]
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	4798      	blx	r3
 80144d0:	4603      	mov	r3, r0
 80144d2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80144d4:	e004      	b.n	80144e0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fbe9 	bl	8014cb0 <USBD_CtlError>
              break;
 80144de:	e000      	b.n	80144e2 <USBD_StdEPReq+0x154>
              break;
 80144e0:	bf00      	nop
          }
          break;
 80144e2:	e0ab      	b.n	801463c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d002      	beq.n	80144f6 <USBD_StdEPReq+0x168>
 80144f0:	2b03      	cmp	r3, #3
 80144f2:	d032      	beq.n	801455a <USBD_StdEPReq+0x1cc>
 80144f4:	e097      	b.n	8014626 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80144f6:	7bbb      	ldrb	r3, [r7, #14]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d007      	beq.n	801450c <USBD_StdEPReq+0x17e>
 80144fc:	7bbb      	ldrb	r3, [r7, #14]
 80144fe:	2b80      	cmp	r3, #128	; 0x80
 8014500:	d004      	beq.n	801450c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014502:	6839      	ldr	r1, [r7, #0]
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 fbd3 	bl	8014cb0 <USBD_CtlError>
                break;
 801450a:	e091      	b.n	8014630 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801450c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014510:	2b00      	cmp	r3, #0
 8014512:	da0b      	bge.n	801452c <USBD_StdEPReq+0x19e>
 8014514:	7bbb      	ldrb	r3, [r7, #14]
 8014516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801451a:	4613      	mov	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4413      	add	r3, r2
 8014520:	009b      	lsls	r3, r3, #2
 8014522:	3310      	adds	r3, #16
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	4413      	add	r3, r2
 8014528:	3304      	adds	r3, #4
 801452a:	e00b      	b.n	8014544 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801452c:	7bbb      	ldrb	r3, [r7, #14]
 801452e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014532:	4613      	mov	r3, r2
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	4413      	add	r3, r2
 8014542:	3304      	adds	r3, #4
 8014544:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2200      	movs	r2, #0
 801454a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	2202      	movs	r2, #2
 8014550:	4619      	mov	r1, r3
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 fc1d 	bl	8014d92 <USBD_CtlSendData>
              break;
 8014558:	e06a      	b.n	8014630 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801455a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801455e:	2b00      	cmp	r3, #0
 8014560:	da11      	bge.n	8014586 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014562:	7bbb      	ldrb	r3, [r7, #14]
 8014564:	f003 020f 	and.w	r2, r3, #15
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	4613      	mov	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	4413      	add	r3, r2
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	440b      	add	r3, r1
 8014574:	3324      	adds	r3, #36	; 0x24
 8014576:	881b      	ldrh	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d117      	bne.n	80145ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801457c:	6839      	ldr	r1, [r7, #0]
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f000 fb96 	bl	8014cb0 <USBD_CtlError>
                  break;
 8014584:	e054      	b.n	8014630 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014586:	7bbb      	ldrb	r3, [r7, #14]
 8014588:	f003 020f 	and.w	r2, r3, #15
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	4613      	mov	r3, r2
 8014590:	009b      	lsls	r3, r3, #2
 8014592:	4413      	add	r3, r2
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	440b      	add	r3, r1
 8014598:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801459c:	881b      	ldrh	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d104      	bne.n	80145ac <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80145a2:	6839      	ldr	r1, [r7, #0]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 fb83 	bl	8014cb0 <USBD_CtlError>
                  break;
 80145aa:	e041      	b.n	8014630 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80145ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	da0b      	bge.n	80145cc <USBD_StdEPReq+0x23e>
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
 80145b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80145ba:	4613      	mov	r3, r2
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	4413      	add	r3, r2
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	3310      	adds	r3, #16
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	4413      	add	r3, r2
 80145c8:	3304      	adds	r3, #4
 80145ca:	e00b      	b.n	80145e4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80145cc:	7bbb      	ldrb	r3, [r7, #14]
 80145ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80145d2:	4613      	mov	r3, r2
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	4413      	add	r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	4413      	add	r3, r2
 80145e2:	3304      	adds	r3, #4
 80145e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80145e6:	7bbb      	ldrb	r3, [r7, #14]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d002      	beq.n	80145f2 <USBD_StdEPReq+0x264>
 80145ec:	7bbb      	ldrb	r3, [r7, #14]
 80145ee:	2b80      	cmp	r3, #128	; 0x80
 80145f0:	d103      	bne.n	80145fa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	2200      	movs	r2, #0
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	e00e      	b.n	8014618 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80145fa:	7bbb      	ldrb	r3, [r7, #14]
 80145fc:	4619      	mov	r1, r3
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7f0 fcb2 	bl	8004f68 <USBD_LL_IsStallEP>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d003      	beq.n	8014612 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	2201      	movs	r2, #1
 801460e:	601a      	str	r2, [r3, #0]
 8014610:	e002      	b.n	8014618 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	2200      	movs	r2, #0
 8014616:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2202      	movs	r2, #2
 801461c:	4619      	mov	r1, r3
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fbb7 	bl	8014d92 <USBD_CtlSendData>
              break;
 8014624:	e004      	b.n	8014630 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014626:	6839      	ldr	r1, [r7, #0]
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f000 fb41 	bl	8014cb0 <USBD_CtlError>
              break;
 801462e:	bf00      	nop
          }
          break;
 8014630:	e004      	b.n	801463c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014632:	6839      	ldr	r1, [r7, #0]
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 fb3b 	bl	8014cb0 <USBD_CtlError>
          break;
 801463a:	bf00      	nop
      }
      break;
 801463c:	e004      	b.n	8014648 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801463e:	6839      	ldr	r1, [r7, #0]
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f000 fb35 	bl	8014cb0 <USBD_CtlError>
      break;
 8014646:	bf00      	nop
  }

  return ret;
 8014648:	7bfb      	ldrb	r3, [r7, #15]
}
 801464a:	4618      	mov	r0, r3
 801464c:	3710      	adds	r7, #16
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
	...

08014654 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801465e:	2300      	movs	r3, #0
 8014660:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014662:	2300      	movs	r3, #0
 8014664:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014666:	2300      	movs	r3, #0
 8014668:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	885b      	ldrh	r3, [r3, #2]
 801466e:	0a1b      	lsrs	r3, r3, #8
 8014670:	b29b      	uxth	r3, r3
 8014672:	3b01      	subs	r3, #1
 8014674:	2b06      	cmp	r3, #6
 8014676:	f200 8128 	bhi.w	80148ca <USBD_GetDescriptor+0x276>
 801467a:	a201      	add	r2, pc, #4	; (adr r2, 8014680 <USBD_GetDescriptor+0x2c>)
 801467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014680:	0801469d 	.word	0x0801469d
 8014684:	080146b5 	.word	0x080146b5
 8014688:	080146f5 	.word	0x080146f5
 801468c:	080148cb 	.word	0x080148cb
 8014690:	080148cb 	.word	0x080148cb
 8014694:	0801486b 	.word	0x0801486b
 8014698:	08014897 	.word	0x08014897
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	7c12      	ldrb	r2, [r2, #16]
 80146a8:	f107 0108 	add.w	r1, r7, #8
 80146ac:	4610      	mov	r0, r2
 80146ae:	4798      	blx	r3
 80146b0:	60f8      	str	r0, [r7, #12]
      break;
 80146b2:	e112      	b.n	80148da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	7c1b      	ldrb	r3, [r3, #16]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10d      	bne.n	80146d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146c4:	f107 0208 	add.w	r2, r7, #8
 80146c8:	4610      	mov	r0, r2
 80146ca:	4798      	blx	r3
 80146cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	3301      	adds	r3, #1
 80146d2:	2202      	movs	r2, #2
 80146d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80146d6:	e100      	b.n	80148da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e0:	f107 0208 	add.w	r2, r7, #8
 80146e4:	4610      	mov	r0, r2
 80146e6:	4798      	blx	r3
 80146e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	3301      	adds	r3, #1
 80146ee:	2202      	movs	r2, #2
 80146f0:	701a      	strb	r2, [r3, #0]
      break;
 80146f2:	e0f2      	b.n	80148da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	885b      	ldrh	r3, [r3, #2]
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b05      	cmp	r3, #5
 80146fc:	f200 80ac 	bhi.w	8014858 <USBD_GetDescriptor+0x204>
 8014700:	a201      	add	r2, pc, #4	; (adr r2, 8014708 <USBD_GetDescriptor+0xb4>)
 8014702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014706:	bf00      	nop
 8014708:	08014721 	.word	0x08014721
 801470c:	08014755 	.word	0x08014755
 8014710:	08014789 	.word	0x08014789
 8014714:	080147bd 	.word	0x080147bd
 8014718:	080147f1 	.word	0x080147f1
 801471c:	08014825 	.word	0x08014825
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014726:	685b      	ldr	r3, [r3, #4]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00b      	beq.n	8014744 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	7c12      	ldrb	r2, [r2, #16]
 8014738:	f107 0108 	add.w	r1, r7, #8
 801473c:	4610      	mov	r0, r2
 801473e:	4798      	blx	r3
 8014740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014742:	e091      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 fab2 	bl	8014cb0 <USBD_CtlError>
            err++;
 801474c:	7afb      	ldrb	r3, [r7, #11]
 801474e:	3301      	adds	r3, #1
 8014750:	72fb      	strb	r3, [r7, #11]
          break;
 8014752:	e089      	b.n	8014868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801475a:	689b      	ldr	r3, [r3, #8]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00b      	beq.n	8014778 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014766:	689b      	ldr	r3, [r3, #8]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	7c12      	ldrb	r2, [r2, #16]
 801476c:	f107 0108 	add.w	r1, r7, #8
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
 8014774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014776:	e077      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014778:	6839      	ldr	r1, [r7, #0]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fa98 	bl	8014cb0 <USBD_CtlError>
            err++;
 8014780:	7afb      	ldrb	r3, [r7, #11]
 8014782:	3301      	adds	r3, #1
 8014784:	72fb      	strb	r3, [r7, #11]
          break;
 8014786:	e06f      	b.n	8014868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d00b      	beq.n	80147ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	7c12      	ldrb	r2, [r2, #16]
 80147a0:	f107 0108 	add.w	r1, r7, #8
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
 80147a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147aa:	e05d      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80147ac:	6839      	ldr	r1, [r7, #0]
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 fa7e 	bl	8014cb0 <USBD_CtlError>
            err++;
 80147b4:	7afb      	ldrb	r3, [r7, #11]
 80147b6:	3301      	adds	r3, #1
 80147b8:	72fb      	strb	r3, [r7, #11]
          break;
 80147ba:	e055      	b.n	8014868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147c2:	691b      	ldr	r3, [r3, #16]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d00b      	beq.n	80147e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	7c12      	ldrb	r2, [r2, #16]
 80147d4:	f107 0108 	add.w	r1, r7, #8
 80147d8:	4610      	mov	r0, r2
 80147da:	4798      	blx	r3
 80147dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147de:	e043      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80147e0:	6839      	ldr	r1, [r7, #0]
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 fa64 	bl	8014cb0 <USBD_CtlError>
            err++;
 80147e8:	7afb      	ldrb	r3, [r7, #11]
 80147ea:	3301      	adds	r3, #1
 80147ec:	72fb      	strb	r3, [r7, #11]
          break;
 80147ee:	e03b      	b.n	8014868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147f6:	695b      	ldr	r3, [r3, #20]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00b      	beq.n	8014814 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014802:	695b      	ldr	r3, [r3, #20]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	7c12      	ldrb	r2, [r2, #16]
 8014808:	f107 0108 	add.w	r1, r7, #8
 801480c:	4610      	mov	r0, r2
 801480e:	4798      	blx	r3
 8014810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014812:	e029      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 fa4a 	bl	8014cb0 <USBD_CtlError>
            err++;
 801481c:	7afb      	ldrb	r3, [r7, #11]
 801481e:	3301      	adds	r3, #1
 8014820:	72fb      	strb	r3, [r7, #11]
          break;
 8014822:	e021      	b.n	8014868 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801482a:	699b      	ldr	r3, [r3, #24]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d00b      	beq.n	8014848 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014836:	699b      	ldr	r3, [r3, #24]
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	7c12      	ldrb	r2, [r2, #16]
 801483c:	f107 0108 	add.w	r1, r7, #8
 8014840:	4610      	mov	r0, r2
 8014842:	4798      	blx	r3
 8014844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014846:	e00f      	b.n	8014868 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014848:	6839      	ldr	r1, [r7, #0]
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 fa30 	bl	8014cb0 <USBD_CtlError>
            err++;
 8014850:	7afb      	ldrb	r3, [r7, #11]
 8014852:	3301      	adds	r3, #1
 8014854:	72fb      	strb	r3, [r7, #11]
          break;
 8014856:	e007      	b.n	8014868 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014858:	6839      	ldr	r1, [r7, #0]
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f000 fa28 	bl	8014cb0 <USBD_CtlError>
          err++;
 8014860:	7afb      	ldrb	r3, [r7, #11]
 8014862:	3301      	adds	r3, #1
 8014864:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014866:	bf00      	nop
      }
      break;
 8014868:	e037      	b.n	80148da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	7c1b      	ldrb	r3, [r3, #16]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d109      	bne.n	8014886 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801487a:	f107 0208 	add.w	r2, r7, #8
 801487e:	4610      	mov	r0, r2
 8014880:	4798      	blx	r3
 8014882:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014884:	e029      	b.n	80148da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014886:	6839      	ldr	r1, [r7, #0]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 fa11 	bl	8014cb0 <USBD_CtlError>
        err++;
 801488e:	7afb      	ldrb	r3, [r7, #11]
 8014890:	3301      	adds	r3, #1
 8014892:	72fb      	strb	r3, [r7, #11]
      break;
 8014894:	e021      	b.n	80148da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	7c1b      	ldrb	r3, [r3, #16]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d10d      	bne.n	80148ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a6:	f107 0208 	add.w	r2, r7, #8
 80148aa:	4610      	mov	r0, r2
 80148ac:	4798      	blx	r3
 80148ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	3301      	adds	r3, #1
 80148b4:	2207      	movs	r2, #7
 80148b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80148b8:	e00f      	b.n	80148da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80148ba:	6839      	ldr	r1, [r7, #0]
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f000 f9f7 	bl	8014cb0 <USBD_CtlError>
        err++;
 80148c2:	7afb      	ldrb	r3, [r7, #11]
 80148c4:	3301      	adds	r3, #1
 80148c6:	72fb      	strb	r3, [r7, #11]
      break;
 80148c8:	e007      	b.n	80148da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80148ca:	6839      	ldr	r1, [r7, #0]
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f000 f9ef 	bl	8014cb0 <USBD_CtlError>
      err++;
 80148d2:	7afb      	ldrb	r3, [r7, #11]
 80148d4:	3301      	adds	r3, #1
 80148d6:	72fb      	strb	r3, [r7, #11]
      break;
 80148d8:	bf00      	nop
  }

  if (err != 0U)
 80148da:	7afb      	ldrb	r3, [r7, #11]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d11e      	bne.n	801491e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	88db      	ldrh	r3, [r3, #6]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d016      	beq.n	8014916 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80148e8:	893b      	ldrh	r3, [r7, #8]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d00e      	beq.n	801490c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	88da      	ldrh	r2, [r3, #6]
 80148f2:	893b      	ldrh	r3, [r7, #8]
 80148f4:	4293      	cmp	r3, r2
 80148f6:	bf28      	it	cs
 80148f8:	4613      	movcs	r3, r2
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148fe:	893b      	ldrh	r3, [r7, #8]
 8014900:	461a      	mov	r2, r3
 8014902:	68f9      	ldr	r1, [r7, #12]
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f000 fa44 	bl	8014d92 <USBD_CtlSendData>
 801490a:	e009      	b.n	8014920 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f9ce 	bl	8014cb0 <USBD_CtlError>
 8014914:	e004      	b.n	8014920 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 fa95 	bl	8014e46 <USBD_CtlSendStatus>
 801491c:	e000      	b.n	8014920 <USBD_GetDescriptor+0x2cc>
    return;
 801491e:	bf00      	nop
  }
}
 8014920:	3710      	adds	r7, #16
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop

08014928 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
 8014930:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	889b      	ldrh	r3, [r3, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d131      	bne.n	801499e <USBD_SetAddress+0x76>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	88db      	ldrh	r3, [r3, #6]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d12d      	bne.n	801499e <USBD_SetAddress+0x76>
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	885b      	ldrh	r3, [r3, #2]
 8014946:	2b7f      	cmp	r3, #127	; 0x7f
 8014948:	d829      	bhi.n	801499e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	885b      	ldrh	r3, [r3, #2]
 801494e:	b2db      	uxtb	r3, r3
 8014950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014954:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801495c:	b2db      	uxtb	r3, r3
 801495e:	2b03      	cmp	r3, #3
 8014960:	d104      	bne.n	801496c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014962:	6839      	ldr	r1, [r7, #0]
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f000 f9a3 	bl	8014cb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801496a:	e01d      	b.n	80149a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7bfa      	ldrb	r2, [r7, #15]
 8014970:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014974:	7bfb      	ldrb	r3, [r7, #15]
 8014976:	4619      	mov	r1, r3
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7f0 fb21 	bl	8004fc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 fa61 	bl	8014e46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014984:	7bfb      	ldrb	r3, [r7, #15]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d004      	beq.n	8014994 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2202      	movs	r2, #2
 801498e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014992:	e009      	b.n	80149a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2201      	movs	r2, #1
 8014998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801499c:	e004      	b.n	80149a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801499e:	6839      	ldr	r1, [r7, #0]
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f000 f985 	bl	8014cb0 <USBD_CtlError>
  }
}
 80149a6:	bf00      	nop
 80149a8:	bf00      	nop
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80149ba:	2300      	movs	r3, #0
 80149bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	885b      	ldrh	r3, [r3, #2]
 80149c2:	b2da      	uxtb	r2, r3
 80149c4:	4b4c      	ldr	r3, [pc, #304]	; (8014af8 <USBD_SetConfig+0x148>)
 80149c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80149c8:	4b4b      	ldr	r3, [pc, #300]	; (8014af8 <USBD_SetConfig+0x148>)
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	2b01      	cmp	r3, #1
 80149ce:	d905      	bls.n	80149dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80149d0:	6839      	ldr	r1, [r7, #0]
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 f96c 	bl	8014cb0 <USBD_CtlError>
    return USBD_FAIL;
 80149d8:	2303      	movs	r3, #3
 80149da:	e088      	b.n	8014aee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	2b02      	cmp	r3, #2
 80149e6:	d002      	beq.n	80149ee <USBD_SetConfig+0x3e>
 80149e8:	2b03      	cmp	r3, #3
 80149ea:	d025      	beq.n	8014a38 <USBD_SetConfig+0x88>
 80149ec:	e071      	b.n	8014ad2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80149ee:	4b42      	ldr	r3, [pc, #264]	; (8014af8 <USBD_SetConfig+0x148>)
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d01c      	beq.n	8014a30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80149f6:	4b40      	ldr	r3, [pc, #256]	; (8014af8 <USBD_SetConfig+0x148>)
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	461a      	mov	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a00:	4b3d      	ldr	r3, [pc, #244]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	4619      	mov	r1, r3
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f7ff f948 	bl	8013c9c <USBD_SetClassConfig>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014a10:	7bfb      	ldrb	r3, [r7, #15]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d004      	beq.n	8014a20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 f949 	bl	8014cb0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a1e:	e065      	b.n	8014aec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 fa10 	bl	8014e46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2203      	movs	r2, #3
 8014a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014a2e:	e05d      	b.n	8014aec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fa08 	bl	8014e46 <USBD_CtlSendStatus>
      break;
 8014a36:	e059      	b.n	8014aec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014a38:	4b2f      	ldr	r3, [pc, #188]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d112      	bne.n	8014a66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2202      	movs	r2, #2
 8014a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014a48:	4b2b      	ldr	r3, [pc, #172]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a52:	4b29      	ldr	r3, [pc, #164]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	4619      	mov	r1, r3
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7ff f93b 	bl	8013cd4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f000 f9f1 	bl	8014e46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a64:	e042      	b.n	8014aec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014a66:	4b24      	ldr	r3, [pc, #144]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	461a      	mov	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d02a      	beq.n	8014aca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f7ff f929 	bl	8013cd4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a82:	4b1d      	ldr	r3, [pc, #116]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	461a      	mov	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a8c:	4b1a      	ldr	r3, [pc, #104]	; (8014af8 <USBD_SetConfig+0x148>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	4619      	mov	r1, r3
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff f902 	bl	8013c9c <USBD_SetClassConfig>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a9c:	7bfb      	ldrb	r3, [r7, #15]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00f      	beq.n	8014ac2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014aa2:	6839      	ldr	r1, [r7, #0]
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f000 f903 	bl	8014cb0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7ff f90e 	bl	8013cd4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2202      	movs	r2, #2
 8014abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014ac0:	e014      	b.n	8014aec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 f9bf 	bl	8014e46 <USBD_CtlSendStatus>
      break;
 8014ac8:	e010      	b.n	8014aec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 f9bb 	bl	8014e46 <USBD_CtlSendStatus>
      break;
 8014ad0:	e00c      	b.n	8014aec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014ad2:	6839      	ldr	r1, [r7, #0]
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f000 f8eb 	bl	8014cb0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ada:	4b07      	ldr	r3, [pc, #28]	; (8014af8 <USBD_SetConfig+0x148>)
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	4619      	mov	r1, r3
 8014ae0:	6878      	ldr	r0, [r7, #4]
 8014ae2:	f7ff f8f7 	bl	8013cd4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014ae6:	2303      	movs	r3, #3
 8014ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8014aea:	bf00      	nop
  }

  return ret;
 8014aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	24003084 	.word	0x24003084

08014afc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	88db      	ldrh	r3, [r3, #6]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d004      	beq.n	8014b18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014b0e:	6839      	ldr	r1, [r7, #0]
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f000 f8cd 	bl	8014cb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014b16:	e023      	b.n	8014b60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b1e:	b2db      	uxtb	r3, r3
 8014b20:	2b02      	cmp	r3, #2
 8014b22:	dc02      	bgt.n	8014b2a <USBD_GetConfig+0x2e>
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	dc03      	bgt.n	8014b30 <USBD_GetConfig+0x34>
 8014b28:	e015      	b.n	8014b56 <USBD_GetConfig+0x5a>
 8014b2a:	2b03      	cmp	r3, #3
 8014b2c:	d00b      	beq.n	8014b46 <USBD_GetConfig+0x4a>
 8014b2e:	e012      	b.n	8014b56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3308      	adds	r3, #8
 8014b3a:	2201      	movs	r2, #1
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	f000 f927 	bl	8014d92 <USBD_CtlSendData>
        break;
 8014b44:	e00c      	b.n	8014b60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	3304      	adds	r3, #4
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 f91f 	bl	8014d92 <USBD_CtlSendData>
        break;
 8014b54:	e004      	b.n	8014b60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014b56:	6839      	ldr	r1, [r7, #0]
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 f8a9 	bl	8014cb0 <USBD_CtlError>
        break;
 8014b5e:	bf00      	nop
}
 8014b60:	bf00      	nop
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	2b02      	cmp	r3, #2
 8014b7e:	d81e      	bhi.n	8014bbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	88db      	ldrh	r3, [r3, #6]
 8014b84:	2b02      	cmp	r3, #2
 8014b86:	d004      	beq.n	8014b92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b88:	6839      	ldr	r1, [r7, #0]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 f890 	bl	8014cb0 <USBD_CtlError>
        break;
 8014b90:	e01a      	b.n	8014bc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	2201      	movs	r2, #1
 8014b96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d005      	beq.n	8014bae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	f043 0202 	orr.w	r2, r3, #2
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	330c      	adds	r3, #12
 8014bb2:	2202      	movs	r2, #2
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 f8eb 	bl	8014d92 <USBD_CtlSendData>
      break;
 8014bbc:	e004      	b.n	8014bc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014bbe:	6839      	ldr	r1, [r7, #0]
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 f875 	bl	8014cb0 <USBD_CtlError>
      break;
 8014bc6:	bf00      	nop
  }
}
 8014bc8:	bf00      	nop
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	885b      	ldrh	r3, [r3, #2]
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	d106      	bne.n	8014bf0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2201      	movs	r2, #1
 8014be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 f92b 	bl	8014e46 <USBD_CtlSendStatus>
  }
}
 8014bf0:	bf00      	nop
 8014bf2:	3708      	adds	r7, #8
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b082      	sub	sp, #8
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
 8014c00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	3b01      	subs	r3, #1
 8014c0c:	2b02      	cmp	r3, #2
 8014c0e:	d80b      	bhi.n	8014c28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	885b      	ldrh	r3, [r3, #2]
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d10c      	bne.n	8014c32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f000 f910 	bl	8014e46 <USBD_CtlSendStatus>
      }
      break;
 8014c26:	e004      	b.n	8014c32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 f840 	bl	8014cb0 <USBD_CtlError>
      break;
 8014c30:	e000      	b.n	8014c34 <USBD_ClrFeature+0x3c>
      break;
 8014c32:	bf00      	nop
  }
}
 8014c34:	bf00      	nop
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}

08014c3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	781a      	ldrb	r2, [r3, #0]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	3301      	adds	r3, #1
 8014c56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	781a      	ldrb	r2, [r3, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	3301      	adds	r3, #1
 8014c64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c66:	68f8      	ldr	r0, [r7, #12]
 8014c68:	f7ff fabb 	bl	80141e2 <SWAPBYTE>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	461a      	mov	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	3301      	adds	r3, #1
 8014c78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c80:	68f8      	ldr	r0, [r7, #12]
 8014c82:	f7ff faae 	bl	80141e2 <SWAPBYTE>
 8014c86:	4603      	mov	r3, r0
 8014c88:	461a      	mov	r2, r3
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	3301      	adds	r3, #1
 8014c92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	3301      	adds	r3, #1
 8014c98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c9a:	68f8      	ldr	r0, [r7, #12]
 8014c9c:	f7ff faa1 	bl	80141e2 <SWAPBYTE>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	80da      	strh	r2, [r3, #6]
}
 8014ca8:	bf00      	nop
 8014caa:	3710      	adds	r7, #16
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014cba:	2180      	movs	r1, #128	; 0x80
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7f0 f915 	bl	8004eec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7f0 f911 	bl	8004eec <USBD_LL_StallEP>
}
 8014cca:	bf00      	nop
 8014ccc:	3708      	adds	r7, #8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b086      	sub	sp, #24
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	60f8      	str	r0, [r7, #12]
 8014cda:	60b9      	str	r1, [r7, #8]
 8014cdc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d036      	beq.n	8014d56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014cec:	6938      	ldr	r0, [r7, #16]
 8014cee:	f000 f836 	bl	8014d5e <USBD_GetLen>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	005b      	lsls	r3, r3, #1
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014d00:	7dfb      	ldrb	r3, [r7, #23]
 8014d02:	68ba      	ldr	r2, [r7, #8]
 8014d04:	4413      	add	r3, r2
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	7812      	ldrb	r2, [r2, #0]
 8014d0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d0c:	7dfb      	ldrb	r3, [r7, #23]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	68ba      	ldr	r2, [r7, #8]
 8014d16:	4413      	add	r3, r2
 8014d18:	2203      	movs	r2, #3
 8014d1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8014d1c:	7dfb      	ldrb	r3, [r7, #23]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014d22:	e013      	b.n	8014d4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014d24:	7dfb      	ldrb	r3, [r7, #23]
 8014d26:	68ba      	ldr	r2, [r7, #8]
 8014d28:	4413      	add	r3, r2
 8014d2a:	693a      	ldr	r2, [r7, #16]
 8014d2c:	7812      	ldrb	r2, [r2, #0]
 8014d2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	3301      	adds	r3, #1
 8014d34:	613b      	str	r3, [r7, #16]
    idx++;
 8014d36:	7dfb      	ldrb	r3, [r7, #23]
 8014d38:	3301      	adds	r3, #1
 8014d3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d3c:	7dfb      	ldrb	r3, [r7, #23]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	4413      	add	r3, r2
 8014d42:	2200      	movs	r2, #0
 8014d44:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d46:	7dfb      	ldrb	r3, [r7, #23]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d1e7      	bne.n	8014d24 <USBD_GetString+0x52>
 8014d54:	e000      	b.n	8014d58 <USBD_GetString+0x86>
    return;
 8014d56:	bf00      	nop
  }
}
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}

08014d5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d5e:	b480      	push	{r7}
 8014d60:	b085      	sub	sp, #20
 8014d62:	af00      	add	r7, sp, #0
 8014d64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d66:	2300      	movs	r3, #0
 8014d68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d6e:	e005      	b.n	8014d7c <USBD_GetLen+0x1e>
  {
    len++;
 8014d70:	7bfb      	ldrb	r3, [r7, #15]
 8014d72:	3301      	adds	r3, #1
 8014d74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	3301      	adds	r3, #1
 8014d7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d1f5      	bne.n	8014d70 <USBD_GetLen+0x12>
  }

  return len;
 8014d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3714      	adds	r7, #20
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr

08014d92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	60f8      	str	r0, [r7, #12]
 8014d9a:	60b9      	str	r1, [r7, #8]
 8014d9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2202      	movs	r2, #2
 8014da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	68ba      	ldr	r2, [r7, #8]
 8014db6:	2100      	movs	r1, #0
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f7f0 f920 	bl	8004ffe <USBD_LL_Transmit>

  return USBD_OK;
 8014dbe:	2300      	movs	r3, #0
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3710      	adds	r7, #16
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b084      	sub	sp, #16
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	68ba      	ldr	r2, [r7, #8]
 8014dd8:	2100      	movs	r1, #0
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f7f0 f90f 	bl	8004ffe <USBD_LL_Transmit>

  return USBD_OK;
 8014de0:	2300      	movs	r3, #0
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3710      	adds	r7, #16
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}

08014dea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014dea:	b580      	push	{r7, lr}
 8014dec:	b084      	sub	sp, #16
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	60f8      	str	r0, [r7, #12]
 8014df2:	60b9      	str	r1, [r7, #8]
 8014df4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2203      	movs	r2, #3
 8014dfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68ba      	ldr	r2, [r7, #8]
 8014e12:	2100      	movs	r1, #0
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	f7f0 f913 	bl	8005040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e1a:	2300      	movs	r3, #0
}
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	68ba      	ldr	r2, [r7, #8]
 8014e34:	2100      	movs	r1, #0
 8014e36:	68f8      	ldr	r0, [r7, #12]
 8014e38:	f7f0 f902 	bl	8005040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e3c:	2300      	movs	r3, #0
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b082      	sub	sp, #8
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2204      	movs	r2, #4
 8014e52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e56:	2300      	movs	r3, #0
 8014e58:	2200      	movs	r2, #0
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7f0 f8ce 	bl	8004ffe <USBD_LL_Transmit>

  return USBD_OK;
 8014e62:	2300      	movs	r3, #0
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2205      	movs	r2, #5
 8014e78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	2200      	movs	r2, #0
 8014e80:	2100      	movs	r1, #0
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f7f0 f8dc 	bl	8005040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e88:	2300      	movs	r3, #0
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
	...

08014e94 <__assert_func>:
 8014e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e96:	4614      	mov	r4, r2
 8014e98:	461a      	mov	r2, r3
 8014e9a:	4b09      	ldr	r3, [pc, #36]	; (8014ec0 <__assert_func+0x2c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	4605      	mov	r5, r0
 8014ea0:	68d8      	ldr	r0, [r3, #12]
 8014ea2:	b14c      	cbz	r4, 8014eb8 <__assert_func+0x24>
 8014ea4:	4b07      	ldr	r3, [pc, #28]	; (8014ec4 <__assert_func+0x30>)
 8014ea6:	9100      	str	r1, [sp, #0]
 8014ea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014eac:	4906      	ldr	r1, [pc, #24]	; (8014ec8 <__assert_func+0x34>)
 8014eae:	462b      	mov	r3, r5
 8014eb0:	f000 f81c 	bl	8014eec <fiprintf>
 8014eb4:	f000 fd22 	bl	80158fc <abort>
 8014eb8:	4b04      	ldr	r3, [pc, #16]	; (8014ecc <__assert_func+0x38>)
 8014eba:	461c      	mov	r4, r3
 8014ebc:	e7f3      	b.n	8014ea6 <__assert_func+0x12>
 8014ebe:	bf00      	nop
 8014ec0:	24000190 	.word	0x24000190
 8014ec4:	0803072c 	.word	0x0803072c
 8014ec8:	08030739 	.word	0x08030739
 8014ecc:	08030767 	.word	0x08030767

08014ed0 <calloc>:
 8014ed0:	4b02      	ldr	r3, [pc, #8]	; (8014edc <calloc+0xc>)
 8014ed2:	460a      	mov	r2, r1
 8014ed4:	4601      	mov	r1, r0
 8014ed6:	6818      	ldr	r0, [r3, #0]
 8014ed8:	f000 b85c 	b.w	8014f94 <_calloc_r>
 8014edc:	24000190 	.word	0x24000190

08014ee0 <__errno>:
 8014ee0:	4b01      	ldr	r3, [pc, #4]	; (8014ee8 <__errno+0x8>)
 8014ee2:	6818      	ldr	r0, [r3, #0]
 8014ee4:	4770      	bx	lr
 8014ee6:	bf00      	nop
 8014ee8:	24000190 	.word	0x24000190

08014eec <fiprintf>:
 8014eec:	b40e      	push	{r1, r2, r3}
 8014eee:	b503      	push	{r0, r1, lr}
 8014ef0:	4601      	mov	r1, r0
 8014ef2:	ab03      	add	r3, sp, #12
 8014ef4:	4805      	ldr	r0, [pc, #20]	; (8014f0c <fiprintf+0x20>)
 8014ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014efa:	6800      	ldr	r0, [r0, #0]
 8014efc:	9301      	str	r3, [sp, #4]
 8014efe:	f000 f969 	bl	80151d4 <_vfiprintf_r>
 8014f02:	b002      	add	sp, #8
 8014f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f08:	b003      	add	sp, #12
 8014f0a:	4770      	bx	lr
 8014f0c:	24000190 	.word	0x24000190

08014f10 <__libc_init_array>:
 8014f10:	b570      	push	{r4, r5, r6, lr}
 8014f12:	4d0d      	ldr	r5, [pc, #52]	; (8014f48 <__libc_init_array+0x38>)
 8014f14:	4c0d      	ldr	r4, [pc, #52]	; (8014f4c <__libc_init_array+0x3c>)
 8014f16:	1b64      	subs	r4, r4, r5
 8014f18:	10a4      	asrs	r4, r4, #2
 8014f1a:	2600      	movs	r6, #0
 8014f1c:	42a6      	cmp	r6, r4
 8014f1e:	d109      	bne.n	8014f34 <__libc_init_array+0x24>
 8014f20:	4d0b      	ldr	r5, [pc, #44]	; (8014f50 <__libc_init_array+0x40>)
 8014f22:	4c0c      	ldr	r4, [pc, #48]	; (8014f54 <__libc_init_array+0x44>)
 8014f24:	f001 f80e 	bl	8015f44 <_init>
 8014f28:	1b64      	subs	r4, r4, r5
 8014f2a:	10a4      	asrs	r4, r4, #2
 8014f2c:	2600      	movs	r6, #0
 8014f2e:	42a6      	cmp	r6, r4
 8014f30:	d105      	bne.n	8014f3e <__libc_init_array+0x2e>
 8014f32:	bd70      	pop	{r4, r5, r6, pc}
 8014f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f38:	4798      	blx	r3
 8014f3a:	3601      	adds	r6, #1
 8014f3c:	e7ee      	b.n	8014f1c <__libc_init_array+0xc>
 8014f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f42:	4798      	blx	r3
 8014f44:	3601      	adds	r6, #1
 8014f46:	e7f2      	b.n	8014f2e <__libc_init_array+0x1e>
 8014f48:	08030808 	.word	0x08030808
 8014f4c:	08030808 	.word	0x08030808
 8014f50:	08030808 	.word	0x08030808
 8014f54:	0803080c 	.word	0x0803080c

08014f58 <free>:
 8014f58:	4b02      	ldr	r3, [pc, #8]	; (8014f64 <free+0xc>)
 8014f5a:	4601      	mov	r1, r0
 8014f5c:	6818      	ldr	r0, [r3, #0]
 8014f5e:	f000 b82f 	b.w	8014fc0 <_free_r>
 8014f62:	bf00      	nop
 8014f64:	24000190 	.word	0x24000190

08014f68 <memcpy>:
 8014f68:	440a      	add	r2, r1
 8014f6a:	4291      	cmp	r1, r2
 8014f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f70:	d100      	bne.n	8014f74 <memcpy+0xc>
 8014f72:	4770      	bx	lr
 8014f74:	b510      	push	{r4, lr}
 8014f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f7e:	4291      	cmp	r1, r2
 8014f80:	d1f9      	bne.n	8014f76 <memcpy+0xe>
 8014f82:	bd10      	pop	{r4, pc}

08014f84 <memset>:
 8014f84:	4402      	add	r2, r0
 8014f86:	4603      	mov	r3, r0
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d100      	bne.n	8014f8e <memset+0xa>
 8014f8c:	4770      	bx	lr
 8014f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8014f92:	e7f9      	b.n	8014f88 <memset+0x4>

08014f94 <_calloc_r>:
 8014f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f96:	fba1 2402 	umull	r2, r4, r1, r2
 8014f9a:	b94c      	cbnz	r4, 8014fb0 <_calloc_r+0x1c>
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	9201      	str	r2, [sp, #4]
 8014fa0:	f000 f87a 	bl	8015098 <_malloc_r>
 8014fa4:	9a01      	ldr	r2, [sp, #4]
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	b930      	cbnz	r0, 8014fb8 <_calloc_r+0x24>
 8014faa:	4628      	mov	r0, r5
 8014fac:	b003      	add	sp, #12
 8014fae:	bd30      	pop	{r4, r5, pc}
 8014fb0:	220c      	movs	r2, #12
 8014fb2:	6002      	str	r2, [r0, #0]
 8014fb4:	2500      	movs	r5, #0
 8014fb6:	e7f8      	b.n	8014faa <_calloc_r+0x16>
 8014fb8:	4621      	mov	r1, r4
 8014fba:	f7ff ffe3 	bl	8014f84 <memset>
 8014fbe:	e7f4      	b.n	8014faa <_calloc_r+0x16>

08014fc0 <_free_r>:
 8014fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fc2:	2900      	cmp	r1, #0
 8014fc4:	d044      	beq.n	8015050 <_free_r+0x90>
 8014fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fca:	9001      	str	r0, [sp, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f1a1 0404 	sub.w	r4, r1, #4
 8014fd2:	bfb8      	it	lt
 8014fd4:	18e4      	addlt	r4, r4, r3
 8014fd6:	f000 feb9 	bl	8015d4c <__malloc_lock>
 8014fda:	4a1e      	ldr	r2, [pc, #120]	; (8015054 <_free_r+0x94>)
 8014fdc:	9801      	ldr	r0, [sp, #4]
 8014fde:	6813      	ldr	r3, [r2, #0]
 8014fe0:	b933      	cbnz	r3, 8014ff0 <_free_r+0x30>
 8014fe2:	6063      	str	r3, [r4, #4]
 8014fe4:	6014      	str	r4, [r2, #0]
 8014fe6:	b003      	add	sp, #12
 8014fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014fec:	f000 beb4 	b.w	8015d58 <__malloc_unlock>
 8014ff0:	42a3      	cmp	r3, r4
 8014ff2:	d908      	bls.n	8015006 <_free_r+0x46>
 8014ff4:	6825      	ldr	r5, [r4, #0]
 8014ff6:	1961      	adds	r1, r4, r5
 8014ff8:	428b      	cmp	r3, r1
 8014ffa:	bf01      	itttt	eq
 8014ffc:	6819      	ldreq	r1, [r3, #0]
 8014ffe:	685b      	ldreq	r3, [r3, #4]
 8015000:	1949      	addeq	r1, r1, r5
 8015002:	6021      	streq	r1, [r4, #0]
 8015004:	e7ed      	b.n	8014fe2 <_free_r+0x22>
 8015006:	461a      	mov	r2, r3
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	b10b      	cbz	r3, 8015010 <_free_r+0x50>
 801500c:	42a3      	cmp	r3, r4
 801500e:	d9fa      	bls.n	8015006 <_free_r+0x46>
 8015010:	6811      	ldr	r1, [r2, #0]
 8015012:	1855      	adds	r5, r2, r1
 8015014:	42a5      	cmp	r5, r4
 8015016:	d10b      	bne.n	8015030 <_free_r+0x70>
 8015018:	6824      	ldr	r4, [r4, #0]
 801501a:	4421      	add	r1, r4
 801501c:	1854      	adds	r4, r2, r1
 801501e:	42a3      	cmp	r3, r4
 8015020:	6011      	str	r1, [r2, #0]
 8015022:	d1e0      	bne.n	8014fe6 <_free_r+0x26>
 8015024:	681c      	ldr	r4, [r3, #0]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	6053      	str	r3, [r2, #4]
 801502a:	4421      	add	r1, r4
 801502c:	6011      	str	r1, [r2, #0]
 801502e:	e7da      	b.n	8014fe6 <_free_r+0x26>
 8015030:	d902      	bls.n	8015038 <_free_r+0x78>
 8015032:	230c      	movs	r3, #12
 8015034:	6003      	str	r3, [r0, #0]
 8015036:	e7d6      	b.n	8014fe6 <_free_r+0x26>
 8015038:	6825      	ldr	r5, [r4, #0]
 801503a:	1961      	adds	r1, r4, r5
 801503c:	428b      	cmp	r3, r1
 801503e:	bf04      	itt	eq
 8015040:	6819      	ldreq	r1, [r3, #0]
 8015042:	685b      	ldreq	r3, [r3, #4]
 8015044:	6063      	str	r3, [r4, #4]
 8015046:	bf04      	itt	eq
 8015048:	1949      	addeq	r1, r1, r5
 801504a:	6021      	streq	r1, [r4, #0]
 801504c:	6054      	str	r4, [r2, #4]
 801504e:	e7ca      	b.n	8014fe6 <_free_r+0x26>
 8015050:	b003      	add	sp, #12
 8015052:	bd30      	pop	{r4, r5, pc}
 8015054:	24003088 	.word	0x24003088

08015058 <sbrk_aligned>:
 8015058:	b570      	push	{r4, r5, r6, lr}
 801505a:	4e0e      	ldr	r6, [pc, #56]	; (8015094 <sbrk_aligned+0x3c>)
 801505c:	460c      	mov	r4, r1
 801505e:	6831      	ldr	r1, [r6, #0]
 8015060:	4605      	mov	r5, r0
 8015062:	b911      	cbnz	r1, 801506a <sbrk_aligned+0x12>
 8015064:	f000 fb7a 	bl	801575c <_sbrk_r>
 8015068:	6030      	str	r0, [r6, #0]
 801506a:	4621      	mov	r1, r4
 801506c:	4628      	mov	r0, r5
 801506e:	f000 fb75 	bl	801575c <_sbrk_r>
 8015072:	1c43      	adds	r3, r0, #1
 8015074:	d00a      	beq.n	801508c <sbrk_aligned+0x34>
 8015076:	1cc4      	adds	r4, r0, #3
 8015078:	f024 0403 	bic.w	r4, r4, #3
 801507c:	42a0      	cmp	r0, r4
 801507e:	d007      	beq.n	8015090 <sbrk_aligned+0x38>
 8015080:	1a21      	subs	r1, r4, r0
 8015082:	4628      	mov	r0, r5
 8015084:	f000 fb6a 	bl	801575c <_sbrk_r>
 8015088:	3001      	adds	r0, #1
 801508a:	d101      	bne.n	8015090 <sbrk_aligned+0x38>
 801508c:	f04f 34ff 	mov.w	r4, #4294967295
 8015090:	4620      	mov	r0, r4
 8015092:	bd70      	pop	{r4, r5, r6, pc}
 8015094:	2400308c 	.word	0x2400308c

08015098 <_malloc_r>:
 8015098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801509c:	1ccd      	adds	r5, r1, #3
 801509e:	f025 0503 	bic.w	r5, r5, #3
 80150a2:	3508      	adds	r5, #8
 80150a4:	2d0c      	cmp	r5, #12
 80150a6:	bf38      	it	cc
 80150a8:	250c      	movcc	r5, #12
 80150aa:	2d00      	cmp	r5, #0
 80150ac:	4607      	mov	r7, r0
 80150ae:	db01      	blt.n	80150b4 <_malloc_r+0x1c>
 80150b0:	42a9      	cmp	r1, r5
 80150b2:	d905      	bls.n	80150c0 <_malloc_r+0x28>
 80150b4:	230c      	movs	r3, #12
 80150b6:	603b      	str	r3, [r7, #0]
 80150b8:	2600      	movs	r6, #0
 80150ba:	4630      	mov	r0, r6
 80150bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c0:	4e2e      	ldr	r6, [pc, #184]	; (801517c <_malloc_r+0xe4>)
 80150c2:	f000 fe43 	bl	8015d4c <__malloc_lock>
 80150c6:	6833      	ldr	r3, [r6, #0]
 80150c8:	461c      	mov	r4, r3
 80150ca:	bb34      	cbnz	r4, 801511a <_malloc_r+0x82>
 80150cc:	4629      	mov	r1, r5
 80150ce:	4638      	mov	r0, r7
 80150d0:	f7ff ffc2 	bl	8015058 <sbrk_aligned>
 80150d4:	1c43      	adds	r3, r0, #1
 80150d6:	4604      	mov	r4, r0
 80150d8:	d14d      	bne.n	8015176 <_malloc_r+0xde>
 80150da:	6834      	ldr	r4, [r6, #0]
 80150dc:	4626      	mov	r6, r4
 80150de:	2e00      	cmp	r6, #0
 80150e0:	d140      	bne.n	8015164 <_malloc_r+0xcc>
 80150e2:	6823      	ldr	r3, [r4, #0]
 80150e4:	4631      	mov	r1, r6
 80150e6:	4638      	mov	r0, r7
 80150e8:	eb04 0803 	add.w	r8, r4, r3
 80150ec:	f000 fb36 	bl	801575c <_sbrk_r>
 80150f0:	4580      	cmp	r8, r0
 80150f2:	d13a      	bne.n	801516a <_malloc_r+0xd2>
 80150f4:	6821      	ldr	r1, [r4, #0]
 80150f6:	3503      	adds	r5, #3
 80150f8:	1a6d      	subs	r5, r5, r1
 80150fa:	f025 0503 	bic.w	r5, r5, #3
 80150fe:	3508      	adds	r5, #8
 8015100:	2d0c      	cmp	r5, #12
 8015102:	bf38      	it	cc
 8015104:	250c      	movcc	r5, #12
 8015106:	4629      	mov	r1, r5
 8015108:	4638      	mov	r0, r7
 801510a:	f7ff ffa5 	bl	8015058 <sbrk_aligned>
 801510e:	3001      	adds	r0, #1
 8015110:	d02b      	beq.n	801516a <_malloc_r+0xd2>
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	442b      	add	r3, r5
 8015116:	6023      	str	r3, [r4, #0]
 8015118:	e00e      	b.n	8015138 <_malloc_r+0xa0>
 801511a:	6822      	ldr	r2, [r4, #0]
 801511c:	1b52      	subs	r2, r2, r5
 801511e:	d41e      	bmi.n	801515e <_malloc_r+0xc6>
 8015120:	2a0b      	cmp	r2, #11
 8015122:	d916      	bls.n	8015152 <_malloc_r+0xba>
 8015124:	1961      	adds	r1, r4, r5
 8015126:	42a3      	cmp	r3, r4
 8015128:	6025      	str	r5, [r4, #0]
 801512a:	bf18      	it	ne
 801512c:	6059      	strne	r1, [r3, #4]
 801512e:	6863      	ldr	r3, [r4, #4]
 8015130:	bf08      	it	eq
 8015132:	6031      	streq	r1, [r6, #0]
 8015134:	5162      	str	r2, [r4, r5]
 8015136:	604b      	str	r3, [r1, #4]
 8015138:	4638      	mov	r0, r7
 801513a:	f104 060b 	add.w	r6, r4, #11
 801513e:	f000 fe0b 	bl	8015d58 <__malloc_unlock>
 8015142:	f026 0607 	bic.w	r6, r6, #7
 8015146:	1d23      	adds	r3, r4, #4
 8015148:	1af2      	subs	r2, r6, r3
 801514a:	d0b6      	beq.n	80150ba <_malloc_r+0x22>
 801514c:	1b9b      	subs	r3, r3, r6
 801514e:	50a3      	str	r3, [r4, r2]
 8015150:	e7b3      	b.n	80150ba <_malloc_r+0x22>
 8015152:	6862      	ldr	r2, [r4, #4]
 8015154:	42a3      	cmp	r3, r4
 8015156:	bf0c      	ite	eq
 8015158:	6032      	streq	r2, [r6, #0]
 801515a:	605a      	strne	r2, [r3, #4]
 801515c:	e7ec      	b.n	8015138 <_malloc_r+0xa0>
 801515e:	4623      	mov	r3, r4
 8015160:	6864      	ldr	r4, [r4, #4]
 8015162:	e7b2      	b.n	80150ca <_malloc_r+0x32>
 8015164:	4634      	mov	r4, r6
 8015166:	6876      	ldr	r6, [r6, #4]
 8015168:	e7b9      	b.n	80150de <_malloc_r+0x46>
 801516a:	230c      	movs	r3, #12
 801516c:	603b      	str	r3, [r7, #0]
 801516e:	4638      	mov	r0, r7
 8015170:	f000 fdf2 	bl	8015d58 <__malloc_unlock>
 8015174:	e7a1      	b.n	80150ba <_malloc_r+0x22>
 8015176:	6025      	str	r5, [r4, #0]
 8015178:	e7de      	b.n	8015138 <_malloc_r+0xa0>
 801517a:	bf00      	nop
 801517c:	24003088 	.word	0x24003088

08015180 <__sfputc_r>:
 8015180:	6893      	ldr	r3, [r2, #8]
 8015182:	3b01      	subs	r3, #1
 8015184:	2b00      	cmp	r3, #0
 8015186:	b410      	push	{r4}
 8015188:	6093      	str	r3, [r2, #8]
 801518a:	da08      	bge.n	801519e <__sfputc_r+0x1e>
 801518c:	6994      	ldr	r4, [r2, #24]
 801518e:	42a3      	cmp	r3, r4
 8015190:	db01      	blt.n	8015196 <__sfputc_r+0x16>
 8015192:	290a      	cmp	r1, #10
 8015194:	d103      	bne.n	801519e <__sfputc_r+0x1e>
 8015196:	f85d 4b04 	ldr.w	r4, [sp], #4
 801519a:	f000 baef 	b.w	801577c <__swbuf_r>
 801519e:	6813      	ldr	r3, [r2, #0]
 80151a0:	1c58      	adds	r0, r3, #1
 80151a2:	6010      	str	r0, [r2, #0]
 80151a4:	7019      	strb	r1, [r3, #0]
 80151a6:	4608      	mov	r0, r1
 80151a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151ac:	4770      	bx	lr

080151ae <__sfputs_r>:
 80151ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b0:	4606      	mov	r6, r0
 80151b2:	460f      	mov	r7, r1
 80151b4:	4614      	mov	r4, r2
 80151b6:	18d5      	adds	r5, r2, r3
 80151b8:	42ac      	cmp	r4, r5
 80151ba:	d101      	bne.n	80151c0 <__sfputs_r+0x12>
 80151bc:	2000      	movs	r0, #0
 80151be:	e007      	b.n	80151d0 <__sfputs_r+0x22>
 80151c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151c4:	463a      	mov	r2, r7
 80151c6:	4630      	mov	r0, r6
 80151c8:	f7ff ffda 	bl	8015180 <__sfputc_r>
 80151cc:	1c43      	adds	r3, r0, #1
 80151ce:	d1f3      	bne.n	80151b8 <__sfputs_r+0xa>
 80151d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151d4 <_vfiprintf_r>:
 80151d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d8:	460d      	mov	r5, r1
 80151da:	b09d      	sub	sp, #116	; 0x74
 80151dc:	4614      	mov	r4, r2
 80151de:	4698      	mov	r8, r3
 80151e0:	4606      	mov	r6, r0
 80151e2:	b118      	cbz	r0, 80151ec <_vfiprintf_r+0x18>
 80151e4:	6983      	ldr	r3, [r0, #24]
 80151e6:	b90b      	cbnz	r3, 80151ec <_vfiprintf_r+0x18>
 80151e8:	f000 fcaa 	bl	8015b40 <__sinit>
 80151ec:	4b89      	ldr	r3, [pc, #548]	; (8015414 <_vfiprintf_r+0x240>)
 80151ee:	429d      	cmp	r5, r3
 80151f0:	d11b      	bne.n	801522a <_vfiprintf_r+0x56>
 80151f2:	6875      	ldr	r5, [r6, #4]
 80151f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151f6:	07d9      	lsls	r1, r3, #31
 80151f8:	d405      	bmi.n	8015206 <_vfiprintf_r+0x32>
 80151fa:	89ab      	ldrh	r3, [r5, #12]
 80151fc:	059a      	lsls	r2, r3, #22
 80151fe:	d402      	bmi.n	8015206 <_vfiprintf_r+0x32>
 8015200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015202:	f000 fd3b 	bl	8015c7c <__retarget_lock_acquire_recursive>
 8015206:	89ab      	ldrh	r3, [r5, #12]
 8015208:	071b      	lsls	r3, r3, #28
 801520a:	d501      	bpl.n	8015210 <_vfiprintf_r+0x3c>
 801520c:	692b      	ldr	r3, [r5, #16]
 801520e:	b9eb      	cbnz	r3, 801524c <_vfiprintf_r+0x78>
 8015210:	4629      	mov	r1, r5
 8015212:	4630      	mov	r0, r6
 8015214:	f000 fb04 	bl	8015820 <__swsetup_r>
 8015218:	b1c0      	cbz	r0, 801524c <_vfiprintf_r+0x78>
 801521a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801521c:	07dc      	lsls	r4, r3, #31
 801521e:	d50e      	bpl.n	801523e <_vfiprintf_r+0x6a>
 8015220:	f04f 30ff 	mov.w	r0, #4294967295
 8015224:	b01d      	add	sp, #116	; 0x74
 8015226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522a:	4b7b      	ldr	r3, [pc, #492]	; (8015418 <_vfiprintf_r+0x244>)
 801522c:	429d      	cmp	r5, r3
 801522e:	d101      	bne.n	8015234 <_vfiprintf_r+0x60>
 8015230:	68b5      	ldr	r5, [r6, #8]
 8015232:	e7df      	b.n	80151f4 <_vfiprintf_r+0x20>
 8015234:	4b79      	ldr	r3, [pc, #484]	; (801541c <_vfiprintf_r+0x248>)
 8015236:	429d      	cmp	r5, r3
 8015238:	bf08      	it	eq
 801523a:	68f5      	ldreq	r5, [r6, #12]
 801523c:	e7da      	b.n	80151f4 <_vfiprintf_r+0x20>
 801523e:	89ab      	ldrh	r3, [r5, #12]
 8015240:	0598      	lsls	r0, r3, #22
 8015242:	d4ed      	bmi.n	8015220 <_vfiprintf_r+0x4c>
 8015244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015246:	f000 fd1a 	bl	8015c7e <__retarget_lock_release_recursive>
 801524a:	e7e9      	b.n	8015220 <_vfiprintf_r+0x4c>
 801524c:	2300      	movs	r3, #0
 801524e:	9309      	str	r3, [sp, #36]	; 0x24
 8015250:	2320      	movs	r3, #32
 8015252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015256:	f8cd 800c 	str.w	r8, [sp, #12]
 801525a:	2330      	movs	r3, #48	; 0x30
 801525c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015420 <_vfiprintf_r+0x24c>
 8015260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015264:	f04f 0901 	mov.w	r9, #1
 8015268:	4623      	mov	r3, r4
 801526a:	469a      	mov	sl, r3
 801526c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015270:	b10a      	cbz	r2, 8015276 <_vfiprintf_r+0xa2>
 8015272:	2a25      	cmp	r2, #37	; 0x25
 8015274:	d1f9      	bne.n	801526a <_vfiprintf_r+0x96>
 8015276:	ebba 0b04 	subs.w	fp, sl, r4
 801527a:	d00b      	beq.n	8015294 <_vfiprintf_r+0xc0>
 801527c:	465b      	mov	r3, fp
 801527e:	4622      	mov	r2, r4
 8015280:	4629      	mov	r1, r5
 8015282:	4630      	mov	r0, r6
 8015284:	f7ff ff93 	bl	80151ae <__sfputs_r>
 8015288:	3001      	adds	r0, #1
 801528a:	f000 80aa 	beq.w	80153e2 <_vfiprintf_r+0x20e>
 801528e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015290:	445a      	add	r2, fp
 8015292:	9209      	str	r2, [sp, #36]	; 0x24
 8015294:	f89a 3000 	ldrb.w	r3, [sl]
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 80a2 	beq.w	80153e2 <_vfiprintf_r+0x20e>
 801529e:	2300      	movs	r3, #0
 80152a0:	f04f 32ff 	mov.w	r2, #4294967295
 80152a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152a8:	f10a 0a01 	add.w	sl, sl, #1
 80152ac:	9304      	str	r3, [sp, #16]
 80152ae:	9307      	str	r3, [sp, #28]
 80152b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152b4:	931a      	str	r3, [sp, #104]	; 0x68
 80152b6:	4654      	mov	r4, sl
 80152b8:	2205      	movs	r2, #5
 80152ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152be:	4858      	ldr	r0, [pc, #352]	; (8015420 <_vfiprintf_r+0x24c>)
 80152c0:	f7eb f80e 	bl	80002e0 <memchr>
 80152c4:	9a04      	ldr	r2, [sp, #16]
 80152c6:	b9d8      	cbnz	r0, 8015300 <_vfiprintf_r+0x12c>
 80152c8:	06d1      	lsls	r1, r2, #27
 80152ca:	bf44      	itt	mi
 80152cc:	2320      	movmi	r3, #32
 80152ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152d2:	0713      	lsls	r3, r2, #28
 80152d4:	bf44      	itt	mi
 80152d6:	232b      	movmi	r3, #43	; 0x2b
 80152d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152dc:	f89a 3000 	ldrb.w	r3, [sl]
 80152e0:	2b2a      	cmp	r3, #42	; 0x2a
 80152e2:	d015      	beq.n	8015310 <_vfiprintf_r+0x13c>
 80152e4:	9a07      	ldr	r2, [sp, #28]
 80152e6:	4654      	mov	r4, sl
 80152e8:	2000      	movs	r0, #0
 80152ea:	f04f 0c0a 	mov.w	ip, #10
 80152ee:	4621      	mov	r1, r4
 80152f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152f4:	3b30      	subs	r3, #48	; 0x30
 80152f6:	2b09      	cmp	r3, #9
 80152f8:	d94e      	bls.n	8015398 <_vfiprintf_r+0x1c4>
 80152fa:	b1b0      	cbz	r0, 801532a <_vfiprintf_r+0x156>
 80152fc:	9207      	str	r2, [sp, #28]
 80152fe:	e014      	b.n	801532a <_vfiprintf_r+0x156>
 8015300:	eba0 0308 	sub.w	r3, r0, r8
 8015304:	fa09 f303 	lsl.w	r3, r9, r3
 8015308:	4313      	orrs	r3, r2
 801530a:	9304      	str	r3, [sp, #16]
 801530c:	46a2      	mov	sl, r4
 801530e:	e7d2      	b.n	80152b6 <_vfiprintf_r+0xe2>
 8015310:	9b03      	ldr	r3, [sp, #12]
 8015312:	1d19      	adds	r1, r3, #4
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	9103      	str	r1, [sp, #12]
 8015318:	2b00      	cmp	r3, #0
 801531a:	bfbb      	ittet	lt
 801531c:	425b      	neglt	r3, r3
 801531e:	f042 0202 	orrlt.w	r2, r2, #2
 8015322:	9307      	strge	r3, [sp, #28]
 8015324:	9307      	strlt	r3, [sp, #28]
 8015326:	bfb8      	it	lt
 8015328:	9204      	strlt	r2, [sp, #16]
 801532a:	7823      	ldrb	r3, [r4, #0]
 801532c:	2b2e      	cmp	r3, #46	; 0x2e
 801532e:	d10c      	bne.n	801534a <_vfiprintf_r+0x176>
 8015330:	7863      	ldrb	r3, [r4, #1]
 8015332:	2b2a      	cmp	r3, #42	; 0x2a
 8015334:	d135      	bne.n	80153a2 <_vfiprintf_r+0x1ce>
 8015336:	9b03      	ldr	r3, [sp, #12]
 8015338:	1d1a      	adds	r2, r3, #4
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	9203      	str	r2, [sp, #12]
 801533e:	2b00      	cmp	r3, #0
 8015340:	bfb8      	it	lt
 8015342:	f04f 33ff 	movlt.w	r3, #4294967295
 8015346:	3402      	adds	r4, #2
 8015348:	9305      	str	r3, [sp, #20]
 801534a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015430 <_vfiprintf_r+0x25c>
 801534e:	7821      	ldrb	r1, [r4, #0]
 8015350:	2203      	movs	r2, #3
 8015352:	4650      	mov	r0, sl
 8015354:	f7ea ffc4 	bl	80002e0 <memchr>
 8015358:	b140      	cbz	r0, 801536c <_vfiprintf_r+0x198>
 801535a:	2340      	movs	r3, #64	; 0x40
 801535c:	eba0 000a 	sub.w	r0, r0, sl
 8015360:	fa03 f000 	lsl.w	r0, r3, r0
 8015364:	9b04      	ldr	r3, [sp, #16]
 8015366:	4303      	orrs	r3, r0
 8015368:	3401      	adds	r4, #1
 801536a:	9304      	str	r3, [sp, #16]
 801536c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015370:	482c      	ldr	r0, [pc, #176]	; (8015424 <_vfiprintf_r+0x250>)
 8015372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015376:	2206      	movs	r2, #6
 8015378:	f7ea ffb2 	bl	80002e0 <memchr>
 801537c:	2800      	cmp	r0, #0
 801537e:	d03f      	beq.n	8015400 <_vfiprintf_r+0x22c>
 8015380:	4b29      	ldr	r3, [pc, #164]	; (8015428 <_vfiprintf_r+0x254>)
 8015382:	bb1b      	cbnz	r3, 80153cc <_vfiprintf_r+0x1f8>
 8015384:	9b03      	ldr	r3, [sp, #12]
 8015386:	3307      	adds	r3, #7
 8015388:	f023 0307 	bic.w	r3, r3, #7
 801538c:	3308      	adds	r3, #8
 801538e:	9303      	str	r3, [sp, #12]
 8015390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015392:	443b      	add	r3, r7
 8015394:	9309      	str	r3, [sp, #36]	; 0x24
 8015396:	e767      	b.n	8015268 <_vfiprintf_r+0x94>
 8015398:	fb0c 3202 	mla	r2, ip, r2, r3
 801539c:	460c      	mov	r4, r1
 801539e:	2001      	movs	r0, #1
 80153a0:	e7a5      	b.n	80152ee <_vfiprintf_r+0x11a>
 80153a2:	2300      	movs	r3, #0
 80153a4:	3401      	adds	r4, #1
 80153a6:	9305      	str	r3, [sp, #20]
 80153a8:	4619      	mov	r1, r3
 80153aa:	f04f 0c0a 	mov.w	ip, #10
 80153ae:	4620      	mov	r0, r4
 80153b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153b4:	3a30      	subs	r2, #48	; 0x30
 80153b6:	2a09      	cmp	r2, #9
 80153b8:	d903      	bls.n	80153c2 <_vfiprintf_r+0x1ee>
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d0c5      	beq.n	801534a <_vfiprintf_r+0x176>
 80153be:	9105      	str	r1, [sp, #20]
 80153c0:	e7c3      	b.n	801534a <_vfiprintf_r+0x176>
 80153c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80153c6:	4604      	mov	r4, r0
 80153c8:	2301      	movs	r3, #1
 80153ca:	e7f0      	b.n	80153ae <_vfiprintf_r+0x1da>
 80153cc:	ab03      	add	r3, sp, #12
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	462a      	mov	r2, r5
 80153d2:	4b16      	ldr	r3, [pc, #88]	; (801542c <_vfiprintf_r+0x258>)
 80153d4:	a904      	add	r1, sp, #16
 80153d6:	4630      	mov	r0, r6
 80153d8:	f3af 8000 	nop.w
 80153dc:	4607      	mov	r7, r0
 80153de:	1c78      	adds	r0, r7, #1
 80153e0:	d1d6      	bne.n	8015390 <_vfiprintf_r+0x1bc>
 80153e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153e4:	07d9      	lsls	r1, r3, #31
 80153e6:	d405      	bmi.n	80153f4 <_vfiprintf_r+0x220>
 80153e8:	89ab      	ldrh	r3, [r5, #12]
 80153ea:	059a      	lsls	r2, r3, #22
 80153ec:	d402      	bmi.n	80153f4 <_vfiprintf_r+0x220>
 80153ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153f0:	f000 fc45 	bl	8015c7e <__retarget_lock_release_recursive>
 80153f4:	89ab      	ldrh	r3, [r5, #12]
 80153f6:	065b      	lsls	r3, r3, #25
 80153f8:	f53f af12 	bmi.w	8015220 <_vfiprintf_r+0x4c>
 80153fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153fe:	e711      	b.n	8015224 <_vfiprintf_r+0x50>
 8015400:	ab03      	add	r3, sp, #12
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	462a      	mov	r2, r5
 8015406:	4b09      	ldr	r3, [pc, #36]	; (801542c <_vfiprintf_r+0x258>)
 8015408:	a904      	add	r1, sp, #16
 801540a:	4630      	mov	r0, r6
 801540c:	f000 f880 	bl	8015510 <_printf_i>
 8015410:	e7e4      	b.n	80153dc <_vfiprintf_r+0x208>
 8015412:	bf00      	nop
 8015414:	080307c0 	.word	0x080307c0
 8015418:	080307e0 	.word	0x080307e0
 801541c:	080307a0 	.word	0x080307a0
 8015420:	0803076c 	.word	0x0803076c
 8015424:	08030776 	.word	0x08030776
 8015428:	00000000 	.word	0x00000000
 801542c:	080151af 	.word	0x080151af
 8015430:	08030772 	.word	0x08030772

08015434 <_printf_common>:
 8015434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015438:	4616      	mov	r6, r2
 801543a:	4699      	mov	r9, r3
 801543c:	688a      	ldr	r2, [r1, #8]
 801543e:	690b      	ldr	r3, [r1, #16]
 8015440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015444:	4293      	cmp	r3, r2
 8015446:	bfb8      	it	lt
 8015448:	4613      	movlt	r3, r2
 801544a:	6033      	str	r3, [r6, #0]
 801544c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015450:	4607      	mov	r7, r0
 8015452:	460c      	mov	r4, r1
 8015454:	b10a      	cbz	r2, 801545a <_printf_common+0x26>
 8015456:	3301      	adds	r3, #1
 8015458:	6033      	str	r3, [r6, #0]
 801545a:	6823      	ldr	r3, [r4, #0]
 801545c:	0699      	lsls	r1, r3, #26
 801545e:	bf42      	ittt	mi
 8015460:	6833      	ldrmi	r3, [r6, #0]
 8015462:	3302      	addmi	r3, #2
 8015464:	6033      	strmi	r3, [r6, #0]
 8015466:	6825      	ldr	r5, [r4, #0]
 8015468:	f015 0506 	ands.w	r5, r5, #6
 801546c:	d106      	bne.n	801547c <_printf_common+0x48>
 801546e:	f104 0a19 	add.w	sl, r4, #25
 8015472:	68e3      	ldr	r3, [r4, #12]
 8015474:	6832      	ldr	r2, [r6, #0]
 8015476:	1a9b      	subs	r3, r3, r2
 8015478:	42ab      	cmp	r3, r5
 801547a:	dc26      	bgt.n	80154ca <_printf_common+0x96>
 801547c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015480:	1e13      	subs	r3, r2, #0
 8015482:	6822      	ldr	r2, [r4, #0]
 8015484:	bf18      	it	ne
 8015486:	2301      	movne	r3, #1
 8015488:	0692      	lsls	r2, r2, #26
 801548a:	d42b      	bmi.n	80154e4 <_printf_common+0xb0>
 801548c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015490:	4649      	mov	r1, r9
 8015492:	4638      	mov	r0, r7
 8015494:	47c0      	blx	r8
 8015496:	3001      	adds	r0, #1
 8015498:	d01e      	beq.n	80154d8 <_printf_common+0xa4>
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	68e5      	ldr	r5, [r4, #12]
 801549e:	6832      	ldr	r2, [r6, #0]
 80154a0:	f003 0306 	and.w	r3, r3, #6
 80154a4:	2b04      	cmp	r3, #4
 80154a6:	bf08      	it	eq
 80154a8:	1aad      	subeq	r5, r5, r2
 80154aa:	68a3      	ldr	r3, [r4, #8]
 80154ac:	6922      	ldr	r2, [r4, #16]
 80154ae:	bf0c      	ite	eq
 80154b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80154b4:	2500      	movne	r5, #0
 80154b6:	4293      	cmp	r3, r2
 80154b8:	bfc4      	itt	gt
 80154ba:	1a9b      	subgt	r3, r3, r2
 80154bc:	18ed      	addgt	r5, r5, r3
 80154be:	2600      	movs	r6, #0
 80154c0:	341a      	adds	r4, #26
 80154c2:	42b5      	cmp	r5, r6
 80154c4:	d11a      	bne.n	80154fc <_printf_common+0xc8>
 80154c6:	2000      	movs	r0, #0
 80154c8:	e008      	b.n	80154dc <_printf_common+0xa8>
 80154ca:	2301      	movs	r3, #1
 80154cc:	4652      	mov	r2, sl
 80154ce:	4649      	mov	r1, r9
 80154d0:	4638      	mov	r0, r7
 80154d2:	47c0      	blx	r8
 80154d4:	3001      	adds	r0, #1
 80154d6:	d103      	bne.n	80154e0 <_printf_common+0xac>
 80154d8:	f04f 30ff 	mov.w	r0, #4294967295
 80154dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154e0:	3501      	adds	r5, #1
 80154e2:	e7c6      	b.n	8015472 <_printf_common+0x3e>
 80154e4:	18e1      	adds	r1, r4, r3
 80154e6:	1c5a      	adds	r2, r3, #1
 80154e8:	2030      	movs	r0, #48	; 0x30
 80154ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80154ee:	4422      	add	r2, r4
 80154f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80154f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80154f8:	3302      	adds	r3, #2
 80154fa:	e7c7      	b.n	801548c <_printf_common+0x58>
 80154fc:	2301      	movs	r3, #1
 80154fe:	4622      	mov	r2, r4
 8015500:	4649      	mov	r1, r9
 8015502:	4638      	mov	r0, r7
 8015504:	47c0      	blx	r8
 8015506:	3001      	adds	r0, #1
 8015508:	d0e6      	beq.n	80154d8 <_printf_common+0xa4>
 801550a:	3601      	adds	r6, #1
 801550c:	e7d9      	b.n	80154c2 <_printf_common+0x8e>
	...

08015510 <_printf_i>:
 8015510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015514:	7e0f      	ldrb	r7, [r1, #24]
 8015516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015518:	2f78      	cmp	r7, #120	; 0x78
 801551a:	4691      	mov	r9, r2
 801551c:	4680      	mov	r8, r0
 801551e:	460c      	mov	r4, r1
 8015520:	469a      	mov	sl, r3
 8015522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015526:	d807      	bhi.n	8015538 <_printf_i+0x28>
 8015528:	2f62      	cmp	r7, #98	; 0x62
 801552a:	d80a      	bhi.n	8015542 <_printf_i+0x32>
 801552c:	2f00      	cmp	r7, #0
 801552e:	f000 80d8 	beq.w	80156e2 <_printf_i+0x1d2>
 8015532:	2f58      	cmp	r7, #88	; 0x58
 8015534:	f000 80a3 	beq.w	801567e <_printf_i+0x16e>
 8015538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801553c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015540:	e03a      	b.n	80155b8 <_printf_i+0xa8>
 8015542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015546:	2b15      	cmp	r3, #21
 8015548:	d8f6      	bhi.n	8015538 <_printf_i+0x28>
 801554a:	a101      	add	r1, pc, #4	; (adr r1, 8015550 <_printf_i+0x40>)
 801554c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015550:	080155a9 	.word	0x080155a9
 8015554:	080155bd 	.word	0x080155bd
 8015558:	08015539 	.word	0x08015539
 801555c:	08015539 	.word	0x08015539
 8015560:	08015539 	.word	0x08015539
 8015564:	08015539 	.word	0x08015539
 8015568:	080155bd 	.word	0x080155bd
 801556c:	08015539 	.word	0x08015539
 8015570:	08015539 	.word	0x08015539
 8015574:	08015539 	.word	0x08015539
 8015578:	08015539 	.word	0x08015539
 801557c:	080156c9 	.word	0x080156c9
 8015580:	080155ed 	.word	0x080155ed
 8015584:	080156ab 	.word	0x080156ab
 8015588:	08015539 	.word	0x08015539
 801558c:	08015539 	.word	0x08015539
 8015590:	080156eb 	.word	0x080156eb
 8015594:	08015539 	.word	0x08015539
 8015598:	080155ed 	.word	0x080155ed
 801559c:	08015539 	.word	0x08015539
 80155a0:	08015539 	.word	0x08015539
 80155a4:	080156b3 	.word	0x080156b3
 80155a8:	682b      	ldr	r3, [r5, #0]
 80155aa:	1d1a      	adds	r2, r3, #4
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	602a      	str	r2, [r5, #0]
 80155b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80155b8:	2301      	movs	r3, #1
 80155ba:	e0a3      	b.n	8015704 <_printf_i+0x1f4>
 80155bc:	6820      	ldr	r0, [r4, #0]
 80155be:	6829      	ldr	r1, [r5, #0]
 80155c0:	0606      	lsls	r6, r0, #24
 80155c2:	f101 0304 	add.w	r3, r1, #4
 80155c6:	d50a      	bpl.n	80155de <_printf_i+0xce>
 80155c8:	680e      	ldr	r6, [r1, #0]
 80155ca:	602b      	str	r3, [r5, #0]
 80155cc:	2e00      	cmp	r6, #0
 80155ce:	da03      	bge.n	80155d8 <_printf_i+0xc8>
 80155d0:	232d      	movs	r3, #45	; 0x2d
 80155d2:	4276      	negs	r6, r6
 80155d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155d8:	485e      	ldr	r0, [pc, #376]	; (8015754 <_printf_i+0x244>)
 80155da:	230a      	movs	r3, #10
 80155dc:	e019      	b.n	8015612 <_printf_i+0x102>
 80155de:	680e      	ldr	r6, [r1, #0]
 80155e0:	602b      	str	r3, [r5, #0]
 80155e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80155e6:	bf18      	it	ne
 80155e8:	b236      	sxthne	r6, r6
 80155ea:	e7ef      	b.n	80155cc <_printf_i+0xbc>
 80155ec:	682b      	ldr	r3, [r5, #0]
 80155ee:	6820      	ldr	r0, [r4, #0]
 80155f0:	1d19      	adds	r1, r3, #4
 80155f2:	6029      	str	r1, [r5, #0]
 80155f4:	0601      	lsls	r1, r0, #24
 80155f6:	d501      	bpl.n	80155fc <_printf_i+0xec>
 80155f8:	681e      	ldr	r6, [r3, #0]
 80155fa:	e002      	b.n	8015602 <_printf_i+0xf2>
 80155fc:	0646      	lsls	r6, r0, #25
 80155fe:	d5fb      	bpl.n	80155f8 <_printf_i+0xe8>
 8015600:	881e      	ldrh	r6, [r3, #0]
 8015602:	4854      	ldr	r0, [pc, #336]	; (8015754 <_printf_i+0x244>)
 8015604:	2f6f      	cmp	r7, #111	; 0x6f
 8015606:	bf0c      	ite	eq
 8015608:	2308      	moveq	r3, #8
 801560a:	230a      	movne	r3, #10
 801560c:	2100      	movs	r1, #0
 801560e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015612:	6865      	ldr	r5, [r4, #4]
 8015614:	60a5      	str	r5, [r4, #8]
 8015616:	2d00      	cmp	r5, #0
 8015618:	bfa2      	ittt	ge
 801561a:	6821      	ldrge	r1, [r4, #0]
 801561c:	f021 0104 	bicge.w	r1, r1, #4
 8015620:	6021      	strge	r1, [r4, #0]
 8015622:	b90e      	cbnz	r6, 8015628 <_printf_i+0x118>
 8015624:	2d00      	cmp	r5, #0
 8015626:	d04d      	beq.n	80156c4 <_printf_i+0x1b4>
 8015628:	4615      	mov	r5, r2
 801562a:	fbb6 f1f3 	udiv	r1, r6, r3
 801562e:	fb03 6711 	mls	r7, r3, r1, r6
 8015632:	5dc7      	ldrb	r7, [r0, r7]
 8015634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015638:	4637      	mov	r7, r6
 801563a:	42bb      	cmp	r3, r7
 801563c:	460e      	mov	r6, r1
 801563e:	d9f4      	bls.n	801562a <_printf_i+0x11a>
 8015640:	2b08      	cmp	r3, #8
 8015642:	d10b      	bne.n	801565c <_printf_i+0x14c>
 8015644:	6823      	ldr	r3, [r4, #0]
 8015646:	07de      	lsls	r6, r3, #31
 8015648:	d508      	bpl.n	801565c <_printf_i+0x14c>
 801564a:	6923      	ldr	r3, [r4, #16]
 801564c:	6861      	ldr	r1, [r4, #4]
 801564e:	4299      	cmp	r1, r3
 8015650:	bfde      	ittt	le
 8015652:	2330      	movle	r3, #48	; 0x30
 8015654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015658:	f105 35ff 	addle.w	r5, r5, #4294967295
 801565c:	1b52      	subs	r2, r2, r5
 801565e:	6122      	str	r2, [r4, #16]
 8015660:	f8cd a000 	str.w	sl, [sp]
 8015664:	464b      	mov	r3, r9
 8015666:	aa03      	add	r2, sp, #12
 8015668:	4621      	mov	r1, r4
 801566a:	4640      	mov	r0, r8
 801566c:	f7ff fee2 	bl	8015434 <_printf_common>
 8015670:	3001      	adds	r0, #1
 8015672:	d14c      	bne.n	801570e <_printf_i+0x1fe>
 8015674:	f04f 30ff 	mov.w	r0, #4294967295
 8015678:	b004      	add	sp, #16
 801567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801567e:	4835      	ldr	r0, [pc, #212]	; (8015754 <_printf_i+0x244>)
 8015680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015684:	6829      	ldr	r1, [r5, #0]
 8015686:	6823      	ldr	r3, [r4, #0]
 8015688:	f851 6b04 	ldr.w	r6, [r1], #4
 801568c:	6029      	str	r1, [r5, #0]
 801568e:	061d      	lsls	r5, r3, #24
 8015690:	d514      	bpl.n	80156bc <_printf_i+0x1ac>
 8015692:	07df      	lsls	r7, r3, #31
 8015694:	bf44      	itt	mi
 8015696:	f043 0320 	orrmi.w	r3, r3, #32
 801569a:	6023      	strmi	r3, [r4, #0]
 801569c:	b91e      	cbnz	r6, 80156a6 <_printf_i+0x196>
 801569e:	6823      	ldr	r3, [r4, #0]
 80156a0:	f023 0320 	bic.w	r3, r3, #32
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	2310      	movs	r3, #16
 80156a8:	e7b0      	b.n	801560c <_printf_i+0xfc>
 80156aa:	6823      	ldr	r3, [r4, #0]
 80156ac:	f043 0320 	orr.w	r3, r3, #32
 80156b0:	6023      	str	r3, [r4, #0]
 80156b2:	2378      	movs	r3, #120	; 0x78
 80156b4:	4828      	ldr	r0, [pc, #160]	; (8015758 <_printf_i+0x248>)
 80156b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80156ba:	e7e3      	b.n	8015684 <_printf_i+0x174>
 80156bc:	0659      	lsls	r1, r3, #25
 80156be:	bf48      	it	mi
 80156c0:	b2b6      	uxthmi	r6, r6
 80156c2:	e7e6      	b.n	8015692 <_printf_i+0x182>
 80156c4:	4615      	mov	r5, r2
 80156c6:	e7bb      	b.n	8015640 <_printf_i+0x130>
 80156c8:	682b      	ldr	r3, [r5, #0]
 80156ca:	6826      	ldr	r6, [r4, #0]
 80156cc:	6961      	ldr	r1, [r4, #20]
 80156ce:	1d18      	adds	r0, r3, #4
 80156d0:	6028      	str	r0, [r5, #0]
 80156d2:	0635      	lsls	r5, r6, #24
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	d501      	bpl.n	80156dc <_printf_i+0x1cc>
 80156d8:	6019      	str	r1, [r3, #0]
 80156da:	e002      	b.n	80156e2 <_printf_i+0x1d2>
 80156dc:	0670      	lsls	r0, r6, #25
 80156de:	d5fb      	bpl.n	80156d8 <_printf_i+0x1c8>
 80156e0:	8019      	strh	r1, [r3, #0]
 80156e2:	2300      	movs	r3, #0
 80156e4:	6123      	str	r3, [r4, #16]
 80156e6:	4615      	mov	r5, r2
 80156e8:	e7ba      	b.n	8015660 <_printf_i+0x150>
 80156ea:	682b      	ldr	r3, [r5, #0]
 80156ec:	1d1a      	adds	r2, r3, #4
 80156ee:	602a      	str	r2, [r5, #0]
 80156f0:	681d      	ldr	r5, [r3, #0]
 80156f2:	6862      	ldr	r2, [r4, #4]
 80156f4:	2100      	movs	r1, #0
 80156f6:	4628      	mov	r0, r5
 80156f8:	f7ea fdf2 	bl	80002e0 <memchr>
 80156fc:	b108      	cbz	r0, 8015702 <_printf_i+0x1f2>
 80156fe:	1b40      	subs	r0, r0, r5
 8015700:	6060      	str	r0, [r4, #4]
 8015702:	6863      	ldr	r3, [r4, #4]
 8015704:	6123      	str	r3, [r4, #16]
 8015706:	2300      	movs	r3, #0
 8015708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801570c:	e7a8      	b.n	8015660 <_printf_i+0x150>
 801570e:	6923      	ldr	r3, [r4, #16]
 8015710:	462a      	mov	r2, r5
 8015712:	4649      	mov	r1, r9
 8015714:	4640      	mov	r0, r8
 8015716:	47d0      	blx	sl
 8015718:	3001      	adds	r0, #1
 801571a:	d0ab      	beq.n	8015674 <_printf_i+0x164>
 801571c:	6823      	ldr	r3, [r4, #0]
 801571e:	079b      	lsls	r3, r3, #30
 8015720:	d413      	bmi.n	801574a <_printf_i+0x23a>
 8015722:	68e0      	ldr	r0, [r4, #12]
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	4298      	cmp	r0, r3
 8015728:	bfb8      	it	lt
 801572a:	4618      	movlt	r0, r3
 801572c:	e7a4      	b.n	8015678 <_printf_i+0x168>
 801572e:	2301      	movs	r3, #1
 8015730:	4632      	mov	r2, r6
 8015732:	4649      	mov	r1, r9
 8015734:	4640      	mov	r0, r8
 8015736:	47d0      	blx	sl
 8015738:	3001      	adds	r0, #1
 801573a:	d09b      	beq.n	8015674 <_printf_i+0x164>
 801573c:	3501      	adds	r5, #1
 801573e:	68e3      	ldr	r3, [r4, #12]
 8015740:	9903      	ldr	r1, [sp, #12]
 8015742:	1a5b      	subs	r3, r3, r1
 8015744:	42ab      	cmp	r3, r5
 8015746:	dcf2      	bgt.n	801572e <_printf_i+0x21e>
 8015748:	e7eb      	b.n	8015722 <_printf_i+0x212>
 801574a:	2500      	movs	r5, #0
 801574c:	f104 0619 	add.w	r6, r4, #25
 8015750:	e7f5      	b.n	801573e <_printf_i+0x22e>
 8015752:	bf00      	nop
 8015754:	0803077d 	.word	0x0803077d
 8015758:	0803078e 	.word	0x0803078e

0801575c <_sbrk_r>:
 801575c:	b538      	push	{r3, r4, r5, lr}
 801575e:	4d06      	ldr	r5, [pc, #24]	; (8015778 <_sbrk_r+0x1c>)
 8015760:	2300      	movs	r3, #0
 8015762:	4604      	mov	r4, r0
 8015764:	4608      	mov	r0, r1
 8015766:	602b      	str	r3, [r5, #0]
 8015768:	f7ee fa7e 	bl	8003c68 <_sbrk>
 801576c:	1c43      	adds	r3, r0, #1
 801576e:	d102      	bne.n	8015776 <_sbrk_r+0x1a>
 8015770:	682b      	ldr	r3, [r5, #0]
 8015772:	b103      	cbz	r3, 8015776 <_sbrk_r+0x1a>
 8015774:	6023      	str	r3, [r4, #0]
 8015776:	bd38      	pop	{r3, r4, r5, pc}
 8015778:	24003094 	.word	0x24003094

0801577c <__swbuf_r>:
 801577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801577e:	460e      	mov	r6, r1
 8015780:	4614      	mov	r4, r2
 8015782:	4605      	mov	r5, r0
 8015784:	b118      	cbz	r0, 801578e <__swbuf_r+0x12>
 8015786:	6983      	ldr	r3, [r0, #24]
 8015788:	b90b      	cbnz	r3, 801578e <__swbuf_r+0x12>
 801578a:	f000 f9d9 	bl	8015b40 <__sinit>
 801578e:	4b21      	ldr	r3, [pc, #132]	; (8015814 <__swbuf_r+0x98>)
 8015790:	429c      	cmp	r4, r3
 8015792:	d12b      	bne.n	80157ec <__swbuf_r+0x70>
 8015794:	686c      	ldr	r4, [r5, #4]
 8015796:	69a3      	ldr	r3, [r4, #24]
 8015798:	60a3      	str	r3, [r4, #8]
 801579a:	89a3      	ldrh	r3, [r4, #12]
 801579c:	071a      	lsls	r2, r3, #28
 801579e:	d52f      	bpl.n	8015800 <__swbuf_r+0x84>
 80157a0:	6923      	ldr	r3, [r4, #16]
 80157a2:	b36b      	cbz	r3, 8015800 <__swbuf_r+0x84>
 80157a4:	6923      	ldr	r3, [r4, #16]
 80157a6:	6820      	ldr	r0, [r4, #0]
 80157a8:	1ac0      	subs	r0, r0, r3
 80157aa:	6963      	ldr	r3, [r4, #20]
 80157ac:	b2f6      	uxtb	r6, r6
 80157ae:	4283      	cmp	r3, r0
 80157b0:	4637      	mov	r7, r6
 80157b2:	dc04      	bgt.n	80157be <__swbuf_r+0x42>
 80157b4:	4621      	mov	r1, r4
 80157b6:	4628      	mov	r0, r5
 80157b8:	f000 f92e 	bl	8015a18 <_fflush_r>
 80157bc:	bb30      	cbnz	r0, 801580c <__swbuf_r+0x90>
 80157be:	68a3      	ldr	r3, [r4, #8]
 80157c0:	3b01      	subs	r3, #1
 80157c2:	60a3      	str	r3, [r4, #8]
 80157c4:	6823      	ldr	r3, [r4, #0]
 80157c6:	1c5a      	adds	r2, r3, #1
 80157c8:	6022      	str	r2, [r4, #0]
 80157ca:	701e      	strb	r6, [r3, #0]
 80157cc:	6963      	ldr	r3, [r4, #20]
 80157ce:	3001      	adds	r0, #1
 80157d0:	4283      	cmp	r3, r0
 80157d2:	d004      	beq.n	80157de <__swbuf_r+0x62>
 80157d4:	89a3      	ldrh	r3, [r4, #12]
 80157d6:	07db      	lsls	r3, r3, #31
 80157d8:	d506      	bpl.n	80157e8 <__swbuf_r+0x6c>
 80157da:	2e0a      	cmp	r6, #10
 80157dc:	d104      	bne.n	80157e8 <__swbuf_r+0x6c>
 80157de:	4621      	mov	r1, r4
 80157e0:	4628      	mov	r0, r5
 80157e2:	f000 f919 	bl	8015a18 <_fflush_r>
 80157e6:	b988      	cbnz	r0, 801580c <__swbuf_r+0x90>
 80157e8:	4638      	mov	r0, r7
 80157ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157ec:	4b0a      	ldr	r3, [pc, #40]	; (8015818 <__swbuf_r+0x9c>)
 80157ee:	429c      	cmp	r4, r3
 80157f0:	d101      	bne.n	80157f6 <__swbuf_r+0x7a>
 80157f2:	68ac      	ldr	r4, [r5, #8]
 80157f4:	e7cf      	b.n	8015796 <__swbuf_r+0x1a>
 80157f6:	4b09      	ldr	r3, [pc, #36]	; (801581c <__swbuf_r+0xa0>)
 80157f8:	429c      	cmp	r4, r3
 80157fa:	bf08      	it	eq
 80157fc:	68ec      	ldreq	r4, [r5, #12]
 80157fe:	e7ca      	b.n	8015796 <__swbuf_r+0x1a>
 8015800:	4621      	mov	r1, r4
 8015802:	4628      	mov	r0, r5
 8015804:	f000 f80c 	bl	8015820 <__swsetup_r>
 8015808:	2800      	cmp	r0, #0
 801580a:	d0cb      	beq.n	80157a4 <__swbuf_r+0x28>
 801580c:	f04f 37ff 	mov.w	r7, #4294967295
 8015810:	e7ea      	b.n	80157e8 <__swbuf_r+0x6c>
 8015812:	bf00      	nop
 8015814:	080307c0 	.word	0x080307c0
 8015818:	080307e0 	.word	0x080307e0
 801581c:	080307a0 	.word	0x080307a0

08015820 <__swsetup_r>:
 8015820:	4b32      	ldr	r3, [pc, #200]	; (80158ec <__swsetup_r+0xcc>)
 8015822:	b570      	push	{r4, r5, r6, lr}
 8015824:	681d      	ldr	r5, [r3, #0]
 8015826:	4606      	mov	r6, r0
 8015828:	460c      	mov	r4, r1
 801582a:	b125      	cbz	r5, 8015836 <__swsetup_r+0x16>
 801582c:	69ab      	ldr	r3, [r5, #24]
 801582e:	b913      	cbnz	r3, 8015836 <__swsetup_r+0x16>
 8015830:	4628      	mov	r0, r5
 8015832:	f000 f985 	bl	8015b40 <__sinit>
 8015836:	4b2e      	ldr	r3, [pc, #184]	; (80158f0 <__swsetup_r+0xd0>)
 8015838:	429c      	cmp	r4, r3
 801583a:	d10f      	bne.n	801585c <__swsetup_r+0x3c>
 801583c:	686c      	ldr	r4, [r5, #4]
 801583e:	89a3      	ldrh	r3, [r4, #12]
 8015840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015844:	0719      	lsls	r1, r3, #28
 8015846:	d42c      	bmi.n	80158a2 <__swsetup_r+0x82>
 8015848:	06dd      	lsls	r5, r3, #27
 801584a:	d411      	bmi.n	8015870 <__swsetup_r+0x50>
 801584c:	2309      	movs	r3, #9
 801584e:	6033      	str	r3, [r6, #0]
 8015850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015854:	81a3      	strh	r3, [r4, #12]
 8015856:	f04f 30ff 	mov.w	r0, #4294967295
 801585a:	e03e      	b.n	80158da <__swsetup_r+0xba>
 801585c:	4b25      	ldr	r3, [pc, #148]	; (80158f4 <__swsetup_r+0xd4>)
 801585e:	429c      	cmp	r4, r3
 8015860:	d101      	bne.n	8015866 <__swsetup_r+0x46>
 8015862:	68ac      	ldr	r4, [r5, #8]
 8015864:	e7eb      	b.n	801583e <__swsetup_r+0x1e>
 8015866:	4b24      	ldr	r3, [pc, #144]	; (80158f8 <__swsetup_r+0xd8>)
 8015868:	429c      	cmp	r4, r3
 801586a:	bf08      	it	eq
 801586c:	68ec      	ldreq	r4, [r5, #12]
 801586e:	e7e6      	b.n	801583e <__swsetup_r+0x1e>
 8015870:	0758      	lsls	r0, r3, #29
 8015872:	d512      	bpl.n	801589a <__swsetup_r+0x7a>
 8015874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015876:	b141      	cbz	r1, 801588a <__swsetup_r+0x6a>
 8015878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801587c:	4299      	cmp	r1, r3
 801587e:	d002      	beq.n	8015886 <__swsetup_r+0x66>
 8015880:	4630      	mov	r0, r6
 8015882:	f7ff fb9d 	bl	8014fc0 <_free_r>
 8015886:	2300      	movs	r3, #0
 8015888:	6363      	str	r3, [r4, #52]	; 0x34
 801588a:	89a3      	ldrh	r3, [r4, #12]
 801588c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015890:	81a3      	strh	r3, [r4, #12]
 8015892:	2300      	movs	r3, #0
 8015894:	6063      	str	r3, [r4, #4]
 8015896:	6923      	ldr	r3, [r4, #16]
 8015898:	6023      	str	r3, [r4, #0]
 801589a:	89a3      	ldrh	r3, [r4, #12]
 801589c:	f043 0308 	orr.w	r3, r3, #8
 80158a0:	81a3      	strh	r3, [r4, #12]
 80158a2:	6923      	ldr	r3, [r4, #16]
 80158a4:	b94b      	cbnz	r3, 80158ba <__swsetup_r+0x9a>
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80158ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80158b0:	d003      	beq.n	80158ba <__swsetup_r+0x9a>
 80158b2:	4621      	mov	r1, r4
 80158b4:	4630      	mov	r0, r6
 80158b6:	f000 fa09 	bl	8015ccc <__smakebuf_r>
 80158ba:	89a0      	ldrh	r0, [r4, #12]
 80158bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158c0:	f010 0301 	ands.w	r3, r0, #1
 80158c4:	d00a      	beq.n	80158dc <__swsetup_r+0xbc>
 80158c6:	2300      	movs	r3, #0
 80158c8:	60a3      	str	r3, [r4, #8]
 80158ca:	6963      	ldr	r3, [r4, #20]
 80158cc:	425b      	negs	r3, r3
 80158ce:	61a3      	str	r3, [r4, #24]
 80158d0:	6923      	ldr	r3, [r4, #16]
 80158d2:	b943      	cbnz	r3, 80158e6 <__swsetup_r+0xc6>
 80158d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80158d8:	d1ba      	bne.n	8015850 <__swsetup_r+0x30>
 80158da:	bd70      	pop	{r4, r5, r6, pc}
 80158dc:	0781      	lsls	r1, r0, #30
 80158de:	bf58      	it	pl
 80158e0:	6963      	ldrpl	r3, [r4, #20]
 80158e2:	60a3      	str	r3, [r4, #8]
 80158e4:	e7f4      	b.n	80158d0 <__swsetup_r+0xb0>
 80158e6:	2000      	movs	r0, #0
 80158e8:	e7f7      	b.n	80158da <__swsetup_r+0xba>
 80158ea:	bf00      	nop
 80158ec:	24000190 	.word	0x24000190
 80158f0:	080307c0 	.word	0x080307c0
 80158f4:	080307e0 	.word	0x080307e0
 80158f8:	080307a0 	.word	0x080307a0

080158fc <abort>:
 80158fc:	b508      	push	{r3, lr}
 80158fe:	2006      	movs	r0, #6
 8015900:	f000 fa58 	bl	8015db4 <raise>
 8015904:	2001      	movs	r0, #1
 8015906:	f7ee f937 	bl	8003b78 <_exit>
	...

0801590c <__sflush_r>:
 801590c:	898a      	ldrh	r2, [r1, #12]
 801590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015912:	4605      	mov	r5, r0
 8015914:	0710      	lsls	r0, r2, #28
 8015916:	460c      	mov	r4, r1
 8015918:	d458      	bmi.n	80159cc <__sflush_r+0xc0>
 801591a:	684b      	ldr	r3, [r1, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	dc05      	bgt.n	801592c <__sflush_r+0x20>
 8015920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015922:	2b00      	cmp	r3, #0
 8015924:	dc02      	bgt.n	801592c <__sflush_r+0x20>
 8015926:	2000      	movs	r0, #0
 8015928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801592c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801592e:	2e00      	cmp	r6, #0
 8015930:	d0f9      	beq.n	8015926 <__sflush_r+0x1a>
 8015932:	2300      	movs	r3, #0
 8015934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015938:	682f      	ldr	r7, [r5, #0]
 801593a:	602b      	str	r3, [r5, #0]
 801593c:	d032      	beq.n	80159a4 <__sflush_r+0x98>
 801593e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015940:	89a3      	ldrh	r3, [r4, #12]
 8015942:	075a      	lsls	r2, r3, #29
 8015944:	d505      	bpl.n	8015952 <__sflush_r+0x46>
 8015946:	6863      	ldr	r3, [r4, #4]
 8015948:	1ac0      	subs	r0, r0, r3
 801594a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801594c:	b10b      	cbz	r3, 8015952 <__sflush_r+0x46>
 801594e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015950:	1ac0      	subs	r0, r0, r3
 8015952:	2300      	movs	r3, #0
 8015954:	4602      	mov	r2, r0
 8015956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015958:	6a21      	ldr	r1, [r4, #32]
 801595a:	4628      	mov	r0, r5
 801595c:	47b0      	blx	r6
 801595e:	1c43      	adds	r3, r0, #1
 8015960:	89a3      	ldrh	r3, [r4, #12]
 8015962:	d106      	bne.n	8015972 <__sflush_r+0x66>
 8015964:	6829      	ldr	r1, [r5, #0]
 8015966:	291d      	cmp	r1, #29
 8015968:	d82c      	bhi.n	80159c4 <__sflush_r+0xb8>
 801596a:	4a2a      	ldr	r2, [pc, #168]	; (8015a14 <__sflush_r+0x108>)
 801596c:	40ca      	lsrs	r2, r1
 801596e:	07d6      	lsls	r6, r2, #31
 8015970:	d528      	bpl.n	80159c4 <__sflush_r+0xb8>
 8015972:	2200      	movs	r2, #0
 8015974:	6062      	str	r2, [r4, #4]
 8015976:	04d9      	lsls	r1, r3, #19
 8015978:	6922      	ldr	r2, [r4, #16]
 801597a:	6022      	str	r2, [r4, #0]
 801597c:	d504      	bpl.n	8015988 <__sflush_r+0x7c>
 801597e:	1c42      	adds	r2, r0, #1
 8015980:	d101      	bne.n	8015986 <__sflush_r+0x7a>
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	b903      	cbnz	r3, 8015988 <__sflush_r+0x7c>
 8015986:	6560      	str	r0, [r4, #84]	; 0x54
 8015988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801598a:	602f      	str	r7, [r5, #0]
 801598c:	2900      	cmp	r1, #0
 801598e:	d0ca      	beq.n	8015926 <__sflush_r+0x1a>
 8015990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015994:	4299      	cmp	r1, r3
 8015996:	d002      	beq.n	801599e <__sflush_r+0x92>
 8015998:	4628      	mov	r0, r5
 801599a:	f7ff fb11 	bl	8014fc0 <_free_r>
 801599e:	2000      	movs	r0, #0
 80159a0:	6360      	str	r0, [r4, #52]	; 0x34
 80159a2:	e7c1      	b.n	8015928 <__sflush_r+0x1c>
 80159a4:	6a21      	ldr	r1, [r4, #32]
 80159a6:	2301      	movs	r3, #1
 80159a8:	4628      	mov	r0, r5
 80159aa:	47b0      	blx	r6
 80159ac:	1c41      	adds	r1, r0, #1
 80159ae:	d1c7      	bne.n	8015940 <__sflush_r+0x34>
 80159b0:	682b      	ldr	r3, [r5, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d0c4      	beq.n	8015940 <__sflush_r+0x34>
 80159b6:	2b1d      	cmp	r3, #29
 80159b8:	d001      	beq.n	80159be <__sflush_r+0xb2>
 80159ba:	2b16      	cmp	r3, #22
 80159bc:	d101      	bne.n	80159c2 <__sflush_r+0xb6>
 80159be:	602f      	str	r7, [r5, #0]
 80159c0:	e7b1      	b.n	8015926 <__sflush_r+0x1a>
 80159c2:	89a3      	ldrh	r3, [r4, #12]
 80159c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159c8:	81a3      	strh	r3, [r4, #12]
 80159ca:	e7ad      	b.n	8015928 <__sflush_r+0x1c>
 80159cc:	690f      	ldr	r7, [r1, #16]
 80159ce:	2f00      	cmp	r7, #0
 80159d0:	d0a9      	beq.n	8015926 <__sflush_r+0x1a>
 80159d2:	0793      	lsls	r3, r2, #30
 80159d4:	680e      	ldr	r6, [r1, #0]
 80159d6:	bf08      	it	eq
 80159d8:	694b      	ldreq	r3, [r1, #20]
 80159da:	600f      	str	r7, [r1, #0]
 80159dc:	bf18      	it	ne
 80159de:	2300      	movne	r3, #0
 80159e0:	eba6 0807 	sub.w	r8, r6, r7
 80159e4:	608b      	str	r3, [r1, #8]
 80159e6:	f1b8 0f00 	cmp.w	r8, #0
 80159ea:	dd9c      	ble.n	8015926 <__sflush_r+0x1a>
 80159ec:	6a21      	ldr	r1, [r4, #32]
 80159ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159f0:	4643      	mov	r3, r8
 80159f2:	463a      	mov	r2, r7
 80159f4:	4628      	mov	r0, r5
 80159f6:	47b0      	blx	r6
 80159f8:	2800      	cmp	r0, #0
 80159fa:	dc06      	bgt.n	8015a0a <__sflush_r+0xfe>
 80159fc:	89a3      	ldrh	r3, [r4, #12]
 80159fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a02:	81a3      	strh	r3, [r4, #12]
 8015a04:	f04f 30ff 	mov.w	r0, #4294967295
 8015a08:	e78e      	b.n	8015928 <__sflush_r+0x1c>
 8015a0a:	4407      	add	r7, r0
 8015a0c:	eba8 0800 	sub.w	r8, r8, r0
 8015a10:	e7e9      	b.n	80159e6 <__sflush_r+0xda>
 8015a12:	bf00      	nop
 8015a14:	20400001 	.word	0x20400001

08015a18 <_fflush_r>:
 8015a18:	b538      	push	{r3, r4, r5, lr}
 8015a1a:	690b      	ldr	r3, [r1, #16]
 8015a1c:	4605      	mov	r5, r0
 8015a1e:	460c      	mov	r4, r1
 8015a20:	b913      	cbnz	r3, 8015a28 <_fflush_r+0x10>
 8015a22:	2500      	movs	r5, #0
 8015a24:	4628      	mov	r0, r5
 8015a26:	bd38      	pop	{r3, r4, r5, pc}
 8015a28:	b118      	cbz	r0, 8015a32 <_fflush_r+0x1a>
 8015a2a:	6983      	ldr	r3, [r0, #24]
 8015a2c:	b90b      	cbnz	r3, 8015a32 <_fflush_r+0x1a>
 8015a2e:	f000 f887 	bl	8015b40 <__sinit>
 8015a32:	4b14      	ldr	r3, [pc, #80]	; (8015a84 <_fflush_r+0x6c>)
 8015a34:	429c      	cmp	r4, r3
 8015a36:	d11b      	bne.n	8015a70 <_fflush_r+0x58>
 8015a38:	686c      	ldr	r4, [r5, #4]
 8015a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d0ef      	beq.n	8015a22 <_fflush_r+0xa>
 8015a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a44:	07d0      	lsls	r0, r2, #31
 8015a46:	d404      	bmi.n	8015a52 <_fflush_r+0x3a>
 8015a48:	0599      	lsls	r1, r3, #22
 8015a4a:	d402      	bmi.n	8015a52 <_fflush_r+0x3a>
 8015a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a4e:	f000 f915 	bl	8015c7c <__retarget_lock_acquire_recursive>
 8015a52:	4628      	mov	r0, r5
 8015a54:	4621      	mov	r1, r4
 8015a56:	f7ff ff59 	bl	801590c <__sflush_r>
 8015a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a5c:	07da      	lsls	r2, r3, #31
 8015a5e:	4605      	mov	r5, r0
 8015a60:	d4e0      	bmi.n	8015a24 <_fflush_r+0xc>
 8015a62:	89a3      	ldrh	r3, [r4, #12]
 8015a64:	059b      	lsls	r3, r3, #22
 8015a66:	d4dd      	bmi.n	8015a24 <_fflush_r+0xc>
 8015a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a6a:	f000 f908 	bl	8015c7e <__retarget_lock_release_recursive>
 8015a6e:	e7d9      	b.n	8015a24 <_fflush_r+0xc>
 8015a70:	4b05      	ldr	r3, [pc, #20]	; (8015a88 <_fflush_r+0x70>)
 8015a72:	429c      	cmp	r4, r3
 8015a74:	d101      	bne.n	8015a7a <_fflush_r+0x62>
 8015a76:	68ac      	ldr	r4, [r5, #8]
 8015a78:	e7df      	b.n	8015a3a <_fflush_r+0x22>
 8015a7a:	4b04      	ldr	r3, [pc, #16]	; (8015a8c <_fflush_r+0x74>)
 8015a7c:	429c      	cmp	r4, r3
 8015a7e:	bf08      	it	eq
 8015a80:	68ec      	ldreq	r4, [r5, #12]
 8015a82:	e7da      	b.n	8015a3a <_fflush_r+0x22>
 8015a84:	080307c0 	.word	0x080307c0
 8015a88:	080307e0 	.word	0x080307e0
 8015a8c:	080307a0 	.word	0x080307a0

08015a90 <std>:
 8015a90:	2300      	movs	r3, #0
 8015a92:	b510      	push	{r4, lr}
 8015a94:	4604      	mov	r4, r0
 8015a96:	e9c0 3300 	strd	r3, r3, [r0]
 8015a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a9e:	6083      	str	r3, [r0, #8]
 8015aa0:	8181      	strh	r1, [r0, #12]
 8015aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8015aa4:	81c2      	strh	r2, [r0, #14]
 8015aa6:	6183      	str	r3, [r0, #24]
 8015aa8:	4619      	mov	r1, r3
 8015aaa:	2208      	movs	r2, #8
 8015aac:	305c      	adds	r0, #92	; 0x5c
 8015aae:	f7ff fa69 	bl	8014f84 <memset>
 8015ab2:	4b05      	ldr	r3, [pc, #20]	; (8015ac8 <std+0x38>)
 8015ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8015ab6:	4b05      	ldr	r3, [pc, #20]	; (8015acc <std+0x3c>)
 8015ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8015aba:	4b05      	ldr	r3, [pc, #20]	; (8015ad0 <std+0x40>)
 8015abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015abe:	4b05      	ldr	r3, [pc, #20]	; (8015ad4 <std+0x44>)
 8015ac0:	6224      	str	r4, [r4, #32]
 8015ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8015ac4:	bd10      	pop	{r4, pc}
 8015ac6:	bf00      	nop
 8015ac8:	08015ded 	.word	0x08015ded
 8015acc:	08015e0f 	.word	0x08015e0f
 8015ad0:	08015e47 	.word	0x08015e47
 8015ad4:	08015e6b 	.word	0x08015e6b

08015ad8 <_cleanup_r>:
 8015ad8:	4901      	ldr	r1, [pc, #4]	; (8015ae0 <_cleanup_r+0x8>)
 8015ada:	f000 b8af 	b.w	8015c3c <_fwalk_reent>
 8015ade:	bf00      	nop
 8015ae0:	08015a19 	.word	0x08015a19

08015ae4 <__sfmoreglue>:
 8015ae4:	b570      	push	{r4, r5, r6, lr}
 8015ae6:	2268      	movs	r2, #104	; 0x68
 8015ae8:	1e4d      	subs	r5, r1, #1
 8015aea:	4355      	muls	r5, r2
 8015aec:	460e      	mov	r6, r1
 8015aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015af2:	f7ff fad1 	bl	8015098 <_malloc_r>
 8015af6:	4604      	mov	r4, r0
 8015af8:	b140      	cbz	r0, 8015b0c <__sfmoreglue+0x28>
 8015afa:	2100      	movs	r1, #0
 8015afc:	e9c0 1600 	strd	r1, r6, [r0]
 8015b00:	300c      	adds	r0, #12
 8015b02:	60a0      	str	r0, [r4, #8]
 8015b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015b08:	f7ff fa3c 	bl	8014f84 <memset>
 8015b0c:	4620      	mov	r0, r4
 8015b0e:	bd70      	pop	{r4, r5, r6, pc}

08015b10 <__sfp_lock_acquire>:
 8015b10:	4801      	ldr	r0, [pc, #4]	; (8015b18 <__sfp_lock_acquire+0x8>)
 8015b12:	f000 b8b3 	b.w	8015c7c <__retarget_lock_acquire_recursive>
 8015b16:	bf00      	nop
 8015b18:	24003091 	.word	0x24003091

08015b1c <__sfp_lock_release>:
 8015b1c:	4801      	ldr	r0, [pc, #4]	; (8015b24 <__sfp_lock_release+0x8>)
 8015b1e:	f000 b8ae 	b.w	8015c7e <__retarget_lock_release_recursive>
 8015b22:	bf00      	nop
 8015b24:	24003091 	.word	0x24003091

08015b28 <__sinit_lock_acquire>:
 8015b28:	4801      	ldr	r0, [pc, #4]	; (8015b30 <__sinit_lock_acquire+0x8>)
 8015b2a:	f000 b8a7 	b.w	8015c7c <__retarget_lock_acquire_recursive>
 8015b2e:	bf00      	nop
 8015b30:	24003092 	.word	0x24003092

08015b34 <__sinit_lock_release>:
 8015b34:	4801      	ldr	r0, [pc, #4]	; (8015b3c <__sinit_lock_release+0x8>)
 8015b36:	f000 b8a2 	b.w	8015c7e <__retarget_lock_release_recursive>
 8015b3a:	bf00      	nop
 8015b3c:	24003092 	.word	0x24003092

08015b40 <__sinit>:
 8015b40:	b510      	push	{r4, lr}
 8015b42:	4604      	mov	r4, r0
 8015b44:	f7ff fff0 	bl	8015b28 <__sinit_lock_acquire>
 8015b48:	69a3      	ldr	r3, [r4, #24]
 8015b4a:	b11b      	cbz	r3, 8015b54 <__sinit+0x14>
 8015b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b50:	f7ff bff0 	b.w	8015b34 <__sinit_lock_release>
 8015b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015b58:	6523      	str	r3, [r4, #80]	; 0x50
 8015b5a:	4b13      	ldr	r3, [pc, #76]	; (8015ba8 <__sinit+0x68>)
 8015b5c:	4a13      	ldr	r2, [pc, #76]	; (8015bac <__sinit+0x6c>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8015b62:	42a3      	cmp	r3, r4
 8015b64:	bf04      	itt	eq
 8015b66:	2301      	moveq	r3, #1
 8015b68:	61a3      	streq	r3, [r4, #24]
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	f000 f820 	bl	8015bb0 <__sfp>
 8015b70:	6060      	str	r0, [r4, #4]
 8015b72:	4620      	mov	r0, r4
 8015b74:	f000 f81c 	bl	8015bb0 <__sfp>
 8015b78:	60a0      	str	r0, [r4, #8]
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	f000 f818 	bl	8015bb0 <__sfp>
 8015b80:	2200      	movs	r2, #0
 8015b82:	60e0      	str	r0, [r4, #12]
 8015b84:	2104      	movs	r1, #4
 8015b86:	6860      	ldr	r0, [r4, #4]
 8015b88:	f7ff ff82 	bl	8015a90 <std>
 8015b8c:	68a0      	ldr	r0, [r4, #8]
 8015b8e:	2201      	movs	r2, #1
 8015b90:	2109      	movs	r1, #9
 8015b92:	f7ff ff7d 	bl	8015a90 <std>
 8015b96:	68e0      	ldr	r0, [r4, #12]
 8015b98:	2202      	movs	r2, #2
 8015b9a:	2112      	movs	r1, #18
 8015b9c:	f7ff ff78 	bl	8015a90 <std>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	61a3      	str	r3, [r4, #24]
 8015ba4:	e7d2      	b.n	8015b4c <__sinit+0xc>
 8015ba6:	bf00      	nop
 8015ba8:	08030768 	.word	0x08030768
 8015bac:	08015ad9 	.word	0x08015ad9

08015bb0 <__sfp>:
 8015bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bb2:	4607      	mov	r7, r0
 8015bb4:	f7ff ffac 	bl	8015b10 <__sfp_lock_acquire>
 8015bb8:	4b1e      	ldr	r3, [pc, #120]	; (8015c34 <__sfp+0x84>)
 8015bba:	681e      	ldr	r6, [r3, #0]
 8015bbc:	69b3      	ldr	r3, [r6, #24]
 8015bbe:	b913      	cbnz	r3, 8015bc6 <__sfp+0x16>
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f7ff ffbd 	bl	8015b40 <__sinit>
 8015bc6:	3648      	adds	r6, #72	; 0x48
 8015bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	d503      	bpl.n	8015bd8 <__sfp+0x28>
 8015bd0:	6833      	ldr	r3, [r6, #0]
 8015bd2:	b30b      	cbz	r3, 8015c18 <__sfp+0x68>
 8015bd4:	6836      	ldr	r6, [r6, #0]
 8015bd6:	e7f7      	b.n	8015bc8 <__sfp+0x18>
 8015bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015bdc:	b9d5      	cbnz	r5, 8015c14 <__sfp+0x64>
 8015bde:	4b16      	ldr	r3, [pc, #88]	; (8015c38 <__sfp+0x88>)
 8015be0:	60e3      	str	r3, [r4, #12]
 8015be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015be6:	6665      	str	r5, [r4, #100]	; 0x64
 8015be8:	f000 f847 	bl	8015c7a <__retarget_lock_init_recursive>
 8015bec:	f7ff ff96 	bl	8015b1c <__sfp_lock_release>
 8015bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015bf8:	6025      	str	r5, [r4, #0]
 8015bfa:	61a5      	str	r5, [r4, #24]
 8015bfc:	2208      	movs	r2, #8
 8015bfe:	4629      	mov	r1, r5
 8015c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015c04:	f7ff f9be 	bl	8014f84 <memset>
 8015c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015c10:	4620      	mov	r0, r4
 8015c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c14:	3468      	adds	r4, #104	; 0x68
 8015c16:	e7d9      	b.n	8015bcc <__sfp+0x1c>
 8015c18:	2104      	movs	r1, #4
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	f7ff ff62 	bl	8015ae4 <__sfmoreglue>
 8015c20:	4604      	mov	r4, r0
 8015c22:	6030      	str	r0, [r6, #0]
 8015c24:	2800      	cmp	r0, #0
 8015c26:	d1d5      	bne.n	8015bd4 <__sfp+0x24>
 8015c28:	f7ff ff78 	bl	8015b1c <__sfp_lock_release>
 8015c2c:	230c      	movs	r3, #12
 8015c2e:	603b      	str	r3, [r7, #0]
 8015c30:	e7ee      	b.n	8015c10 <__sfp+0x60>
 8015c32:	bf00      	nop
 8015c34:	08030768 	.word	0x08030768
 8015c38:	ffff0001 	.word	0xffff0001

08015c3c <_fwalk_reent>:
 8015c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c40:	4606      	mov	r6, r0
 8015c42:	4688      	mov	r8, r1
 8015c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015c48:	2700      	movs	r7, #0
 8015c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8015c52:	d505      	bpl.n	8015c60 <_fwalk_reent+0x24>
 8015c54:	6824      	ldr	r4, [r4, #0]
 8015c56:	2c00      	cmp	r4, #0
 8015c58:	d1f7      	bne.n	8015c4a <_fwalk_reent+0xe>
 8015c5a:	4638      	mov	r0, r7
 8015c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c60:	89ab      	ldrh	r3, [r5, #12]
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d907      	bls.n	8015c76 <_fwalk_reent+0x3a>
 8015c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	d003      	beq.n	8015c76 <_fwalk_reent+0x3a>
 8015c6e:	4629      	mov	r1, r5
 8015c70:	4630      	mov	r0, r6
 8015c72:	47c0      	blx	r8
 8015c74:	4307      	orrs	r7, r0
 8015c76:	3568      	adds	r5, #104	; 0x68
 8015c78:	e7e9      	b.n	8015c4e <_fwalk_reent+0x12>

08015c7a <__retarget_lock_init_recursive>:
 8015c7a:	4770      	bx	lr

08015c7c <__retarget_lock_acquire_recursive>:
 8015c7c:	4770      	bx	lr

08015c7e <__retarget_lock_release_recursive>:
 8015c7e:	4770      	bx	lr

08015c80 <__swhatbuf_r>:
 8015c80:	b570      	push	{r4, r5, r6, lr}
 8015c82:	460e      	mov	r6, r1
 8015c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c88:	2900      	cmp	r1, #0
 8015c8a:	b096      	sub	sp, #88	; 0x58
 8015c8c:	4614      	mov	r4, r2
 8015c8e:	461d      	mov	r5, r3
 8015c90:	da08      	bge.n	8015ca4 <__swhatbuf_r+0x24>
 8015c92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015c96:	2200      	movs	r2, #0
 8015c98:	602a      	str	r2, [r5, #0]
 8015c9a:	061a      	lsls	r2, r3, #24
 8015c9c:	d410      	bmi.n	8015cc0 <__swhatbuf_r+0x40>
 8015c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ca2:	e00e      	b.n	8015cc2 <__swhatbuf_r+0x42>
 8015ca4:	466a      	mov	r2, sp
 8015ca6:	f000 f907 	bl	8015eb8 <_fstat_r>
 8015caa:	2800      	cmp	r0, #0
 8015cac:	dbf1      	blt.n	8015c92 <__swhatbuf_r+0x12>
 8015cae:	9a01      	ldr	r2, [sp, #4]
 8015cb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015cb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015cb8:	425a      	negs	r2, r3
 8015cba:	415a      	adcs	r2, r3
 8015cbc:	602a      	str	r2, [r5, #0]
 8015cbe:	e7ee      	b.n	8015c9e <__swhatbuf_r+0x1e>
 8015cc0:	2340      	movs	r3, #64	; 0x40
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	6023      	str	r3, [r4, #0]
 8015cc6:	b016      	add	sp, #88	; 0x58
 8015cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08015ccc <__smakebuf_r>:
 8015ccc:	898b      	ldrh	r3, [r1, #12]
 8015cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015cd0:	079d      	lsls	r5, r3, #30
 8015cd2:	4606      	mov	r6, r0
 8015cd4:	460c      	mov	r4, r1
 8015cd6:	d507      	bpl.n	8015ce8 <__smakebuf_r+0x1c>
 8015cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015cdc:	6023      	str	r3, [r4, #0]
 8015cde:	6123      	str	r3, [r4, #16]
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	6163      	str	r3, [r4, #20]
 8015ce4:	b002      	add	sp, #8
 8015ce6:	bd70      	pop	{r4, r5, r6, pc}
 8015ce8:	ab01      	add	r3, sp, #4
 8015cea:	466a      	mov	r2, sp
 8015cec:	f7ff ffc8 	bl	8015c80 <__swhatbuf_r>
 8015cf0:	9900      	ldr	r1, [sp, #0]
 8015cf2:	4605      	mov	r5, r0
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	f7ff f9cf 	bl	8015098 <_malloc_r>
 8015cfa:	b948      	cbnz	r0, 8015d10 <__smakebuf_r+0x44>
 8015cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d00:	059a      	lsls	r2, r3, #22
 8015d02:	d4ef      	bmi.n	8015ce4 <__smakebuf_r+0x18>
 8015d04:	f023 0303 	bic.w	r3, r3, #3
 8015d08:	f043 0302 	orr.w	r3, r3, #2
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	e7e3      	b.n	8015cd8 <__smakebuf_r+0xc>
 8015d10:	4b0d      	ldr	r3, [pc, #52]	; (8015d48 <__smakebuf_r+0x7c>)
 8015d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d14:	89a3      	ldrh	r3, [r4, #12]
 8015d16:	6020      	str	r0, [r4, #0]
 8015d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d1c:	81a3      	strh	r3, [r4, #12]
 8015d1e:	9b00      	ldr	r3, [sp, #0]
 8015d20:	6163      	str	r3, [r4, #20]
 8015d22:	9b01      	ldr	r3, [sp, #4]
 8015d24:	6120      	str	r0, [r4, #16]
 8015d26:	b15b      	cbz	r3, 8015d40 <__smakebuf_r+0x74>
 8015d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d2c:	4630      	mov	r0, r6
 8015d2e:	f000 f8d5 	bl	8015edc <_isatty_r>
 8015d32:	b128      	cbz	r0, 8015d40 <__smakebuf_r+0x74>
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	f023 0303 	bic.w	r3, r3, #3
 8015d3a:	f043 0301 	orr.w	r3, r3, #1
 8015d3e:	81a3      	strh	r3, [r4, #12]
 8015d40:	89a0      	ldrh	r0, [r4, #12]
 8015d42:	4305      	orrs	r5, r0
 8015d44:	81a5      	strh	r5, [r4, #12]
 8015d46:	e7cd      	b.n	8015ce4 <__smakebuf_r+0x18>
 8015d48:	08015ad9 	.word	0x08015ad9

08015d4c <__malloc_lock>:
 8015d4c:	4801      	ldr	r0, [pc, #4]	; (8015d54 <__malloc_lock+0x8>)
 8015d4e:	f7ff bf95 	b.w	8015c7c <__retarget_lock_acquire_recursive>
 8015d52:	bf00      	nop
 8015d54:	24003090 	.word	0x24003090

08015d58 <__malloc_unlock>:
 8015d58:	4801      	ldr	r0, [pc, #4]	; (8015d60 <__malloc_unlock+0x8>)
 8015d5a:	f7ff bf90 	b.w	8015c7e <__retarget_lock_release_recursive>
 8015d5e:	bf00      	nop
 8015d60:	24003090 	.word	0x24003090

08015d64 <_raise_r>:
 8015d64:	291f      	cmp	r1, #31
 8015d66:	b538      	push	{r3, r4, r5, lr}
 8015d68:	4604      	mov	r4, r0
 8015d6a:	460d      	mov	r5, r1
 8015d6c:	d904      	bls.n	8015d78 <_raise_r+0x14>
 8015d6e:	2316      	movs	r3, #22
 8015d70:	6003      	str	r3, [r0, #0]
 8015d72:	f04f 30ff 	mov.w	r0, #4294967295
 8015d76:	bd38      	pop	{r3, r4, r5, pc}
 8015d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015d7a:	b112      	cbz	r2, 8015d82 <_raise_r+0x1e>
 8015d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d80:	b94b      	cbnz	r3, 8015d96 <_raise_r+0x32>
 8015d82:	4620      	mov	r0, r4
 8015d84:	f000 f830 	bl	8015de8 <_getpid_r>
 8015d88:	462a      	mov	r2, r5
 8015d8a:	4601      	mov	r1, r0
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d92:	f000 b817 	b.w	8015dc4 <_kill_r>
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d00a      	beq.n	8015db0 <_raise_r+0x4c>
 8015d9a:	1c59      	adds	r1, r3, #1
 8015d9c:	d103      	bne.n	8015da6 <_raise_r+0x42>
 8015d9e:	2316      	movs	r3, #22
 8015da0:	6003      	str	r3, [r0, #0]
 8015da2:	2001      	movs	r0, #1
 8015da4:	e7e7      	b.n	8015d76 <_raise_r+0x12>
 8015da6:	2400      	movs	r4, #0
 8015da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015dac:	4628      	mov	r0, r5
 8015dae:	4798      	blx	r3
 8015db0:	2000      	movs	r0, #0
 8015db2:	e7e0      	b.n	8015d76 <_raise_r+0x12>

08015db4 <raise>:
 8015db4:	4b02      	ldr	r3, [pc, #8]	; (8015dc0 <raise+0xc>)
 8015db6:	4601      	mov	r1, r0
 8015db8:	6818      	ldr	r0, [r3, #0]
 8015dba:	f7ff bfd3 	b.w	8015d64 <_raise_r>
 8015dbe:	bf00      	nop
 8015dc0:	24000190 	.word	0x24000190

08015dc4 <_kill_r>:
 8015dc4:	b538      	push	{r3, r4, r5, lr}
 8015dc6:	4d07      	ldr	r5, [pc, #28]	; (8015de4 <_kill_r+0x20>)
 8015dc8:	2300      	movs	r3, #0
 8015dca:	4604      	mov	r4, r0
 8015dcc:	4608      	mov	r0, r1
 8015dce:	4611      	mov	r1, r2
 8015dd0:	602b      	str	r3, [r5, #0]
 8015dd2:	f7ed fec1 	bl	8003b58 <_kill>
 8015dd6:	1c43      	adds	r3, r0, #1
 8015dd8:	d102      	bne.n	8015de0 <_kill_r+0x1c>
 8015dda:	682b      	ldr	r3, [r5, #0]
 8015ddc:	b103      	cbz	r3, 8015de0 <_kill_r+0x1c>
 8015dde:	6023      	str	r3, [r4, #0]
 8015de0:	bd38      	pop	{r3, r4, r5, pc}
 8015de2:	bf00      	nop
 8015de4:	24003094 	.word	0x24003094

08015de8 <_getpid_r>:
 8015de8:	f7ed beae 	b.w	8003b48 <_getpid>

08015dec <__sread>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	460c      	mov	r4, r1
 8015df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015df4:	f000 f894 	bl	8015f20 <_read_r>
 8015df8:	2800      	cmp	r0, #0
 8015dfa:	bfab      	itete	ge
 8015dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8015e00:	181b      	addge	r3, r3, r0
 8015e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015e06:	bfac      	ite	ge
 8015e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8015e0a:	81a3      	strhlt	r3, [r4, #12]
 8015e0c:	bd10      	pop	{r4, pc}

08015e0e <__swrite>:
 8015e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e12:	461f      	mov	r7, r3
 8015e14:	898b      	ldrh	r3, [r1, #12]
 8015e16:	05db      	lsls	r3, r3, #23
 8015e18:	4605      	mov	r5, r0
 8015e1a:	460c      	mov	r4, r1
 8015e1c:	4616      	mov	r6, r2
 8015e1e:	d505      	bpl.n	8015e2c <__swrite+0x1e>
 8015e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e24:	2302      	movs	r3, #2
 8015e26:	2200      	movs	r2, #0
 8015e28:	f000 f868 	bl	8015efc <_lseek_r>
 8015e2c:	89a3      	ldrh	r3, [r4, #12]
 8015e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e36:	81a3      	strh	r3, [r4, #12]
 8015e38:	4632      	mov	r2, r6
 8015e3a:	463b      	mov	r3, r7
 8015e3c:	4628      	mov	r0, r5
 8015e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e42:	f000 b817 	b.w	8015e74 <_write_r>

08015e46 <__sseek>:
 8015e46:	b510      	push	{r4, lr}
 8015e48:	460c      	mov	r4, r1
 8015e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e4e:	f000 f855 	bl	8015efc <_lseek_r>
 8015e52:	1c43      	adds	r3, r0, #1
 8015e54:	89a3      	ldrh	r3, [r4, #12]
 8015e56:	bf15      	itete	ne
 8015e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e62:	81a3      	strheq	r3, [r4, #12]
 8015e64:	bf18      	it	ne
 8015e66:	81a3      	strhne	r3, [r4, #12]
 8015e68:	bd10      	pop	{r4, pc}

08015e6a <__sclose>:
 8015e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e6e:	f000 b813 	b.w	8015e98 <_close_r>
	...

08015e74 <_write_r>:
 8015e74:	b538      	push	{r3, r4, r5, lr}
 8015e76:	4d07      	ldr	r5, [pc, #28]	; (8015e94 <_write_r+0x20>)
 8015e78:	4604      	mov	r4, r0
 8015e7a:	4608      	mov	r0, r1
 8015e7c:	4611      	mov	r1, r2
 8015e7e:	2200      	movs	r2, #0
 8015e80:	602a      	str	r2, [r5, #0]
 8015e82:	461a      	mov	r2, r3
 8015e84:	f7ed fe9f 	bl	8003bc6 <_write>
 8015e88:	1c43      	adds	r3, r0, #1
 8015e8a:	d102      	bne.n	8015e92 <_write_r+0x1e>
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	b103      	cbz	r3, 8015e92 <_write_r+0x1e>
 8015e90:	6023      	str	r3, [r4, #0]
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	24003094 	.word	0x24003094

08015e98 <_close_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4d06      	ldr	r5, [pc, #24]	; (8015eb4 <_close_r+0x1c>)
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	4608      	mov	r0, r1
 8015ea2:	602b      	str	r3, [r5, #0]
 8015ea4:	f7ed feab 	bl	8003bfe <_close>
 8015ea8:	1c43      	adds	r3, r0, #1
 8015eaa:	d102      	bne.n	8015eb2 <_close_r+0x1a>
 8015eac:	682b      	ldr	r3, [r5, #0]
 8015eae:	b103      	cbz	r3, 8015eb2 <_close_r+0x1a>
 8015eb0:	6023      	str	r3, [r4, #0]
 8015eb2:	bd38      	pop	{r3, r4, r5, pc}
 8015eb4:	24003094 	.word	0x24003094

08015eb8 <_fstat_r>:
 8015eb8:	b538      	push	{r3, r4, r5, lr}
 8015eba:	4d07      	ldr	r5, [pc, #28]	; (8015ed8 <_fstat_r+0x20>)
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	4608      	mov	r0, r1
 8015ec2:	4611      	mov	r1, r2
 8015ec4:	602b      	str	r3, [r5, #0]
 8015ec6:	f7ed fea6 	bl	8003c16 <_fstat>
 8015eca:	1c43      	adds	r3, r0, #1
 8015ecc:	d102      	bne.n	8015ed4 <_fstat_r+0x1c>
 8015ece:	682b      	ldr	r3, [r5, #0]
 8015ed0:	b103      	cbz	r3, 8015ed4 <_fstat_r+0x1c>
 8015ed2:	6023      	str	r3, [r4, #0]
 8015ed4:	bd38      	pop	{r3, r4, r5, pc}
 8015ed6:	bf00      	nop
 8015ed8:	24003094 	.word	0x24003094

08015edc <_isatty_r>:
 8015edc:	b538      	push	{r3, r4, r5, lr}
 8015ede:	4d06      	ldr	r5, [pc, #24]	; (8015ef8 <_isatty_r+0x1c>)
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	4604      	mov	r4, r0
 8015ee4:	4608      	mov	r0, r1
 8015ee6:	602b      	str	r3, [r5, #0]
 8015ee8:	f7ed fea5 	bl	8003c36 <_isatty>
 8015eec:	1c43      	adds	r3, r0, #1
 8015eee:	d102      	bne.n	8015ef6 <_isatty_r+0x1a>
 8015ef0:	682b      	ldr	r3, [r5, #0]
 8015ef2:	b103      	cbz	r3, 8015ef6 <_isatty_r+0x1a>
 8015ef4:	6023      	str	r3, [r4, #0]
 8015ef6:	bd38      	pop	{r3, r4, r5, pc}
 8015ef8:	24003094 	.word	0x24003094

08015efc <_lseek_r>:
 8015efc:	b538      	push	{r3, r4, r5, lr}
 8015efe:	4d07      	ldr	r5, [pc, #28]	; (8015f1c <_lseek_r+0x20>)
 8015f00:	4604      	mov	r4, r0
 8015f02:	4608      	mov	r0, r1
 8015f04:	4611      	mov	r1, r2
 8015f06:	2200      	movs	r2, #0
 8015f08:	602a      	str	r2, [r5, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	f7ed fe9e 	bl	8003c4c <_lseek>
 8015f10:	1c43      	adds	r3, r0, #1
 8015f12:	d102      	bne.n	8015f1a <_lseek_r+0x1e>
 8015f14:	682b      	ldr	r3, [r5, #0]
 8015f16:	b103      	cbz	r3, 8015f1a <_lseek_r+0x1e>
 8015f18:	6023      	str	r3, [r4, #0]
 8015f1a:	bd38      	pop	{r3, r4, r5, pc}
 8015f1c:	24003094 	.word	0x24003094

08015f20 <_read_r>:
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	4d07      	ldr	r5, [pc, #28]	; (8015f40 <_read_r+0x20>)
 8015f24:	4604      	mov	r4, r0
 8015f26:	4608      	mov	r0, r1
 8015f28:	4611      	mov	r1, r2
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	602a      	str	r2, [r5, #0]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	f7ed fe2c 	bl	8003b8c <_read>
 8015f34:	1c43      	adds	r3, r0, #1
 8015f36:	d102      	bne.n	8015f3e <_read_r+0x1e>
 8015f38:	682b      	ldr	r3, [r5, #0]
 8015f3a:	b103      	cbz	r3, 8015f3e <_read_r+0x1e>
 8015f3c:	6023      	str	r3, [r4, #0]
 8015f3e:	bd38      	pop	{r3, r4, r5, pc}
 8015f40:	24003094 	.word	0x24003094

08015f44 <_init>:
 8015f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f46:	bf00      	nop
 8015f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f4a:	bc08      	pop	{r3}
 8015f4c:	469e      	mov	lr, r3
 8015f4e:	4770      	bx	lr

08015f50 <_fini>:
 8015f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f52:	bf00      	nop
 8015f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f56:	bc08      	pop	{r3}
 8015f58:	469e      	mov	lr, r3
 8015f5a:	4770      	bx	lr
