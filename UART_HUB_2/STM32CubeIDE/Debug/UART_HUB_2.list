
UART_HUB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001a8c8  08015644  08015644  00025644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802ff0c  0802ff0c  0003ff0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802ff14  0802ff14  0003ff14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802ff18  0802ff18  0003ff18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000420  24000000  0802ff1c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000531c  24000420  0803033c  00040420  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400573c  0803033c  0004573c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040420  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031db2  00000000  00000000  0004044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005bca  00000000  00000000  00072200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022e8  00000000  00000000  00077dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002080  00000000  00000000  0007a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f383  00000000  00000000  0007c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003066d  00000000  00000000  000bb4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001727b0  00000000  00000000  000ebb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025e2d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009d54  00000000  00000000  0025e328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000420 	.word	0x24000420
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801562c 	.word	0x0801562c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000424 	.word	0x24000424
 80002dc:	0801562c 	.word	0x0801562c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <spi_init>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <spi_init+0x1c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6013      	str	r3, [r2, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2400043c 	.word	0x2400043c

080006a4 <spiTransmit>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <spiTransmit+0x48>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	887a      	ldrh	r2, [r7, #2]
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00c fc4d 	bl	800cf58 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 80006be:	bf00      	nop
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <spiTransmit+0x48>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00d fae9 	bl	800dc9c <HAL_SPI_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d1f7      	bne.n	80006c0 <spiTransmit+0x1c>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <spiTransmit+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf0c      	ite	eq
 80006dc:	2301      	moveq	r3, #1
 80006de:	2300      	movne	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	b25b      	sxtb	r3, r3
  }
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2400043c 	.word	0x2400043c

080006f0 <spiReceiv>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <spiReceiv+0x48>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	887a      	ldrh	r2, [r7, #2]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	f00c fd71 	bl	800d1ec <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 800070a:	bf00      	nop
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <spiReceiv+0x48>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f00d fac3 	bl	800dc9c <HAL_SPI_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f7      	bne.n	800070c <spiReceiv+0x1c>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <spiReceiv+0x48>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b25b      	sxtb	r3, r3
  }
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2400043c 	.word	0x2400043c

0800073c <bhy2_spi_read>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <bhy2_spi_read+0x64>)
 800074e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000752:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000754:	f107 030f 	add.w	r3, r7, #15
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffa2 	bl	80006a4 <spiTransmit>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <bhy2_spi_read+0x30>
    return IMU_ERR_SPI;
 8000766:	f06f 0301 	mvn.w	r3, #1
 800076a:	e014      	b.n	8000796 <bhy2_spi_read+0x5a>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	b29b      	uxth	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	68b8      	ldr	r0, [r7, #8]
 8000774:	f7ff ffbc 	bl	80006f0 <spiReceiv>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <bhy2_spi_read+0x4e>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <bhy2_spi_read+0x64>)
 8000780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000784:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e005      	b.n	8000796 <bhy2_spi_read+0x5a>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <bhy2_spi_read+0x64>)
 800078c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000790:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8000792:	f06f 0301 	mvn.w	r3, #1
  }
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58021000 	.word	0x58021000

080007a4 <bhy2_spi_write>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b40      	cmp	r3, #64	; 0x40
 80007b8:	d902      	bls.n	80007c0 <bhy2_spi_write+0x1c>
    return -4;
 80007ba:	f06f 0303 	mvn.w	r3, #3
 80007be:	e023      	b.n	8000808 <bhy2_spi_write+0x64>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <bhy2_spi_write+0x6c>)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <bhy2_spi_write+0x70>)
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f013 ff3f 	bl	8014650 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <bhy2_spi_write+0x74>)
 80007d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007d8:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <bhy2_spi_write+0x6c>)
 80007e6:	f7ff ff5d 	bl	80006a4 <spiTransmit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <bhy2_spi_write+0x58>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <bhy2_spi_write+0x74>)
 80007f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f6:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e005      	b.n	8000808 <bhy2_spi_write+0x64>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <bhy2_spi_write+0x74>)
 80007fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000802:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000440 	.word	0x24000440
 8000814:	24000441 	.word	0x24000441
 8000818:	58021000 	.word	0x58021000

0800081c <bhy2_delay_us>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082c:	d309      	bcc.n	8000842 <bhy2_delay_us+0x26>
    HAL_Delay( us / 1000 );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a08      	ldr	r2, [pc, #32]	; (8000854 <bhy2_delay_us+0x38>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	099b      	lsrs	r3, r3, #6
 8000838:	4618      	mov	r0, r3
 800083a:	f004 fc3f 	bl	80050bc <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 800083e:	e005      	b.n	800084c <bhy2_delay_us+0x30>
      __NOP();
 8000840:	bf00      	nop
    while( us-- ) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f9      	bne.n	8000840 <bhy2_delay_us+0x24>
  }
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	10624dd3 	.word	0x10624dd3

08000858 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	4613      	mov	r3, r2
 8000868:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d008      	beq.n	8000886 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8000874:	89ba      	ldrh	r2, [r7, #12]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7bf8      	ldrb	r0, [r7, #15]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	f001 f925 	bl	8001aca <bhy2_hif_get_regs>
 8000880:	4603      	mov	r3, r0
 8000882:	75fb      	strb	r3, [r7, #23]
 8000884:	e001      	b.n	800088a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000886:	23ff      	movs	r3, #255	; 0xff
 8000888:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800088a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b08f      	sub	sp, #60	; 0x3c
 800089a:	af02      	add	r7, sp, #8
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <bhy2_get_and_process_fifo+0x1c>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e11b      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 80008be:	f06f 0305 	mvn.w	r3, #5
 80008c2:	e115      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	2100      	movs	r1, #0
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f013 fecf 	bl	801466c <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2214      	movs	r2, #20
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f013 fec8 	bl	801466c <memset>

    fifos.buffer = work_buffer;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fa5f 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 80008f8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8000900:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000904:	e0f4      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 800090a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000912:	e042      	b.n	800099a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8000914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000918:	f003 0306 	and.w	r3, r3, #6
 800091c:	2b02      	cmp	r3, #2
 800091e:	d00e      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8000920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000924:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8000928:	2b04      	cmp	r3, #4
 800092a:	d008      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 800092c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000930:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8000934:	2b06      	cmp	r3, #6
 8000936:	d002      	beq.n	800093e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d020      	beq.n	8000980 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8000942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8000948:	6a3a      	ldr	r2, [r7, #32]
 800094a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 800094c:	1ad1      	subs	r1, r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f107 0214 	add.w	r2, r7, #20
 8000954:	f102 0408 	add.w	r4, r2, #8
 8000958:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	4623      	mov	r3, r4
 8000960:	f001 fad7 	bl	8001f12 <bhy2_hif_get_wakeup_fifo>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 800096a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8000972:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000976:	e0bb      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	4413      	add	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4619      	mov	r1, r3
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fbad 	bl	80010e8 <parse_fifo>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 800099a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <bhy2_get_and_process_fifo+0x112>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <bhy2_get_and_process_fifo+0x11a>
 80009a8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0b1      	beq.n	8000914 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80009b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80009bc:	e042      	b.n	8000a44 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	f003 0318 	and.w	r3, r3, #24
 80009c6:	2b08      	cmp	r3, #8
 80009c8:	d00e      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80009d2:	2b10      	cmp	r3, #16
 80009d4:	d008      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80009d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009da:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80009de:	2b18      	cmp	r3, #24
 80009e0:	d002      	beq.n	80009e8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d020      	beq.n	8000a2a <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80009f2:	6a3a      	ldr	r2, [r7, #32]
 80009f4:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80009f6:	1ad1      	subs	r1, r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f107 0214 	add.w	r2, r7, #20
 80009fe:	f102 0408 	add.w	r4, r2, #8
 8000a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4623      	mov	r3, r4
 8000a0a:	f001 fa98 	bl	8001f3e <bhy2_hif_get_nonwakeup_fifo>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8000a14:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8000a1c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a20:	e066      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	4413      	add	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4619      	mov	r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fb58 	bl	80010e8 <parse_fifo>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <bhy2_get_and_process_fifo+0x1bc>
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <bhy2_get_and_process_fifo+0x1c4>
 8000a52:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0b1      	beq.n	80009be <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8000a5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000a66:	e036      	b.n	8000ad6 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8000a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <bhy2_get_and_process_fifo+0x1e4>
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d020      	beq.n	8000abc <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8000a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8000a84:	6a3a      	ldr	r2, [r7, #32]
 8000a86:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8000a88:	1ad1      	subs	r1, r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f107 0214 	add.w	r2, r7, #20
 8000a90:	f102 0408 	add.w	r4, r2, #8
 8000a94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	f001 fab0 	bl	8002000 <bhy2_hif_get_status_fifo_async>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8000aa6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8000aae:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ab2:	e01d      	b.n	8000af0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	4413      	add	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 fb0f 	bl	80010e8 <parse_fifo>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <bhy2_get_and_process_fifo+0x24e>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <bhy2_get_and_process_fifo+0x256>
 8000ae4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0bd      	beq.n	8000a68 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8000aec:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3734      	adds	r7, #52	; 0x34
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}

08000af8 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b04:	6079      	str	r1, [r7, #4]
 8000b06:	603a      	str	r2, [r7, #0]
 8000b08:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00a      	beq.n	8000b2a <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fa84 	bl	800202c <bhy2_hif_exec_sensor_conf_cmd>
 8000b24:	4603      	mov	r3, r0
 8000b26:	75fb      	strb	r3, [r7, #23]
 8000b28:	e001      	b.n	8000b2e <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b2a:	23ff      	movs	r3, #255	; 0xff
 8000b2c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f001 f8e8 	bl	8001d28 <bhy2_hif_get_product_id>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b5e:	23ff      	movs	r3, #255	; 0xff
 8000b60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f001 f8de 	bl	8001d48 <bhy2_hif_get_kernel_version>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	e001      	b.n	8000b96 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f001 f8e8 	bl	8001d90 <bhy2_hif_get_boot_status>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e001      	b.n	8000bca <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000bc6:	23ff      	movs	r3, #255	; 0xff
 8000bc8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af02      	add	r7, sp, #8
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00d      	beq.n	8000c0a <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f240 101f 	movw	r0, #287	; 0x11f
 8000c00:	f001 f80a 	bl	8001c18 <bhy2_hif_get_parameter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000c0a:	23ff      	movs	r3, #255	; 0xff
 8000c0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <bhy2_upload_firmware_to_ram+0x1c>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	75fb      	strb	r3, [r7, #23]
 8000c3a:	e007      	b.n	8000c4c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f001 f90d 	bl	8001e62 <bhy2_hif_upload_firmware_to_ram>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c6a:	23ff      	movs	r3, #255	; 0xff
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e005      	b.n	8000c7c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f932 	bl	8001edc <bhy2_hif_boot_program_ram>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e007      	b.n	8000cb4 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	1df9      	adds	r1, r7, #7
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 ff45 	bl	8001b3a <bhy2_hif_set_regs>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d102      	bne.n	8000cda <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8000cd4:	23ff      	movs	r3, #255	; 0xff
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e007      	b.n	8000cea <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f000 fef2 	bl	8001aca <bhy2_hif_get_regs>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d0a:	23ff      	movs	r3, #255	; 0xff
 8000d0c:	73fb      	strb	r3, [r7, #15]
 8000d0e:	e006      	b.n	8000d1e <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f001 f84b 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	6039      	str	r1, [r7, #0]
 8000d34:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e007      	b.n	8000d56 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f000 fef4 	bl	8001b3a <bhy2_hif_set_regs>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e005      	b.n	8000d86 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 f827 	bl	8001dd0 <bhy2_hif_reset>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b08a      	sub	sp, #40	; 0x28
 8000d96:	af04      	add	r7, sp, #16
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d014      	beq.n	8000dd6 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8000dac:	f640 1238 	movw	r2, #2360	; 0x938
 8000db0:	2100      	movs	r1, #0
 8000db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db4:	f013 fc5a 	bl	801466c <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	7bf8      	ldrb	r0, [r7, #15]
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	f000 fe3e 	bl	8001a4c <bhy2_hif_init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75fb      	strb	r3, [r7, #23]
 8000dd4:	e001      	b.n	8000dda <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b087      	sub	sp, #28
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <bhy2_register_fifo_parse_callback+0x20>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8000e06:	23ff      	movs	r3, #255	; 0xff
 8000e08:	75fb      	strb	r3, [r7, #23]
 8000e0a:	e013      	b.n	8000e34 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4413      	add	r3, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	3318      	adds	r3, #24
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8000e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b092      	sub	sp, #72	; 0x48
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8000e52:	23ff      	movs	r3, #255	; 0xff
 8000e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000e58:	e079      	b.n	8000f4e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff feb8 	bl	8000bd6 <bhy2_get_virt_sensor_list>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8000e6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d16c      	bne.n	8000f4e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000e80:	e041      	b.n	8000f06 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8000e82:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8000e8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	2201      	movs	r2, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8000e9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ea2:	3348      	adds	r3, #72	; 0x48
 8000ea4:	443b      	add	r3, r7
 8000ea6:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8000eaa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d022      	beq.n	8000efc <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ebc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 f8e6 	bl	8002092 <bhy2_hif_get_sensor_info>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8000ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d113      	bne.n	8000efc <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8000ed4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8000edc:	23f8      	movs	r3, #248	; 0xf8
 8000ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8000ee2:	e018      	b.n	8000f16 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8000ee4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000ee8:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	331c      	adds	r3, #28
 8000ef8:	4602      	mov	r2, r0
 8000efa:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8000efc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f00:	3301      	adds	r3, #1
 8000f02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f0a:	2bf4      	cmp	r3, #244	; 0xf4
 8000f0c:	d803      	bhi.n	8000f16 <bhy2_update_virtual_sensor_list+0xd2>
 8000f0e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0b5      	beq.n	8000e82 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8000f16:	23ff      	movs	r3, #255	; 0xff
 8000f18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f1c:	e013      	b.n	8000f46 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8000f1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f22:	3bf5      	subs	r3, #245	; 0xf5
 8000f24:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <bhy2_update_virtual_sensor_list+0x118>)
 8000f2a:	5cc8      	ldrb	r0, [r1, r3]
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	331c      	adds	r3, #28
 8000f38:	4602      	mov	r2, r0
 8000f3a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8000f3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f40:	3b01      	subs	r3, #1
 8000f42:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000f46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f4a:	2bf4      	cmp	r3, #244	; 0xf4
 8000f4c:	d8e7      	bhi.n	8000f1e <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8000f4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3748      	adds	r7, #72	; 0x48
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08015714 	.word	0x08015714

08000f60 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <bhy2_get_error_value+0x1a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e007      	b.n	8000f90 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2201      	movs	r2, #1
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	202e      	movs	r0, #46	; 0x2e
 8000f88:	f7ff fc66 	bl	8000858 <bhy2_get_regs>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d04e      	beq.n	8001052 <get_callback_info+0xb6>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04b      	beq.n	8001052 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3318      	adds	r3, #24
 8000fca:	4602      	mov	r2, r0
 8000fcc:	3304      	adds	r3, #4
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	6010      	str	r0, [r2, #0]
 8000fd4:	6051      	str	r1, [r2, #4]
 8000fd6:	7a1b      	ldrb	r3, [r3, #8]
 8000fd8:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2bf4      	cmp	r3, #244	; 0xf4
 8000fde:	d91b      	bls.n	8001018 <get_callback_info+0x7c>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d117      	bne.n	8001018 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2200      	movs	r2, #0
 8000fec:	705a      	strb	r2, [r3, #1]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	709a      	strb	r2, [r3, #2]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	70da      	strb	r2, [r3, #3]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	715a      	strb	r2, [r3, #5]
 8001000:	2200      	movs	r2, #0
 8001002:	719a      	strb	r2, [r3, #6]
 8001004:	2200      	movs	r2, #0
 8001006:	71da      	strb	r2, [r3, #7]
 8001008:	2200      	movs	r2, #0
 800100a:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3bf5      	subs	r3, #245	; 0xf5
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <get_callback_info+0xd0>)
 8001012:	5cd2      	ldrb	r2, [r2, r3]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d11c      	bne.n	8001058 <get_callback_info+0xbc>
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2200      	movs	r2, #0
 800102a:	705a      	strb	r2, [r3, #1]
 800102c:	2200      	movs	r2, #0
 800102e:	709a      	strb	r2, [r3, #2]
 8001030:	2200      	movs	r2, #0
 8001032:	70da      	strb	r2, [r3, #3]
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2200      	movs	r2, #0
 800103c:	715a      	strb	r2, [r3, #5]
 800103e:	2200      	movs	r2, #0
 8001040:	719a      	strb	r2, [r3, #6]
 8001042:	2200      	movs	r2, #0
 8001044:	71da      	strb	r2, [r3, #7]
 8001046:	2200      	movs	r2, #0
 8001048:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8001050:	e002      	b.n	8001058 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	75fb      	strb	r3, [r7, #23]
 8001056:	e000      	b.n	800105a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8001058:	bf00      	nop
    }

    return rslt;
 800105a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	08015714 	.word	0x08015714

08001070 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	460b      	mov	r3, r1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	441a      	add	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d803      	bhi.n	8001096 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e002      	b.n	800109c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d808      	bhi.n	80010d4 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	441a      	add	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e001      	b.n	80010d8 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80010d4:	23f9      	movs	r3, #249	; 0xf9
 80010d6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	b099      	sub	sp, #100	; 0x64
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80010f4:	627a      	str	r2, [r7, #36]	; 0x24
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8001112:	e16a      	b.n	80013ea <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8001128:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffb9 	bl	80010aa <get_time_stamp>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800113e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <parse_fifo+0x64>
        {
            return rslt;
 8001146:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800114a:	e191      	b.n	8001470 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 800114c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001150:	2b00      	cmp	r3, #0
 8001152:	d025      	beq.n	80011a0 <parse_fifo+0xb8>
 8001154:	2b00      	cmp	r3, #0
 8001156:	f2c0 80f6 	blt.w	8001346 <parse_fifo+0x25e>
 800115a:	2bff      	cmp	r3, #255	; 0xff
 800115c:	f300 80f3 	bgt.w	8001346 <parse_fifo+0x25e>
 8001160:	2bf5      	cmp	r3, #245	; 0xf5
 8001162:	f2c0 80f0 	blt.w	8001346 <parse_fifo+0x25e>
 8001166:	3bf5      	subs	r3, #245	; 0xf5
 8001168:	2b0a      	cmp	r3, #10
 800116a:	f200 80ec 	bhi.w	8001346 <parse_fifo+0x25e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <parse_fifo+0x8c>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ad 	.word	0x080011ad
 8001178:	08001215 	.word	0x08001215
 800117c:	08001293 	.word	0x08001293
 8001180:	08001347 	.word	0x08001347
 8001184:	08001347 	.word	0x08001347
 8001188:	08001347 	.word	0x08001347
 800118c:	080011ad 	.word	0x080011ad
 8001190:	08001215 	.word	0x08001215
 8001194:	08001293 	.word	0x08001293
 8001198:	08001347 	.word	0x08001347
 800119c:	080011a1 	.word	0x080011a1
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	601a      	str	r2, [r3, #0]
                break;
 80011aa:	e11e      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80011ac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80011b0:	461a      	mov	r2, r3
 80011b2:	2102      	movs	r1, #2
 80011b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b6:	f7ff ff5b 	bl	8001070 <get_buffer_status>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80011c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <parse_fifo+0xe6>
                {
                    return rslt;
 80011c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80011cc:	e150      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80011ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d000      	beq.n	80011d8 <parse_fifo+0xf0>
                {
                    break;
 80011d6:	e108      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80011d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e4:	3301      	adds	r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	469a      	mov	sl, r3
 80011f0:	4693      	mov	fp, r2
 80011f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f4:	eb10 020a 	adds.w	r2, r0, sl
 80011f8:	61ba      	str	r2, [r7, #24]
 80011fa:	eb41 020b 	adc.w	r2, r1, fp
 80011fe:	61fa      	str	r2, [r7, #28]
 8001200:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001204:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c9a      	adds	r2, r3, #2
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	601a      	str	r2, [r3, #0]
                break;
 8001212:	e0ea      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8001214:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001218:	461a      	mov	r2, r3
 800121a:	2103      	movs	r1, #3
 800121c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800121e:	f7ff ff27 	bl	8001070 <get_buffer_status>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8001228:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <parse_fifo+0x14e>
                {
                    return rslt;
 8001230:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001234:	e11c      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8001236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800123a:	2b00      	cmp	r3, #0
 800123c:	d000      	beq.n	8001240 <parse_fifo+0x158>
                {
                    break;
 800123e:	e0d4      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124c:	3301      	adds	r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b21c      	sxth	r4, r3
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800125a:	3302      	adds	r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29b      	uxth	r3, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	461d      	mov	r5, r3
 8001270:	4616      	mov	r6, r2
 8001272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001274:	1942      	adds	r2, r0, r5
 8001276:	613a      	str	r2, [r7, #16]
 8001278:	eb41 0206 	adc.w	r2, r1, r6
 800127c:	617a      	str	r2, [r7, #20]
 800127e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001282:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1cda      	adds	r2, r3, #3
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	601a      	str	r2, [r3, #0]
                break;
 8001290:	e0ab      	b.n	80013ea <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 8001292:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001296:	461a      	mov	r2, r3
 8001298:	2106      	movs	r1, #6
 800129a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129c:	f7ff fee8 	bl	8001070 <get_buffer_status>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80012a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <parse_fifo+0x1cc>
                {
                    return rslt;
 80012ae:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80012b2:	e0dd      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80012b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d000      	beq.n	80012be <parse_fifo+0x1d6>
                {
                    break;
 80012bc:	e095      	b.n	80013ea <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c4:	3301      	adds	r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d2:	3302      	adds	r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4319      	orrs	r1, r3
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e2:	3303      	adds	r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	4319      	orrs	r1, r3
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f2:	3304      	adds	r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	430b      	orrs	r3, r1
 80012fc:	2200      	movs	r2, #0
 80012fe:	4698      	mov	r8, r3
 8001300:	4691      	mov	r9, r2
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	691a      	ldr	r2, [r3, #16]
 8001306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001308:	3305      	adds	r3, #5
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2200      	movs	r2, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	60fa      	str	r2, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	000b      	movs	r3, r1
 8001322:	2200      	movs	r2, #0
 8001324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001326:	ea48 0002 	orr.w	r0, r8, r2
 800132a:	6038      	str	r0, [r7, #0]
 800132c:	ea49 0303 	orr.w	r3, r9, r3
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001336:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1d9a      	adds	r2, r3, #6
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	601a      	str	r2, [r3, #0]
                break;
 8001344:	e051      	b.n	80013ea <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8001346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800134a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe23 	bl	8000f9c <get_callback_info>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 800135c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <parse_fifo+0x282>
                {
                    return rslt;
 8001364:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001368:	e082      	b.n	8001470 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 800136a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800136e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001372:	461a      	mov	r2, r3
 8001374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001376:	f7ff fe7b 	bl	8001070 <get_buffer_status>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8001380:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <parse_fifo+0x2a6>
                {
                    return rslt;
 8001388:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800138c:	e070      	b.n	8001470 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800138e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001392:	2b00      	cmp	r3, #0
 8001394:	d000      	beq.n	8001398 <parse_fifo+0x2b0>
                {
                    break;
 8001396:	e028      	b.n	80013ea <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8001398:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01c      	beq.n	80013da <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a6:	3301      	adds	r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80013b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80013b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80013bc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 80013c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 80013c8:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 80013cc:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 80013d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80013e2:	441a      	add	r2, r3
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	601a      	str	r2, [r3, #0]
                break;
 80013e8:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d204      	bcs.n	8001400 <parse_fifo+0x318>
 80013f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f43f ae8a 	beq.w	8001114 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d031      	beq.n	800146c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d202      	bcs.n	800141a <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8001414:	f06f 0301 	mvn.w	r3, #1
 8001418:	e02a      	b.n	8001470 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01d      	beq.n	800146c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001436:	e013      	b.n	8001460 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001444:	440b      	add	r3, r1
 8001446:	441a      	add	r2, r3
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144a:	6919      	ldr	r1, [r3, #16]
 800144c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001450:	440b      	add	r3, r1
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8001456:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800145a:	3301      	adds	r3, #1
 800145c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001460:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3e5      	bcc.n	8001438 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 800146c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8001470:	4618      	mov	r0, r3
 8001472:	3764      	adds	r7, #100	; 0x64
 8001474:	46bd      	mov	sp, r7
 8001476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800147a:	bf00      	nop

0800147c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b0cf      	sub	sp, #316	; 0x13c
 8001480:	af00      	add	r7, sp, #0
 8001482:	4604      	mov	r4, r0
 8001484:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001488:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800148c:	6001      	str	r1, [r0, #0]
 800148e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001492:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8001496:	600a      	str	r2, [r1, #0]
 8001498:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800149c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80014aa:	4622      	mov	r2, r4
 80014ac:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80014b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 81af 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
 80014be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <bhy2_hif_exec_cmd_generic+0x60>
 80014cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 81a0 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
 80014dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <bhy2_hif_exec_cmd_generic+0x78>
 80014e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014e8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8194 	beq.w	800181c <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80014f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8188 	beq.w	8001810 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8001500:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001504:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001508:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8001514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 800151c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001524:	4413      	add	r3, r2
 8001526:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800152a:	e003      	b.n	8001534 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 800152c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001530:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8001534:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8001540:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3301      	adds	r3, #1
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800154e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001552:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800155e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001562:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8001564:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2da      	uxtb	r2, r3
 8001574:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001578:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800157c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800157e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001582:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d113      	bne.n	80015b4 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 800158c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001598:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800159c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800159e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015b0:	70da      	strb	r2, [r3, #3]
 80015b2:	e010      	b.n	80015d6 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80015b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015be:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015c2:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015d4:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80015dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80015e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80015e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015ec:	4413      	add	r3, r2
 80015ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80015f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80015fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001604:	429a      	cmp	r2, r3
 8001606:	f240 80f9 	bls.w	80017fc <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 800160a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8001614:	e0f2      	b.n	80017fc <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8001616:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800161a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161e:	4413      	add	r3, r2
 8001620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001624:	429a      	cmp	r2, r3
 8001626:	d20b      	bcs.n	8001640 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8001628:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800162c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8001630:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001634:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800163e:	e020      	b.n	8001682 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8001640:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001644:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001648:	4413      	add	r3, r2
 800164a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800164e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8001656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8001662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3301      	adds	r3, #1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8001670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001678:	d903      	bls.n	8001682 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8001682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001686:	2b00      	cmp	r3, #0
 8001688:	d07e      	beq.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 800168a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001698:	4413      	add	r3, r2
 800169a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800169e:	429a      	cmp	r2, r3
 80016a0:	d315      	bcc.n	80016ce <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016aa:	18d0      	adds	r0, r2, r3
 80016ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80016ba:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80016c6:	4619      	mov	r1, r3
 80016c8:	f012 ffc2 	bl	8014650 <memcpy>
 80016cc:	e05c      	b.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 80016ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d93b      	bls.n	8001758 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80016e0:	f107 0214 	add.w	r2, r7, #20
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e8:	18d0      	adds	r0, r2, r3
 80016ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80016f8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	18d1      	adds	r1, r2, r3
 8001700:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001704:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001708:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	461a      	mov	r2, r3
 8001712:	f012 ff9d 	bl	8014650 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8001716:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800171a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800171e:	441a      	add	r2, r3
 8001720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001724:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f107 0214 	add.w	r2, r7, #20
 8001730:	18d0      	adds	r0, r2, r3
 8001732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001736:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001746:	441a      	add	r2, r3
 8001748:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800174c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	f012 ff7d 	bl	8014650 <memcpy>
 8001756:	e017      	b.n	8001788 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8001758:	f107 0214 	add.w	r2, r7, #20
 800175c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001760:	18d0      	adds	r0, r2, r3
 8001762:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001766:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001776:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001782:	4619      	mov	r1, r3
 8001784:	f012 ff64 	bl	8014650 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8001788:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800178c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001790:	4413      	add	r3, r2
 8001792:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001796:	429a      	cmp	r2, r3
 8001798:	d012      	beq.n	80017c0 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 800179a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800179e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017a2:	4413      	add	r3, r2
 80017a4:	f107 0214 	add.w	r2, r7, #20
 80017a8:	18d0      	adds	r0, r2, r3
 80017aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017b2:	4413      	add	r3, r2
 80017b4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017b8:	461a      	mov	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	f012 ff56 	bl	801466c <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 80017c0:	f107 0114 	add.w	r1, r7, #20
 80017c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017c8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 f9b4 	bl	8001b3a <bhy2_hif_set_regs>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 80017d8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11b      	bne.n	8001818 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 80017e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80017ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 80017f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80017fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00f      	beq.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
 8001804:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8001808:	2b00      	cmp	r3, #0
 800180a:	f43f af04 	beq.w	8001616 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 800180e:	e009      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8001810:	23fe      	movs	r3, #254	; 0xfe
 8001812:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8001816:	e005      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8001818:	bf00      	nop
        if (hif->read_write_len != 0)
 800181a:	e003      	b.n	8001824 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001822:	e000      	b.n	8001826 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8001824:	bf00      	nop
    }

    return rslt;
 8001826:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 800182a:	4618      	mov	r0, r3
 800182c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 800183c:	2300      	movs	r3, #0
 800183e:	81fb      	strh	r3, [r7, #14]
 8001840:	e027      	b.n	8001892 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fab1 	bl	8001db0 <bhy2_hif_get_interrupt_status>
 800184e:	4603      	mov	r3, r0
 8001850:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8001852:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 800185a:	7b3b      	ldrb	r3, [r7, #12]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	737b      	strb	r3, [r7, #13]
                break;
 8001868:	e017      	b.n	800189a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001870:	f000 f99b 	bl	8001baa <bhy2_hif_delay_us>
 8001874:	4603      	mov	r3, r0
 8001876:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8001878:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8001880:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001884:	e00b      	b.n	800189e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8001886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800188a:	e008      	b.n	800189e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	3301      	adds	r3, #1
 8001890:	81fb      	strh	r3, [r7, #14]
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001898:	d3d3      	bcc.n	8001842 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 800189a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80018ae:	2300      	movs	r3, #0
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	e02f      	b.n	8001914 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ba:	f000 f976 	bl	8001baa <bhy2_hif_delay_us>
 80018be:	4603      	mov	r3, r0
 80018c0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80018c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da02      	bge.n	80018d0 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 80018ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ce:	e02d      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 80018d0:	f107 010c 	add.w	r1, r7, #12
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	2025      	movs	r0, #37	; 0x25
 80018da:	f000 f8f6 	bl	8001aca <bhy2_hif_get_regs>
 80018de:	4603      	mov	r3, r0
 80018e0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80018e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da02      	bge.n	80018f0 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 80018ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018ee:	e01d      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80018f0:	7b3b      	ldrb	r3, [r7, #12]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <bhy2_hif_check_boot_status_ram+0x68>
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	3301      	adds	r3, #1
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	2b63      	cmp	r3, #99	; 0x63
 8001918:	d9cc      	bls.n	80018b4 <bhy2_hif_check_boot_status_ram+0xe>
 800191a:	e000      	b.n	800191e <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 800191c:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	2b64      	cmp	r3, #100	; 0x64
 8001922:	d102      	bne.n	800192a <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8001924:	f06f 0304 	mvn.w	r3, #4
 8001928:	e000      	b.n	800192c <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	2b00      	cmp	r3, #0
 800194e:	d072      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06f      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	2b00      	cmp	r3, #0
 8001960:	d069      	beq.n	8001a36 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d114      	bne.n	800199a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 8001970:	f107 0114 	add.w	r1, r7, #20
 8001974:	7bf8      	ldrb	r0, [r7, #15]
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	2202      	movs	r2, #2
 800197a:	f000 f8a6 	bl	8001aca <bhy2_hif_get_regs>
 800197e:	4603      	mov	r3, r0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8001984:	7d3b      	ldrb	r3, [r7, #20]
 8001986:	b21a      	sxth	r2, r3
 8001988:	7d7b      	ldrb	r3, [r7, #21]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 800199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d04d      	beq.n	8001a3e <bhy2_hif_get_fifo+0x10a>
 80019a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d149      	bne.n	8001a3e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d203      	bcs.n	80019bc <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e003      	b.n	80019c4 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	623b      	str	r3, [r7, #32]
            offset = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80019ce:	e016      	b.n	80019fe <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	18d1      	adds	r1, r2, r3
 80019d6:	7bf8      	ldrb	r0, [r7, #15]
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	f000 f875 	bl	8001aca <bhy2_hif_get_regs>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 80019e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10c      	bne.n	8001a08 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4413      	add	r3, r2
 80019fc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80019fe:	6a3a      	ldr	r2, [r7, #32]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d8e4      	bhi.n	80019d0 <bhy2_hif_get_fifo+0x9c>
 8001a06:	e000      	b.n	8001a0a <bhy2_hif_get_fifo+0xd6>
                    break;
 8001a08:	bf00      	nop
            }

            if (read_len != 0)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00a      	beq.n	8001a26 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	18d1      	adds	r1, r2, r3
 8001a16:	7bf8      	ldrb	r0, [r7, #15]
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	f000 f855 	bl	8001aca <bhy2_hif_get_regs>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8001a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1ad2      	subs	r2, r2, r3
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8001a34:	e003      	b.n	8001a3e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001a36:	23ff      	movs	r3, #255	; 0xff
 8001a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a3c:	e000      	b.n	8001a40 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8001a3e:	bf00      	nop
    }

    return rslt;
 8001a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d027      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d024      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d021      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d01e      	beq.n	8001ab6 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8001aac:	e005      	b.n	8001aba <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8001ab4:	e001      	b.n	8001aba <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001ab6:	23ff      	movs	r3, #255	; 0xff
 8001ab8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01e      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01b      	beq.n	8001b2a <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	7b1b      	ldrb	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d103      	bne.n	8001b02 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b00:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681c      	ldr	r4, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	7bf8      	ldrb	r0, [r7, #15]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	47a0      	blx	r4
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8001b24:	23fd      	movs	r3, #253	; 0xfd
 8001b26:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b28:	e001      	b.n	8001b2e <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}

08001b3a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001b3a:	b590      	push	{r4, r7, lr}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d022      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01e      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01b      	beq.n	8001b9a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	7b1b      	ldrb	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d103      	bne.n	8001b72 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b70:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685c      	ldr	r4, [r3, #4]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	7bf8      	ldrb	r0, [r7, #15]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	47a0      	blx	r4
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8001b94:	23fd      	movs	r3, #253	; 0xfd
 8001b96:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8001b98:	e001      	b.n	8001b9e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001b9a:	23ff      	movs	r3, #255	; 0xff
 8001b9c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}

08001baa <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <bhy2_hif_delay_us+0x2c>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	6912      	ldr	r2, [r2, #16]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
 8001bd4:	e001      	b.n	8001bda <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001bd6:	23ff      	movs	r3, #255	; 0xff
 8001bd8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	af04      	add	r7, sp, #16
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8001bf6:	89f8      	ldrh	r0, [r7, #14]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	f7ff fc37 	bl	800147c <bhy2_hif_exec_cmd_generic>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	4603      	mov	r3, r0
 8001c26:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06e      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d06b      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d068      	beq.n	8001d14 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001c48:	f107 0113 	add.w	r1, r7, #19
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2006      	movs	r0, #6
 8001c52:	f7ff ff3a 	bl	8001aca <bhy2_hif_get_regs>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8001c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d15b      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8001c66:	7cfb      	ldrb	r3, [r7, #19]
 8001c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8001c70:	7cfb      	ldrb	r3, [r7, #19]
 8001c72:	7dba      	ldrb	r2, [r7, #22]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d008      	beq.n	8001c8a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001c78:	f107 0113 	add.w	r1, r7, #19
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2006      	movs	r0, #6
 8001c82:	f7ff ff5a 	bl	8001b3a <bhy2_hif_set_regs>
 8001c86:	4603      	mov	r3, r0
 8001c88:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8001c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d143      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f7ff ffa1 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8001ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d134      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8001cb0:	6a38      	ldr	r0, [r7, #32]
 8001cb2:	f7ff fdbf 	bl	8001834 <bhy2_wait_status_ready>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8001cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12b      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8001cc2:	f107 0014 	add.w	r0, r7, #20
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	f000 f94b 	bl	8001f6a <bhy2_hif_get_status_fifo>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8001cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d11c      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8001ce0:	7cfb      	ldrb	r3, [r7, #19]
 8001ce2:	7dba      	ldrb	r2, [r7, #22]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d00a      	beq.n	8001cfe <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8001ce8:	7dbb      	ldrb	r3, [r7, #22]
 8001cea:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8001cec:	f107 0113 	add.w	r1, r7, #19
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2006      	movs	r0, #6
 8001cf6:	f7ff ff20 	bl	8001b3a <bhy2_hif_set_regs>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8001cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8001d06:	8abb      	ldrh	r3, [r7, #20]
 8001d08:	89fa      	ldrh	r2, [r7, #14]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d005      	beq.n	8001d1a <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8001d0e:	23fb      	movs	r3, #251	; 0xfb
 8001d10:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8001d12:	e002      	b.n	8001d1a <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001d14:	23ff      	movs	r3, #255	; 0xff
 8001d16:	75fb      	strb	r3, [r7, #23]
 8001d18:	e000      	b.n	8001d1c <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8001d1a:	bf00      	nop
    }

    return rslt;
 8001d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	201c      	movs	r0, #28
 8001d3a:	f7ff fec6 	bl	8001aca <bhy2_hif_get_regs>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8001d58:	f107 010c 	add.w	r1, r7, #12
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	2020      	movs	r0, #32
 8001d62:	f7ff feb2 	bl	8001aca <bhy2_hif_get_regs>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8001d6a:	7b3b      	ldrb	r3, [r7, #12]
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	e001      	b.n	8001d84 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001d80:	23ff      	movs	r3, #255	; 0xff
 8001d82:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	2025      	movs	r0, #37	; 0x25
 8001da2:	f7ff fe92 	bl	8001aca <bhy2_hif_get_regs>
 8001da6:	4603      	mov	r3, r0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	202d      	movs	r0, #45	; 0x2d
 8001dc2:	f7ff fe82 	bl	8001aca <bhy2_hif_get_regs>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8001de0:	230f      	movs	r3, #15
 8001de2:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8001de4:	f107 010b 	add.w	r1, r7, #11
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	2014      	movs	r0, #20
 8001dee:	f7ff fea4 	bl	8001b3a <bhy2_hif_set_regs>
 8001df2:	4603      	mov	r3, r0
 8001df4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12b      	bne.n	8001e56 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8001dfe:	e01c      	b.n	8001e3a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e06:	f7ff fed0 	bl	8001baa <bhy2_hif_delay_us>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d111      	bne.n	8001e3a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8001e16:	f107 010a 	add.w	r1, r7, #10
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2025      	movs	r0, #37	; 0x25
 8001e20:	f7ff fe53 	bl	8001aca <bhy2_hif_get_regs>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <bhy2_hif_reset+0x76>
        while (count--)
 8001e3a:	89bb      	ldrh	r3, [r7, #12]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	81ba      	strh	r2, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1dd      	bne.n	8001e00 <bhy2_hif_reset+0x30>
 8001e44:	e000      	b.n	8001e48 <bhy2_hif_reset+0x78>
                    {
                        break;
 8001e46:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8001e48:	7abb      	ldrb	r3, [r7, #10]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8001e52:	23fb      	movs	r3, #251	; 0xfb
 8001e54:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d027      	beq.n	8001ec8 <bhy2_hif_upload_firmware_to_ram+0x66>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8001e94:	8abb      	ldrh	r3, [r7, #20]
 8001e96:	f246 622b 	movw	r2, #26155	; 0x662b
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d002      	beq.n	8001ea4 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8001e9e:	23fc      	movs	r3, #252	; 0xfc
 8001ea0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8001ea2:	e014      	b.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fe9b 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8001eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fcf2 	bl	80018a6 <bhy2_hif_check_boot_status_ram>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8001ec6:	e002      	b.n	8001ece <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8001ec8:	23ff      	movs	r3, #255	; 0xff
 8001eca:	75fb      	strb	r3, [r7, #23]
 8001ecc:	e000      	b.n	8001ed0 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8001ece:	bf00      	nop
    }

    return rslt;
 8001ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2003      	movs	r0, #3
 8001eec:	f7ff fe7b 	bl	8001be6 <bhy2_hif_exec_cmd>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d104      	bne.n	8001f06 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fcd2 	bl	80018a6 <bhy2_hif_check_boot_status_ram>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff fd00 	bl	8001934 <bhy2_hif_get_fifo>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	68f9      	ldr	r1, [r7, #12]
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7ff fcea 	bl	8001934 <bhy2_hif_get_fifo>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8001f78:	f107 0110 	add.w	r1, r7, #16
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	2003      	movs	r0, #3
 8001f82:	f7ff fda2 	bl	8001aca <bhy2_hif_get_regs>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8001f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d130      	bne.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8001f92:	7c3b      	ldrb	r3, [r7, #16]
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8001fac:	7cbb      	ldrb	r3, [r7, #18]
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d010      	beq.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d202      	bcs.n	8001fe2 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8001fdc:	23fa      	movs	r3, #250	; 0xfa
 8001fde:	75fb      	strb	r3, [r7, #23]
 8001fe0:	e008      	b.n	8001ff4 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff fd6d 	bl	8001aca <bhy2_hif_get_regs>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8001ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	2003      	movs	r0, #3
 800201e:	f7ff fc89 	bl	8001934 <bhy2_hif_get_fifo>
 8002022:	4603      	mov	r3, r0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	ed87 0a02 	vstr	s0, [r7, #8]
 8002038:	6079      	str	r1, [r7, #4]
 800203a:	603a      	str	r2, [r7, #0]
 800203c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b2db      	uxtb	r3, r3
 8002052:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b2db      	uxtb	r3, r3
 800205a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	b2db      	uxtb	r3, r3
 8002062:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	b2db      	uxtb	r3, r3
 8002068:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b2db      	uxtb	r3, r3
 8002070:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 800207a:	f107 0118 	add.w	r1, r7, #24
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2208      	movs	r2, #8
 8002082:	200d      	movs	r0, #13
 8002084:	f7ff fdaf 	bl	8001be6 <bhy2_hif_exec_cmd>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b090      	sub	sp, #64	; 0x40
 8002096:	af02      	add	r7, sp, #8
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80da 	beq.w	800225c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2bf5      	cmp	r3, #245	; 0xf5
 80020ac:	d903      	bls.n	80020b6 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 80020ae:	23fe      	movs	r3, #254	; 0xfe
 80020b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020b4:	e0d5      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020be:	b298      	uxth	r0, r3
 80020c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020c4:	f107 0114 	add.w	r1, r7, #20
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	221c      	movs	r2, #28
 80020d0:	f7ff fda2 	bl	8001c18 <bhy2_hif_get_parameter>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 80020da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80bf 	bne.w	8002262 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 80020e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e6:	2b1c      	cmp	r3, #28
 80020e8:	d003      	beq.n	80020f2 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 80020ea:	23fe      	movs	r3, #254	; 0xfe
 80020ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020f0:	e0b7      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 80020f2:	7d3a      	ldrb	r2, [r7, #20]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 80020f8:	7d7a      	ldrb	r2, [r7, #21]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 80020fe:	7dba      	ldrb	r2, [r7, #22]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8002104:	7dfa      	ldrb	r2, [r7, #23]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 800210a:	7e3a      	ldrb	r2, [r7, #24]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8002110:	7e7a      	ldrb	r2, [r7, #25]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8002116:	7eba      	ldrb	r2, [r7, #26]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 800211c:	7efa      	ldrb	r2, [r7, #27]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8002122:	7f3a      	ldrb	r2, [r7, #28]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8002128:	7f7a      	ldrb	r2, [r7, #29]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800212e:	7fba      	ldrb	r2, [r7, #30]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8002134:	7ffa      	ldrb	r2, [r7, #31]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 800213a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8002142:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 800214a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8002152:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 800215a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 8002162:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 800216a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 8002172:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 800217a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 8002182:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 800218a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 8002192:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 800219a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	791b      	ldrb	r3, [r3, #4]
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	799b      	ldrb	r3, [r3, #6]
 80021be:	b21a      	sxth	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	79db      	ldrb	r3, [r3, #7]
 80021c4:	021b      	lsls	r3, r3, #8
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	7a1b      	ldrb	r3, [r3, #8]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	7a5b      	ldrb	r3, [r3, #9]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	431a      	orrs	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	7a9b      	ldrb	r3, [r3, #10]
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	7adb      	ldrb	r3, [r3, #11]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	7b1b      	ldrb	r3, [r3, #12]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	431a      	orrs	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	7b9b      	ldrb	r3, [r3, #14]
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	431a      	orrs	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	7bdb      	ldrb	r3, [r3, #15]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	7c1b      	ldrb	r3, [r3, #16]
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	7c5b      	ldrb	r3, [r3, #17]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	431a      	orrs	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	7c9b      	ldrb	r3, [r3, #18]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	7cdb      	ldrb	r3, [r3, #19]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	431a      	orrs	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	7e5b      	ldrb	r3, [r3, #25]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	431a      	orrs	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	7e9b      	ldrb	r3, [r3, #26]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	7edb      	ldrb	r3, [r3, #27]
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	431a      	orrs	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	619a      	str	r2, [r3, #24]
 800225a:	e002      	b.n	8002262 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800225c:	23ff      	movs	r3, #255	; 0xff
 800225e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8002262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002266:	4618      	mov	r0, r3
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b21a      	sxth	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3301      	adds	r3, #1
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b21b      	sxth	r3, r3
 8002288:	4313      	orrs	r3, r2
 800228a:	b21a      	sxth	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3302      	adds	r3, #2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b21a      	sxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3303      	adds	r3, #3
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3305      	adds	r3, #5
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21b      	sxth	r3, r3
 80022bc:	4313      	orrs	r3, r2
 80022be:	b21a      	sxth	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3306      	adds	r3, #6
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3307      	adds	r3, #7
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21a      	sxth	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3308      	adds	r3, #8
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3309      	adds	r3, #9
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	811a      	strh	r2, [r3, #8]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_DMA_Init+0x6c>)
 8002310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <MX_DMA_Init+0x6c>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <MX_DMA_Init+0x6c>)
 8002320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	200b      	movs	r0, #11
 8002332:	f002 ffce 	bl	80052d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002336:	200b      	movs	r0, #11
 8002338:	f002 ffe5 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	200c      	movs	r0, #12
 8002342:	f002 ffc6 	bl	80052d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002346:	200c      	movs	r0, #12
 8002348:	f002 ffdd 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	200f      	movs	r0, #15
 8002352:	f002 ffbe 	bl	80052d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002356:	200f      	movs	r0, #15
 8002358:	f002 ffd5 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2010      	movs	r0, #16
 8002362:	f002 ffb6 	bl	80052d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002366:	2010      	movs	r0, #16
 8002368:	f002 ffcd 	bl	8005306 <HAL_NVIC_EnableIRQ>

}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58024400 	.word	0x58024400

08002378 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <MX_GPIO_Init+0x12c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002394:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <MX_GPIO_Init+0x12c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b2:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	4a34      	ldr	r2, [pc, #208]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023da:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <MX_GPIO_Init+0x12c>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <MX_GPIO_Init+0x12c>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <MX_GPIO_Init+0x12c>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <MX_GPIO_Init+0x12c>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	2101      	movs	r1, #1
 8002428:	481f      	ldr	r0, [pc, #124]	; (80024a8 <MX_GPIO_Init+0x130>)
 800242a:	f005 ff8d 	bl	8008348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2110      	movs	r1, #16
 8002432:	481e      	ldr	r0, [pc, #120]	; (80024ac <MX_GPIO_Init+0x134>)
 8002434:	f005 ff88 	bl	8008348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243e:	481c      	ldr	r0, [pc, #112]	; (80024b0 <MX_GPIO_Init+0x138>)
 8002440:	f005 ff82 	bl	8008348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 8002444:	2301      	movs	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002448:	2301      	movs	r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800244c:	2302      	movs	r3, #2
 800244e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4813      	ldr	r0, [pc, #76]	; (80024a8 <MX_GPIO_Init+0x130>)
 800245c:	f005 fdc4 	bl	8007fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002460:	2310      	movs	r3, #16
 8002462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002468:	2301      	movs	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <MX_GPIO_Init+0x134>)
 8002478:	f005 fdb6 	bl	8007fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800247c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002482:	2301      	movs	r3, #1
 8002484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002486:	2301      	movs	r3, #1
 8002488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_GPIO_Init+0x138>)
 8002496:	f005 fda7 	bl	8007fe8 <HAL_GPIO_Init>

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58020800 	.word	0x58020800
 80024ac:	58020000 	.word	0x58020000
 80024b0:	58021000 	.word	0x58021000

080024b4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <MX_I2C2_Init+0x74>)
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <MX_I2C2_Init+0x78>)
 80024bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_I2C2_Init+0x74>)
 80024c0:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <MX_I2C2_Init+0x7c>)
 80024c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_I2C2_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_I2C2_Init+0x74>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <MX_I2C2_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_I2C2_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_I2C2_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_I2C2_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_I2C2_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <MX_I2C2_Init+0x74>)
 80024f0:	f005 ff44 	bl	800837c <HAL_I2C_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024fa:	f001 f81d 	bl	8003538 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	4809      	ldr	r0, [pc, #36]	; (8002528 <MX_I2C2_Init+0x74>)
 8002502:	f006 fe50 	bl	80091a6 <HAL_I2CEx_ConfigAnalogFilter>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800250c:	f001 f814 	bl	8003538 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002510:	2100      	movs	r1, #0
 8002512:	4805      	ldr	r0, [pc, #20]	; (8002528 <MX_I2C2_Init+0x74>)
 8002514:	f006 fe92 	bl	800923c <HAL_I2CEx_ConfigDigitalFilter>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800251e:	f001 f80b 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24000484 	.word	0x24000484
 800252c:	40005800 	.word	0x40005800
 8002530:	00b03fdb 	.word	0x00b03fdb

08002534 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b0b8      	sub	sp, #224	; 0xe0
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	22bc      	movs	r2, #188	; 0xbc
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f012 f889 	bl	801466c <memset>
  if(i2cHandle->Instance==I2C2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_I2C_MspInit+0x194>)
 8002560:	4293      	cmp	r3, r2
 8002562:	f040 80ad 	bne.w	80026c0 <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002566:	2308      	movs	r3, #8
 8002568:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f009 f881 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002580:	f000 ffda 	bl	8003538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002584:	4b51      	ldr	r3, [pc, #324]	; (80026cc <HAL_I2C_MspInit+0x198>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258a:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_I2C_MspInit+0x198>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002594:	4b4d      	ldr	r3, [pc, #308]	; (80026cc <HAL_I2C_MspInit+0x198>)
 8002596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025aa:	2312      	movs	r3, #18
 80025ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025bc:	2304      	movs	r3, #4
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025c6:	4619      	mov	r1, r3
 80025c8:	4841      	ldr	r0, [pc, #260]	; (80026d0 <HAL_I2C_MspInit+0x19c>)
 80025ca:	f005 fd0d 	bl	8007fe8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025ce:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <HAL_I2C_MspInit+0x198>)
 80025d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025d4:	4a3d      	ldr	r2, [pc, #244]	; (80026cc <HAL_I2C_MspInit+0x198>)
 80025d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_I2C_MspInit+0x198>)
 80025e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 80025ee:	4a3a      	ldr	r2, [pc, #232]	; (80026d8 <HAL_I2C_MspInit+0x1a4>)
 80025f0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 80025f4:	2223      	movs	r2, #35	; 0x23
 80025f6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002618:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800262a:	482a      	ldr	r0, [pc, #168]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 800262c:	f002 fe86 	bl	800533c <HAL_DMA_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 8002636:	f000 ff7f 	bl	8003538 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <HAL_I2C_MspInit+0x1a0>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_I2C_MspInit+0x1ac>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002664:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002684:	4815      	ldr	r0, [pc, #84]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002686:	f002 fe59 	bl	800533c <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8002690:	f000 ff52 	bl	8003538 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_I2C_MspInit+0x1a8>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2021      	movs	r0, #33	; 0x21
 80026a6:	f002 fe14 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80026aa:	2021      	movs	r0, #33	; 0x21
 80026ac:	f002 fe2b 	bl	8005306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2022      	movs	r0, #34	; 0x22
 80026b6:	f002 fe0c 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80026ba:	2022      	movs	r0, #34	; 0x22
 80026bc:	f002 fe23 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80026c0:	bf00      	nop
 80026c2:	37e0      	adds	r7, #224	; 0xe0
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40005800 	.word	0x40005800
 80026cc:	58024400 	.word	0x58024400
 80026d0:	58020400 	.word	0x58020400
 80026d4:	240004d0 	.word	0x240004d0
 80026d8:	40020010 	.word	0x40020010
 80026dc:	24000548 	.word	0x24000548
 80026e0:	40020028 	.word	0x40020028
 80026e4:	00000000 	.word	0x00000000

080026e8 <parse_quaternion>:

#define QUATERNION_BYTE_LENGHT 16//!<Длина посылки кватериниона в байтах
uint8_t qt_component_buffer[QUATERNION_BYTE_LENGHT] = { 0 };

static void parse_quaternion(const struct bhy2_fifo_parse_data_info *callback_info, void *callback_ref)
  {
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b088      	sub	sp, #32
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
    //Результирующий кватернион
    //struct Quaternion *qt = (Quaternion*)callback_ref;
	struct Quaternion *qt = callback_ref;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
    //struct Quaternion *qt;
    struct bhy2_data_quaternion data;

    if (callback_info->data_size != 11) /* Check for a valid payload size. Includes sensor ID */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	2b0b      	cmp	r3, #11
 80026fe:	f040 811f 	bne.w	8002940 <parse_quaternion+0x258>
      {
      return;
      }

    //Парсить фрейм и получить кватернион
    bhy2_parse_quaternion(callback_info->data_ptr, &data);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f107 0210 	add.w	r2, r7, #16
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fdae 	bl	800226e <bhy2_parse_quaternion>

    //Заполнить выходную структуру
    qt->mSensorId = callback_info->sensor_id;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	771a      	strb	r2, [r3, #28]
    qt->mTimestamp = *callback_info->time_stamp; /* Store the last timestamp */
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	69f9      	ldr	r1, [r7, #28]
 8002724:	e9c1 2300 	strd	r2, r3, [r1]

    qt->mTimestamp *= 15625; /* Timestamp is now in nanoseconds */
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	f04f 0a00 	mov.w	sl, #0
 8002736:	f04f 0b00 	mov.w	fp, #0
 800273a:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800273e:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002742:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002746:	4652      	mov	r2, sl
 8002748:	465b      	mov	r3, fp
 800274a:	ebb2 0800 	subs.w	r8, r2, r0
 800274e:	eb63 0901 	sbc.w	r9, r3, r1
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800275e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002766:	ebb2 0408 	subs.w	r4, r2, r8
 800276a:	eb63 0509 	sbc.w	r5, r3, r9
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	00eb      	lsls	r3, r5, #3
 8002778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277c:	00e2      	lsls	r2, r4, #3
 800277e:	4614      	mov	r4, r2
 8002780:	461d      	mov	r5, r3
 8002782:	1823      	adds	r3, r4, r0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	eb45 0301 	adc.w	r3, r5, r1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002792:	e9c3 1200 	strd	r1, r2, [r3]
    qt->mTimeS  = (uint32_t)(qt->mTimestamp / UINT64_C(1000000000));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279c:	a371      	add	r3, pc, #452	; (adr r3, 8002964 <parse_quaternion+0x27c>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fd fded 	bl	8000380 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	609a      	str	r2, [r3, #8]
    qt->mTimeNS = (uint32_t)(qt->mTimestamp - (qt->mTimeS * UINT64_C(1000000000)));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	4611      	mov	r1, r2
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a65      	ldr	r2, [pc, #404]	; (8002950 <parse_quaternion+0x268>)
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	1aca      	subs	r2, r1, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	60da      	str	r2, [r3, #12]
    qt->mY = data.y / 16384.0f;
    qt->mZ = data.z / 16384.0f;
    qt->mW = data.w / 16384.0f;
    */

    qt->mX = data.x;
 80027c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	821a      	strh	r2, [r3, #16]
    qt->mY = data.y;
 80027ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	825a      	strh	r2, [r3, #18]
    qt->mZ = data.z;
 80027d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	829a      	strh	r2, [r3, #20]
    qt->mW = data.w;
 80027de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	82da      	strh	r2, [r3, #22]

    qt->mAcc = ((data.accuracy * 180.0f) / 16384.0f) / 3.141592653589793f;
 80027e6:	8b3b      	ldrh	r3, [r7, #24]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002954 <parse_quaternion+0x26c>
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002958 <parse_quaternion+0x270>
 80027fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002800:	eddf 6a56 	vldr	s13, [pc, #344]	; 800295c <parse_quaternion+0x274>
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	edc3 7a06 	vstr	s15, [r3, #24]

    *qt_component_buffer = ((qt->mX)>>8);
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002814:	121b      	asrs	r3, r3, #8
 8002816:	b21b      	sxth	r3, r3
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b51      	ldr	r3, [pc, #324]	; (8002960 <parse_quaternion+0x278>)
 800281c:	701a      	strb	r2, [r3, #0]
    *(qt_component_buffer + 1) = (uint8_t)qt->mX;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b4e      	ldr	r3, [pc, #312]	; (8002960 <parse_quaternion+0x278>)
 8002828:	705a      	strb	r2, [r3, #1]

    *(qt_component_buffer + 2) = ((qt->mY)>>8);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002830:	121b      	asrs	r3, r3, #8
 8002832:	b21b      	sxth	r3, r3
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <parse_quaternion+0x278>)
 8002838:	709a      	strb	r2, [r3, #2]
    *(qt_component_buffer + 3) = (uint8_t)qt->mY;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <parse_quaternion+0x278>)
 8002844:	70da      	strb	r2, [r3, #3]

    *(qt_component_buffer + 4) = ((qt->mZ)>>8);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800284c:	121b      	asrs	r3, r3, #8
 800284e:	b21b      	sxth	r3, r3
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <parse_quaternion+0x278>)
 8002854:	711a      	strb	r2, [r3, #4]
    *(qt_component_buffer + 5) = (uint8_t)qt->mZ;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <parse_quaternion+0x278>)
 8002860:	715a      	strb	r2, [r3, #5]

    *(qt_component_buffer + 6) = ((qt->mW)>>8);
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002868:	121b      	asrs	r3, r3, #8
 800286a:	b21b      	sxth	r3, r3
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <parse_quaternion+0x278>)
 8002870:	719a      	strb	r2, [r3, #6]
    *(qt_component_buffer + 7) = (uint8_t)qt->mW;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <parse_quaternion+0x278>)
 800287c:	71da      	strb	r2, [r3, #7]

    *(qt_component_buffer + 8) = ((qt->mTimestamp)>>56);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	0e0a      	lsrs	r2, r1, #24
 800288e:	2300      	movs	r3, #0
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4b33      	ldr	r3, [pc, #204]	; (8002960 <parse_quaternion+0x278>)
 8002894:	721a      	strb	r2, [r3, #8]
    *(qt_component_buffer + 9) = ((qt->mTimestamp)>>48);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	0c0a      	lsrs	r2, r1, #16
 80028a6:	2300      	movs	r3, #0
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <parse_quaternion+0x278>)
 80028ac:	725a      	strb	r2, [r3, #9]
    *(qt_component_buffer + 10) = ((qt->mTimestamp)>>40);
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	0a0a      	lsrs	r2, r1, #8
 80028be:	2300      	movs	r3, #0
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <parse_quaternion+0x278>)
 80028c4:	729a      	strb	r2, [r3, #10]
    *(qt_component_buffer + 11) = ((qt->mTimestamp)>>32);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	000a      	movs	r2, r1
 80028d6:	2300      	movs	r3, #0
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <parse_quaternion+0x278>)
 80028dc:	72da      	strb	r2, [r3, #11]
    *(qt_component_buffer + 12) = ((qt->mTimestamp)>>24);
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	0e02      	lsrs	r2, r0, #24
 80028ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028f2:	0e0b      	lsrs	r3, r1, #24
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <parse_quaternion+0x278>)
 80028f8:	731a      	strb	r2, [r3, #12]
    *(qt_component_buffer + 13) = ((qt->mTimestamp)>>16);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	0c02      	lsrs	r2, r0, #16
 800290a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800290e:	0c0b      	lsrs	r3, r1, #16
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <parse_quaternion+0x278>)
 8002914:	735a      	strb	r2, [r3, #13]
    *(qt_component_buffer + 14) = ((qt->mTimestamp)>>8);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	0a02      	lsrs	r2, r0, #8
 8002926:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800292a:	0a0b      	lsrs	r3, r1, #8
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <parse_quaternion+0x278>)
 8002930:	739a      	strb	r2, [r3, #14]
    *(qt_component_buffer + 15) = (uint8_t)qt->mTimestamp;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <parse_quaternion+0x278>)
 800293c:	73da      	strb	r2, [r3, #15]
 800293e:	e000      	b.n	8002942 <parse_quaternion+0x25a>
      return;
 8002940:	bf00      	nop
    //uint8_t str[100];

    //sprintf(str, "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
    //usbPrintf( "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
    //uartPrintf( "Quater: tm=%d x=%f y=%f z=%f w=%f acc=%f\n\r", qt->mTimeS, qt->mX, qt->mY, qt->mZ, qt->mW, qt->mAcc );
  }
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	3b9aca00 	.word	0x3b9aca00
 8002954:	43340000 	.word	0x43340000
 8002958:	46800000 	.word	0x46800000
 800295c:	40490fdb 	.word	0x40490fdb
 8002960:	24000fc4 	.word	0x24000fc4
 8002964:	3b9aca00 	.word	0x3b9aca00
 8002968:	00000000 	.word	0x00000000

0800296c <copy_construct>:
	const uint8_t  destroyable;
};

// Creates copy of message
struct Message copy_construct(const struct Message* src, uint8_t* data_storage)
{
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
	assert(src);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <copy_construct+0x20>
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <copy_construct+0x90>)
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <copy_construct+0x94>)
 8002982:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002986:	481f      	ldr	r0, [pc, #124]	; (8002a04 <copy_construct+0x98>)
 8002988:	f011 fe00 	bl	801458c <__assert_func>

	uint8_t tx_size = src->tx_size;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t rx_size = src->rx_size;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t destroyable = src->destroyable;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	7c1b      	ldrb	r3, [r3, #16]
 80029a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	enum MSG_TYPE type  = src->type;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	//uint8_t* new_buffer = NULL;

	if (src->buffer)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <copy_construct+0x58>
	{
		//new_buffer = (uint8_t*)calloc(tx_size, sizeof(uint8_t));
		//assert(new_buffer);
		memcpy(data_storage, src->buffer, tx_size);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f011 fe46 	bl	8014650 <memcpy>
	}

	struct Message msg = {data_storage, type, tx_size, rx_size, destroyable};
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029cc:	753b      	strb	r3, [r7, #20]
 80029ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80029de:	f887 3020 	strb.w	r3, [r7, #32]
	return msg;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	461d      	mov	r5, r3
 80029e6:	f107 0410 	add.w	r4, r7, #16
 80029ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	602b      	str	r3, [r5, #0]
}
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdb0      	pop	{r4, r5, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08015644 	.word	0x08015644
 8002a00:	0802fda4 	.word	0x0802fda4
 8002a04:	08015648 	.word	0x08015648

08002a08 <free_msg_content>:

// Safely destructs message
void free_msg_content(struct Message* msg)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	assert(msg);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <free_msg_content+0x1c>
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <free_msg_content+0x3c>)
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <free_msg_content+0x40>)
 8002a1a:	f240 112b 	movw	r1, #299	; 0x12b
 8002a1e:	480b      	ldr	r0, [pc, #44]	; (8002a4c <free_msg_content+0x44>)
 8002a20:	f011 fdb4 	bl	801458c <__assert_func>
	if (msg->buffer && msg->destroyable)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <free_msg_content+0x32>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7c1b      	ldrb	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <free_msg_content+0x32>
	{
		//free(msg->buffer);
		msg->buffer = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
	}
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	08015684 	.word	0x08015684
 8002a48:	0802fdb4 	.word	0x0802fdb4
 8002a4c:	08015648 	.word	0x08015648

08002a50 <send>:

// Sends message to huart
void send(UART_HandleTypeDef *huart, const struct Message* msg, const uint8_t timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	71fb      	strb	r3, [r7, #7]
	assert(msg);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d106      	bne.n	8002a72 <send+0x22>
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <send+0x54>)
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <send+0x58>)
 8002a68:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002a6c:	480f      	ldr	r0, [pc, #60]	; (8002aac <send+0x5c>)
 8002a6e:	f011 fd8d 	bl	801458c <__assert_func>
	assert(msg->buffer);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <send+0x38>
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <send+0x60>)
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <send+0x58>)
 8002a7e:	f240 1137 	movw	r1, #311	; 0x137
 8002a82:	480a      	ldr	r0, [pc, #40]	; (8002aac <send+0x5c>)
 8002a84:	f011 fd82 	bl	801458c <__assert_func>

	HAL_UART_Transmit(huart, msg->buffer, msg->tx_size, timeout);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f00b ffdd 	bl	800ea54 <HAL_UART_Transmit>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	08015684 	.word	0x08015684
 8002aa8:	0802fdc8 	.word	0x0802fdc8
 8002aac:	08015648 	.word	0x08015648
 8002ab0:	08015688 	.word	0x08015688

08002ab4 <fifo_init>:
	FIFO_TYPE buf[FIFO_SIZE];
	uint8_t* data_storage;
};

void fifo_init(struct FIFO* fifo)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	assert(fifo);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <fifo_init+0x1c>
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <fifo_init+0x58>)
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <fifo_init+0x5c>)
 8002ac6:	f240 114d 	movw	r1, #333	; 0x14d
 8002aca:	4812      	ldr	r0, [pc, #72]	; (8002b14 <fifo_init+0x60>)
 8002acc:	f011 fd5e 	bl	801458c <__assert_func>

	uint8_t* newbuf =(uint8_t*)calloc(FIFO_SIZE, MSG_MAX_DATA_SIZE);
 8002ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad8:	f011 fd76 	bl	80145c8 <calloc>
 8002adc:	4603      	mov	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]

	assert(newbuf);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <fifo_init+0x40>
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <fifo_init+0x64>)
 8002ae8:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <fifo_init+0x5c>)
 8002aea:	f240 1151 	movw	r1, #337	; 0x151
 8002aee:	4809      	ldr	r0, [pc, #36]	; (8002b14 <fifo_init+0x60>)
 8002af0:	f011 fd4c 	bl	801458c <__assert_func>

	fifo->data_storage = newbuf;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8c2 371c 	str.w	r3, [r2, #1820]	; 0x71c
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08015694 	.word	0x08015694
 8002b10:	0802fdd0 	.word	0x0802fdd0
 8002b14:	08015648 	.word	0x08015648
 8002b18:	0801569c 	.word	0x0801569c

08002b1c <fifo_push_tail>:

void fifo_push_tail(struct FIFO* fifo, const FIFO_TYPE* value)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
	assert(fifo);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <fifo_push_tail+0x1e>
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <fifo_push_tail+0x84>)
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <fifo_push_tail+0x88>)
 8002b30:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002b34:	481c      	ldr	r0, [pc, #112]	; (8002ba8 <fifo_push_tail+0x8c>)
 8002b36:	f011 fd29 	bl	801458c <__assert_func>
	assert(fifo->size < FIFO_SIZE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b42:	d306      	bcc.n	8002b52 <fifo_push_tail+0x36>
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <fifo_push_tail+0x90>)
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <fifo_push_tail+0x88>)
 8002b48:	f240 1159 	movw	r1, #345	; 0x159
 8002b4c:	4816      	ldr	r0, [pc, #88]	; (8002ba8 <fifo_push_tail+0x8c>)
 8002b4e:	f011 fd1d 	bl	801458c <__assert_func>

	memcpy(&(fifo->buf[fifo->tail]), value, sizeof(FIFO_TYPE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3308      	adds	r3, #8
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	2214      	movs	r2, #20
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f011 fd70 	bl	8014650 <memcpy>
	fifo->tail = (fifo->tail + 1) % FIFO_SIZE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <fifo_push_tail+0x94>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6053      	str	r3, [r2, #4]
	fifo->size++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08015694 	.word	0x08015694
 8002ba4:	0802fddc 	.word	0x0802fddc
 8002ba8:	08015648 	.word	0x08015648
 8002bac:	080156a4 	.word	0x080156a4
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <fifo_add>:
	fifo->size++;
}

// Copies the value to tail of FIFO
void fifo_add(struct FIFO* fifo, FIFO_TYPE value)
{
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b088      	sub	sp, #32
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t* data_storage = fifo->data_storage + MSG_MAX_DATA_SIZE * fifo->tail;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002bcc:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4413      	add	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]
	FIFO_TYPE value_copy = copy_construct(&value, data_storage);
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fec1 	bl	800296c <copy_construct>
	fifo_push_tail(fifo, &value_copy);
 8002bea:	f107 0308 	add.w	r3, r7, #8
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff93 	bl	8002b1c <fifo_push_tail>
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c00:	b004      	add	sp, #16
 8002c02:	4770      	bx	lr

08002c04 <fifo_get>:

// WARNING: don't forget to destruct the value if you use this function instead of fifo_send
FIFO_TYPE fifo_get(struct FIFO* fifo)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
	assert(fifo);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <fifo_get+0x1e>
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <fifo_get+0x94>)
 8002c16:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <fifo_get+0x98>)
 8002c18:	f240 1175 	movw	r1, #373	; 0x175
 8002c1c:	4820      	ldr	r0, [pc, #128]	; (8002ca0 <fifo_get+0x9c>)
 8002c1e:	f011 fcb5 	bl	801458c <__assert_func>
	assert(fifo->size > 0);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <fifo_get+0x34>
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <fifo_get+0xa0>)
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <fifo_get+0x98>)
 8002c2e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8002c32:	481b      	ldr	r0, [pc, #108]	; (8002ca0 <fifo_get+0x9c>)
 8002c34:	f011 fcaa 	bl	801458c <__assert_func>

	FIFO_TYPE value = fifo->buf[fifo->head];
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3308      	adds	r3, #8
 8002c4a:	f107 040c 	add.w	r4, r7, #12
 8002c4e:	1d1d      	adds	r5, r3, #4
 8002c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	6023      	str	r3, [r4, #0]

	fifo->head = (fifo->head + 1) % FIFO_SIZE;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <fifo_get+0xa4>)
 8002c60:	fba3 1302 	umull	r1, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	6013      	str	r3, [r2, #0]

	fifo->size--;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]
	return value;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	461d      	mov	r5, r3
 8002c82:	f107 040c 	add.w	r4, r7, #12
 8002c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	602b      	str	r3, [r5, #0]
}
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08015694 	.word	0x08015694
 8002c9c:	0802fdec 	.word	0x0802fdec
 8002ca0:	08015648 	.word	0x08015648
 8002ca4:	080156bc 	.word	0x080156bc
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <kondo_fucking_send_and_fucking_register_responce>:
};

struct PackageInfo current_package = {0};

void kondo_fucking_send_and_fucking_register_responce(struct Message msg)
{
 8002cac:	b084      	sub	sp, #16
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	f107 0c08 	add.w	ip, r7, #8
 8002cb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	CurrentAnswBufLen = msg.rx_size;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <kondo_fucking_send_and_fucking_register_responce+0x48>)
 8002cc0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart8, rxBufKondo, CurrentAnswBufLen);
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <kondo_fucking_send_and_fucking_register_responce+0x48>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <kondo_fucking_send_and_fucking_register_responce+0x4c>)
 8002ccc:	480b      	ldr	r0, [pc, #44]	; (8002cfc <kondo_fucking_send_and_fucking_register_responce+0x50>)
 8002cce:	f00b ffff 	bl	800ecd0 <HAL_UART_Receive_IT>
	send(&huart8, &msg, 10);
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	f107 0108 	add.w	r1, r7, #8
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <kondo_fucking_send_and_fucking_register_responce+0x50>)
 8002cda:	f7ff feb9 	bl	8002a50 <send>
	free_msg_content(&msg);
 8002cde:	f107 0008 	add.w	r0, r7, #8
 8002ce2:	f7ff fe91 	bl	8002a08 <free_msg_content>
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cee:	b004      	add	sp, #16
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	24000004 	.word	0x24000004
 8002cf8:	24000ec0 	.word	0x24000ec0
 8002cfc:	24003a7c 	.word	0x24003a7c

08002d00 <fucking_send>:
};

struct KONDO_SEND_STATE kondo_send_state = {NONE, 1, 0, 0, 0};

void fucking_send(UART_HandleTypeDef *huart, const uint8_t* buffer, const size_t size)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef send_state = HAL_UART_Transmit_IT(huart, buffer, size);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f00b ff33 	bl	800eb80 <HAL_UART_Transmit_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]

	while (send_state != HAL_OK)
 8002d1e:	e008      	b.n	8002d32 <fucking_send+0x32>
		send_state = HAL_UART_Transmit_IT(huart, buffer, size);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f00b ff29 	bl	800eb80 <HAL_UART_Transmit_IT>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
	while (send_state != HAL_OK)
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f3      	bne.n	8002d20 <fucking_send+0x20>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	f6ad 1d98 	subw	sp, sp, #2456	; 0x998
 8002d4a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4c:	f002 f924 	bl	8004f98 <HAL_Init>

  /* USER CODE BEGIN Init */
  fifo_init(&kondo_fifo);
 8002d50:	48b2      	ldr	r0, [pc, #712]	; (800301c <main+0x2d8>)
 8002d52:	f7ff feaf 	bl	8002ab4 <fifo_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d56:	f000 fa73 	bl	8003240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d5a:	f7ff fb0d 	bl	8002378 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d5e:	f7ff fad3 	bl	8002308 <MX_DMA_Init>
  MX_I2C2_Init();
 8002d62:	f7ff fba7 	bl	80024b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002d66:	f000 fbed 	bl	8003544 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002d6a:	f001 fb6d 	bl	8004448 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8002d6e:	f001 f8fb 	bl	8003f68 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002d72:	f001 f807 	bl	8003d84 <MX_UART4_Init>
  MX_UART7_Init();
 8002d76:	f001 f853 	bl	8003e20 <MX_UART7_Init>
  MX_UART8_Init();
 8002d7a:	f001 f89f 	bl	8003ebc <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002d7e:	f001 f93f 	bl	8004000 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002d82:	f000 feff 	bl	8003b84 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002d86:	f000 feaf 	bl	8003ae8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002d8a:	f000 ff49 	bl	8003c20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, rxBuf, PACKAGE_INFO_BYTES);
 8002d8e:	2205      	movs	r2, #5
 8002d90:	49a3      	ldr	r1, [pc, #652]	; (8003020 <main+0x2dc>)
 8002d92:	48a4      	ldr	r0, [pc, #656]	; (8003024 <main+0x2e0>)
 8002d94:	f00b ff9c 	bl	800ecd0 <HAL_UART_Receive_IT>

  HAL_UART_Receive_IT(&huart4, rxBufRST, rstbuf_len);
 8002d98:	4ba3      	ldr	r3, [pc, #652]	; (8003028 <main+0x2e4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	49a2      	ldr	r1, [pc, #648]	; (800302c <main+0x2e8>)
 8002da2:	48a3      	ldr	r0, [pc, #652]	; (8003030 <main+0x2ec>)
 8002da4:	f00b ff94 	bl	800ecd0 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim3);
 8002da8:	48a2      	ldr	r0, [pc, #648]	; (8003034 <main+0x2f0>)
 8002daa:	f00b f967 	bl	800e07c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002dae:	48a2      	ldr	r0, [pc, #648]	; (8003038 <main+0x2f4>)
 8002db0:	f00b f964 	bl	800e07c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002db4:	48a1      	ldr	r0, [pc, #644]	; (800303c <main+0x2f8>)
 8002db6:	f00b f961 	bl	800e07c <HAL_TIM_Base_Start_IT>
  struct Quaternion mQuaternion; //!< Текущий кватернион
  static uint8_t product_id = 0;
  struct bhy2_dev bhy2;
  static uint16_t bhy2KernelVersion;

  spi_init(&BHY2_SPI);
 8002dba:	48a1      	ldr	r0, [pc, #644]	; (8003040 <main+0x2fc>)
 8002dbc:	f7fd fc62 	bl	8000684 <spi_init>

  mError = bhy2_init( BHY2_SPI_INTERFACE, &bhy2_spi_read, &bhy2_spi_write, bhy2_delay_us, 64, NULL, &bhy2 ); if( mError ) return 1;
 8002dc0:	f107 0318 	add.w	r3, r7, #24
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4b9d      	ldr	r3, [pc, #628]	; (8003044 <main+0x300>)
 8002dd0:	4a9d      	ldr	r2, [pc, #628]	; (8003048 <main+0x304>)
 8002dd2:	499e      	ldr	r1, [pc, #632]	; (800304c <main+0x308>)
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7fd ffdc 	bl	8000d92 <bhy2_init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b9c      	ldr	r3, [pc, #624]	; (8003050 <main+0x30c>)
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b9b      	ldr	r3, [pc, #620]	; (8003050 <main+0x30c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <main+0xaa>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e20d      	b.n	800320a <main+0x4c6>
  mError = bhy2_soft_reset(&bhy2); if( mError ) return 2;
 8002dee:	f107 0318 	add.w	r3, r7, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ffb5 	bl	8000d62 <bhy2_soft_reset>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b94      	ldr	r3, [pc, #592]	; (8003050 <main+0x30c>)
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	4b93      	ldr	r3, [pc, #588]	; (8003050 <main+0x30c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <main+0xc8>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e1fe      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_product_id(&product_id, &bhy2); if( mError ) return 3;
 8002e0c:	f107 0318 	add.w	r3, r7, #24
 8002e10:	4619      	mov	r1, r3
 8002e12:	4890      	ldr	r0, [pc, #576]	; (8003054 <main+0x310>)
 8002e14:	f7fd fe91 	bl	8000b3a <bhy2_get_product_id>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b8c      	ldr	r3, [pc, #560]	; (8003050 <main+0x30c>)
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	4b8b      	ldr	r3, [pc, #556]	; (8003050 <main+0x30c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <main+0xe8>
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1ee      	b.n	800320a <main+0x4c6>
  if( product_id != BHY2_PRODUCT_ID ) return 0;
 8002e2c:	4b89      	ldr	r3, [pc, #548]	; (8003054 <main+0x310>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b89      	cmp	r3, #137	; 0x89
 8002e32:	d001      	beq.n	8002e38 <main+0xf4>
 8002e34:	2300      	movs	r3, #0
 8002e36:	e1e8      	b.n	800320a <main+0x4c6>
  uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 8002e38:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002e3c:	f6a3 1371 	subw	r3, r3, #2417	; 0x971
 8002e40:	220c      	movs	r2, #12
 8002e42:	701a      	strb	r2, [r3, #0]
  mError = bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2); if( mError ) return 4;
 8002e44:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002e48:	f6a3 1371 	subw	r3, r3, #2417	; 0x971
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f107 0218 	add.w	r2, r7, #24
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff17 	bl	8000c88 <bhy2_set_host_interrupt_ctrl>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <main+0x30c>)
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4b7b      	ldr	r3, [pc, #492]	; (8003050 <main+0x30c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <main+0x12a>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e1cd      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2); if( mError ) return 5;
 8002e6e:	f107 0218 	add.w	r2, r7, #24
 8002e72:	f107 0317 	add.w	r3, r7, #23
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ff21 	bl	8000cc0 <bhy2_get_host_interrupt_ctrl>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <main+0x30c>)
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	4b72      	ldr	r3, [pc, #456]	; (8003050 <main+0x30c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <main+0x14e>
 8002e8e:	2305      	movs	r3, #5
 8002e90:	e1bb      	b.n	800320a <main+0x4c6>
  uint8_t hif_ctrl = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3987 	strb.w	r3, [r7, #2439]	; 0x987
  mError = bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2); if( mError ) return 6;
 8002e98:	f107 0218 	add.w	r2, r7, #24
 8002e9c:	f897 3987 	ldrb.w	r3, [r7, #2439]	; 0x987
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd ff41 	bl	8000d2a <bhy2_set_host_intf_ctrl>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <main+0x30c>)
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	4b67      	ldr	r3, [pc, #412]	; (8003050 <main+0x30c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <main+0x178>
 8002eb8:	2306      	movs	r3, #6
 8002eba:	e1a6      	b.n	800320a <main+0x4c6>
  uint8_t boot_status;
  mError = bhy2_get_boot_status(&boot_status, &bhy2); if( mError ) return 7;
 8002ebc:	f107 0218 	add.w	r2, r7, #24
 8002ec0:	f107 0316 	add.w	r3, r7, #22
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fe6b 	bl	8000ba2 <bhy2_get_boot_status>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b5f      	ldr	r3, [pc, #380]	; (8003050 <main+0x30c>)
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	4b5e      	ldr	r3, [pc, #376]	; (8003050 <main+0x30c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <main+0x19c>
 8002edc:	2307      	movs	r3, #7
 8002ede:	e194      	b.n	800320a <main+0x4c6>
  if( !(boot_status & BHY2_BST_HOST_INTERFACE_READY) ) return 8;
 8002ee0:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002ee4:	f6a3 1372 	subw	r3, r3, #2418	; 0x972
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <main+0x1b2>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	e189      	b.n	800320a <main+0x4c6>
  uint8_t sensor_error;
  if( boot_status & BHY2_BST_HOST_INTERFACE_READY )
 8002ef6:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002efa:	f6a3 1372 	subw	r3, r3, #2418	; 0x972
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <main+0x1da>
  {
	  mError = bhy2_upload_firmware_to_ram(bhy2_firmware_image, sizeof(bhy2_firmware_image), &bhy2);
 8002f08:	f107 0318 	add.w	r3, r7, #24
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4952      	ldr	r1, [pc, #328]	; (8003058 <main+0x314>)
 8002f10:	4852      	ldr	r0, [pc, #328]	; (800305c <main+0x318>)
 8002f12:	f7fd fe82 	bl	8000c1a <bhy2_upload_firmware_to_ram>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <main+0x30c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }
  if( mError ) return 9;
 8002f1e:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <main+0x30c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <main+0x1e6>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e16f      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_error_value(&sensor_error, &bhy2); if( mError || sensor_error ) return 10;
 8002f2a:	f107 0218 	add.w	r2, r7, #24
 8002f2e:	f107 0315 	add.w	r3, r7, #21
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f813 	bl	8000f60 <bhy2_get_error_value>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b44      	ldr	r3, [pc, #272]	; (8003050 <main+0x30c>)
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4b43      	ldr	r3, [pc, #268]	; (8003050 <main+0x30c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <main+0x214>
 8002f4a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002f4e:	f6a3 1373 	subw	r3, r3, #2419	; 0x973
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <main+0x218>
 8002f58:	230a      	movs	r3, #10
 8002f5a:	e156      	b.n	800320a <main+0x4c6>
  mError = bhy2_boot_from_ram(&bhy2); if( mError ) return 11;
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fe79 	bl	8000c58 <bhy2_boot_from_ram>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <main+0x30c>)
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <main+0x30c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <main+0x236>
 8002f76:	230b      	movs	r3, #11
 8002f78:	e147      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_error_value(&sensor_error, &bhy2); if( mError || sensor_error ) return 12;
 8002f7a:	f107 0218 	add.w	r2, r7, #24
 8002f7e:	f107 0315 	add.w	r3, r7, #21
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd ffeb 	bl	8000f60 <bhy2_get_error_value>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b30      	ldr	r3, [pc, #192]	; (8003050 <main+0x30c>)
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <main+0x30c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <main+0x264>
 8002f9a:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8002f9e:	f6a3 1373 	subw	r3, r3, #2419	; 0x973
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <main+0x268>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	e12e      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2); if( mError || bhy2KernelVersion == 0 ) return 13;
 8002fac:	f107 0318 	add.w	r3, r7, #24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	482b      	ldr	r0, [pc, #172]	; (8003060 <main+0x31c>)
 8002fb4:	f7fd fddb 	bl	8000b6e <bhy2_get_kernel_version>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b24      	ldr	r3, [pc, #144]	; (8003050 <main+0x30c>)
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <main+0x30c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <main+0x28c>
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <main+0x31c>)
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <main+0x290>
 8002fd0:	230d      	movs	r3, #13
 8002fd2:	e11a      	b.n	800320a <main+0x4c6>
  mError = bhy2_register_fifo_parse_callback(QUAT_SENSOR_ID, parse_quaternion, &mQuaternion, &bhy2); if( mError ) return 14;
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8002fdc:	4921      	ldr	r1, [pc, #132]	; (8003064 <main+0x320>)
 8002fde:	2025      	movs	r0, #37	; 0x25
 8002fe0:	f7fd ff01 	bl	8000de6 <bhy2_register_fifo_parse_callback>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <main+0x30c>)
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <main+0x30c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <main+0x2b4>
 8002ff4:	230e      	movs	r3, #14
 8002ff6:	e108      	b.n	800320a <main+0x4c6>
  mError = bhy2_get_and_process_fifo( mWorkBuffer, BFY2_WORK_BUFFER_SIZE, &bhy2); if( mError ) return 15;
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003002:	4819      	ldr	r0, [pc, #100]	; (8003068 <main+0x324>)
 8003004:	f7fd fc47 	bl	8000896 <bhy2_get_and_process_fifo>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <main+0x30c>)
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <main+0x30c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d029      	beq.n	800306c <main+0x328>
 8003018:	230f      	movs	r3, #15
 800301a:	e0f6      	b.n	800320a <main+0x4c6>
 800301c:	24000fd4 	.word	0x24000fd4
 8003020:	24000dc0 	.word	0x24000dc0
 8003024:	24003b9c 	.word	0x24003b9c
 8003028:	24000005 	.word	0x24000005
 800302c:	24000fc0 	.word	0x24000fc0
 8003030:	2400395c 	.word	0x2400395c
 8003034:	240038c4 	.word	0x240038c4
 8003038:	24003878 	.word	0x24003878
 800303c:	24003910 	.word	0x24003910
 8003040:	240036fc 	.word	0x240036fc
 8003044:	0800081d 	.word	0x0800081d
 8003048:	080007a5 	.word	0x080007a5
 800304c:	0800073d 	.word	0x0800073d
 8003050:	24000000 	.word	0x24000000
 8003054:	240036f8 	.word	0x240036f8
 8003058:	0001a66c 	.word	0x0001a66c
 800305c:	08015720 	.word	0x08015720
 8003060:	240036fa 	.word	0x240036fa
 8003064:	080026e9 	.word	0x080026e9
 8003068:	240005c0 	.word	0x240005c0
  mError = bhy2_update_virtual_sensor_list(&bhy2); if( mError ) return 16;
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fee7 	bl	8000e44 <bhy2_update_virtual_sensor_list>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	4b66      	ldr	r3, [pc, #408]	; (8003214 <main+0x4d0>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <main+0x4d0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <main+0x346>
 8003086:	2310      	movs	r3, #16
 8003088:	e0bf      	b.n	800320a <main+0x4c6>

  float sample_rate = 800.0; /* Read out data measured at 100Hz */
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <main+0x4d4>)
 800308c:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003090:	6013      	str	r3, [r2, #0]
  uint32_t report_latency_ms = 0; /* Report immediately */
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  mError = bhy2_set_virt_sensor_cfg(QUAT_SENSOR_ID, sample_rate, report_latency_ms, &bhy2); if( mError ) return 17;
 8003098:	f107 0318 	add.w	r3, r7, #24
 800309c:	461a      	mov	r2, r3
 800309e:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 80030a2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80030a6:	ed93 0a00 	vldr	s0, [r3]
 80030aa:	2025      	movs	r0, #37	; 0x25
 80030ac:	f7fd fd24 	bl	8000af8 <bhy2_set_virt_sensor_cfg>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b57      	ldr	r3, [pc, #348]	; (8003214 <main+0x4d0>)
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <main+0x4d0>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <main+0x380>
 80030c0:	2311      	movs	r3, #17
 80030c2:	e0a2      	b.n	800320a <main+0x4c6>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if (IMU_head_tim)
 80030c4:	4b55      	ldr	r3, [pc, #340]	; (800321c <main+0x4d8>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01f      	beq.n	800310c <main+0x3c8>
	  {
		  uint8_t interruptStatus = 0;
 80030cc:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80030d0:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
		  bhy2_get_interrupt_status( &interruptStatus, &bhy2 );
 80030d8:	f107 0218 	add.w	r2, r7, #24
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fe07 	bl	8000cf6 <bhy2_get_interrupt_status>

		  if( interruptStatus ){
 80030e8:	f607 1388 	addw	r3, r7, #2440	; 0x988
 80030ec:	f6a3 1374 	subw	r3, r3, #2420	; 0x974
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <main+0x3c8>
			  bhy2_get_and_process_fifo( mWorkBuffer, BFY2_WORK_BUFFER_SIZE, &bhy2 );
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	461a      	mov	r2, r3
 80030fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003100:	4847      	ldr	r0, [pc, #284]	; (8003220 <main+0x4dc>)
 8003102:	f7fd fbc8 	bl	8000896 <bhy2_get_and_process_fifo>
			  IMU_head_tim = 0;
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <main+0x4d8>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	#define NEXT_DATA(label) kondo_send_state.type = (label); kondo_send_state.transmit_ready = 0;

	if (kondo_send_state.package_ready && kondo_send_state.transmit_ready)
 800310c:	4b45      	ldr	r3, [pc, #276]	; (8003224 <main+0x4e0>)
 800310e:	789b      	ldrb	r3, [r3, #2]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d078      	beq.n	8003206 <main+0x4c2>
 8003114:	4b43      	ldr	r3, [pc, #268]	; (8003224 <main+0x4e0>)
 8003116:	785b      	ldrb	r3, [r3, #1]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d074      	beq.n	8003206 <main+0x4c2>
	{
		switch(kondo_send_state.type)
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <main+0x4e0>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d8cf      	bhi.n	80030c4 <main+0x380>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <main+0x3e8>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003173 	.word	0x08003173
 8003134:	0800318d 	.word	0x0800318d
 8003138:	080031a7 	.word	0x080031a7
		{
			case FIFO_FLUSH:
			{
				NEXT_DATA(IMU3_REQUEST);
 800313c:	4b39      	ldr	r3, [pc, #228]	; (8003224 <main+0x4e0>)
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <main+0x4e0>)
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
				kondo_send_state.transmit_ready = 0;
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <main+0x4e0>)
 800314a:	2200      	movs	r2, #0
 800314c:	705a      	strb	r2, [r3, #1]

				FIFO_TYPE msg = fifo_get(&kondo_fifo);
 800314e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003152:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <main+0x4e4>)
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fd53 	bl	8002c04 <fifo_get>
				kondo_fucking_send_and_fucking_register_responce(msg);
 800315e:	f607 1388 	addw	r3, r7, #2440	; 0x988
 8003162:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800316c:	f7ff fd9e 	bl	8002cac <kondo_fucking_send_and_fucking_register_responce>
			} break;
 8003170:	e04a      	b.n	8003208 <main+0x4c4>
			case IMU3_REQUEST:
			{
				NEXT_DATA(IMU4_REQUEST);
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <main+0x4e0>)
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <main+0x4e0>)
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]

				kondo_fucking_send_and_fucking_register_responce(KONDO_IMU3_REQUEST_MSG);
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <main+0x4e8>)
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	9200      	str	r2, [sp, #0]
 8003184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003186:	f7ff fd91 	bl	8002cac <kondo_fucking_send_and_fucking_register_responce>
			} break;
 800318a:	e03d      	b.n	8003208 <main+0x4c4>

			case IMU4_REQUEST:
			{
				NEXT_DATA(IMU_HEAD);
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <main+0x4e0>)
 800318e:	2203      	movs	r2, #3
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <main+0x4e0>)
 8003194:	2200      	movs	r2, #0
 8003196:	705a      	strb	r2, [r3, #1]

				kondo_fucking_send_and_fucking_register_responce(KONDO_IMU4_REQUEST_MSG);
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <main+0x4ec>)
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a0:	f7ff fd84 	bl	8002cac <kondo_fucking_send_and_fucking_register_responce>
			} break;
 80031a4:	e030      	b.n	8003208 <main+0x4c4>
			{
				//HAL_Delay(5);

				//fucking_send(&huart3, qt_component_buffer, QUATERNION_BYTE_LENGHT);

				memcpy(kondo_send_state.buffer + kondo_send_state.index_free, qt_component_buffer, QUATERNION_BYTE_LENGHT);
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <main+0x4e0>)
 80031a8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <main+0x4f0>)
 80031b0:	4413      	add	r3, r2
 80031b2:	4a21      	ldr	r2, [pc, #132]	; (8003238 <main+0x4f4>)
 80031b4:	461c      	mov	r4, r3
 80031b6:	4615      	mov	r5, r2
 80031b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ba:	6020      	str	r0, [r4, #0]
 80031bc:	6061      	str	r1, [r4, #4]
 80031be:	60a2      	str	r2, [r4, #8]
 80031c0:	60e3      	str	r3, [r4, #12]
				kondo_send_state.index_free += QUATERNION_BYTE_LENGHT;
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <main+0x4e0>)
 80031c4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80031c8:	3310      	adds	r3, #16
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b15      	ldr	r3, [pc, #84]	; (8003224 <main+0x4e0>)
 80031ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d2:	b672      	cpsid	i
}
 80031d4:	bf00      	nop

				__disable_irq();
				fucking_send(&huart3, kondo_send_state.buffer, kondo_send_state.index_free);
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <main+0x4e0>)
 80031d8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80031dc:	461a      	mov	r2, r3
 80031de:	4915      	ldr	r1, [pc, #84]	; (8003234 <main+0x4f0>)
 80031e0:	4816      	ldr	r0, [pc, #88]	; (800323c <main+0x4f8>)
 80031e2:	f7ff fd8d 	bl	8002d00 <fucking_send>
  __ASM volatile ("cpsie i" : : : "memory");
 80031e6:	b662      	cpsie	i
}
 80031e8:	bf00      	nop
				__enable_irq();

				kondo_send_state.index_free = 0;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <main+0x4e0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
				kondo_send_state.type  = NONE;
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <main+0x4e0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
				kondo_send_state.transmit_ready = 1;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <main+0x4e0>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
				kondo_send_state.package_ready = 0;
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <main+0x4e0>)
 8003200:	2200      	movs	r2, #0
 8003202:	709a      	strb	r2, [r3, #2]
			} break;
 8003204:	e000      	b.n	8003208 <main+0x4c4>

		}
	}
 8003206:	bf00      	nop
	  if (IMU_head_tim)
 8003208:	e75c      	b.n	80030c4 <main+0x380>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800320a:	4618      	mov	r0, r3
 800320c:	f607 1788 	addw	r7, r7, #2440	; 0x988
 8003210:	46bd      	mov	sp, r7
 8003212:	bdb0      	pop	{r4, r5, r7, pc}
 8003214:	24000000 	.word	0x24000000
 8003218:	44480000 	.word	0x44480000
 800321c:	24000008 	.word	0x24000008
 8003220:	240005c0 	.word	0x240005c0
 8003224:	24000034 	.word	0x24000034
 8003228:	24000fd4 	.word	0x24000fd4
 800322c:	2400000c 	.word	0x2400000c
 8003230:	24000020 	.word	0x24000020
 8003234:	24000037 	.word	0x24000037
 8003238:	24000fc4 	.word	0x24000fc4
 800323c:	24003b9c 	.word	0x24003b9c

08003240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b09c      	sub	sp, #112	; 0x70
 8003244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	224c      	movs	r2, #76	; 0x4c
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f011 fa0c 	bl	801466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	2220      	movs	r2, #32
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f011 fa06 	bl	801466c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003260:	2002      	movs	r0, #2
 8003262:	f007 fa07 	bl	800a674 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4b35      	ldr	r3, [pc, #212]	; (8003340 <SystemClock_Config+0x100>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4a34      	ldr	r2, [pc, #208]	; (8003340 <SystemClock_Config+0x100>)
 8003270:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003274:	6193      	str	r3, [r2, #24]
 8003276:	4b32      	ldr	r3, [pc, #200]	; (8003340 <SystemClock_Config+0x100>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <SystemClock_Config+0x104>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a2f      	ldr	r2, [pc, #188]	; (8003344 <SystemClock_Config+0x104>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <SystemClock_Config+0x104>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003298:	bf00      	nop
 800329a:	4b29      	ldr	r3, [pc, #164]	; (8003340 <SystemClock_Config+0x100>)
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	d1f8      	bne.n	800329a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <SystemClock_Config+0x108>)
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <SystemClock_Config+0x108>)
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80032b4:	2322      	movs	r3, #34	; 0x22
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80032b8:	2301      	movs	r3, #1
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032bc:	2340      	movs	r3, #64	; 0x40
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80032c0:	2301      	movs	r3, #1
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c4:	2302      	movs	r3, #2
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032cc:	2304      	movs	r3, #4
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80032d0:	233c      	movs	r3, #60	; 0x3c
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80032d8:	2305      	movs	r3, #5
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032dc:	2302      	movs	r3, #2
 80032de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80032e0:	230c      	movs	r3, #12
 80032e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f0:	4618      	mov	r0, r3
 80032f2:	f007 fa09 	bl	800a708 <HAL_RCC_OscConfig>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80032fc:	f000 f91c 	bl	8003538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003300:	233f      	movs	r3, #63	; 0x3f
 8003302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003304:	2303      	movs	r3, #3
 8003306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800330c:	2308      	movs	r3, #8
 800330e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003310:	2340      	movs	r3, #64	; 0x40
 8003312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003314:	2340      	movs	r3, #64	; 0x40
 8003316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800331e:	2340      	movs	r3, #64	; 0x40
 8003320:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2104      	movs	r1, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f007 fe1c 	bl	800af64 <HAL_RCC_ClockConfig>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8003332:	f000 f901 	bl	8003538 <Error_Handler>
  }
}
 8003336:	bf00      	nop
 8003338:	3770      	adds	r7, #112	; 0x70
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	58024800 	.word	0x58024800
 8003344:	58000400 	.word	0x58000400
 8003348:	58024400 	.word	0x58024400

0800334c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_UART_TxCpltCallback+0x34>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d102      	bne.n	8003364 <HAL_UART_TxCpltCallback+0x18>
		dmaTxCompleted_uart2 = 1;
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_UART_TxCpltCallback+0x38>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
	if (huart->Instance == USART3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_UART_TxCpltCallback+0x3c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d102      	bne.n	8003374 <HAL_UART_TxCpltCallback+0x28>
		dmaTxCompleted_uart3 = 1;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_UART_TxCpltCallback+0x40>)
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40004400 	.word	0x40004400
 8003384:	24000006 	.word	0x24000006
 8003388:	40004800 	.word	0x40004800
 800338c:	24000007 	.word	0x24000007

08003390 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_UART_RxCpltCallback+0x128>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d168      	bne.n	8003474 <HAL_UART_RxCpltCallback+0xe4>
	{
		switch(rpi_msg_state)
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_UART_RxCpltCallback+0x12c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_RxCpltCallback+0x20>
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d03a      	beq.n	8003424 <HAL_UART_RxCpltCallback+0x94>
 80033ae:	e05b      	b.n	8003468 <HAL_UART_RxCpltCallback+0xd8>
		{
			case PACKAGE_INFO:
			{

				uint8_t rx_SOM1 	   = rxBuf[0];
 80033b0:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				uint8_t rx_SOM2 	   = rxBuf[1];
 80033b8:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				uint8_t rx_msg_length  = rxBuf[2];
 80033c0:	4b3f      	ldr	r3, [pc, #252]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033c2:	789b      	ldrb	r3, [r3, #2]
 80033c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				uint8_t rx_ans_length  = rxBuf[3];
 80033c8:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033ca:	78db      	ldrb	r3, [r3, #3]
 80033cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint8_t rx_periph_addr = rxBuf[4];
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033d2:	791b      	ldrb	r3, [r3, #4]
 80033d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				if (rx_SOM1 != SOM1 || rx_SOM2 != SOM2)
 80033d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033dc:	2bf0      	cmp	r3, #240	; 0xf0
 80033de:	d103      	bne.n	80033e8 <HAL_UART_RxCpltCallback+0x58>
 80033e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80033e4:	2baa      	cmp	r3, #170	; 0xaa
 80033e6:	d005      	beq.n	80033f4 <HAL_UART_RxCpltCallback+0x64>
				{
					HAL_UART_Receive_IT(&huart3, rxBuf, PACKAGE_INFO_BYTES);
 80033e8:	2205      	movs	r2, #5
 80033ea:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 80033ec:	4835      	ldr	r0, [pc, #212]	; (80034c4 <HAL_UART_RxCpltCallback+0x134>)
 80033ee:	f00b fc6f 	bl	800ecd0 <HAL_UART_Receive_IT>
					return;
 80033f2:	e05e      	b.n	80034b2 <HAL_UART_RxCpltCallback+0x122>
				}

				current_package.periph_addr = rx_periph_addr;
 80033f4:	4a34      	ldr	r2, [pc, #208]	; (80034c8 <HAL_UART_RxCpltCallback+0x138>)
 80033f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033fa:	7053      	strb	r3, [r2, #1]
				current_package.msg_length  = rx_msg_length;
 80033fc:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <HAL_UART_RxCpltCallback+0x138>)
 80033fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003402:	7093      	strb	r3, [r2, #2]
				current_package.ans_length  = rx_ans_length;
 8003404:	4a30      	ldr	r2, [pc, #192]	; (80034c8 <HAL_UART_RxCpltCallback+0x138>)
 8003406:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800340a:	70d3      	strb	r3, [r2, #3]

				rpi_msg_state = PACKAGE_CONTENT;
 800340c:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <HAL_UART_RxCpltCallback+0x12c>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart3, rxBuf, rx_msg_length);
 8003412:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003416:	b29b      	uxth	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	4929      	ldr	r1, [pc, #164]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 800341c:	4829      	ldr	r0, [pc, #164]	; (80034c4 <HAL_UART_RxCpltCallback+0x134>)
 800341e:	f00b fc57 	bl	800ecd0 <HAL_UART_Receive_IT>

			} break;
 8003422:	e028      	b.n	8003476 <HAL_UART_RxCpltCallback+0xe6>
			case PACKAGE_CONTENT:
			{
				struct Message msg = {rxBuf, KONDO_SERVO_CMD, current_package.msg_length, current_package.ans_length, 1};
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	2300      	movs	r3, #0
 800342a:	743b      	strb	r3, [r7, #16]
 800342c:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <HAL_UART_RxCpltCallback+0x138>)
 800342e:	789b      	ldrb	r3, [r3, #2]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_UART_RxCpltCallback+0x138>)
 8003434:	78db      	ldrb	r3, [r3, #3]
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	2301      	movs	r3, #1
 800343a:	773b      	strb	r3, [r7, #28]
				fifo_add(&kondo_fifo, msg);
 800343c:	466a      	mov	r2, sp
 800343e:	f107 0318 	add.w	r3, r7, #24
 8003442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003446:	e882 0003 	stmia.w	r2, {r0, r1}
 800344a:	f107 030c 	add.w	r3, r7, #12
 800344e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003450:	481e      	ldr	r0, [pc, #120]	; (80034cc <HAL_UART_RxCpltCallback+0x13c>)
 8003452:	f7ff fbaf 	bl	8002bb4 <fifo_add>

				rpi_msg_state = PACKAGE_INFO;
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_UART_RxCpltCallback+0x12c>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart3, rxBuf, PACKAGE_INFO_BYTES);
 800345c:	2205      	movs	r2, #5
 800345e:	4918      	ldr	r1, [pc, #96]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 8003460:	4818      	ldr	r0, [pc, #96]	; (80034c4 <HAL_UART_RxCpltCallback+0x134>)
 8003462:	f00b fc35 	bl	800ecd0 <HAL_UART_Receive_IT>
			} break;
 8003466:	e006      	b.n	8003476 <HAL_UART_RxCpltCallback+0xe6>

			default: HAL_UART_Receive_IT(&huart3, rxBuf, PACKAGE_INFO_BYTES);
 8003468:	2205      	movs	r2, #5
 800346a:	4915      	ldr	r1, [pc, #84]	; (80034c0 <HAL_UART_RxCpltCallback+0x130>)
 800346c:	4815      	ldr	r0, [pc, #84]	; (80034c4 <HAL_UART_RxCpltCallback+0x134>)
 800346e:	f00b fc2f 	bl	800ecd0 <HAL_UART_Receive_IT>
 8003472:	e000      	b.n	8003476 <HAL_UART_RxCpltCallback+0xe6>
		}
	}
 8003474:	bf00      	nop


	if (huart->Instance == UART8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <HAL_UART_RxCpltCallback+0x140>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d118      	bne.n	80034b2 <HAL_UART_RxCpltCallback+0x122>
	{
		memcpy(kondo_send_state.buffer + kondo_send_state.index_free, rxBufKondo, CurrentAnswBufLen);
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_UART_RxCpltCallback+0x144>)
 8003482:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003486:	461a      	mov	r2, r3
 8003488:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_UART_RxCpltCallback+0x148>)
 800348a:	4413      	add	r3, r2
 800348c:	4a13      	ldr	r2, [pc, #76]	; (80034dc <HAL_UART_RxCpltCallback+0x14c>)
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	4913      	ldr	r1, [pc, #76]	; (80034e0 <HAL_UART_RxCpltCallback+0x150>)
 8003492:	4618      	mov	r0, r3
 8003494:	f011 f8dc 	bl	8014650 <memcpy>
		kondo_send_state.index_free += CurrentAnswBufLen;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_UART_RxCpltCallback+0x144>)
 800349a:	f893 2201 	ldrb.w	r2, [r3, #513]	; 0x201
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <HAL_UART_RxCpltCallback+0x14c>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_UART_RxCpltCallback+0x144>)
 80034a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		kondo_send_state.transmit_ready = 1;
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_UART_RxCpltCallback+0x144>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	705a      	strb	r2, [r3, #1]
	}

}
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40004800 	.word	0x40004800
 80034bc:	24000fc3 	.word	0x24000fc3
 80034c0:	24000dc0 	.word	0x24000dc0
 80034c4:	24003b9c 	.word	0x24003b9c
 80034c8:	240036f4 	.word	0x240036f4
 80034cc:	24000fd4 	.word	0x24000fd4
 80034d0:	40007c00 	.word	0x40007c00
 80034d4:	24000034 	.word	0x24000034
 80034d8:	24000037 	.word	0x24000037
 80034dc:	24000004 	.word	0x24000004
 80034e0:	24000ec0 	.word	0x24000ec0

080034e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d109      	bne.n	800350a <HAL_TIM_PeriodElapsedCallback+0x26>
  {
    if (kondo_fifo.size > 0)
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_TIM_PeriodElapsedCallback+0x26>
    {
    	kondo_send_state.type = FIFO_FLUSH;
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
    	kondo_send_state.package_ready = 1;
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003506:	2201      	movs	r2, #1
 8003508:	709a      	strb	r2, [r3, #2]
    }

  }
  if (htim->Instance == TIM2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d102      	bne.n	800351a <HAL_TIM_PeriodElapsedCallback+0x36>
	  IMU_head_tim = 1;
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
/*
  if (htim->Instance == TIM4)
  	  respond();
*/
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40000400 	.word	0x40000400
 800352c:	24000fd4 	.word	0x24000fd4
 8003530:	24000034 	.word	0x24000034
 8003534:	24000008 	.word	0x24000008

08003538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003540:	e7fe      	b.n	8003540 <Error_Handler+0x8>
	...

08003544 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <MX_SPI1_Init+0xa8>)
 800354a:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <MX_SPI1_Init+0xac>)
 800354c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003550:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003556:	4b25      	ldr	r3, [pc, #148]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <MX_SPI1_Init+0xa8>)
 800355e:	2207      	movs	r2, #7
 8003560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <MX_SPI1_Init+0xa8>)
 800356c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003570:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003574:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003578:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <MX_SPI1_Init+0xa8>)
 800357c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003580:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003584:	2200      	movs	r2, #0
 8003586:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <MX_SPI1_Init+0xa8>)
 800358a:	2200      	movs	r2, #0
 800358c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003590:	2200      	movs	r2, #0
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <MX_SPI1_Init+0xa8>)
 8003596:	2200      	movs	r2, #0
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_SPI1_Init+0xa8>)
 800359c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035a0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <MX_SPI1_Init+0xa8>)
 80035da:	f009 fbb7 	bl	800cd4c <HAL_SPI_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80035e4:	f7ff ffa8 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	240036fc 	.word	0x240036fc
 80035f0:	40013000 	.word	0x40013000

080035f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0b8      	sub	sp, #224	; 0xe0
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	22bc      	movs	r2, #188	; 0xbc
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f011 f829 	bl	801466c <memset>
  if(spiHandle->Instance==SPI1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_SPI_MspInit+0x1ac>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f040 80b8 	bne.w	8003796 <HAL_SPI_MspInit+0x1a2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800362c:	2320      	movs	r3, #32
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8003630:	2381      	movs	r3, #129	; 0x81
 8003632:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003634:	2302      	movs	r3, #2
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003638:	2302      	movs	r3, #2
 800363a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800363c:	2302      	movs	r3, #2
 800363e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8003640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8003646:	2300      	movs	r3, #0
 8003648:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800364e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003652:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4618      	mov	r0, r3
 800365a:	f008 f80f 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8003664:	f7ff ff68 	bl	8003538 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 800366a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800366e:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 8003670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003674:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003678:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 800367a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800367e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 8003688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368c:	4a45      	ldr	r2, [pc, #276]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003696:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_SPI_MspInit+0x1b0>)
 8003698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036a4:	23e0      	movs	r3, #224	; 0xe0
 80036a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036bc:	2305      	movs	r3, #5
 80036be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036c6:	4619      	mov	r1, r3
 80036c8:	4837      	ldr	r0, [pc, #220]	; (80037a8 <HAL_SPI_MspInit+0x1b4>)
 80036ca:	f004 fc8d 	bl	8007fe8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036d0:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <HAL_SPI_MspInit+0x1bc>)
 80036d2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036d6:	2226      	movs	r2, #38	; 0x26
 80036d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e0:	4b32      	ldr	r3, [pc, #200]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f4:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 8003702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003706:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003708:	4b28      	ldr	r3, [pc, #160]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800370e:	4827      	ldr	r0, [pc, #156]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 8003710:	f001 fe14 	bl	800533c <HAL_DMA_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 800371a:	f7ff ff0d 	bl	8003538 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a22      	ldr	r2, [pc, #136]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 8003722:	679a      	str	r2, [r3, #120]	; 0x78
 8003724:	4a21      	ldr	r2, [pc, #132]	; (80037ac <HAL_SPI_MspInit+0x1b8>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_SPI_MspInit+0x1c4>)
 800372e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003730:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003732:	2225      	movs	r2, #37	; 0x25
 8003734:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003736:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003748:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800374c:	2200      	movs	r2, #0
 800374e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003756:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003758:	2200      	movs	r2, #0
 800375a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800375c:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800375e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003762:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003766:	2200      	movs	r2, #0
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800376a:	4812      	ldr	r0, [pc, #72]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800376c:	f001 fde6 	bl	800533c <HAL_DMA_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8003776:	f7ff fedf 	bl	8003538 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 800377e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003780:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <HAL_SPI_MspInit+0x1c0>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2023      	movs	r0, #35	; 0x23
 800378c:	f001 fda1 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003790:	2023      	movs	r0, #35	; 0x23
 8003792:	f001 fdb8 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003796:	bf00      	nop
 8003798:	37e0      	adds	r7, #224	; 0xe0
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40013000 	.word	0x40013000
 80037a4:	58024400 	.word	0x58024400
 80037a8:	58020000 	.word	0x58020000
 80037ac:	24003784 	.word	0x24003784
 80037b0:	40020070 	.word	0x40020070
 80037b4:	240037fc 	.word	0x240037fc
 80037b8:	40020088 	.word	0x40020088

080037bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_MspInit+0x30>)
 80037c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_MspInit+0x30>)
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_MspInit+0x30>)
 80037d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	58024400 	.word	0x58024400

080037f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f4:	e7fe      	b.n	80037f4 <NMI_Handler+0x4>

080037f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fa:	e7fe      	b.n	80037fa <HardFault_Handler+0x4>

080037fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003800:	e7fe      	b.n	8003800 <MemManage_Handler+0x4>

08003802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <BusFault_Handler+0x4>

08003808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <UsageFault_Handler+0x4>

0800380e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383c:	f001 fc1e 	bl	800507c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream0_IRQHandler+0x10>)
 800384a:	f003 f8a1 	bl	8006990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	240004d0 	.word	0x240004d0

08003858 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA1_Stream1_IRQHandler+0x10>)
 800385e:	f003 f897 	bl	8006990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	24000548 	.word	0x24000548

0800386c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream4_IRQHandler+0x10>)
 8003872:	f003 f88d 	bl	8006990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	24003784 	.word	0x24003784

08003880 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <DMA1_Stream5_IRQHandler+0x10>)
 8003886:	f003 f883 	bl	8006990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	240037fc 	.word	0x240037fc

08003894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <TIM2_IRQHandler+0x10>)
 800389a:	f00a fc67 	bl	800e16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	24003878 	.word	0x24003878

080038a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <TIM3_IRQHandler+0x10>)
 80038ae:	f00a fc5d 	bl	800e16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	240038c4 	.word	0x240038c4

080038bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM4_IRQHandler+0x10>)
 80038c2:	f00a fc53 	bl	800e16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	24003910 	.word	0x24003910

080038d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <I2C2_EV_IRQHandler+0x10>)
 80038d6:	f004 fde1 	bl	800849c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24000484 	.word	0x24000484

080038e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <I2C2_ER_IRQHandler+0x10>)
 80038ea:	f004 fdf1 	bl	80084d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	24000484 	.word	0x24000484

080038f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <SPI1_IRQHandler+0x10>)
 80038fe:	f009 ffa7 	bl	800d850 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	240036fc 	.word	0x240036fc

0800390c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <USART3_IRQHandler+0x10>)
 8003912:	f00b fa33 	bl	800ed7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	24003b9c 	.word	0x24003b9c

08003920 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <UART8_IRQHandler+0x10>)
 8003926:	f00b fa29 	bl	800ed7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	24003a7c 	.word	0x24003a7c

08003934 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 800393a:	f005 fe22 	bl	8009582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	240050fc 	.word	0x240050fc

08003948 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <OTG_FS_IRQHandler+0x10>)
 800394e:	f005 fe18 	bl	8009582 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	240050fc 	.word	0x240050fc

0800395c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	return 1;
 8003960:	2301      	movs	r3, #1
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_kill>:

int _kill(int pid, int sig)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003976:	f010 fe2f 	bl	80145d8 <__errno>
 800397a:	4603      	mov	r3, r0
 800397c:	2216      	movs	r2, #22
 800397e:	601a      	str	r2, [r3, #0]
	return -1;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_exit>:

void _exit (int status)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffe7 	bl	800396c <_kill>
	while (1) {}		/* Make sure we hang here */
 800399e:	e7fe      	b.n	800399e <_exit+0x12>

080039a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e00a      	b.n	80039c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039b2:	f3af 8000 	nop.w
 80039b6:	4601      	mov	r1, r0
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	60ba      	str	r2, [r7, #8]
 80039be:	b2ca      	uxtb	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dbf0      	blt.n	80039b2 <_read+0x12>
	}

return len;
 80039d0:	687b      	ldr	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e009      	b.n	8003a00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	60ba      	str	r2, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dbf1      	blt.n	80039ec <_write+0x12>
	}
	return len;
 8003a08:	687b      	ldr	r3, [r7, #4]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_close>:

int _close(int file)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	return -1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a3a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_isatty>:

int _isatty(int file)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	return 1;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <_sbrk+0x5c>)
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <_sbrk+0x60>)
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_sbrk+0x64>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_sbrk+0x64>)
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <_sbrk+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d207      	bcs.n	8003abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aac:	f010 fd94 	bl	80145d8 <__errno>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	e009      	b.n	8003ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <_sbrk+0x64>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <_sbrk+0x64>)
 8003acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	24080000 	.word	0x24080000
 8003adc:	00000400 	.word	0x00000400
 8003ae0:	24003874 	.word	0x24003874
 8003ae4:	24005740 	.word	0x24005740

08003ae8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aee:	f107 0310 	add.w	r3, r7, #16
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b10:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b16:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b1e:	2264      	movs	r2, #100	; 0x64
 8003b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b2e:	4814      	ldr	r0, [pc, #80]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b30:	f00a fa4d 	bl	800dfce <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b3a:	f7ff fcfd 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b44:	f107 0310 	add.w	r3, r7, #16
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480d      	ldr	r0, [pc, #52]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b4c:	f00a fc2e 	bl	800e3ac <HAL_TIM_ConfigClockSource>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003b56:	f7ff fcef 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4806      	ldr	r0, [pc, #24]	; (8003b80 <MX_TIM2_Init+0x98>)
 8003b68:	f00a fe78 	bl	800e85c <HAL_TIMEx_MasterConfigSynchronization>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003b72:	f7ff fce1 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24003878 	.word	0x24003878

08003b84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8a:	f107 0310 	add.w	r3, r7, #16
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <MX_TIM3_Init+0x98>)
 8003ba6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003baa:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003bb8:	2264      	movs	r2, #100	; 0x64
 8003bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bc8:	4813      	ldr	r0, [pc, #76]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003bca:	f00a fa00 	bl	800dfce <HAL_TIM_Base_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003bd4:	f7ff fcb0 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	4619      	mov	r1, r3
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003be6:	f00a fbe1 	bl	800e3ac <HAL_TIM_ConfigClockSource>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003bf0:	f7ff fca2 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_TIM3_Init+0x94>)
 8003c02:	f00a fe2b 	bl	800e85c <HAL_TIMEx_MasterConfigSynchronization>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c0c:	f7ff fc94 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c10:	bf00      	nop
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	240038c4 	.word	0x240038c4
 8003c1c:	40000400 	.word	0x40000400

08003c20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c34:	1d3b      	adds	r3, r7, #4
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	605a      	str	r2, [r3, #4]
 8003c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <MX_TIM4_Init+0x98>)
 8003c42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c46:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8003c4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c54:	2264      	movs	r2, #100	; 0x64
 8003c56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c64:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c66:	f00a f9b2 	bl	800dfce <HAL_TIM_Base_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003c70:	f7ff fc62 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c7a:	f107 0310 	add.w	r3, r7, #16
 8003c7e:	4619      	mov	r1, r3
 8003c80:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c82:	f00a fb93 	bl	800e3ac <HAL_TIM_ConfigClockSource>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003c8c:	f7ff fc54 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4805      	ldr	r0, [pc, #20]	; (8003cb4 <MX_TIM4_Init+0x94>)
 8003c9e:	f00a fddd 	bl	800e85c <HAL_TIMEx_MasterConfigSynchronization>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003ca8:	f7ff fc46 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cac:	bf00      	nop
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	24003910 	.word	0x24003910
 8003cb8:	40000800 	.word	0x40000800

08003cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d117      	bne.n	8003cfe <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd4:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	201c      	movs	r0, #28
 8003cf2:	f001 faee 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cf6:	201c      	movs	r0, #28
 8003cf8:	f001 fb05 	bl	8005306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cfc:	e038      	b.n	8003d70 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <HAL_TIM_Base_MspInit+0xc0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d117      	bne.n	8003d38 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2100      	movs	r1, #0
 8003d2a:	201d      	movs	r0, #29
 8003d2c:	f001 fad1 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d30:	201d      	movs	r0, #29
 8003d32:	f001 fae8 	bl	8005306 <HAL_NVIC_EnableIRQ>
}
 8003d36:	e01b      	b.n	8003d70 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_TIM_Base_MspInit+0xc4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d116      	bne.n	8003d70 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d48:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_TIM_Base_MspInit+0xbc>)
 8003d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003d60:	2200      	movs	r2, #0
 8003d62:	2100      	movs	r1, #0
 8003d64:	201e      	movs	r0, #30
 8003d66:	f001 fab4 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d6a:	201e      	movs	r0, #30
 8003d6c:	f001 facb 	bl	8005306 <HAL_NVIC_EnableIRQ>
}
 8003d70:	bf00      	nop
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <MX_UART4_Init+0x90>)
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <MX_UART4_Init+0x94>)
 8003d8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 8003d8e:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <MX_UART4_Init+0x90>)
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <MX_UART4_Init+0x98>)
 8003d92:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <MX_UART4_Init+0x90>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <MX_UART4_Init+0x90>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <MX_UART4_Init+0x90>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <MX_UART4_Init+0x90>)
 8003da8:	220c      	movs	r2, #12
 8003daa:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <MX_UART4_Init+0x90>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003dca:	4812      	ldr	r0, [pc, #72]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dcc:	f00a fdf2 	bl	800e9b4 <HAL_UART_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8003dd6:	f7ff fbaf 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dda:	2100      	movs	r1, #0
 8003ddc:	480d      	ldr	r0, [pc, #52]	; (8003e14 <MX_UART4_Init+0x90>)
 8003dde:	f00d fb01 	bl	80113e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8003de8:	f7ff fba6 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	4809      	ldr	r0, [pc, #36]	; (8003e14 <MX_UART4_Init+0x90>)
 8003df0:	f00d fb36 	bl	8011460 <HAL_UARTEx_SetRxFifoThreshold>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8003dfa:	f7ff fb9d 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003dfe:	4805      	ldr	r0, [pc, #20]	; (8003e14 <MX_UART4_Init+0x90>)
 8003e00:	f00d fab7 	bl	8011372 <HAL_UARTEx_DisableFifoMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8003e0a:	f7ff fb95 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2400395c 	.word	0x2400395c
 8003e18:	40004c00 	.word	0x40004c00
 8003e1c:	001312d0 	.word	0x001312d0

08003e20 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e26:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <MX_UART7_Init+0x94>)
 8003e28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <MX_UART7_Init+0x98>)
 8003e2e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003e30:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e44:	220c      	movs	r2, #12
 8003e46:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e4e:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e5a:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003e66:	4812      	ldr	r0, [pc, #72]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e68:	f00a fda4 	bl	800e9b4 <HAL_UART_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8003e72:	f7ff fb61 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e76:	2100      	movs	r1, #0
 8003e78:	480d      	ldr	r0, [pc, #52]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e7a:	f00d fab3 	bl	80113e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8003e84:	f7ff fb58 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4809      	ldr	r0, [pc, #36]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e8c:	f00d fae8 	bl	8011460 <HAL_UARTEx_SetRxFifoThreshold>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8003e96:	f7ff fb4f 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8003e9a:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <MX_UART7_Init+0x90>)
 8003e9c:	f00d fa69 	bl	8011372 <HAL_UARTEx_DisableFifoMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8003ea6:	f7ff fb47 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	240039ec 	.word	0x240039ec
 8003eb4:	40007800 	.word	0x40007800
 8003eb8:	001312d0 	.word	0x001312d0

08003ebc <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ec2:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <MX_UART8_Init+0xa4>)
 8003ec4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ec8:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <MX_UART8_Init+0xa8>)
 8003eca:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ed2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003ed4:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ee0:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ee4:	220c      	movs	r2, #12
 8003ee6:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee8:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f02:	2220      	movs	r2, #32
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003f0e:	4813      	ldr	r0, [pc, #76]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f10:	f00a fd50 	bl	800e9b4 <HAL_UART_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 8003f1a:	f7ff fb0d 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f1e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003f22:	480e      	ldr	r0, [pc, #56]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f24:	f00d fa5e 	bl	80113e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 8003f2e:	f7ff fb03 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f32:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003f36:	4809      	ldr	r0, [pc, #36]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f38:	f00d fa92 	bl	8011460 <HAL_UARTEx_SetRxFifoThreshold>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 8003f42:	f7ff faf9 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 8003f46:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_UART8_Init+0xa0>)
 8003f48:	f00d f9d8 	bl	80112fc <HAL_UARTEx_EnableFifoMode>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 8003f52:	f7ff faf1 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	24003a7c 	.word	0x24003a7c
 8003f60:	40007c00 	.word	0x40007c00
 8003f64:	001312d0 	.word	0x001312d0

08003f68 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f6e:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <MX_USART2_UART_Init+0x94>)
 8003f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f72:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f8e:	220c      	movs	r2, #12
 8003f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f92:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f98:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003faa:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fb0:	4811      	ldr	r0, [pc, #68]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fb2:	f00a fcff 	bl	800e9b4 <HAL_UART_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003fbc:	f7ff fabc 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fc4:	f00d fa0e 	bl	80113e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003fce:	f7ff fab3 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4808      	ldr	r0, [pc, #32]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fd6:	f00d fa43 	bl	8011460 <HAL_UARTEx_SetRxFifoThreshold>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003fe0:	f7ff faaa 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003fe4:	4804      	ldr	r0, [pc, #16]	; (8003ff8 <MX_USART2_UART_Init+0x90>)
 8003fe6:	f00d f9c4 	bl	8011372 <HAL_UARTEx_DisableFifoMode>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003ff0:	f7ff faa2 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	24003b0c 	.word	0x24003b0c
 8003ffc:	40004400 	.word	0x40004400

08004000 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004004:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004006:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <MX_USART3_UART_Init+0xa4>)
 8004008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800400c:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <MX_USART3_UART_Init+0xa8>)
 800400e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800401a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800401e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004028:	4b1d      	ldr	r3, [pc, #116]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800402a:	220c      	movs	r2, #12
 800402c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402e:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004030:	2200      	movs	r2, #0
 8004032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004042:	2200      	movs	r2, #0
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004046:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004048:	2220      	movs	r2, #32
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800404e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004054:	4812      	ldr	r0, [pc, #72]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 8004056:	f00a fcad 	bl	800e9b4 <HAL_UART_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 8004060:	f7ff fa6a 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004064:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800406a:	f00d f9bb 	bl	80113e4 <HAL_UARTEx_SetTxFifoThreshold>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 8004074:	f7ff fa60 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004078:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800407c:	4808      	ldr	r0, [pc, #32]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800407e:	f00d f9ef 	bl	8011460 <HAL_UARTEx_SetRxFifoThreshold>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004088:	f7ff fa56 	bl	8003538 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800408c:	4804      	ldr	r0, [pc, #16]	; (80040a0 <MX_USART3_UART_Init+0xa0>)
 800408e:	f00d f935 	bl	80112fc <HAL_UARTEx_EnableFifoMode>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 8004098:	f7ff fa4e 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	24003b9c 	.word	0x24003b9c
 80040a4:	40004800 	.word	0x40004800
 80040a8:	001312d0 	.word	0x001312d0

080040ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b0c0      	sub	sp, #256	; 0x100
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040c8:	22bc      	movs	r2, #188	; 0xbc
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f010 facd 	bl	801466c <memset>
  if(uartHandle->Instance==UART4)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4abe      	ldr	r2, [pc, #760]	; (80043d0 <HAL_UART_MspInit+0x324>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d142      	bne.n	8004162 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80040dc:	2302      	movs	r3, #2
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ea:	4618      	mov	r0, r3
 80040ec:	f007 fac6 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80040f6:	f7ff fa1f 	bl	8003538 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80040fa:	4bb6      	ldr	r3, [pc, #728]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80040fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004100:	4ab4      	ldr	r2, [pc, #720]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004106:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800410a:	4bb2      	ldr	r3, [pc, #712]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800410c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004116:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004118:	4bae      	ldr	r3, [pc, #696]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800411a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800411e:	4aad      	ldr	r2, [pc, #692]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004128:	4baa      	ldr	r3, [pc, #680]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800412a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004136:	2303      	movs	r3, #3
 8004138:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413c:	2302      	movs	r3, #2
 800413e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800414e:	2308      	movs	r3, #8
 8004150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004154:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004158:	4619      	mov	r1, r3
 800415a:	489f      	ldr	r0, [pc, #636]	; (80043d8 <HAL_UART_MspInit+0x32c>)
 800415c:	f003 ff44 	bl	8007fe8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004160:	e130      	b.n	80043c4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a9d      	ldr	r2, [pc, #628]	; (80043dc <HAL_UART_MspInit+0x330>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d143      	bne.n	80041f4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800416c:	2302      	movs	r3, #2
 800416e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004170:	2300      	movs	r3, #0
 8004172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004176:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800417a:	4618      	mov	r0, r3
 800417c:	f007 fa7e 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8004186:	f7ff f9d7 	bl	8003538 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800418a:	4b92      	ldr	r3, [pc, #584]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800418c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004190:	4a90      	ldr	r2, [pc, #576]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800419a:	4b8e      	ldr	r3, [pc, #568]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800419c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041a8:	4b8a      	ldr	r3, [pc, #552]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	4a89      	ldr	r2, [pc, #548]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b8:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80041c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ce:	2302      	movs	r3, #2
 80041d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80041e0:	2307      	movs	r3, #7
 80041e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80041ea:	4619      	mov	r1, r3
 80041ec:	487c      	ldr	r0, [pc, #496]	; (80043e0 <HAL_UART_MspInit+0x334>)
 80041ee:	f003 fefb 	bl	8007fe8 <HAL_GPIO_Init>
}
 80041f2:	e0e7      	b.n	80043c4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_UART_MspInit+0x338>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d14a      	bne.n	8004294 <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80041fe:	2302      	movs	r3, #2
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004202:	2300      	movs	r3, #0
 8004204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004208:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800420c:	4618      	mov	r0, r3
 800420e:	f007 fa35 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_UART_MspInit+0x170>
      Error_Handler();
 8004218:	f7ff f98e 	bl	8003538 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800421c:	4b6d      	ldr	r3, [pc, #436]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800421e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004222:	4a6c      	ldr	r2, [pc, #432]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004228:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800422c:	4b69      	ldr	r3, [pc, #420]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800422e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800423a:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	4a64      	ldr	r2, [pc, #400]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004242:	f043 0310 	orr.w	r3, r3, #16
 8004246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800424a:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004258:	2303      	movs	r3, #3
 800425a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425e:	2302      	movs	r3, #2
 8004260:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004270:	2308      	movs	r3, #8
 8004272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004276:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800427a:	4619      	mov	r1, r3
 800427c:	4858      	ldr	r0, [pc, #352]	; (80043e0 <HAL_UART_MspInit+0x334>)
 800427e:	f003 feb3 	bl	8007fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004282:	2200      	movs	r2, #0
 8004284:	2100      	movs	r1, #0
 8004286:	2053      	movs	r0, #83	; 0x53
 8004288:	f001 f823 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800428c:	2053      	movs	r0, #83	; 0x53
 800428e:	f001 f83a 	bl	8005306 <HAL_NVIC_EnableIRQ>
}
 8004292:	e097      	b.n	80043c4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a53      	ldr	r2, [pc, #332]	; (80043e8 <HAL_UART_MspInit+0x33c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d142      	bne.n	8004324 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800429e:	2302      	movs	r3, #2
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ac:	4618      	mov	r0, r3
 80042ae:	f007 f9e5 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_MspInit+0x210>
      Error_Handler();
 80042b8:	f7ff f93e 	bl	8003538 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042bc:	4b45      	ldr	r3, [pc, #276]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042c2:	4a44      	ldr	r2, [pc, #272]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ea:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <HAL_UART_MspInit+0x328>)
 80042ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042f8:	230c      	movs	r3, #12
 80042fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004310:	2307      	movs	r3, #7
 8004312:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800431a:	4619      	mov	r1, r3
 800431c:	482e      	ldr	r0, [pc, #184]	; (80043d8 <HAL_UART_MspInit+0x32c>)
 800431e:	f003 fe63 	bl	8007fe8 <HAL_GPIO_Init>
}
 8004322:	e04f      	b.n	80043c4 <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	; (80043ec <HAL_UART_MspInit+0x340>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d14a      	bne.n	80043c4 <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800432e:	2302      	movs	r3, #2
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800433c:	4618      	mov	r0, r3
 800433e:	f007 f99d 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8004348:	f7ff f8f6 	bl	8003538 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800434e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800435e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800436c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_UART_MspInit+0x328>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800437a:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_UART_MspInit+0x328>)
 800437c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800438c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	2302      	movs	r3, #2
 8004392:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043a2:	2307      	movs	r3, #7
 80043a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043ac:	4619      	mov	r1, r3
 80043ae:	4810      	ldr	r0, [pc, #64]	; (80043f0 <HAL_UART_MspInit+0x344>)
 80043b0:	f003 fe1a 	bl	8007fe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2027      	movs	r0, #39	; 0x27
 80043ba:	f000 ff8a 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043be:	2027      	movs	r0, #39	; 0x27
 80043c0:	f000 ffa1 	bl	8005306 <HAL_NVIC_EnableIRQ>
}
 80043c4:	bf00      	nop
 80043c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40004c00 	.word	0x40004c00
 80043d4:	58024400 	.word	0x58024400
 80043d8:	58020000 	.word	0x58020000
 80043dc:	40007800 	.word	0x40007800
 80043e0:	58021000 	.word	0x58021000
 80043e4:	40007c00 	.word	0x40007c00
 80043e8:	40004400 	.word	0x40004400
 80043ec:	40004800 	.word	0x40004800
 80043f0:	58020c00 	.word	0x58020c00

080043f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80043f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800442c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043f8:	f000 fd46 	bl	8004e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043fc:	480c      	ldr	r0, [pc, #48]	; (8004430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043fe:	490d      	ldr	r1, [pc, #52]	; (8004434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004404:	e002      	b.n	800440c <LoopCopyDataInit>

08004406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440a:	3304      	adds	r3, #4

0800440c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800440c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004410:	d3f9      	bcc.n	8004406 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004414:	4c0a      	ldr	r4, [pc, #40]	; (8004440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004418:	e001      	b.n	800441e <LoopFillZerobss>

0800441a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800441c:	3204      	adds	r2, #4

0800441e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004420:	d3fb      	bcc.n	800441a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004422:	f010 f8f1 	bl	8014608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004426:	f7fe fc8d 	bl	8002d44 <main>
  bx  lr
 800442a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800442c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004430:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004434:	24000420 	.word	0x24000420
  ldr r2, =_sidata
 8004438:	0802ff1c 	.word	0x0802ff1c
  ldr r2, =_sbss
 800443c:	24000420 	.word	0x24000420
  ldr r4, =_ebss
 8004440:	2400573c 	.word	0x2400573c

08004444 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC3_IRQHandler>
	...

08004448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800444c:	2200      	movs	r2, #0
 800444e:	4913      	ldr	r1, [pc, #76]	; (800449c <MX_USB_DEVICE_Init+0x54>)
 8004450:	4813      	ldr	r0, [pc, #76]	; (80044a0 <MX_USB_DEVICE_Init+0x58>)
 8004452:	f00e ff31 	bl	80132b8 <USBD_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800445c:	f7ff f86c 	bl	8003538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004460:	4910      	ldr	r1, [pc, #64]	; (80044a4 <MX_USB_DEVICE_Init+0x5c>)
 8004462:	480f      	ldr	r0, [pc, #60]	; (80044a0 <MX_USB_DEVICE_Init+0x58>)
 8004464:	f00e ff58 	bl	8013318 <USBD_RegisterClass>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800446e:	f7ff f863 	bl	8003538 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004472:	490d      	ldr	r1, [pc, #52]	; (80044a8 <MX_USB_DEVICE_Init+0x60>)
 8004474:	480a      	ldr	r0, [pc, #40]	; (80044a0 <MX_USB_DEVICE_Init+0x58>)
 8004476:	f00e fea9 	bl	80131cc <USBD_CDC_RegisterInterface>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004480:	f7ff f85a 	bl	8003538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004484:	4806      	ldr	r0, [pc, #24]	; (80044a0 <MX_USB_DEVICE_Init+0x58>)
 8004486:	f00e ff6e 	bl	8013366 <USBD_Start>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004490:	f7ff f852 	bl	8003538 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004494:	f006 f928 	bl	800a6e8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	2400024c 	.word	0x2400024c
 80044a0:	24003c2c 	.word	0x24003c2c
 80044a4:	240002b8 	.word	0x240002b8
 80044a8:	24000238 	.word	0x24000238

080044ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80044b0:	2200      	movs	r2, #0
 80044b2:	4905      	ldr	r1, [pc, #20]	; (80044c8 <CDC_Init_FS+0x1c>)
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <CDC_Init_FS+0x20>)
 80044b6:	f00e fe9e 	bl	80131f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80044ba:	4905      	ldr	r1, [pc, #20]	; (80044d0 <CDC_Init_FS+0x24>)
 80044bc:	4803      	ldr	r0, [pc, #12]	; (80044cc <CDC_Init_FS+0x20>)
 80044be:	f00e feb8 	bl	8013232 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80044c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	240046fc 	.word	0x240046fc
 80044cc:	24003c2c 	.word	0x24003c2c
 80044d0:	24003efc 	.word	0x24003efc

080044d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80044d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	4613      	mov	r3, r2
 80044f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	2b23      	cmp	r3, #35	; 0x23
 80044f8:	d84a      	bhi.n	8004590 <CDC_Control_FS+0xac>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <CDC_Control_FS+0x1c>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004591 	.word	0x08004591
 8004504:	08004591 	.word	0x08004591
 8004508:	08004591 	.word	0x08004591
 800450c:	08004591 	.word	0x08004591
 8004510:	08004591 	.word	0x08004591
 8004514:	08004591 	.word	0x08004591
 8004518:	08004591 	.word	0x08004591
 800451c:	08004591 	.word	0x08004591
 8004520:	08004591 	.word	0x08004591
 8004524:	08004591 	.word	0x08004591
 8004528:	08004591 	.word	0x08004591
 800452c:	08004591 	.word	0x08004591
 8004530:	08004591 	.word	0x08004591
 8004534:	08004591 	.word	0x08004591
 8004538:	08004591 	.word	0x08004591
 800453c:	08004591 	.word	0x08004591
 8004540:	08004591 	.word	0x08004591
 8004544:	08004591 	.word	0x08004591
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004591 	.word	0x08004591
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
 8004560:	08004591 	.word	0x08004591
 8004564:	08004591 	.word	0x08004591
 8004568:	08004591 	.word	0x08004591
 800456c:	08004591 	.word	0x08004591
 8004570:	08004591 	.word	0x08004591
 8004574:	08004591 	.word	0x08004591
 8004578:	08004591 	.word	0x08004591
 800457c:	08004591 	.word	0x08004591
 8004580:	08004591 	.word	0x08004591
 8004584:	08004591 	.word	0x08004591
 8004588:	08004591 	.word	0x08004591
 800458c:	08004591 	.word	0x08004591
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004590:	bf00      	nop
  }

  return (USBD_OK);
 8004592:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4805      	ldr	r0, [pc, #20]	; (80045c4 <CDC_Receive_FS+0x24>)
 80045ae:	f00e fe40 	bl	8013232 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80045b2:	4804      	ldr	r0, [pc, #16]	; (80045c4 <CDC_Receive_FS+0x24>)
 80045b4:	f00e fe56 	bl	8013264 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80045b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24003c2c 	.word	0x24003c2c

080045c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80045da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2212      	movs	r2, #18
 80045fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80045fe:	4b03      	ldr	r3, [pc, #12]	; (800460c <USBD_FS_DeviceDescriptor+0x20>)
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	24000268 	.word	0x24000268

08004610 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	6039      	str	r1, [r7, #0]
 800461a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8004622:	4b03      	ldr	r3, [pc, #12]	; (8004630 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	2400027c 	.word	0x2400027c

08004634 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d105      	bne.n	8004652 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <USBD_FS_ProductStrDescriptor+0x34>)
 800464a:	4808      	ldr	r0, [pc, #32]	; (800466c <USBD_FS_ProductStrDescriptor+0x38>)
 800464c:	f00f febd 	bl	80143ca <USBD_GetString>
 8004650:	e004      	b.n	800465c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4904      	ldr	r1, [pc, #16]	; (8004668 <USBD_FS_ProductStrDescriptor+0x34>)
 8004656:	4805      	ldr	r0, [pc, #20]	; (800466c <USBD_FS_ProductStrDescriptor+0x38>)
 8004658:	f00f feb7 	bl	80143ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800465c:	4b02      	ldr	r3, [pc, #8]	; (8004668 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	24004efc 	.word	0x24004efc
 800466c:	080156cc 	.word	0x080156cc

08004670 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	4904      	ldr	r1, [pc, #16]	; (8004690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8004680:	4804      	ldr	r0, [pc, #16]	; (8004694 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8004682:	f00f fea2 	bl	80143ca <USBD_GetString>
  return USBD_StrDesc;
 8004686:	4b02      	ldr	r3, [pc, #8]	; (8004690 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	24004efc 	.word	0x24004efc
 8004694:	080156e4 	.word	0x080156e4

08004698 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	221a      	movs	r2, #26
 80046a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80046aa:	f000 f843 	bl	8004734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80046ae:	4b02      	ldr	r3, [pc, #8]	; (80046b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	24000280 	.word	0x24000280

080046bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4907      	ldr	r1, [pc, #28]	; (80046f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046d2:	4808      	ldr	r0, [pc, #32]	; (80046f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80046d4:	f00f fe79 	bl	80143ca <USBD_GetString>
 80046d8:	e004      	b.n	80046e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4904      	ldr	r1, [pc, #16]	; (80046f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80046de:	4805      	ldr	r0, [pc, #20]	; (80046f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80046e0:	f00f fe73 	bl	80143ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80046e4:	4b02      	ldr	r3, [pc, #8]	; (80046f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	24004efc 	.word	0x24004efc
 80046f4:	080156f8 	.word	0x080156f8

080046f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4907      	ldr	r1, [pc, #28]	; (800472c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800470e:	4808      	ldr	r0, [pc, #32]	; (8004730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004710:	f00f fe5b 	bl	80143ca <USBD_GetString>
 8004714:	e004      	b.n	8004720 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4904      	ldr	r1, [pc, #16]	; (800472c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800471a:	4805      	ldr	r0, [pc, #20]	; (8004730 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800471c:	f00f fe55 	bl	80143ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	24004efc 	.word	0x24004efc
 8004730:	08015704 	.word	0x08015704

08004734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <Get_SerialNum+0x44>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <Get_SerialNum+0x48>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <Get_SerialNum+0x4c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800475a:	2208      	movs	r2, #8
 800475c:	4909      	ldr	r1, [pc, #36]	; (8004784 <Get_SerialNum+0x50>)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f814 	bl	800478c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004764:	2204      	movs	r2, #4
 8004766:	4908      	ldr	r1, [pc, #32]	; (8004788 <Get_SerialNum+0x54>)
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 f80f 	bl	800478c <IntToUnicode>
  }
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	1ff1e800 	.word	0x1ff1e800
 800477c:	1ff1e804 	.word	0x1ff1e804
 8004780:	1ff1e808 	.word	0x1ff1e808
 8004784:	24000282 	.word	0x24000282
 8004788:	24000292 	.word	0x24000292

0800478c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
 80047a2:	e027      	b.n	80047f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	0f1b      	lsrs	r3, r3, #28
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d80b      	bhi.n	80047c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0f1b      	lsrs	r3, r3, #28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4619      	mov	r1, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	440b      	add	r3, r1
 80047bc:	3230      	adds	r2, #48	; 0x30
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e00a      	b.n	80047da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0f1b      	lsrs	r3, r3, #28
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4619      	mov	r1, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	440b      	add	r3, r1
 80047d4:	3237      	adds	r2, #55	; 0x37
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	3301      	adds	r3, #1
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4413      	add	r3, r2
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	3301      	adds	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
 80047f4:	7dfa      	ldrb	r2, [r7, #23]
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3d3      	bcc.n	80047a4 <IntToUnicode+0x18>
  }
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0b8      	sub	sp, #224	; 0xe0
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004814:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	22bc      	movs	r2, #188	; 0xbc
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f00f ff1d 	bl	801466c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <HAL_PCD_MspInit+0xe8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d156      	bne.n	80048ea <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800483c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004840:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004842:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8004846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800484a:	f107 0310 	add.w	r3, r7, #16
 800484e:	4618      	mov	r0, r3
 8004850:	f006 ff14 	bl	800b67c <HAL_RCCEx_PeriphCLKConfig>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800485a:	f7fe fe6d 	bl	8003538 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800485e:	f005 ff43 	bl	800a6e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 8004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004868:	4a23      	ldr	r2, [pc, #140]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 8004874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004880:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800489a:	230a      	movs	r3, #10
 800489c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80048a4:	4619      	mov	r1, r3
 80048a6:	4815      	ldr	r0, [pc, #84]	; (80048fc <HAL_PCD_MspInit+0xf0>)
 80048a8:	f003 fb9e 	bl	8007fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 80048ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048b2:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 80048b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_PCD_MspInit+0xec>)
 80048be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80048ca:	2200      	movs	r2, #0
 80048cc:	2100      	movs	r1, #0
 80048ce:	2062      	movs	r0, #98	; 0x62
 80048d0:	f000 fcff 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80048d4:	2062      	movs	r0, #98	; 0x62
 80048d6:	f000 fd16 	bl	8005306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80048da:	2200      	movs	r2, #0
 80048dc:	2100      	movs	r1, #0
 80048de:	2065      	movs	r0, #101	; 0x65
 80048e0:	f000 fcf7 	bl	80052d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80048e4:	2065      	movs	r0, #101	; 0x65
 80048e6:	f000 fd0e 	bl	8005306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80048ea:	bf00      	nop
 80048ec:	37e0      	adds	r7, #224	; 0xe0
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40080000 	.word	0x40080000
 80048f8:	58024400 	.word	0x58024400
 80048fc:	58020000 	.word	0x58020000

08004900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f00e fd70 	bl	80133fc <USBD_LL_SetupStage>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	4619      	mov	r1, r3
 800494e:	f00e fdaa 	bl	80134a6 <USBD_LL_DataOutStage>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3348      	adds	r3, #72	; 0x48
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	4619      	mov	r1, r3
 8004982:	f00e fdf3 	bl	801356c <USBD_LL_DataInStage>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800499c:	4618      	mov	r0, r3
 800499e:	f00e ff07 	bl	80137b0 <USBD_LL_SOF>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	e008      	b.n	80049d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d102      	bne.n	80049d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e001      	b.n	80049d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80049d2:	f7fe fdb1 	bl	8003538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f00e fea7 	bl	8013734 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049ec:	4618      	mov	r0, r3
 80049ee:	f00e fe53 	bl	8013698 <USBD_LL_Reset>
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f00e fea2 	bl	8013754 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_PCD_SuspendCallback+0x48>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <HAL_PCD_SuspendCallback+0x48>)
 8004a36:	f043 0306 	orr.w	r3, r3, #6
 8004a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a56:	4618      	mov	r0, r3
 8004a58:	f00e fe92 	bl	8013780 <USBD_LL_Resume>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f00e fee0 	bl	8013840 <USBD_LL_IsoOUTIncomplete>
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f00e fea8 	bl	80137f4 <USBD_LL_IsoINIncomplete>
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004aba:	4618      	mov	r0, r3
 8004abc:	f00e fee6 	bl	801388c <USBD_LL_DevConnected>
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f00e fee3 	bl	80138a2 <USBD_LL_DevDisconnected>
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d13e      	bne.n	8004b72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004af4:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <USBD_LL_Init+0x98>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b04:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <USBD_LL_Init+0x9c>)
 8004b08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b0c:	2209      	movs	r2, #9
 8004b0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004b10:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b12:	2202      	movs	r2, #2
 8004b14:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b1c:	4b17      	ldr	r3, [pc, #92]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b1e:	2202      	movs	r2, #2
 8004b20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004b28:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004b46:	480d      	ldr	r0, [pc, #52]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b48:	f004 fbc4 	bl	80092d4 <HAL_PCD_Init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8004b52:	f7fe fcf1 	bl	8003538 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	4808      	ldr	r0, [pc, #32]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b5a:	f005 fd4a 	bl	800a5f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004b5e:	2240      	movs	r2, #64	; 0x40
 8004b60:	2100      	movs	r1, #0
 8004b62:	4806      	ldr	r0, [pc, #24]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b64:	f005 fcfe 	bl	800a564 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4803      	ldr	r0, [pc, #12]	; (8004b7c <USBD_LL_Init+0x98>)
 8004b6e:	f005 fcf9 	bl	800a564 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	240050fc 	.word	0x240050fc
 8004b80:	40080000 	.word	0x40080000

08004b84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f004 fcbe 	bl	800951c <HAL_PCD_Start>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f942 	bl	8004e30 <USBD_Get_USB_Status>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4603      	mov	r3, r0
 8004bca:	70fb      	strb	r3, [r7, #3]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70bb      	strb	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004be2:	78bb      	ldrb	r3, [r7, #2]
 8004be4:	883a      	ldrh	r2, [r7, #0]
 8004be6:	78f9      	ldrb	r1, [r7, #3]
 8004be8:	f005 f8c3 	bl	8009d72 <HAL_PCD_EP_Open>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f91c 	bl	8004e30 <USBD_Get_USB_Status>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f005 f90c 	bl	8009e42 <HAL_PCD_EP_Close>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f8fd 	bl	8004e30 <USBD_Get_USB_Status>
 8004c36:	4603      	mov	r3, r0
 8004c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 f9e4 	bl	800a030 <HAL_PCD_EP_SetStall>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f8de 	bl	8004e30 <USBD_Get_USB_Status>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f005 fa29 	bl	800a0f8 <HAL_PCD_EP_ClrStall>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 f8bf 	bl	8004e30 <USBD_Get_USB_Status>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004cd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da0b      	bge.n	8004cf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	333e      	adds	r3, #62	; 0x3e
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	e00b      	b.n	8004d0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f004 fff6 	bl	8009d28 <HAL_PCD_SetAddress>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f874 	bl	8004e30 <USBD_Get_USB_Status>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	460b      	mov	r3, r1
 8004d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004d74:	7af9      	ldrb	r1, [r7, #11]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	f005 f90f 	bl	8009f9c <HAL_PCD_EP_Transmit>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f853 	bl	8004e30 <USBD_Get_USB_Status>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	607a      	str	r2, [r7, #4]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	460b      	mov	r3, r1
 8004da6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004db6:	7af9      	ldrb	r1, [r7, #11]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f005 f88b 	bl	8009ed6 <HAL_PCD_EP_Receive>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f832 	bl	8004e30 <USBD_Get_USB_Status>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f005 f8bb 	bl	8009f6c <HAL_PCD_EP_GetRxCount>
 8004df6:	4603      	mov	r3, r0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8004e08:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <USBD_static_malloc+0x18>)
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	24005504 	.word	0x24005504

08004e1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d817      	bhi.n	8004e74 <USBD_Get_USB_Status+0x44>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <USBD_Get_USB_Status+0x1c>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e5d 	.word	0x08004e5d
 8004e50:	08004e63 	.word	0x08004e63
 8004e54:	08004e69 	.word	0x08004e69
 8004e58:	08004e6f 	.word	0x08004e6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e60:	e00b      	b.n	8004e7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
    break;
 8004e66:	e008      	b.n	8004e7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8004e6c:	e005      	b.n	8004e7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	73fb      	strb	r3, [r7, #15]
    break;
 8004e72:	e002      	b.n	8004e7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004e74:	2303      	movs	r3, #3
 8004e76:	73fb      	strb	r3, [r7, #15]
    break;
 8004e78:	bf00      	nop
  }
  return usb_status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <SystemInit+0xe4>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	4a36      	ldr	r2, [pc, #216]	; (8004f6c <SystemInit+0xe4>)
 8004e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004e9c:	4b34      	ldr	r3, [pc, #208]	; (8004f70 <SystemInit+0xe8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d807      	bhi.n	8004eb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <SystemInit+0xe8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 030f 	bic.w	r3, r3, #15
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <SystemInit+0xe8>)
 8004eb2:	f043 0307 	orr.w	r3, r3, #7
 8004eb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004eb8:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <SystemInit+0xec>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a2d      	ldr	r2, [pc, #180]	; (8004f74 <SystemInit+0xec>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <SystemInit+0xec>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <SystemInit+0xec>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4929      	ldr	r1, [pc, #164]	; (8004f74 <SystemInit+0xec>)
 8004ed0:	4b29      	ldr	r3, [pc, #164]	; (8004f78 <SystemInit+0xf0>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <SystemInit+0xe8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <SystemInit+0xe8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 030f 	bic.w	r3, r3, #15
 8004eea:	4a21      	ldr	r2, [pc, #132]	; (8004f70 <SystemInit+0xe8>)
 8004eec:	f043 0307 	orr.w	r3, r3, #7
 8004ef0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <SystemInit+0xec>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <SystemInit+0xec>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <SystemInit+0xec>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <SystemInit+0xec>)
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <SystemInit+0xf4>)
 8004f08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <SystemInit+0xec>)
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <SystemInit+0xf8>)
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004f10:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <SystemInit+0xec>)
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <SystemInit+0xfc>)
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004f16:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <SystemInit+0xec>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <SystemInit+0xec>)
 8004f1e:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <SystemInit+0xfc>)
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004f22:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <SystemInit+0xec>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <SystemInit+0xec>)
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <SystemInit+0xfc>)
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004f2e:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <SystemInit+0xec>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <SystemInit+0xec>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <SystemInit+0xec>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <SystemInit+0xec>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <SystemInit+0x100>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <SystemInit+0x104>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f52:	d202      	bcs.n	8004f5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <SystemInit+0x108>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <SystemInit+0x10c>)
 8004f5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004f60:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00
 8004f70:	52002000 	.word	0x52002000
 8004f74:	58024400 	.word	0x58024400
 8004f78:	eaf6ed7f 	.word	0xeaf6ed7f
 8004f7c:	02020200 	.word	0x02020200
 8004f80:	01ff0000 	.word	0x01ff0000
 8004f84:	01010280 	.word	0x01010280
 8004f88:	5c001000 	.word	0x5c001000
 8004f8c:	ffff0000 	.word	0xffff0000
 8004f90:	51008108 	.word	0x51008108
 8004f94:	52004000 	.word	0x52004000

08004f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f9e:	2003      	movs	r0, #3
 8004fa0:	f000 f98c 	bl	80052bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fa4:	f006 f994 	bl	800b2d0 <HAL_RCC_GetSysClockFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <HAL_Init+0x68>)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	4913      	ldr	r1, [pc, #76]	; (8005004 <HAL_Init+0x6c>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_Init+0x68>)
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4a0e      	ldr	r2, [pc, #56]	; (8005004 <HAL_Init+0x6c>)
 8004fcc:	5cd3      	ldrb	r3, [r2, r3]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	4a0b      	ldr	r2, [pc, #44]	; (8005008 <HAL_Init+0x70>)
 8004fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fdc:	4a0b      	ldr	r2, [pc, #44]	; (800500c <HAL_Init+0x74>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fe2:	200f      	movs	r0, #15
 8004fe4:	f000 f814 	bl	8005010 <HAL_InitTick>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e002      	b.n	8004ff8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004ff2:	f7fe fbe3 	bl	80037bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	58024400 	.word	0x58024400
 8005004:	0802fdf8 	.word	0x0802fdf8
 8005008:	240002a0 	.word	0x240002a0
 800500c:	2400029c 	.word	0x2400029c

08005010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_InitTick+0x60>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e021      	b.n	8005068 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_InitTick+0x64>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_InitTick+0x60>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4619      	mov	r1, r3
 800502e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005032:	fbb3 f3f1 	udiv	r3, r3, r1
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f971 	bl	8005322 <HAL_SYSTICK_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e00e      	b.n	8005068 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b0f      	cmp	r3, #15
 800504e:	d80a      	bhi.n	8005066 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005050:	2200      	movs	r2, #0
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	f000 f93b 	bl	80052d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800505c:	4a06      	ldr	r2, [pc, #24]	; (8005078 <HAL_InitTick+0x68>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	240002a8 	.word	0x240002a8
 8005074:	2400029c 	.word	0x2400029c
 8005078:	240002a4 	.word	0x240002a4

0800507c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_IncTick+0x20>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_IncTick+0x24>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4413      	add	r3, r2
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_IncTick+0x24>)
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	240002a8 	.word	0x240002a8
 80050a0:	24005724 	.word	0x24005724

080050a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return uwTick;
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_GetTick+0x14>)
 80050aa:	681b      	ldr	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	24005724 	.word	0x24005724

080050bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050c4:	f7ff ffee 	bl	80050a4 <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d005      	beq.n	80050e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <HAL_Delay+0x44>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050e2:	bf00      	nop
 80050e4:	f7ff ffde 	bl	80050a4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d8f7      	bhi.n	80050e4 <HAL_Delay+0x28>
  {
  }
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	240002a8 	.word	0x240002a8

08005104 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_GetREVID+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0c1b      	lsrs	r3, r3, #16
}
 800510e:	4618      	mov	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	5c001000 	.word	0x5c001000

0800511c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <__NVIC_SetPriorityGrouping+0x40>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005138:	4013      	ands	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <__NVIC_SetPriorityGrouping+0x44>)
 8005146:	4313      	orrs	r3, r2
 8005148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <__NVIC_SetPriorityGrouping+0x40>)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	60d3      	str	r3, [r2, #12]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	e000ed00 	.word	0xe000ed00
 8005160:	05fa0000 	.word	0x05fa0000

08005164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <__NVIC_GetPriorityGrouping+0x18>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 0307 	and.w	r3, r3, #7
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800518a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	db0b      	blt.n	80051aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	4907      	ldr	r1, [pc, #28]	; (80051b8 <__NVIC_EnableIRQ+0x38>)
 800519a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2001      	movs	r0, #1
 80051a2:	fa00 f202 	lsl.w	r2, r0, r2
 80051a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	e000e100 	.word	0xe000e100

080051bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	6039      	str	r1, [r7, #0]
 80051c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	db0a      	blt.n	80051e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	490c      	ldr	r1, [pc, #48]	; (8005208 <__NVIC_SetPriority+0x4c>)
 80051d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051da:	0112      	lsls	r2, r2, #4
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	440b      	add	r3, r1
 80051e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e4:	e00a      	b.n	80051fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4908      	ldr	r1, [pc, #32]	; (800520c <__NVIC_SetPriority+0x50>)
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	3b04      	subs	r3, #4
 80051f4:	0112      	lsls	r2, r2, #4
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	440b      	add	r3, r1
 80051fa:	761a      	strb	r2, [r3, #24]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000e100 	.word	0xe000e100
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f1c3 0307 	rsb	r3, r3, #7
 800522a:	2b04      	cmp	r3, #4
 800522c:	bf28      	it	cs
 800522e:	2304      	movcs	r3, #4
 8005230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3304      	adds	r3, #4
 8005236:	2b06      	cmp	r3, #6
 8005238:	d902      	bls.n	8005240 <NVIC_EncodePriority+0x30>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3b03      	subs	r3, #3
 800523e:	e000      	b.n	8005242 <NVIC_EncodePriority+0x32>
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43da      	mvns	r2, r3
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	401a      	ands	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005258:	f04f 31ff 	mov.w	r1, #4294967295
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	43d9      	mvns	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005268:	4313      	orrs	r3, r2
         );
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3b01      	subs	r3, #1
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005288:	d301      	bcc.n	800528e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800528a:	2301      	movs	r3, #1
 800528c:	e00f      	b.n	80052ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <SysTick_Config+0x40>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005296:	210f      	movs	r1, #15
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	f7ff ff8e 	bl	80051bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <SysTick_Config+0x40>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052a6:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <SysTick_Config+0x40>)
 80052a8:	2207      	movs	r2, #7
 80052aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	e000e010 	.word	0xe000e010

080052bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff29 	bl	800511c <__NVIC_SetPriorityGrouping>
}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	4603      	mov	r3, r0
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052e0:	f7ff ff40 	bl	8005164 <__NVIC_GetPriorityGrouping>
 80052e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	f7ff ff90 	bl	8005210 <NVIC_EncodePriority>
 80052f0:	4602      	mov	r2, r0
 80052f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff ff5f 	bl	80051bc <__NVIC_SetPriority>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	4603      	mov	r3, r0
 800530e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff ff33 	bl	8005180 <__NVIC_EnableIRQ>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffa4 	bl	8005278 <SysTick_Config>
 8005330:	4603      	mov	r3, r0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005344:	f7ff feae 	bl	80050a4 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e316      	b.n	8005982 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a66      	ldr	r2, [pc, #408]	; (80054f4 <HAL_DMA_Init+0x1b8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d04a      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a65      	ldr	r2, [pc, #404]	; (80054f8 <HAL_DMA_Init+0x1bc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d045      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a63      	ldr	r2, [pc, #396]	; (80054fc <HAL_DMA_Init+0x1c0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d040      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a62      	ldr	r2, [pc, #392]	; (8005500 <HAL_DMA_Init+0x1c4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d03b      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a60      	ldr	r2, [pc, #384]	; (8005504 <HAL_DMA_Init+0x1c8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d036      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5f      	ldr	r2, [pc, #380]	; (8005508 <HAL_DMA_Init+0x1cc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d031      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5d      	ldr	r2, [pc, #372]	; (800550c <HAL_DMA_Init+0x1d0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d02c      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a5c      	ldr	r2, [pc, #368]	; (8005510 <HAL_DMA_Init+0x1d4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d027      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5a      	ldr	r2, [pc, #360]	; (8005514 <HAL_DMA_Init+0x1d8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d022      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a59      	ldr	r2, [pc, #356]	; (8005518 <HAL_DMA_Init+0x1dc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01d      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a57      	ldr	r2, [pc, #348]	; (800551c <HAL_DMA_Init+0x1e0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d018      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a56      	ldr	r2, [pc, #344]	; (8005520 <HAL_DMA_Init+0x1e4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a54      	ldr	r2, [pc, #336]	; (8005524 <HAL_DMA_Init+0x1e8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a53      	ldr	r2, [pc, #332]	; (8005528 <HAL_DMA_Init+0x1ec>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a51      	ldr	r2, [pc, #324]	; (800552c <HAL_DMA_Init+0x1f0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_Init+0xb8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a50      	ldr	r2, [pc, #320]	; (8005530 <HAL_DMA_Init+0x1f4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA_Init+0xbc>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_DMA_Init+0xbe>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 813b 	beq.w	8005676 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a37      	ldr	r2, [pc, #220]	; (80054f4 <HAL_DMA_Init+0x1b8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d04a      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a36      	ldr	r2, [pc, #216]	; (80054f8 <HAL_DMA_Init+0x1bc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d045      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a34      	ldr	r2, [pc, #208]	; (80054fc <HAL_DMA_Init+0x1c0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d040      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a33      	ldr	r2, [pc, #204]	; (8005500 <HAL_DMA_Init+0x1c4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d03b      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a31      	ldr	r2, [pc, #196]	; (8005504 <HAL_DMA_Init+0x1c8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d036      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a30      	ldr	r2, [pc, #192]	; (8005508 <HAL_DMA_Init+0x1cc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d031      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2e      	ldr	r2, [pc, #184]	; (800550c <HAL_DMA_Init+0x1d0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02c      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <HAL_DMA_Init+0x1d4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d027      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2b      	ldr	r2, [pc, #172]	; (8005514 <HAL_DMA_Init+0x1d8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2a      	ldr	r2, [pc, #168]	; (8005518 <HAL_DMA_Init+0x1dc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01d      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a28      	ldr	r2, [pc, #160]	; (800551c <HAL_DMA_Init+0x1e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a27      	ldr	r2, [pc, #156]	; (8005520 <HAL_DMA_Init+0x1e4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a25      	ldr	r2, [pc, #148]	; (8005524 <HAL_DMA_Init+0x1e8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a24      	ldr	r2, [pc, #144]	; (8005528 <HAL_DMA_Init+0x1ec>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a22      	ldr	r2, [pc, #136]	; (800552c <HAL_DMA_Init+0x1f0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_DMA_Init+0x174>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <HAL_DMA_Init+0x1f4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <HAL_DMA_Init+0x186>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e007      	b.n	80054d2 <HAL_DMA_Init+0x196>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054d2:	e02f      	b.n	8005534 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d4:	f7ff fde6 	bl	80050a4 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d928      	bls.n	8005534 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2203      	movs	r2, #3
 80054ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e246      	b.n	8005982 <HAL_DMA_Init+0x646>
 80054f4:	40020010 	.word	0x40020010
 80054f8:	40020028 	.word	0x40020028
 80054fc:	40020040 	.word	0x40020040
 8005500:	40020058 	.word	0x40020058
 8005504:	40020070 	.word	0x40020070
 8005508:	40020088 	.word	0x40020088
 800550c:	400200a0 	.word	0x400200a0
 8005510:	400200b8 	.word	0x400200b8
 8005514:	40020410 	.word	0x40020410
 8005518:	40020428 	.word	0x40020428
 800551c:	40020440 	.word	0x40020440
 8005520:	40020458 	.word	0x40020458
 8005524:	40020470 	.word	0x40020470
 8005528:	40020488 	.word	0x40020488
 800552c:	400204a0 	.word	0x400204a0
 8005530:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1c8      	bne.n	80054d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4b83      	ldr	r3, [pc, #524]	; (800575c <HAL_DMA_Init+0x420>)
 800554e:	4013      	ands	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800555a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b04      	cmp	r3, #4
 8005586:	d107      	bne.n	8005598 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005598:	4b71      	ldr	r3, [pc, #452]	; (8005760 <HAL_DMA_Init+0x424>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b71      	ldr	r3, [pc, #452]	; (8005764 <HAL_DMA_Init+0x428>)
 800559e:	4013      	ands	r3, r2
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a4:	d328      	bcc.n	80055f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b28      	cmp	r3, #40	; 0x28
 80055ac:	d903      	bls.n	80055b6 <HAL_DMA_Init+0x27a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b2e      	cmp	r3, #46	; 0x2e
 80055b4:	d917      	bls.n	80055e6 <HAL_DMA_Init+0x2aa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b3e      	cmp	r3, #62	; 0x3e
 80055bc:	d903      	bls.n	80055c6 <HAL_DMA_Init+0x28a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b42      	cmp	r3, #66	; 0x42
 80055c4:	d90f      	bls.n	80055e6 <HAL_DMA_Init+0x2aa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b46      	cmp	r3, #70	; 0x46
 80055cc:	d903      	bls.n	80055d6 <HAL_DMA_Init+0x29a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b48      	cmp	r3, #72	; 0x48
 80055d4:	d907      	bls.n	80055e6 <HAL_DMA_Init+0x2aa>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b4e      	cmp	r3, #78	; 0x4e
 80055dc:	d905      	bls.n	80055ea <HAL_DMA_Init+0x2ae>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b52      	cmp	r3, #82	; 0x52
 80055e4:	d801      	bhi.n	80055ea <HAL_DMA_Init+0x2ae>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_DMA_Init+0x2b0>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b04      	cmp	r3, #4
 8005620:	d117      	bne.n	8005652 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 fb4d 	bl	8007cd4 <DMA_CheckFifoParam>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e197      	b.n	8005982 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f002 fa88 	bl	8007b70 <DMA_CalcBaseAndBitshift>
 8005660:	4603      	mov	r3, r0
 8005662:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	223f      	movs	r2, #63	; 0x3f
 800566e:	409a      	lsls	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	e0cd      	b.n	8005812 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <HAL_DMA_Init+0x42c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a39      	ldr	r2, [pc, #228]	; (800576c <HAL_DMA_Init+0x430>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a38      	ldr	r2, [pc, #224]	; (8005770 <HAL_DMA_Init+0x434>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a36      	ldr	r2, [pc, #216]	; (8005774 <HAL_DMA_Init+0x438>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a35      	ldr	r2, [pc, #212]	; (8005778 <HAL_DMA_Init+0x43c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a33      	ldr	r2, [pc, #204]	; (800577c <HAL_DMA_Init+0x440>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <HAL_DMA_Init+0x444>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_Init+0x38a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a30      	ldr	r2, [pc, #192]	; (8005784 <HAL_DMA_Init+0x448>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_DMA_Init+0x38e>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_DMA_Init+0x390>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 8097 	beq.w	8005800 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a24      	ldr	r2, [pc, #144]	; (8005768 <HAL_DMA_Init+0x42c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d021      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a22      	ldr	r2, [pc, #136]	; (800576c <HAL_DMA_Init+0x430>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01c      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a21      	ldr	r2, [pc, #132]	; (8005770 <HAL_DMA_Init+0x434>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d017      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <HAL_DMA_Init+0x438>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d012      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <HAL_DMA_Init+0x43c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00d      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <HAL_DMA_Init+0x440>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d008      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_DMA_Init+0x444>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <HAL_DMA_Init+0x3e4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_DMA_Init+0x448>)
 800571e:	4293      	cmp	r3, r2
 8005720:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_DMA_Init+0x44c>)
 800573e:	4013      	ands	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d020      	beq.n	800578c <HAL_DMA_Init+0x450>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d102      	bne.n	8005758 <HAL_DMA_Init+0x41c>
 8005752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005756:	e01a      	b.n	800578e <HAL_DMA_Init+0x452>
 8005758:	2300      	movs	r3, #0
 800575a:	e018      	b.n	800578e <HAL_DMA_Init+0x452>
 800575c:	fe10803f 	.word	0xfe10803f
 8005760:	5c001000 	.word	0x5c001000
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	58025408 	.word	0x58025408
 800576c:	5802541c 	.word	0x5802541c
 8005770:	58025430 	.word	0x58025430
 8005774:	58025444 	.word	0x58025444
 8005778:	58025458 	.word	0x58025458
 800577c:	5802546c 	.word	0x5802546c
 8005780:	58025480 	.word	0x58025480
 8005784:	58025494 	.word	0x58025494
 8005788:	fffe000f 	.word	0xfffe000f
 800578c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68d2      	ldr	r2, [r2, #12]
 8005792:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800579c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b6e      	ldr	r3, [pc, #440]	; (800598c <HAL_DMA_Init+0x650>)
 80057d4:	4413      	add	r3, r2
 80057d6:	4a6e      	ldr	r2, [pc, #440]	; (8005990 <HAL_DMA_Init+0x654>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	009a      	lsls	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f002 f9c3 	bl	8007b70 <DMA_CalcBaseAndBitshift>
 80057ea:	4603      	mov	r3, r0
 80057ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	f003 031f 	and.w	r3, r3, #31
 80057f6:	2201      	movs	r2, #1
 80057f8:	409a      	lsls	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	e008      	b.n	8005812 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2203      	movs	r2, #3
 800580a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e0b7      	b.n	8005982 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a5f      	ldr	r2, [pc, #380]	; (8005994 <HAL_DMA_Init+0x658>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d072      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a5d      	ldr	r2, [pc, #372]	; (8005998 <HAL_DMA_Init+0x65c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d06d      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a5c      	ldr	r2, [pc, #368]	; (800599c <HAL_DMA_Init+0x660>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d068      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a5a      	ldr	r2, [pc, #360]	; (80059a0 <HAL_DMA_Init+0x664>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d063      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a59      	ldr	r2, [pc, #356]	; (80059a4 <HAL_DMA_Init+0x668>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d05e      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a57      	ldr	r2, [pc, #348]	; (80059a8 <HAL_DMA_Init+0x66c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d059      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a56      	ldr	r2, [pc, #344]	; (80059ac <HAL_DMA_Init+0x670>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d054      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a54      	ldr	r2, [pc, #336]	; (80059b0 <HAL_DMA_Init+0x674>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d04f      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a53      	ldr	r2, [pc, #332]	; (80059b4 <HAL_DMA_Init+0x678>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04a      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a51      	ldr	r2, [pc, #324]	; (80059b8 <HAL_DMA_Init+0x67c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d045      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a50      	ldr	r2, [pc, #320]	; (80059bc <HAL_DMA_Init+0x680>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d040      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a4e      	ldr	r2, [pc, #312]	; (80059c0 <HAL_DMA_Init+0x684>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d03b      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a4d      	ldr	r2, [pc, #308]	; (80059c4 <HAL_DMA_Init+0x688>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d036      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a4b      	ldr	r2, [pc, #300]	; (80059c8 <HAL_DMA_Init+0x68c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d031      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_DMA_Init+0x690>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d02c      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a48      	ldr	r2, [pc, #288]	; (80059d0 <HAL_DMA_Init+0x694>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d027      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a47      	ldr	r2, [pc, #284]	; (80059d4 <HAL_DMA_Init+0x698>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d022      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a45      	ldr	r2, [pc, #276]	; (80059d8 <HAL_DMA_Init+0x69c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01d      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a44      	ldr	r2, [pc, #272]	; (80059dc <HAL_DMA_Init+0x6a0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d018      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a42      	ldr	r2, [pc, #264]	; (80059e0 <HAL_DMA_Init+0x6a4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a41      	ldr	r2, [pc, #260]	; (80059e4 <HAL_DMA_Init+0x6a8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <HAL_DMA_Init+0x6ac>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a3e      	ldr	r2, [pc, #248]	; (80059ec <HAL_DMA_Init+0x6b0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_DMA_Init+0x5c6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a3c      	ldr	r2, [pc, #240]	; (80059f0 <HAL_DMA_Init+0x6b4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_DMA_Init+0x5ca>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_DMA_Init+0x5cc>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d032      	beq.n	8005972 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f002 fa5d 	bl	8007dcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b80      	cmp	r3, #128	; 0x80
 8005918:	d102      	bne.n	8005920 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005934:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_DMA_Init+0x624>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b08      	cmp	r3, #8
 8005944:	d80c      	bhi.n	8005960 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f002 fada 	bl	8007f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	e008      	b.n	8005972 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	a7fdabf8 	.word	0xa7fdabf8
 8005990:	cccccccd 	.word	0xcccccccd
 8005994:	40020010 	.word	0x40020010
 8005998:	40020028 	.word	0x40020028
 800599c:	40020040 	.word	0x40020040
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40020070 	.word	0x40020070
 80059a8:	40020088 	.word	0x40020088
 80059ac:	400200a0 	.word	0x400200a0
 80059b0:	400200b8 	.word	0x400200b8
 80059b4:	40020410 	.word	0x40020410
 80059b8:	40020428 	.word	0x40020428
 80059bc:	40020440 	.word	0x40020440
 80059c0:	40020458 	.word	0x40020458
 80059c4:	40020470 	.word	0x40020470
 80059c8:	40020488 	.word	0x40020488
 80059cc:	400204a0 	.word	0x400204a0
 80059d0:	400204b8 	.word	0x400204b8
 80059d4:	58025408 	.word	0x58025408
 80059d8:	5802541c 	.word	0x5802541c
 80059dc:	58025430 	.word	0x58025430
 80059e0:	58025444 	.word	0x58025444
 80059e4:	58025458 	.word	0x58025458
 80059e8:	5802546c 	.word	0x5802546c
 80059ec:	58025480 	.word	0x58025480
 80059f0:	58025494 	.word	0x58025494

080059f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e226      	b.n	8005e5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_DMA_Start_IT+0x2a>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e21f      	b.n	8005e5e <HAL_DMA_Start_IT+0x46a>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	f040 820a 	bne.w	8005e48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a68      	ldr	r2, [pc, #416]	; (8005be8 <HAL_DMA_Start_IT+0x1f4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d04a      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a66      	ldr	r2, [pc, #408]	; (8005bec <HAL_DMA_Start_IT+0x1f8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d045      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a65      	ldr	r2, [pc, #404]	; (8005bf0 <HAL_DMA_Start_IT+0x1fc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d040      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a63      	ldr	r2, [pc, #396]	; (8005bf4 <HAL_DMA_Start_IT+0x200>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d03b      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a62      	ldr	r2, [pc, #392]	; (8005bf8 <HAL_DMA_Start_IT+0x204>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d036      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a60      	ldr	r2, [pc, #384]	; (8005bfc <HAL_DMA_Start_IT+0x208>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d031      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a5f      	ldr	r2, [pc, #380]	; (8005c00 <HAL_DMA_Start_IT+0x20c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d02c      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a5d      	ldr	r2, [pc, #372]	; (8005c04 <HAL_DMA_Start_IT+0x210>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d027      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a5c      	ldr	r2, [pc, #368]	; (8005c08 <HAL_DMA_Start_IT+0x214>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d022      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a5a      	ldr	r2, [pc, #360]	; (8005c0c <HAL_DMA_Start_IT+0x218>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01d      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a59      	ldr	r2, [pc, #356]	; (8005c10 <HAL_DMA_Start_IT+0x21c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d018      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a57      	ldr	r2, [pc, #348]	; (8005c14 <HAL_DMA_Start_IT+0x220>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <HAL_DMA_Start_IT+0x224>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a54      	ldr	r2, [pc, #336]	; (8005c1c <HAL_DMA_Start_IT+0x228>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d009      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a53      	ldr	r2, [pc, #332]	; (8005c20 <HAL_DMA_Start_IT+0x22c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_DMA_Start_IT+0xee>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a51      	ldr	r2, [pc, #324]	; (8005c24 <HAL_DMA_Start_IT+0x230>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d108      	bne.n	8005af4 <HAL_DMA_Start_IT+0x100>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e007      	b.n	8005b04 <HAL_DMA_Start_IT+0x110>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f001 fe84 	bl	8007818 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <HAL_DMA_Start_IT+0x1f4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d04a      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a33      	ldr	r2, [pc, #204]	; (8005bec <HAL_DMA_Start_IT+0x1f8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d045      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a31      	ldr	r2, [pc, #196]	; (8005bf0 <HAL_DMA_Start_IT+0x1fc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d040      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a30      	ldr	r2, [pc, #192]	; (8005bf4 <HAL_DMA_Start_IT+0x200>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d03b      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <HAL_DMA_Start_IT+0x204>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d036      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <HAL_DMA_Start_IT+0x208>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d031      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <HAL_DMA_Start_IT+0x20c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02c      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <HAL_DMA_Start_IT+0x210>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d027      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_DMA_Start_IT+0x214>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d022      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_DMA_Start_IT+0x218>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d01d      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <HAL_DMA_Start_IT+0x21c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <HAL_DMA_Start_IT+0x220>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <HAL_DMA_Start_IT+0x224>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_DMA_Start_IT+0x228>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <HAL_DMA_Start_IT+0x22c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_Start_IT+0x1bc>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <HAL_DMA_Start_IT+0x230>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d101      	bne.n	8005bb4 <HAL_DMA_Start_IT+0x1c0>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <HAL_DMA_Start_IT+0x1c2>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d036      	beq.n	8005c28 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 021e 	bic.w	r2, r3, #30
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0216 	orr.w	r2, r2, #22
 8005bcc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d03e      	beq.n	8005c54 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0208 	orr.w	r2, r2, #8
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e035      	b.n	8005c54 <HAL_DMA_Start_IT+0x260>
 8005be8:	40020010 	.word	0x40020010
 8005bec:	40020028 	.word	0x40020028
 8005bf0:	40020040 	.word	0x40020040
 8005bf4:	40020058 	.word	0x40020058
 8005bf8:	40020070 	.word	0x40020070
 8005bfc:	40020088 	.word	0x40020088
 8005c00:	400200a0 	.word	0x400200a0
 8005c04:	400200b8 	.word	0x400200b8
 8005c08:	40020410 	.word	0x40020410
 8005c0c:	40020428 	.word	0x40020428
 8005c10:	40020440 	.word	0x40020440
 8005c14:	40020458 	.word	0x40020458
 8005c18:	40020470 	.word	0x40020470
 8005c1c:	40020488 	.word	0x40020488
 8005c20:	400204a0 	.word	0x400204a0
 8005c24:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 020e 	bic.w	r2, r3, #14
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 020a 	orr.w	r2, r2, #10
 8005c3a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0204 	orr.w	r2, r2, #4
 8005c52:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a83      	ldr	r2, [pc, #524]	; (8005e68 <HAL_DMA_Start_IT+0x474>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d072      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a82      	ldr	r2, [pc, #520]	; (8005e6c <HAL_DMA_Start_IT+0x478>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d06d      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a80      	ldr	r2, [pc, #512]	; (8005e70 <HAL_DMA_Start_IT+0x47c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d068      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7f      	ldr	r2, [pc, #508]	; (8005e74 <HAL_DMA_Start_IT+0x480>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d063      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a7d      	ldr	r2, [pc, #500]	; (8005e78 <HAL_DMA_Start_IT+0x484>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d05e      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a7c      	ldr	r2, [pc, #496]	; (8005e7c <HAL_DMA_Start_IT+0x488>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d059      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a7a      	ldr	r2, [pc, #488]	; (8005e80 <HAL_DMA_Start_IT+0x48c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d054      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a79      	ldr	r2, [pc, #484]	; (8005e84 <HAL_DMA_Start_IT+0x490>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d04f      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a77      	ldr	r2, [pc, #476]	; (8005e88 <HAL_DMA_Start_IT+0x494>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d04a      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a76      	ldr	r2, [pc, #472]	; (8005e8c <HAL_DMA_Start_IT+0x498>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d045      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a74      	ldr	r2, [pc, #464]	; (8005e90 <HAL_DMA_Start_IT+0x49c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d040      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <HAL_DMA_Start_IT+0x4a0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d03b      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a71      	ldr	r2, [pc, #452]	; (8005e98 <HAL_DMA_Start_IT+0x4a4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d036      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a70      	ldr	r2, [pc, #448]	; (8005e9c <HAL_DMA_Start_IT+0x4a8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d031      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6e      	ldr	r2, [pc, #440]	; (8005ea0 <HAL_DMA_Start_IT+0x4ac>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d02c      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a6d      	ldr	r2, [pc, #436]	; (8005ea4 <HAL_DMA_Start_IT+0x4b0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d027      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a6b      	ldr	r2, [pc, #428]	; (8005ea8 <HAL_DMA_Start_IT+0x4b4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d022      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6a      	ldr	r2, [pc, #424]	; (8005eac <HAL_DMA_Start_IT+0x4b8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d01d      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a68      	ldr	r2, [pc, #416]	; (8005eb0 <HAL_DMA_Start_IT+0x4bc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d018      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a67      	ldr	r2, [pc, #412]	; (8005eb4 <HAL_DMA_Start_IT+0x4c0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_DMA_Start_IT+0x4c4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00e      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a64      	ldr	r2, [pc, #400]	; (8005ebc <HAL_DMA_Start_IT+0x4c8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a62      	ldr	r2, [pc, #392]	; (8005ec0 <HAL_DMA_Start_IT+0x4cc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_DMA_Start_IT+0x350>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a61      	ldr	r2, [pc, #388]	; (8005ec4 <HAL_DMA_Start_IT+0x4d0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <HAL_DMA_Start_IT+0x354>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_DMA_Start_IT+0x356>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01a      	beq.n	8005d84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a37      	ldr	r2, [pc, #220]	; (8005e68 <HAL_DMA_Start_IT+0x474>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04a      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a36      	ldr	r2, [pc, #216]	; (8005e6c <HAL_DMA_Start_IT+0x478>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d045      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <HAL_DMA_Start_IT+0x47c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d040      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <HAL_DMA_Start_IT+0x480>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d03b      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a31      	ldr	r2, [pc, #196]	; (8005e78 <HAL_DMA_Start_IT+0x484>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d036      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_DMA_Start_IT+0x488>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2e      	ldr	r2, [pc, #184]	; (8005e80 <HAL_DMA_Start_IT+0x48c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02c      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <HAL_DMA_Start_IT+0x490>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d027      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <HAL_DMA_Start_IT+0x494>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <HAL_DMA_Start_IT+0x498>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01d      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a28      	ldr	r2, [pc, #160]	; (8005e90 <HAL_DMA_Start_IT+0x49c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a27      	ldr	r2, [pc, #156]	; (8005e94 <HAL_DMA_Start_IT+0x4a0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <HAL_DMA_Start_IT+0x4a4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <HAL_DMA_Start_IT+0x4a8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <HAL_DMA_Start_IT+0x4ac>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_Start_IT+0x430>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <HAL_DMA_Start_IT+0x4b0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d108      	bne.n	8005e36 <HAL_DMA_Start_IT+0x442>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	e012      	b.n	8005e5c <HAL_DMA_Start_IT+0x468>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e009      	b.n	8005e5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40020010 	.word	0x40020010
 8005e6c:	40020028 	.word	0x40020028
 8005e70:	40020040 	.word	0x40020040
 8005e74:	40020058 	.word	0x40020058
 8005e78:	40020070 	.word	0x40020070
 8005e7c:	40020088 	.word	0x40020088
 8005e80:	400200a0 	.word	0x400200a0
 8005e84:	400200b8 	.word	0x400200b8
 8005e88:	40020410 	.word	0x40020410
 8005e8c:	40020428 	.word	0x40020428
 8005e90:	40020440 	.word	0x40020440
 8005e94:	40020458 	.word	0x40020458
 8005e98:	40020470 	.word	0x40020470
 8005e9c:	40020488 	.word	0x40020488
 8005ea0:	400204a0 	.word	0x400204a0
 8005ea4:	400204b8 	.word	0x400204b8
 8005ea8:	58025408 	.word	0x58025408
 8005eac:	5802541c 	.word	0x5802541c
 8005eb0:	58025430 	.word	0x58025430
 8005eb4:	58025444 	.word	0x58025444
 8005eb8:	58025458 	.word	0x58025458
 8005ebc:	5802546c 	.word	0x5802546c
 8005ec0:	58025480 	.word	0x58025480
 8005ec4:	58025494 	.word	0x58025494

08005ec8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ed0:	f7ff f8e8 	bl	80050a4 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e2dc      	b.n	800649a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d008      	beq.n	8005efe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e2cd      	b.n	800649a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a76      	ldr	r2, [pc, #472]	; (80060dc <HAL_DMA_Abort+0x214>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d04a      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a74      	ldr	r2, [pc, #464]	; (80060e0 <HAL_DMA_Abort+0x218>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d045      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a73      	ldr	r2, [pc, #460]	; (80060e4 <HAL_DMA_Abort+0x21c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d040      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a71      	ldr	r2, [pc, #452]	; (80060e8 <HAL_DMA_Abort+0x220>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d03b      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a70      	ldr	r2, [pc, #448]	; (80060ec <HAL_DMA_Abort+0x224>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d036      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6e      	ldr	r2, [pc, #440]	; (80060f0 <HAL_DMA_Abort+0x228>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d031      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6d      	ldr	r2, [pc, #436]	; (80060f4 <HAL_DMA_Abort+0x22c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d02c      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6b      	ldr	r2, [pc, #428]	; (80060f8 <HAL_DMA_Abort+0x230>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d027      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6a      	ldr	r2, [pc, #424]	; (80060fc <HAL_DMA_Abort+0x234>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d022      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a68      	ldr	r2, [pc, #416]	; (8006100 <HAL_DMA_Abort+0x238>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01d      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a67      	ldr	r2, [pc, #412]	; (8006104 <HAL_DMA_Abort+0x23c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a65      	ldr	r2, [pc, #404]	; (8006108 <HAL_DMA_Abort+0x240>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a64      	ldr	r2, [pc, #400]	; (800610c <HAL_DMA_Abort+0x244>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00e      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a62      	ldr	r2, [pc, #392]	; (8006110 <HAL_DMA_Abort+0x248>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a61      	ldr	r2, [pc, #388]	; (8006114 <HAL_DMA_Abort+0x24c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_DMA_Abort+0xd6>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <HAL_DMA_Abort+0x250>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_DMA_Abort+0xda>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <HAL_DMA_Abort+0xdc>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 021e 	bic.w	r2, r2, #30
 8005fb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e00a      	b.n	8005fe6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 020e 	bic.w	r2, r2, #14
 8005fde:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <HAL_DMA_Abort+0x214>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d072      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <HAL_DMA_Abort+0x218>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d06d      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a39      	ldr	r2, [pc, #228]	; (80060e4 <HAL_DMA_Abort+0x21c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d068      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a37      	ldr	r2, [pc, #220]	; (80060e8 <HAL_DMA_Abort+0x220>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d063      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a36      	ldr	r2, [pc, #216]	; (80060ec <HAL_DMA_Abort+0x224>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d05e      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a34      	ldr	r2, [pc, #208]	; (80060f0 <HAL_DMA_Abort+0x228>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d059      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <HAL_DMA_Abort+0x22c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d054      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a31      	ldr	r2, [pc, #196]	; (80060f8 <HAL_DMA_Abort+0x230>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04f      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a30      	ldr	r2, [pc, #192]	; (80060fc <HAL_DMA_Abort+0x234>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d04a      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2e      	ldr	r2, [pc, #184]	; (8006100 <HAL_DMA_Abort+0x238>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d045      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <HAL_DMA_Abort+0x23c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d040      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <HAL_DMA_Abort+0x240>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d03b      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2a      	ldr	r2, [pc, #168]	; (800610c <HAL_DMA_Abort+0x244>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d036      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a28      	ldr	r2, [pc, #160]	; (8006110 <HAL_DMA_Abort+0x248>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d031      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a27      	ldr	r2, [pc, #156]	; (8006114 <HAL_DMA_Abort+0x24c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d02c      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a25      	ldr	r2, [pc, #148]	; (8006118 <HAL_DMA_Abort+0x250>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d027      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a24      	ldr	r2, [pc, #144]	; (800611c <HAL_DMA_Abort+0x254>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d022      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <HAL_DMA_Abort+0x258>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01d      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <HAL_DMA_Abort+0x25c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d018      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1f      	ldr	r2, [pc, #124]	; (8006128 <HAL_DMA_Abort+0x260>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1e      	ldr	r2, [pc, #120]	; (800612c <HAL_DMA_Abort+0x264>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <HAL_DMA_Abort+0x268>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_DMA_Abort+0x26c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_DMA_Abort+0x20e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <HAL_DMA_Abort+0x270>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d132      	bne.n	800613c <HAL_DMA_Abort+0x274>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e031      	b.n	800613e <HAL_DMA_Abort+0x276>
 80060da:	bf00      	nop
 80060dc:	40020010 	.word	0x40020010
 80060e0:	40020028 	.word	0x40020028
 80060e4:	40020040 	.word	0x40020040
 80060e8:	40020058 	.word	0x40020058
 80060ec:	40020070 	.word	0x40020070
 80060f0:	40020088 	.word	0x40020088
 80060f4:	400200a0 	.word	0x400200a0
 80060f8:	400200b8 	.word	0x400200b8
 80060fc:	40020410 	.word	0x40020410
 8006100:	40020428 	.word	0x40020428
 8006104:	40020440 	.word	0x40020440
 8006108:	40020458 	.word	0x40020458
 800610c:	40020470 	.word	0x40020470
 8006110:	40020488 	.word	0x40020488
 8006114:	400204a0 	.word	0x400204a0
 8006118:	400204b8 	.word	0x400204b8
 800611c:	58025408 	.word	0x58025408
 8006120:	5802541c 	.word	0x5802541c
 8006124:	58025430 	.word	0x58025430
 8006128:	58025444 	.word	0x58025444
 800612c:	58025458 	.word	0x58025458
 8006130:	5802546c 	.word	0x5802546c
 8006134:	58025480 	.word	0x58025480
 8006138:	58025494 	.word	0x58025494
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006150:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6d      	ldr	r2, [pc, #436]	; (800630c <HAL_DMA_Abort+0x444>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d04a      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6b      	ldr	r2, [pc, #428]	; (8006310 <HAL_DMA_Abort+0x448>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d045      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6a      	ldr	r2, [pc, #424]	; (8006314 <HAL_DMA_Abort+0x44c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d040      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a68      	ldr	r2, [pc, #416]	; (8006318 <HAL_DMA_Abort+0x450>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d03b      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a67      	ldr	r2, [pc, #412]	; (800631c <HAL_DMA_Abort+0x454>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d036      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a65      	ldr	r2, [pc, #404]	; (8006320 <HAL_DMA_Abort+0x458>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a64      	ldr	r2, [pc, #400]	; (8006324 <HAL_DMA_Abort+0x45c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02c      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a62      	ldr	r2, [pc, #392]	; (8006328 <HAL_DMA_Abort+0x460>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a61      	ldr	r2, [pc, #388]	; (800632c <HAL_DMA_Abort+0x464>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d022      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a5f      	ldr	r2, [pc, #380]	; (8006330 <HAL_DMA_Abort+0x468>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5e      	ldr	r2, [pc, #376]	; (8006334 <HAL_DMA_Abort+0x46c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5c      	ldr	r2, [pc, #368]	; (8006338 <HAL_DMA_Abort+0x470>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5b      	ldr	r2, [pc, #364]	; (800633c <HAL_DMA_Abort+0x474>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a59      	ldr	r2, [pc, #356]	; (8006340 <HAL_DMA_Abort+0x478>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_DMA_Abort+0x47c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_DMA_Abort+0x32a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a56      	ldr	r2, [pc, #344]	; (8006348 <HAL_DMA_Abort+0x480>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <HAL_DMA_Abort+0x33c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e007      	b.n	8006214 <HAL_DMA_Abort+0x34c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006214:	e013      	b.n	800623e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006216:	f7fe ff45 	bl	80050a4 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b05      	cmp	r3, #5
 8006222:	d90c      	bls.n	800623e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2203      	movs	r2, #3
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e12d      	b.n	800649a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2f      	ldr	r2, [pc, #188]	; (800630c <HAL_DMA_Abort+0x444>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_DMA_Abort+0x448>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2c      	ldr	r2, [pc, #176]	; (8006314 <HAL_DMA_Abort+0x44c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_DMA_Abort+0x450>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a29      	ldr	r2, [pc, #164]	; (800631c <HAL_DMA_Abort+0x454>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <HAL_DMA_Abort+0x458>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a26      	ldr	r2, [pc, #152]	; (8006324 <HAL_DMA_Abort+0x45c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a24      	ldr	r2, [pc, #144]	; (8006328 <HAL_DMA_Abort+0x460>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a23      	ldr	r2, [pc, #140]	; (800632c <HAL_DMA_Abort+0x464>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a21      	ldr	r2, [pc, #132]	; (8006330 <HAL_DMA_Abort+0x468>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a20      	ldr	r2, [pc, #128]	; (8006334 <HAL_DMA_Abort+0x46c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <HAL_DMA_Abort+0x470>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1d      	ldr	r2, [pc, #116]	; (800633c <HAL_DMA_Abort+0x474>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <HAL_DMA_Abort+0x478>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <HAL_DMA_Abort+0x47c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_Abort+0x422>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_DMA_Abort+0x480>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Abort+0x426>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_Abort+0x428>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02b      	beq.n	800634c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	223f      	movs	r2, #63	; 0x3f
 8006304:	409a      	lsls	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	e02a      	b.n	8006362 <HAL_DMA_Abort+0x49a>
 800630c:	40020010 	.word	0x40020010
 8006310:	40020028 	.word	0x40020028
 8006314:	40020040 	.word	0x40020040
 8006318:	40020058 	.word	0x40020058
 800631c:	40020070 	.word	0x40020070
 8006320:	40020088 	.word	0x40020088
 8006324:	400200a0 	.word	0x400200a0
 8006328:	400200b8 	.word	0x400200b8
 800632c:	40020410 	.word	0x40020410
 8006330:	40020428 	.word	0x40020428
 8006334:	40020440 	.word	0x40020440
 8006338:	40020458 	.word	0x40020458
 800633c:	40020470 	.word	0x40020470
 8006340:	40020488 	.word	0x40020488
 8006344:	400204a0 	.word	0x400204a0
 8006348:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2201      	movs	r2, #1
 800635c:	409a      	lsls	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a4f      	ldr	r2, [pc, #316]	; (80064a4 <HAL_DMA_Abort+0x5dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d072      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a4d      	ldr	r2, [pc, #308]	; (80064a8 <HAL_DMA_Abort+0x5e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d06d      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4c      	ldr	r2, [pc, #304]	; (80064ac <HAL_DMA_Abort+0x5e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d068      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4a      	ldr	r2, [pc, #296]	; (80064b0 <HAL_DMA_Abort+0x5e8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d063      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a49      	ldr	r2, [pc, #292]	; (80064b4 <HAL_DMA_Abort+0x5ec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d05e      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a47      	ldr	r2, [pc, #284]	; (80064b8 <HAL_DMA_Abort+0x5f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d059      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a46      	ldr	r2, [pc, #280]	; (80064bc <HAL_DMA_Abort+0x5f4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d054      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a44      	ldr	r2, [pc, #272]	; (80064c0 <HAL_DMA_Abort+0x5f8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d04f      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a43      	ldr	r2, [pc, #268]	; (80064c4 <HAL_DMA_Abort+0x5fc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d04a      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a41      	ldr	r2, [pc, #260]	; (80064c8 <HAL_DMA_Abort+0x600>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d045      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a40      	ldr	r2, [pc, #256]	; (80064cc <HAL_DMA_Abort+0x604>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d040      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a3e      	ldr	r2, [pc, #248]	; (80064d0 <HAL_DMA_Abort+0x608>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a3d      	ldr	r2, [pc, #244]	; (80064d4 <HAL_DMA_Abort+0x60c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d036      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a3b      	ldr	r2, [pc, #236]	; (80064d8 <HAL_DMA_Abort+0x610>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d031      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a3a      	ldr	r2, [pc, #232]	; (80064dc <HAL_DMA_Abort+0x614>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d02c      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a38      	ldr	r2, [pc, #224]	; (80064e0 <HAL_DMA_Abort+0x618>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d027      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a37      	ldr	r2, [pc, #220]	; (80064e4 <HAL_DMA_Abort+0x61c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a35      	ldr	r2, [pc, #212]	; (80064e8 <HAL_DMA_Abort+0x620>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01d      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a34      	ldr	r2, [pc, #208]	; (80064ec <HAL_DMA_Abort+0x624>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a32      	ldr	r2, [pc, #200]	; (80064f0 <HAL_DMA_Abort+0x628>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a31      	ldr	r2, [pc, #196]	; (80064f4 <HAL_DMA_Abort+0x62c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2f      	ldr	r2, [pc, #188]	; (80064f8 <HAL_DMA_Abort+0x630>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <HAL_DMA_Abort+0x634>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_DMA_Abort+0x58a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2c      	ldr	r2, [pc, #176]	; (8006500 <HAL_DMA_Abort+0x638>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_DMA_Abort+0x58e>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_DMA_Abort+0x590>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d015      	beq.n	8006488 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006464:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006486:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40020010 	.word	0x40020010
 80064a8:	40020028 	.word	0x40020028
 80064ac:	40020040 	.word	0x40020040
 80064b0:	40020058 	.word	0x40020058
 80064b4:	40020070 	.word	0x40020070
 80064b8:	40020088 	.word	0x40020088
 80064bc:	400200a0 	.word	0x400200a0
 80064c0:	400200b8 	.word	0x400200b8
 80064c4:	40020410 	.word	0x40020410
 80064c8:	40020428 	.word	0x40020428
 80064cc:	40020440 	.word	0x40020440
 80064d0:	40020458 	.word	0x40020458
 80064d4:	40020470 	.word	0x40020470
 80064d8:	40020488 	.word	0x40020488
 80064dc:	400204a0 	.word	0x400204a0
 80064e0:	400204b8 	.word	0x400204b8
 80064e4:	58025408 	.word	0x58025408
 80064e8:	5802541c 	.word	0x5802541c
 80064ec:	58025430 	.word	0x58025430
 80064f0:	58025444 	.word	0x58025444
 80064f4:	58025458 	.word	0x58025458
 80064f8:	5802546c 	.word	0x5802546c
 80064fc:	58025480 	.word	0x58025480
 8006500:	58025494 	.word	0x58025494

08006504 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e237      	b.n	8006986 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d004      	beq.n	800652c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2280      	movs	r2, #128	; 0x80
 8006526:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e22c      	b.n	8006986 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a5c      	ldr	r2, [pc, #368]	; (80066a4 <HAL_DMA_Abort_IT+0x1a0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04a      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a5b      	ldr	r2, [pc, #364]	; (80066a8 <HAL_DMA_Abort_IT+0x1a4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d045      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a59      	ldr	r2, [pc, #356]	; (80066ac <HAL_DMA_Abort_IT+0x1a8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d040      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a58      	ldr	r2, [pc, #352]	; (80066b0 <HAL_DMA_Abort_IT+0x1ac>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d03b      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a56      	ldr	r2, [pc, #344]	; (80066b4 <HAL_DMA_Abort_IT+0x1b0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d036      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a55      	ldr	r2, [pc, #340]	; (80066b8 <HAL_DMA_Abort_IT+0x1b4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d031      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a53      	ldr	r2, [pc, #332]	; (80066bc <HAL_DMA_Abort_IT+0x1b8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a52      	ldr	r2, [pc, #328]	; (80066c0 <HAL_DMA_Abort_IT+0x1bc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d027      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a50      	ldr	r2, [pc, #320]	; (80066c4 <HAL_DMA_Abort_IT+0x1c0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a4f      	ldr	r2, [pc, #316]	; (80066c8 <HAL_DMA_Abort_IT+0x1c4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01d      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a4d      	ldr	r2, [pc, #308]	; (80066cc <HAL_DMA_Abort_IT+0x1c8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a4c      	ldr	r2, [pc, #304]	; (80066d0 <HAL_DMA_Abort_IT+0x1cc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a4a      	ldr	r2, [pc, #296]	; (80066d4 <HAL_DMA_Abort_IT+0x1d0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a49      	ldr	r2, [pc, #292]	; (80066d8 <HAL_DMA_Abort_IT+0x1d4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a47      	ldr	r2, [pc, #284]	; (80066dc <HAL_DMA_Abort_IT+0x1d8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_DMA_Abort_IT+0xc8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a46      	ldr	r2, [pc, #280]	; (80066e0 <HAL_DMA_Abort_IT+0x1dc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_DMA_Abort_IT+0xcc>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_DMA_Abort_IT+0xce>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8086 	beq.w	80066e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <HAL_DMA_Abort_IT+0x1a0>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d04a      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a2e      	ldr	r2, [pc, #184]	; (80066a8 <HAL_DMA_Abort_IT+0x1a4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d045      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a2c      	ldr	r2, [pc, #176]	; (80066ac <HAL_DMA_Abort_IT+0x1a8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d040      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_DMA_Abort_IT+0x1ac>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d03b      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a29      	ldr	r2, [pc, #164]	; (80066b4 <HAL_DMA_Abort_IT+0x1b0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d036      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <HAL_DMA_Abort_IT+0x1b4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d031      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a26      	ldr	r2, [pc, #152]	; (80066bc <HAL_DMA_Abort_IT+0x1b8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02c      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <HAL_DMA_Abort_IT+0x1bc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a23      	ldr	r2, [pc, #140]	; (80066c4 <HAL_DMA_Abort_IT+0x1c0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <HAL_DMA_Abort_IT+0x1c4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a20      	ldr	r2, [pc, #128]	; (80066cc <HAL_DMA_Abort_IT+0x1c8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <HAL_DMA_Abort_IT+0x1cc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1d      	ldr	r2, [pc, #116]	; (80066d4 <HAL_DMA_Abort_IT+0x1d0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <HAL_DMA_Abort_IT+0x1d4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_DMA_Abort_IT+0x1d8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_DMA_Abort_IT+0x17c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <HAL_DMA_Abort_IT+0x1dc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <HAL_DMA_Abort_IT+0x18e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e178      	b.n	8006984 <HAL_DMA_Abort_IT+0x480>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e16f      	b.n	8006984 <HAL_DMA_Abort_IT+0x480>
 80066a4:	40020010 	.word	0x40020010
 80066a8:	40020028 	.word	0x40020028
 80066ac:	40020040 	.word	0x40020040
 80066b0:	40020058 	.word	0x40020058
 80066b4:	40020070 	.word	0x40020070
 80066b8:	40020088 	.word	0x40020088
 80066bc:	400200a0 	.word	0x400200a0
 80066c0:	400200b8 	.word	0x400200b8
 80066c4:	40020410 	.word	0x40020410
 80066c8:	40020428 	.word	0x40020428
 80066cc:	40020440 	.word	0x40020440
 80066d0:	40020458 	.word	0x40020458
 80066d4:	40020470 	.word	0x40020470
 80066d8:	40020488 	.word	0x40020488
 80066dc:	400204a0 	.word	0x400204a0
 80066e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 020e 	bic.w	r2, r2, #14
 80066f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6c      	ldr	r2, [pc, #432]	; (80068ac <HAL_DMA_Abort_IT+0x3a8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d04a      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a6b      	ldr	r2, [pc, #428]	; (80068b0 <HAL_DMA_Abort_IT+0x3ac>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d045      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a69      	ldr	r2, [pc, #420]	; (80068b4 <HAL_DMA_Abort_IT+0x3b0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d040      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a68      	ldr	r2, [pc, #416]	; (80068b8 <HAL_DMA_Abort_IT+0x3b4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d03b      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a66      	ldr	r2, [pc, #408]	; (80068bc <HAL_DMA_Abort_IT+0x3b8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d036      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a65      	ldr	r2, [pc, #404]	; (80068c0 <HAL_DMA_Abort_IT+0x3bc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d031      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a63      	ldr	r2, [pc, #396]	; (80068c4 <HAL_DMA_Abort_IT+0x3c0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d02c      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a62      	ldr	r2, [pc, #392]	; (80068c8 <HAL_DMA_Abort_IT+0x3c4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d027      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a60      	ldr	r2, [pc, #384]	; (80068cc <HAL_DMA_Abort_IT+0x3c8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d022      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a5f      	ldr	r2, [pc, #380]	; (80068d0 <HAL_DMA_Abort_IT+0x3cc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d01d      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5d      	ldr	r2, [pc, #372]	; (80068d4 <HAL_DMA_Abort_IT+0x3d0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d018      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a5c      	ldr	r2, [pc, #368]	; (80068d8 <HAL_DMA_Abort_IT+0x3d4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d013      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5a      	ldr	r2, [pc, #360]	; (80068dc <HAL_DMA_Abort_IT+0x3d8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00e      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a59      	ldr	r2, [pc, #356]	; (80068e0 <HAL_DMA_Abort_IT+0x3dc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d009      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a57      	ldr	r2, [pc, #348]	; (80068e4 <HAL_DMA_Abort_IT+0x3e0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d004      	beq.n	8006794 <HAL_DMA_Abort_IT+0x290>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a56      	ldr	r2, [pc, #344]	; (80068e8 <HAL_DMA_Abort_IT+0x3e4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d108      	bne.n	80067a6 <HAL_DMA_Abort_IT+0x2a2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0201 	bic.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e007      	b.n	80067b6 <HAL_DMA_Abort_IT+0x2b2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3c      	ldr	r2, [pc, #240]	; (80068ac <HAL_DMA_Abort_IT+0x3a8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d072      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <HAL_DMA_Abort_IT+0x3ac>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d06d      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a39      	ldr	r2, [pc, #228]	; (80068b4 <HAL_DMA_Abort_IT+0x3b0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d068      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a37      	ldr	r2, [pc, #220]	; (80068b8 <HAL_DMA_Abort_IT+0x3b4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d063      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a36      	ldr	r2, [pc, #216]	; (80068bc <HAL_DMA_Abort_IT+0x3b8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d05e      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a34      	ldr	r2, [pc, #208]	; (80068c0 <HAL_DMA_Abort_IT+0x3bc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d059      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a33      	ldr	r2, [pc, #204]	; (80068c4 <HAL_DMA_Abort_IT+0x3c0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d054      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a31      	ldr	r2, [pc, #196]	; (80068c8 <HAL_DMA_Abort_IT+0x3c4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d04f      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a30      	ldr	r2, [pc, #192]	; (80068cc <HAL_DMA_Abort_IT+0x3c8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d04a      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2e      	ldr	r2, [pc, #184]	; (80068d0 <HAL_DMA_Abort_IT+0x3cc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d045      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <HAL_DMA_Abort_IT+0x3d0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d040      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <HAL_DMA_Abort_IT+0x3d4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d03b      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <HAL_DMA_Abort_IT+0x3d8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d036      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <HAL_DMA_Abort_IT+0x3dc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d031      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <HAL_DMA_Abort_IT+0x3e0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d02c      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <HAL_DMA_Abort_IT+0x3e4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d027      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a24      	ldr	r2, [pc, #144]	; (80068ec <HAL_DMA_Abort_IT+0x3e8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a22      	ldr	r2, [pc, #136]	; (80068f0 <HAL_DMA_Abort_IT+0x3ec>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <HAL_DMA_Abort_IT+0x3f0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <HAL_DMA_Abort_IT+0x3f4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <HAL_DMA_Abort_IT+0x3f8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1c      	ldr	r2, [pc, #112]	; (8006900 <HAL_DMA_Abort_IT+0x3fc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <HAL_DMA_Abort_IT+0x400>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x3a2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a19      	ldr	r2, [pc, #100]	; (8006908 <HAL_DMA_Abort_IT+0x404>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d132      	bne.n	800690c <HAL_DMA_Abort_IT+0x408>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e031      	b.n	800690e <HAL_DMA_Abort_IT+0x40a>
 80068aa:	bf00      	nop
 80068ac:	40020010 	.word	0x40020010
 80068b0:	40020028 	.word	0x40020028
 80068b4:	40020040 	.word	0x40020040
 80068b8:	40020058 	.word	0x40020058
 80068bc:	40020070 	.word	0x40020070
 80068c0:	40020088 	.word	0x40020088
 80068c4:	400200a0 	.word	0x400200a0
 80068c8:	400200b8 	.word	0x400200b8
 80068cc:	40020410 	.word	0x40020410
 80068d0:	40020428 	.word	0x40020428
 80068d4:	40020440 	.word	0x40020440
 80068d8:	40020458 	.word	0x40020458
 80068dc:	40020470 	.word	0x40020470
 80068e0:	40020488 	.word	0x40020488
 80068e4:	400204a0 	.word	0x400204a0
 80068e8:	400204b8 	.word	0x400204b8
 80068ec:	58025408 	.word	0x58025408
 80068f0:	5802541c 	.word	0x5802541c
 80068f4:	58025430 	.word	0x58025430
 80068f8:	58025444 	.word	0x58025444
 80068fc:	58025458 	.word	0x58025458
 8006900:	5802546c 	.word	0x5802546c
 8006904:	58025480 	.word	0x58025480
 8006908:	58025494 	.word	0x58025494
 800690c:	2300      	movs	r3, #0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d028      	beq.n	8006964 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006920:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2201      	movs	r2, #1
 8006932:	409a      	lsls	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006940:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006958:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006962:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop

08006990 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800699c:	4b67      	ldr	r3, [pc, #412]	; (8006b3c <HAL_DMA_IRQHandler+0x1ac>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a67      	ldr	r2, [pc, #412]	; (8006b40 <HAL_DMA_IRQHandler+0x1b0>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	0a9b      	lsrs	r3, r3, #10
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a5f      	ldr	r2, [pc, #380]	; (8006b44 <HAL_DMA_IRQHandler+0x1b4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d04a      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a5d      	ldr	r2, [pc, #372]	; (8006b48 <HAL_DMA_IRQHandler+0x1b8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d045      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5c      	ldr	r2, [pc, #368]	; (8006b4c <HAL_DMA_IRQHandler+0x1bc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d040      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5a      	ldr	r2, [pc, #360]	; (8006b50 <HAL_DMA_IRQHandler+0x1c0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d03b      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a59      	ldr	r2, [pc, #356]	; (8006b54 <HAL_DMA_IRQHandler+0x1c4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d036      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a57      	ldr	r2, [pc, #348]	; (8006b58 <HAL_DMA_IRQHandler+0x1c8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d031      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a56      	ldr	r2, [pc, #344]	; (8006b5c <HAL_DMA_IRQHandler+0x1cc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d02c      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a54      	ldr	r2, [pc, #336]	; (8006b60 <HAL_DMA_IRQHandler+0x1d0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d027      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a53      	ldr	r2, [pc, #332]	; (8006b64 <HAL_DMA_IRQHandler+0x1d4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a51      	ldr	r2, [pc, #324]	; (8006b68 <HAL_DMA_IRQHandler+0x1d8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01d      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a50      	ldr	r2, [pc, #320]	; (8006b6c <HAL_DMA_IRQHandler+0x1dc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a4e      	ldr	r2, [pc, #312]	; (8006b70 <HAL_DMA_IRQHandler+0x1e0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a4d      	ldr	r2, [pc, #308]	; (8006b74 <HAL_DMA_IRQHandler+0x1e4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_DMA_IRQHandler+0x1e8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4a      	ldr	r2, [pc, #296]	; (8006b7c <HAL_DMA_IRQHandler+0x1ec>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_DMA_IRQHandler+0xd2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a48      	ldr	r2, [pc, #288]	; (8006b80 <HAL_DMA_IRQHandler+0x1f0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_DMA_IRQHandler+0xd6>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <HAL_DMA_IRQHandler+0xd8>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 842b 	beq.w	80072c4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	2208      	movs	r2, #8
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80a2 	beq.w	8006bc8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2e      	ldr	r2, [pc, #184]	; (8006b44 <HAL_DMA_IRQHandler+0x1b4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d04a      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2d      	ldr	r2, [pc, #180]	; (8006b48 <HAL_DMA_IRQHandler+0x1b8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d045      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2b      	ldr	r2, [pc, #172]	; (8006b4c <HAL_DMA_IRQHandler+0x1bc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d040      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <HAL_DMA_IRQHandler+0x1c0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d03b      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a28      	ldr	r2, [pc, #160]	; (8006b54 <HAL_DMA_IRQHandler+0x1c4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d036      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a27      	ldr	r2, [pc, #156]	; (8006b58 <HAL_DMA_IRQHandler+0x1c8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d031      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_DMA_IRQHandler+0x1cc>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d02c      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a24      	ldr	r2, [pc, #144]	; (8006b60 <HAL_DMA_IRQHandler+0x1d0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d027      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <HAL_DMA_IRQHandler+0x1d4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d022      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a21      	ldr	r2, [pc, #132]	; (8006b68 <HAL_DMA_IRQHandler+0x1d8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01d      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <HAL_DMA_IRQHandler+0x1dc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d018      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1e      	ldr	r2, [pc, #120]	; (8006b70 <HAL_DMA_IRQHandler+0x1e0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1c      	ldr	r2, [pc, #112]	; (8006b74 <HAL_DMA_IRQHandler+0x1e4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00e      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1b      	ldr	r2, [pc, #108]	; (8006b78 <HAL_DMA_IRQHandler+0x1e8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d009      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <HAL_DMA_IRQHandler+0x1ec>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x194>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_DMA_IRQHandler+0x1f0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d12f      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x1f4>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e02e      	b.n	8006b98 <HAL_DMA_IRQHandler+0x208>
 8006b3a:	bf00      	nop
 8006b3c:	2400029c 	.word	0x2400029c
 8006b40:	1b4e81b5 	.word	0x1b4e81b5
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d015      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0204 	bic.w	r2, r2, #4
 8006baa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	f043 0201 	orr.w	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d06e      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a69      	ldr	r2, [pc, #420]	; (8006d88 <HAL_DMA_IRQHandler+0x3f8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d04a      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a67      	ldr	r2, [pc, #412]	; (8006d8c <HAL_DMA_IRQHandler+0x3fc>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d045      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a66      	ldr	r2, [pc, #408]	; (8006d90 <HAL_DMA_IRQHandler+0x400>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d040      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a64      	ldr	r2, [pc, #400]	; (8006d94 <HAL_DMA_IRQHandler+0x404>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d03b      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a63      	ldr	r2, [pc, #396]	; (8006d98 <HAL_DMA_IRQHandler+0x408>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d036      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a61      	ldr	r2, [pc, #388]	; (8006d9c <HAL_DMA_IRQHandler+0x40c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d031      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a60      	ldr	r2, [pc, #384]	; (8006da0 <HAL_DMA_IRQHandler+0x410>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d02c      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a5e      	ldr	r2, [pc, #376]	; (8006da4 <HAL_DMA_IRQHandler+0x414>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d027      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a5d      	ldr	r2, [pc, #372]	; (8006da8 <HAL_DMA_IRQHandler+0x418>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d022      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a5b      	ldr	r2, [pc, #364]	; (8006dac <HAL_DMA_IRQHandler+0x41c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01d      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a5a      	ldr	r2, [pc, #360]	; (8006db0 <HAL_DMA_IRQHandler+0x420>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d018      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a58      	ldr	r2, [pc, #352]	; (8006db4 <HAL_DMA_IRQHandler+0x424>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a57      	ldr	r2, [pc, #348]	; (8006db8 <HAL_DMA_IRQHandler+0x428>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00e      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a55      	ldr	r2, [pc, #340]	; (8006dbc <HAL_DMA_IRQHandler+0x42c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a54      	ldr	r2, [pc, #336]	; (8006dc0 <HAL_DMA_IRQHandler+0x430>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x2ee>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a52      	ldr	r2, [pc, #328]	; (8006dc4 <HAL_DMA_IRQHandler+0x434>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d10a      	bne.n	8006c94 <HAL_DMA_IRQHandler+0x304>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e003      	b.n	8006c9c <HAL_DMA_IRQHandler+0x30c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00d      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2201      	movs	r2, #1
 8006caa:	409a      	lsls	r2, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	f043 0202 	orr.w	r2, r3, #2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 808f 	beq.w	8006df0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <HAL_DMA_IRQHandler+0x3f8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d04a      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <HAL_DMA_IRQHandler+0x3fc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d045      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <HAL_DMA_IRQHandler+0x400>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d040      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <HAL_DMA_IRQHandler+0x404>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d03b      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <HAL_DMA_IRQHandler+0x408>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d036      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a24      	ldr	r2, [pc, #144]	; (8006d9c <HAL_DMA_IRQHandler+0x40c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d031      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_DMA_IRQHandler+0x410>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d02c      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a21      	ldr	r2, [pc, #132]	; (8006da4 <HAL_DMA_IRQHandler+0x414>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d027      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <HAL_DMA_IRQHandler+0x418>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d022      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <HAL_DMA_IRQHandler+0x41c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <HAL_DMA_IRQHandler+0x420>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d018      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <HAL_DMA_IRQHandler+0x424>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_DMA_IRQHandler+0x428>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <HAL_DMA_IRQHandler+0x42c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_DMA_IRQHandler+0x430>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x3e2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <HAL_DMA_IRQHandler+0x434>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d12a      	bne.n	8006dc8 <HAL_DMA_IRQHandler+0x438>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e023      	b.n	8006dd0 <HAL_DMA_IRQHandler+0x440>
 8006d88:	40020010 	.word	0x40020010
 8006d8c:	40020028 	.word	0x40020028
 8006d90:	40020040 	.word	0x40020040
 8006d94:	40020058 	.word	0x40020058
 8006d98:	40020070 	.word	0x40020070
 8006d9c:	40020088 	.word	0x40020088
 8006da0:	400200a0 	.word	0x400200a0
 8006da4:	400200b8 	.word	0x400200b8
 8006da8:	40020410 	.word	0x40020410
 8006dac:	40020428 	.word	0x40020428
 8006db0:	40020440 	.word	0x40020440
 8006db4:	40020458 	.word	0x40020458
 8006db8:	40020470 	.word	0x40020470
 8006dbc:	40020488 	.word	0x40020488
 8006dc0:	400204a0 	.word	0x400204a0
 8006dc4:	400204b8 	.word	0x400204b8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2204      	movs	r2, #4
 8006dde:	409a      	lsls	r2, r3
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de8:	f043 0204 	orr.w	r2, r3, #4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	2210      	movs	r2, #16
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80a6 	beq.w	8006f52 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a85      	ldr	r2, [pc, #532]	; (8007020 <HAL_DMA_IRQHandler+0x690>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d04a      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a83      	ldr	r2, [pc, #524]	; (8007024 <HAL_DMA_IRQHandler+0x694>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d045      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a82      	ldr	r2, [pc, #520]	; (8007028 <HAL_DMA_IRQHandler+0x698>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d040      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a80      	ldr	r2, [pc, #512]	; (800702c <HAL_DMA_IRQHandler+0x69c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d03b      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a7f      	ldr	r2, [pc, #508]	; (8007030 <HAL_DMA_IRQHandler+0x6a0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d036      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a7d      	ldr	r2, [pc, #500]	; (8007034 <HAL_DMA_IRQHandler+0x6a4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d031      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7c      	ldr	r2, [pc, #496]	; (8007038 <HAL_DMA_IRQHandler+0x6a8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d02c      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7a      	ldr	r2, [pc, #488]	; (800703c <HAL_DMA_IRQHandler+0x6ac>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d027      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a79      	ldr	r2, [pc, #484]	; (8007040 <HAL_DMA_IRQHandler+0x6b0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d022      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a77      	ldr	r2, [pc, #476]	; (8007044 <HAL_DMA_IRQHandler+0x6b4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01d      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a76      	ldr	r2, [pc, #472]	; (8007048 <HAL_DMA_IRQHandler+0x6b8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a74      	ldr	r2, [pc, #464]	; (800704c <HAL_DMA_IRQHandler+0x6bc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a73      	ldr	r2, [pc, #460]	; (8007050 <HAL_DMA_IRQHandler+0x6c0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a71      	ldr	r2, [pc, #452]	; (8007054 <HAL_DMA_IRQHandler+0x6c4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a70      	ldr	r2, [pc, #448]	; (8007058 <HAL_DMA_IRQHandler+0x6c8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x516>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a6e      	ldr	r2, [pc, #440]	; (800705c <HAL_DMA_IRQHandler+0x6cc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10a      	bne.n	8006ebc <HAL_DMA_IRQHandler+0x52c>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e009      	b.n	8006ed0 <HAL_DMA_IRQHandler+0x540>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bf14      	ite	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	2300      	moveq	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03e      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2210      	movs	r2, #16
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d018      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d024      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
 8006f10:	e01f      	b.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01b      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
 8006f22:	e016      	b.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d107      	bne.n	8006f42 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0208 	bic.w	r2, r2, #8
 8006f40:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f56:	f003 031f 	and.w	r3, r3, #31
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	409a      	lsls	r2, r3
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8110 	beq.w	8007188 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <HAL_DMA_IRQHandler+0x690>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d04a      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <HAL_DMA_IRQHandler+0x694>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d045      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a29      	ldr	r2, [pc, #164]	; (8007028 <HAL_DMA_IRQHandler+0x698>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d040      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <HAL_DMA_IRQHandler+0x69c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d03b      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_DMA_IRQHandler+0x6a0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d036      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a25      	ldr	r2, [pc, #148]	; (8007034 <HAL_DMA_IRQHandler+0x6a4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d031      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a23      	ldr	r2, [pc, #140]	; (8007038 <HAL_DMA_IRQHandler+0x6a8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d02c      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a22      	ldr	r2, [pc, #136]	; (800703c <HAL_DMA_IRQHandler+0x6ac>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d027      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <HAL_DMA_IRQHandler+0x6b0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d022      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <HAL_DMA_IRQHandler+0x6b4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01d      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <HAL_DMA_IRQHandler+0x6b8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1c      	ldr	r2, [pc, #112]	; (800704c <HAL_DMA_IRQHandler+0x6bc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d013      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <HAL_DMA_IRQHandler+0x6c0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a19      	ldr	r2, [pc, #100]	; (8007054 <HAL_DMA_IRQHandler+0x6c4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a17      	ldr	r2, [pc, #92]	; (8007058 <HAL_DMA_IRQHandler+0x6c8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_DMA_IRQHandler+0x678>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <HAL_DMA_IRQHandler+0x6cc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d12b      	bne.n	8007060 <HAL_DMA_IRQHandler+0x6d0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf14      	ite	ne
 8007016:	2301      	movne	r3, #1
 8007018:	2300      	moveq	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	e02a      	b.n	8007074 <HAL_DMA_IRQHandler+0x6e4>
 800701e:	bf00      	nop
 8007020:	40020010 	.word	0x40020010
 8007024:	40020028 	.word	0x40020028
 8007028:	40020040 	.word	0x40020040
 800702c:	40020058 	.word	0x40020058
 8007030:	40020070 	.word	0x40020070
 8007034:	40020088 	.word	0x40020088
 8007038:	400200a0 	.word	0x400200a0
 800703c:	400200b8 	.word	0x400200b8
 8007040:	40020410 	.word	0x40020410
 8007044:	40020428 	.word	0x40020428
 8007048:	40020440 	.word	0x40020440
 800704c:	40020458 	.word	0x40020458
 8007050:	40020470 	.word	0x40020470
 8007054:	40020488 	.word	0x40020488
 8007058:	400204a0 	.word	0x400204a0
 800705c:	400204b8 	.word	0x400204b8
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8087 	beq.w	8007188 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2220      	movs	r2, #32
 8007084:	409a      	lsls	r2, r3
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b04      	cmp	r3, #4
 8007094:	d139      	bne.n	800710a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0216 	bic.w	r2, r2, #22
 80070a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <HAL_DMA_IRQHandler+0x736>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0208 	bic.w	r2, r2, #8
 80070d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	f003 031f 	and.w	r3, r3, #31
 80070de:	223f      	movs	r2, #63	; 0x3f
 80070e0:	409a      	lsls	r2, r3
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 834a 	beq.w	8007794 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
          }
          return;
 8007108:	e344      	b.n	8007794 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d018      	beq.n	800714a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d108      	bne.n	8007138 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	2b00      	cmp	r3, #0
 800712c:	d02c      	beq.n	8007188 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	4798      	blx	r3
 8007136:	e027      	b.n	8007188 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	e01e      	b.n	8007188 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10f      	bne.n	8007178 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0210 	bic.w	r2, r2, #16
 8007166:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8306 	beq.w	800779e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8088 	beq.w	80072b0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2204      	movs	r2, #4
 80071a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a7a      	ldr	r2, [pc, #488]	; (8007398 <HAL_DMA_IRQHandler+0xa08>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d04a      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a79      	ldr	r2, [pc, #484]	; (800739c <HAL_DMA_IRQHandler+0xa0c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d045      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a77      	ldr	r2, [pc, #476]	; (80073a0 <HAL_DMA_IRQHandler+0xa10>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d040      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a76      	ldr	r2, [pc, #472]	; (80073a4 <HAL_DMA_IRQHandler+0xa14>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d03b      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a74      	ldr	r2, [pc, #464]	; (80073a8 <HAL_DMA_IRQHandler+0xa18>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d036      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a73      	ldr	r2, [pc, #460]	; (80073ac <HAL_DMA_IRQHandler+0xa1c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d031      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a71      	ldr	r2, [pc, #452]	; (80073b0 <HAL_DMA_IRQHandler+0xa20>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d02c      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a70      	ldr	r2, [pc, #448]	; (80073b4 <HAL_DMA_IRQHandler+0xa24>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d027      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a6e      	ldr	r2, [pc, #440]	; (80073b8 <HAL_DMA_IRQHandler+0xa28>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d022      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a6d      	ldr	r2, [pc, #436]	; (80073bc <HAL_DMA_IRQHandler+0xa2c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01d      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a6b      	ldr	r2, [pc, #428]	; (80073c0 <HAL_DMA_IRQHandler+0xa30>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d018      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a6a      	ldr	r2, [pc, #424]	; (80073c4 <HAL_DMA_IRQHandler+0xa34>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a68      	ldr	r2, [pc, #416]	; (80073c8 <HAL_DMA_IRQHandler+0xa38>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00e      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a67      	ldr	r2, [pc, #412]	; (80073cc <HAL_DMA_IRQHandler+0xa3c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d009      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a65      	ldr	r2, [pc, #404]	; (80073d0 <HAL_DMA_IRQHandler+0xa40>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_DMA_IRQHandler+0x8b8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a64      	ldr	r2, [pc, #400]	; (80073d4 <HAL_DMA_IRQHandler+0xa44>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <HAL_DMA_IRQHandler+0x8ca>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e007      	b.n	800726a <HAL_DMA_IRQHandler+0x8da>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 0201 	bic.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	429a      	cmp	r2, r3
 8007274:	d307      	bcc.n	8007286 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f2      	bne.n	800726a <HAL_DMA_IRQHandler+0x8da>
 8007284:	e000      	b.n	8007288 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007286:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800729e:	e003      	b.n	80072a8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8272 	beq.w	800779e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	e26c      	b.n	800779e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a43      	ldr	r2, [pc, #268]	; (80073d8 <HAL_DMA_IRQHandler+0xa48>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a42      	ldr	r2, [pc, #264]	; (80073dc <HAL_DMA_IRQHandler+0xa4c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01d      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a40      	ldr	r2, [pc, #256]	; (80073e0 <HAL_DMA_IRQHandler+0xa50>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3f      	ldr	r2, [pc, #252]	; (80073e4 <HAL_DMA_IRQHandler+0xa54>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a3d      	ldr	r2, [pc, #244]	; (80073e8 <HAL_DMA_IRQHandler+0xa58>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <HAL_DMA_IRQHandler+0xa5c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <HAL_DMA_IRQHandler+0xa60>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <HAL_DMA_IRQHandler+0x984>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a39      	ldr	r2, [pc, #228]	; (80073f4 <HAL_DMA_IRQHandler+0xa64>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d101      	bne.n	8007318 <HAL_DMA_IRQHandler+0x988>
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <HAL_DMA_IRQHandler+0x98a>
 8007318:	2300      	movs	r3, #0
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 823f 	beq.w	800779e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2204      	movs	r2, #4
 8007332:	409a      	lsls	r2, r3
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 80cd 	beq.w	80074d8 <HAL_DMA_IRQHandler+0xb48>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80c7 	beq.w	80074d8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2204      	movs	r2, #4
 8007354:	409a      	lsls	r2, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d049      	beq.n	80073f8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 8210 	beq.w	8007798 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007380:	e20a      	b.n	8007798 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8206 	beq.w	8007798 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007394:	e200      	b.n	8007798 <HAL_DMA_IRQHandler+0xe08>
 8007396:	bf00      	nop
 8007398:	40020010 	.word	0x40020010
 800739c:	40020028 	.word	0x40020028
 80073a0:	40020040 	.word	0x40020040
 80073a4:	40020058 	.word	0x40020058
 80073a8:	40020070 	.word	0x40020070
 80073ac:	40020088 	.word	0x40020088
 80073b0:	400200a0 	.word	0x400200a0
 80073b4:	400200b8 	.word	0x400200b8
 80073b8:	40020410 	.word	0x40020410
 80073bc:	40020428 	.word	0x40020428
 80073c0:	40020440 	.word	0x40020440
 80073c4:	40020458 	.word	0x40020458
 80073c8:	40020470 	.word	0x40020470
 80073cc:	40020488 	.word	0x40020488
 80073d0:	400204a0 	.word	0x400204a0
 80073d4:	400204b8 	.word	0x400204b8
 80073d8:	58025408 	.word	0x58025408
 80073dc:	5802541c 	.word	0x5802541c
 80073e0:	58025430 	.word	0x58025430
 80073e4:	58025444 	.word	0x58025444
 80073e8:	58025458 	.word	0x58025458
 80073ec:	5802546c 	.word	0x5802546c
 80073f0:	58025480 	.word	0x58025480
 80073f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d160      	bne.n	80074c4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a7f      	ldr	r2, [pc, #508]	; (8007604 <HAL_DMA_IRQHandler+0xc74>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d04a      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a7d      	ldr	r2, [pc, #500]	; (8007608 <HAL_DMA_IRQHandler+0xc78>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d045      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a7c      	ldr	r2, [pc, #496]	; (800760c <HAL_DMA_IRQHandler+0xc7c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d040      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a7a      	ldr	r2, [pc, #488]	; (8007610 <HAL_DMA_IRQHandler+0xc80>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d03b      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a79      	ldr	r2, [pc, #484]	; (8007614 <HAL_DMA_IRQHandler+0xc84>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d036      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a77      	ldr	r2, [pc, #476]	; (8007618 <HAL_DMA_IRQHandler+0xc88>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d031      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a76      	ldr	r2, [pc, #472]	; (800761c <HAL_DMA_IRQHandler+0xc8c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d02c      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a74      	ldr	r2, [pc, #464]	; (8007620 <HAL_DMA_IRQHandler+0xc90>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d027      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a73      	ldr	r2, [pc, #460]	; (8007624 <HAL_DMA_IRQHandler+0xc94>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a71      	ldr	r2, [pc, #452]	; (8007628 <HAL_DMA_IRQHandler+0xc98>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01d      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a70      	ldr	r2, [pc, #448]	; (800762c <HAL_DMA_IRQHandler+0xc9c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d018      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a6e      	ldr	r2, [pc, #440]	; (8007630 <HAL_DMA_IRQHandler+0xca0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d013      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a6d      	ldr	r2, [pc, #436]	; (8007634 <HAL_DMA_IRQHandler+0xca4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00e      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a6b      	ldr	r2, [pc, #428]	; (8007638 <HAL_DMA_IRQHandler+0xca8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d009      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a6a      	ldr	r2, [pc, #424]	; (800763c <HAL_DMA_IRQHandler+0xcac>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d004      	beq.n	80074a2 <HAL_DMA_IRQHandler+0xb12>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a68      	ldr	r2, [pc, #416]	; (8007640 <HAL_DMA_IRQHandler+0xcb0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d108      	bne.n	80074b4 <HAL_DMA_IRQHandler+0xb24>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0208 	bic.w	r2, r2, #8
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e007      	b.n	80074c4 <HAL_DMA_IRQHandler+0xb34>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0204 	bic.w	r2, r2, #4
 80074c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8165 	beq.w	8007798 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d6:	e15f      	b.n	8007798 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2202      	movs	r2, #2
 80074e2:	409a      	lsls	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 80c5 	beq.w	8007678 <HAL_DMA_IRQHandler+0xce8>
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80bf 	beq.w	8007678 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2202      	movs	r2, #2
 8007504:	409a      	lsls	r2, r3
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d018      	beq.n	8007546 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 813a 	beq.w	800779c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007530:	e134      	b.n	800779c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8130 	beq.w	800779c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007544:	e12a      	b.n	800779c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 8089 	bne.w	8007664 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a2b      	ldr	r2, [pc, #172]	; (8007604 <HAL_DMA_IRQHandler+0xc74>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d04a      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <HAL_DMA_IRQHandler+0xc78>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d045      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a28      	ldr	r2, [pc, #160]	; (800760c <HAL_DMA_IRQHandler+0xc7c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d040      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a26      	ldr	r2, [pc, #152]	; (8007610 <HAL_DMA_IRQHandler+0xc80>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d03b      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a25      	ldr	r2, [pc, #148]	; (8007614 <HAL_DMA_IRQHandler+0xc84>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d036      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a23      	ldr	r2, [pc, #140]	; (8007618 <HAL_DMA_IRQHandler+0xc88>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d031      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a22      	ldr	r2, [pc, #136]	; (800761c <HAL_DMA_IRQHandler+0xc8c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d02c      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <HAL_DMA_IRQHandler+0xc90>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d027      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <HAL_DMA_IRQHandler+0xc94>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <HAL_DMA_IRQHandler+0xc98>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01d      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_DMA_IRQHandler+0xc9c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <HAL_DMA_IRQHandler+0xca0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <HAL_DMA_IRQHandler+0xca4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a17      	ldr	r2, [pc, #92]	; (8007638 <HAL_DMA_IRQHandler+0xca8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a16      	ldr	r2, [pc, #88]	; (800763c <HAL_DMA_IRQHandler+0xcac>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_DMA_IRQHandler+0xc62>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a14      	ldr	r2, [pc, #80]	; (8007640 <HAL_DMA_IRQHandler+0xcb0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d128      	bne.n	8007644 <HAL_DMA_IRQHandler+0xcb4>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0214 	bic.w	r2, r2, #20
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e027      	b.n	8007654 <HAL_DMA_IRQHandler+0xcc4>
 8007604:	40020010 	.word	0x40020010
 8007608:	40020028 	.word	0x40020028
 800760c:	40020040 	.word	0x40020040
 8007610:	40020058 	.word	0x40020058
 8007614:	40020070 	.word	0x40020070
 8007618:	40020088 	.word	0x40020088
 800761c:	400200a0 	.word	0x400200a0
 8007620:	400200b8 	.word	0x400200b8
 8007624:	40020410 	.word	0x40020410
 8007628:	40020428 	.word	0x40020428
 800762c:	40020440 	.word	0x40020440
 8007630:	40020458 	.word	0x40020458
 8007634:	40020470 	.word	0x40020470
 8007638:	40020488 	.word	0x40020488
 800763c:	400204a0 	.word	0x400204a0
 8007640:	400204b8 	.word	0x400204b8
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020a 	bic.w	r2, r2, #10
 8007652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8097 	beq.w	800779c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007676:	e091      	b.n	800779c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2208      	movs	r2, #8
 8007682:	409a      	lsls	r2, r3
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	4013      	ands	r3, r2
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8088 	beq.w	800779e <HAL_DMA_IRQHandler+0xe0e>
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8082 	beq.w	800779e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a41      	ldr	r2, [pc, #260]	; (80077a4 <HAL_DMA_IRQHandler+0xe14>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04a      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a3f      	ldr	r2, [pc, #252]	; (80077a8 <HAL_DMA_IRQHandler+0xe18>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d045      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a3e      	ldr	r2, [pc, #248]	; (80077ac <HAL_DMA_IRQHandler+0xe1c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d040      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3c      	ldr	r2, [pc, #240]	; (80077b0 <HAL_DMA_IRQHandler+0xe20>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d03b      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a3b      	ldr	r2, [pc, #236]	; (80077b4 <HAL_DMA_IRQHandler+0xe24>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d036      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a39      	ldr	r2, [pc, #228]	; (80077b8 <HAL_DMA_IRQHandler+0xe28>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d031      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a38      	ldr	r2, [pc, #224]	; (80077bc <HAL_DMA_IRQHandler+0xe2c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d02c      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a36      	ldr	r2, [pc, #216]	; (80077c0 <HAL_DMA_IRQHandler+0xe30>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d027      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a35      	ldr	r2, [pc, #212]	; (80077c4 <HAL_DMA_IRQHandler+0xe34>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a33      	ldr	r2, [pc, #204]	; (80077c8 <HAL_DMA_IRQHandler+0xe38>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01d      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a32      	ldr	r2, [pc, #200]	; (80077cc <HAL_DMA_IRQHandler+0xe3c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a30      	ldr	r2, [pc, #192]	; (80077d0 <HAL_DMA_IRQHandler+0xe40>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <HAL_DMA_IRQHandler+0xe44>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <HAL_DMA_IRQHandler+0xe48>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <HAL_DMA_IRQHandler+0xe4c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_DMA_IRQHandler+0xdaa>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <HAL_DMA_IRQHandler+0xe50>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d108      	bne.n	800774c <HAL_DMA_IRQHandler+0xdbc>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 021c 	bic.w	r2, r2, #28
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e007      	b.n	800775c <HAL_DMA_IRQHandler+0xdcc>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 020e 	bic.w	r2, r2, #14
 800775a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	2201      	movs	r2, #1
 8007766:	409a      	lsls	r2, r3
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	e004      	b.n	800779e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007794:	bf00      	nop
 8007796:	e002      	b.n	800779e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007798:	bf00      	nop
 800779a:	e000      	b.n	800779e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800779c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800779e:	3728      	adds	r7, #40	; 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40020010 	.word	0x40020010
 80077a8:	40020028 	.word	0x40020028
 80077ac:	40020040 	.word	0x40020040
 80077b0:	40020058 	.word	0x40020058
 80077b4:	40020070 	.word	0x40020070
 80077b8:	40020088 	.word	0x40020088
 80077bc:	400200a0 	.word	0x400200a0
 80077c0:	400200b8 	.word	0x400200b8
 80077c4:	40020410 	.word	0x40020410
 80077c8:	40020428 	.word	0x40020428
 80077cc:	40020440 	.word	0x40020440
 80077d0:	40020458 	.word	0x40020458
 80077d4:	40020470 	.word	0x40020470
 80077d8:	40020488 	.word	0x40020488
 80077dc:	400204a0 	.word	0x400204a0
 80077e0:	400204b8 	.word	0x400204b8

080077e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077f2:	b2db      	uxtb	r3, r3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007830:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a7f      	ldr	r2, [pc, #508]	; (8007a34 <DMA_SetConfig+0x21c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d072      	beq.n	8007922 <DMA_SetConfig+0x10a>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a7d      	ldr	r2, [pc, #500]	; (8007a38 <DMA_SetConfig+0x220>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d06d      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <DMA_SetConfig+0x224>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d068      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a7a      	ldr	r2, [pc, #488]	; (8007a40 <DMA_SetConfig+0x228>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d063      	beq.n	8007922 <DMA_SetConfig+0x10a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a79      	ldr	r2, [pc, #484]	; (8007a44 <DMA_SetConfig+0x22c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d05e      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a77      	ldr	r2, [pc, #476]	; (8007a48 <DMA_SetConfig+0x230>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d059      	beq.n	8007922 <DMA_SetConfig+0x10a>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a76      	ldr	r2, [pc, #472]	; (8007a4c <DMA_SetConfig+0x234>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d054      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a74      	ldr	r2, [pc, #464]	; (8007a50 <DMA_SetConfig+0x238>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04f      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a73      	ldr	r2, [pc, #460]	; (8007a54 <DMA_SetConfig+0x23c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d04a      	beq.n	8007922 <DMA_SetConfig+0x10a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a71      	ldr	r2, [pc, #452]	; (8007a58 <DMA_SetConfig+0x240>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d045      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a70      	ldr	r2, [pc, #448]	; (8007a5c <DMA_SetConfig+0x244>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d040      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a6e      	ldr	r2, [pc, #440]	; (8007a60 <DMA_SetConfig+0x248>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d03b      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6d      	ldr	r2, [pc, #436]	; (8007a64 <DMA_SetConfig+0x24c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d036      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a6b      	ldr	r2, [pc, #428]	; (8007a68 <DMA_SetConfig+0x250>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d031      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a6a      	ldr	r2, [pc, #424]	; (8007a6c <DMA_SetConfig+0x254>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d02c      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a68      	ldr	r2, [pc, #416]	; (8007a70 <DMA_SetConfig+0x258>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d027      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a67      	ldr	r2, [pc, #412]	; (8007a74 <DMA_SetConfig+0x25c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d022      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a65      	ldr	r2, [pc, #404]	; (8007a78 <DMA_SetConfig+0x260>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01d      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a64      	ldr	r2, [pc, #400]	; (8007a7c <DMA_SetConfig+0x264>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d018      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a62      	ldr	r2, [pc, #392]	; (8007a80 <DMA_SetConfig+0x268>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <DMA_SetConfig+0x10a>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a61      	ldr	r2, [pc, #388]	; (8007a84 <DMA_SetConfig+0x26c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a5f      	ldr	r2, [pc, #380]	; (8007a88 <DMA_SetConfig+0x270>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <DMA_SetConfig+0x10a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a5e      	ldr	r2, [pc, #376]	; (8007a8c <DMA_SetConfig+0x274>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <DMA_SetConfig+0x10a>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a5c      	ldr	r2, [pc, #368]	; (8007a90 <DMA_SetConfig+0x278>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d101      	bne.n	8007926 <DMA_SetConfig+0x10e>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <DMA_SetConfig+0x110>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00d      	beq.n	8007948 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007934:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007946:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a39      	ldr	r2, [pc, #228]	; (8007a34 <DMA_SetConfig+0x21c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d04a      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a38      	ldr	r2, [pc, #224]	; (8007a38 <DMA_SetConfig+0x220>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d045      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a36      	ldr	r2, [pc, #216]	; (8007a3c <DMA_SetConfig+0x224>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d040      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a35      	ldr	r2, [pc, #212]	; (8007a40 <DMA_SetConfig+0x228>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d03b      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a33      	ldr	r2, [pc, #204]	; (8007a44 <DMA_SetConfig+0x22c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d036      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <DMA_SetConfig+0x230>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d031      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a30      	ldr	r2, [pc, #192]	; (8007a4c <DMA_SetConfig+0x234>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d02c      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a2f      	ldr	r2, [pc, #188]	; (8007a50 <DMA_SetConfig+0x238>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d027      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <DMA_SetConfig+0x23c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d022      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a2c      	ldr	r2, [pc, #176]	; (8007a58 <DMA_SetConfig+0x240>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d01d      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a2a      	ldr	r2, [pc, #168]	; (8007a5c <DMA_SetConfig+0x244>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d018      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <DMA_SetConfig+0x248>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d013      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a27      	ldr	r2, [pc, #156]	; (8007a64 <DMA_SetConfig+0x24c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00e      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a26      	ldr	r2, [pc, #152]	; (8007a68 <DMA_SetConfig+0x250>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d009      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a24      	ldr	r2, [pc, #144]	; (8007a6c <DMA_SetConfig+0x254>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <DMA_SetConfig+0x1d0>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a23      	ldr	r2, [pc, #140]	; (8007a70 <DMA_SetConfig+0x258>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d101      	bne.n	80079ec <DMA_SetConfig+0x1d4>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <DMA_SetConfig+0x1d6>
 80079ec:	2300      	movs	r3, #0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d059      	beq.n	8007aa6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	223f      	movs	r2, #63	; 0x3f
 80079fc:	409a      	lsls	r2, r3
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b40      	cmp	r3, #64	; 0x40
 8007a20:	d138      	bne.n	8007a94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a32:	e086      	b.n	8007b42 <DMA_SetConfig+0x32a>
 8007a34:	40020010 	.word	0x40020010
 8007a38:	40020028 	.word	0x40020028
 8007a3c:	40020040 	.word	0x40020040
 8007a40:	40020058 	.word	0x40020058
 8007a44:	40020070 	.word	0x40020070
 8007a48:	40020088 	.word	0x40020088
 8007a4c:	400200a0 	.word	0x400200a0
 8007a50:	400200b8 	.word	0x400200b8
 8007a54:	40020410 	.word	0x40020410
 8007a58:	40020428 	.word	0x40020428
 8007a5c:	40020440 	.word	0x40020440
 8007a60:	40020458 	.word	0x40020458
 8007a64:	40020470 	.word	0x40020470
 8007a68:	40020488 	.word	0x40020488
 8007a6c:	400204a0 	.word	0x400204a0
 8007a70:	400204b8 	.word	0x400204b8
 8007a74:	58025408 	.word	0x58025408
 8007a78:	5802541c 	.word	0x5802541c
 8007a7c:	58025430 	.word	0x58025430
 8007a80:	58025444 	.word	0x58025444
 8007a84:	58025458 	.word	0x58025458
 8007a88:	5802546c 	.word	0x5802546c
 8007a8c:	58025480 	.word	0x58025480
 8007a90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]
}
 8007aa4:	e04d      	b.n	8007b42 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a29      	ldr	r2, [pc, #164]	; (8007b50 <DMA_SetConfig+0x338>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a27      	ldr	r2, [pc, #156]	; (8007b54 <DMA_SetConfig+0x33c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d01d      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a26      	ldr	r2, [pc, #152]	; (8007b58 <DMA_SetConfig+0x340>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a24      	ldr	r2, [pc, #144]	; (8007b5c <DMA_SetConfig+0x344>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a23      	ldr	r2, [pc, #140]	; (8007b60 <DMA_SetConfig+0x348>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <DMA_SetConfig+0x34c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a20      	ldr	r2, [pc, #128]	; (8007b68 <DMA_SetConfig+0x350>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <DMA_SetConfig+0x2de>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1e      	ldr	r2, [pc, #120]	; (8007b6c <DMA_SetConfig+0x354>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d101      	bne.n	8007afa <DMA_SetConfig+0x2e2>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <DMA_SetConfig+0x2e4>
 8007afa:	2300      	movs	r3, #0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d020      	beq.n	8007b42 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	2201      	movs	r2, #1
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d108      	bne.n	8007b32 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	60da      	str	r2, [r3, #12]
}
 8007b30:	e007      	b.n	8007b42 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	60da      	str	r2, [r3, #12]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	58025408 	.word	0x58025408
 8007b54:	5802541c 	.word	0x5802541c
 8007b58:	58025430 	.word	0x58025430
 8007b5c:	58025444 	.word	0x58025444
 8007b60:	58025458 	.word	0x58025458
 8007b64:	5802546c 	.word	0x5802546c
 8007b68:	58025480 	.word	0x58025480
 8007b6c:	58025494 	.word	0x58025494

08007b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a42      	ldr	r2, [pc, #264]	; (8007c88 <DMA_CalcBaseAndBitshift+0x118>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d04a      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a41      	ldr	r2, [pc, #260]	; (8007c8c <DMA_CalcBaseAndBitshift+0x11c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d045      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a3f      	ldr	r2, [pc, #252]	; (8007c90 <DMA_CalcBaseAndBitshift+0x120>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d040      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a3e      	ldr	r2, [pc, #248]	; (8007c94 <DMA_CalcBaseAndBitshift+0x124>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d03b      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a3c      	ldr	r2, [pc, #240]	; (8007c98 <DMA_CalcBaseAndBitshift+0x128>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d036      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3b      	ldr	r2, [pc, #236]	; (8007c9c <DMA_CalcBaseAndBitshift+0x12c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d031      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <DMA_CalcBaseAndBitshift+0x130>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d02c      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <DMA_CalcBaseAndBitshift+0x134>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d027      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a36      	ldr	r2, [pc, #216]	; (8007ca8 <DMA_CalcBaseAndBitshift+0x138>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d022      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a35      	ldr	r2, [pc, #212]	; (8007cac <DMA_CalcBaseAndBitshift+0x13c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d01d      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x140>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a32      	ldr	r2, [pc, #200]	; (8007cb4 <DMA_CalcBaseAndBitshift+0x144>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a30      	ldr	r2, [pc, #192]	; (8007cb8 <DMA_CalcBaseAndBitshift+0x148>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2f      	ldr	r2, [pc, #188]	; (8007cbc <DMA_CalcBaseAndBitshift+0x14c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a2d      	ldr	r2, [pc, #180]	; (8007cc0 <DMA_CalcBaseAndBitshift+0x150>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <DMA_CalcBaseAndBitshift+0xa8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2c      	ldr	r2, [pc, #176]	; (8007cc4 <DMA_CalcBaseAndBitshift+0x154>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d101      	bne.n	8007c1c <DMA_CalcBaseAndBitshift+0xac>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <DMA_CalcBaseAndBitshift+0xae>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d024      	beq.n	8007c6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	3b10      	subs	r3, #16
 8007c2a:	4a27      	ldr	r2, [pc, #156]	; (8007cc8 <DMA_CalcBaseAndBitshift+0x158>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	4a24      	ldr	r2, [pc, #144]	; (8007ccc <DMA_CalcBaseAndBitshift+0x15c>)
 8007c3c:	5cd3      	ldrb	r3, [r2, r3]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d908      	bls.n	8007c5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	659a      	str	r2, [r3, #88]	; 0x58
 8007c5a:	e00d      	b.n	8007c78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x160>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6593      	str	r3, [r2, #88]	; 0x58
 8007c6a:	e005      	b.n	8007c78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40020010 	.word	0x40020010
 8007c8c:	40020028 	.word	0x40020028
 8007c90:	40020040 	.word	0x40020040
 8007c94:	40020058 	.word	0x40020058
 8007c98:	40020070 	.word	0x40020070
 8007c9c:	40020088 	.word	0x40020088
 8007ca0:	400200a0 	.word	0x400200a0
 8007ca4:	400200b8 	.word	0x400200b8
 8007ca8:	40020410 	.word	0x40020410
 8007cac:	40020428 	.word	0x40020428
 8007cb0:	40020440 	.word	0x40020440
 8007cb4:	40020458 	.word	0x40020458
 8007cb8:	40020470 	.word	0x40020470
 8007cbc:	40020488 	.word	0x40020488
 8007cc0:	400204a0 	.word	0x400204a0
 8007cc4:	400204b8 	.word	0x400204b8
 8007cc8:	aaaaaaab 	.word	0xaaaaaaab
 8007ccc:	0802fe08 	.word	0x0802fe08
 8007cd0:	fffffc00 	.word	0xfffffc00

08007cd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d120      	bne.n	8007d2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d858      	bhi.n	8007da2 <DMA_CheckFifoParam+0xce>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <DMA_CheckFifoParam+0x24>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d1b 	.word	0x08007d1b
 8007d00:	08007d09 	.word	0x08007d09
 8007d04:	08007da3 	.word	0x08007da3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d048      	beq.n	8007da6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d18:	e045      	b.n	8007da6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d22:	d142      	bne.n	8007daa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d28:	e03f      	b.n	8007daa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d32:	d123      	bne.n	8007d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d838      	bhi.n	8007dae <DMA_CheckFifoParam+0xda>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <DMA_CheckFifoParam+0x70>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d5b 	.word	0x08007d5b
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	08007d6d 	.word	0x08007d6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
        break;
 8007d58:	e030      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d025      	beq.n	8007db2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d6a:	e022      	b.n	8007db2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d74:	d11f      	bne.n	8007db6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d7a:	e01c      	b.n	8007db6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d902      	bls.n	8007d8a <DMA_CheckFifoParam+0xb6>
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d003      	beq.n	8007d90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d88:	e018      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d8e:	e015      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007da0:	e00b      	b.n	8007dba <DMA_CheckFifoParam+0xe6>
        break;
 8007da2:	bf00      	nop
 8007da4:	e00a      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        break;
 8007da6:	bf00      	nop
 8007da8:	e008      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        break;
 8007daa:	bf00      	nop
 8007dac:	e006      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        break;
 8007dae:	bf00      	nop
 8007db0:	e004      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        break;
 8007db2:	bf00      	nop
 8007db4:	e002      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
        break;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <DMA_CheckFifoParam+0xe8>
    break;
 8007dba:	bf00      	nop
    }
  }

  return status;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop

08007dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a38      	ldr	r2, [pc, #224]	; (8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d022      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a36      	ldr	r2, [pc, #216]	; (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01d      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a35      	ldr	r2, [pc, #212]	; (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d018      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a33      	ldr	r2, [pc, #204]	; (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a32      	ldr	r2, [pc, #200]	; (8007ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a30      	ldr	r2, [pc, #192]	; (8007ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a2f      	ldr	r2, [pc, #188]	; (8007ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2d      	ldr	r2, [pc, #180]	; (8007edc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d101      	bne.n	8007e2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01a      	beq.n	8007e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	3b08      	subs	r3, #8
 8007e3c:	4a28      	ldr	r2, [pc, #160]	; (8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e42:	091b      	lsrs	r3, r3, #4
 8007e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4b26      	ldr	r3, [pc, #152]	; (8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a24      	ldr	r2, [pc, #144]	; (8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e68:	e024      	b.n	8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	3b10      	subs	r3, #16
 8007e72:	4a1e      	ldr	r2, [pc, #120]	; (8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e74:	fba2 2303 	umull	r2, r3, r2, r3
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	4a1c      	ldr	r2, [pc, #112]	; (8007ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d806      	bhi.n	8007e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d902      	bls.n	8007e92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4b18      	ldr	r3, [pc, #96]	; (8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	; (8007efc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ea4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	2201      	movs	r2, #1
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	58025408 	.word	0x58025408
 8007ec4:	5802541c 	.word	0x5802541c
 8007ec8:	58025430 	.word	0x58025430
 8007ecc:	58025444 	.word	0x58025444
 8007ed0:	58025458 	.word	0x58025458
 8007ed4:	5802546c 	.word	0x5802546c
 8007ed8:	58025480 	.word	0x58025480
 8007edc:	58025494 	.word	0x58025494
 8007ee0:	cccccccd 	.word	0xcccccccd
 8007ee4:	16009600 	.word	0x16009600
 8007ee8:	58025880 	.word	0x58025880
 8007eec:	aaaaaaab 	.word	0xaaaaaaab
 8007ef0:	400204b8 	.word	0x400204b8
 8007ef4:	4002040f 	.word	0x4002040f
 8007ef8:	10008200 	.word	0x10008200
 8007efc:	40020880 	.word	0x40020880

08007f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04a      	beq.n	8007fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d847      	bhi.n	8007fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a25      	ldr	r2, [pc, #148]	; (8007fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d022      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d01d      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d018      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a21      	ldr	r2, [pc, #132]	; (8007fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d013      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00e      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d009      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1c      	ldr	r2, [pc, #112]	; (8007fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d101      	bne.n	8007f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f70:	2300      	movs	r3, #0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f88:	671a      	str	r2, [r3, #112]	; 0x70
 8007f8a:	e009      	b.n	8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	461a      	mov	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a11      	ldr	r2, [pc, #68]	; (8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007fac:	bf00      	nop
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	58025408 	.word	0x58025408
 8007fbc:	5802541c 	.word	0x5802541c
 8007fc0:	58025430 	.word	0x58025430
 8007fc4:	58025444 	.word	0x58025444
 8007fc8:	58025458 	.word	0x58025458
 8007fcc:	5802546c 	.word	0x5802546c
 8007fd0:	58025480 	.word	0x58025480
 8007fd4:	58025494 	.word	0x58025494
 8007fd8:	1600963f 	.word	0x1600963f
 8007fdc:	58025940 	.word	0x58025940
 8007fe0:	1000823f 	.word	0x1000823f
 8007fe4:	40020940 	.word	0x40020940

08007fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b089      	sub	sp, #36	; 0x24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ff6:	4b89      	ldr	r3, [pc, #548]	; (800821c <HAL_GPIO_Init+0x234>)
 8007ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ffa:	e194      	b.n	8008326 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	2101      	movs	r1, #1
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	4013      	ands	r3, r2
 800800a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8186 	beq.w	8008320 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d005      	beq.n	800802c <HAL_GPIO_Init+0x44>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f003 0303 	and.w	r3, r3, #3
 8008028:	2b02      	cmp	r3, #2
 800802a:	d130      	bne.n	800808e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	2203      	movs	r2, #3
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	43db      	mvns	r3, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	4013      	ands	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	4313      	orrs	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008062:	2201      	movs	r2, #1
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	43db      	mvns	r3, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4013      	ands	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	091b      	lsrs	r3, r3, #4
 8008078:	f003 0201 	and.w	r2, r3, #1
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	fa02 f303 	lsl.w	r3, r2, r3
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	4313      	orrs	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d017      	beq.n	80080ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	2203      	movs	r2, #3
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	43db      	mvns	r3, r3
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	4013      	ands	r3, r2
 80080b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d123      	bne.n	800811e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	08da      	lsrs	r2, r3, #3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3208      	adds	r2, #8
 80080de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	220f      	movs	r2, #15
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43db      	mvns	r3, r3
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	4013      	ands	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	4313      	orrs	r3, r2
 800810e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	08da      	lsrs	r2, r3, #3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3208      	adds	r2, #8
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	2203      	movs	r2, #3
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43db      	mvns	r3, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 0203 	and.w	r2, r3, #3
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	4313      	orrs	r3, r2
 800814a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80e0 	beq.w	8008320 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008160:	4b2f      	ldr	r3, [pc, #188]	; (8008220 <HAL_GPIO_Init+0x238>)
 8008162:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008166:	4a2e      	ldr	r2, [pc, #184]	; (8008220 <HAL_GPIO_Init+0x238>)
 8008168:	f043 0302 	orr.w	r3, r3, #2
 800816c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008170:	4b2b      	ldr	r3, [pc, #172]	; (8008220 <HAL_GPIO_Init+0x238>)
 8008172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800817e:	4a29      	ldr	r2, [pc, #164]	; (8008224 <HAL_GPIO_Init+0x23c>)
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	089b      	lsrs	r3, r3, #2
 8008184:	3302      	adds	r3, #2
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	220f      	movs	r2, #15
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	43db      	mvns	r3, r3
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	4013      	ands	r3, r2
 80081a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a20      	ldr	r2, [pc, #128]	; (8008228 <HAL_GPIO_Init+0x240>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d052      	beq.n	8008250 <HAL_GPIO_Init+0x268>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a1f      	ldr	r2, [pc, #124]	; (800822c <HAL_GPIO_Init+0x244>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d031      	beq.n	8008216 <HAL_GPIO_Init+0x22e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <HAL_GPIO_Init+0x248>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d02b      	beq.n	8008212 <HAL_GPIO_Init+0x22a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <HAL_GPIO_Init+0x24c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d025      	beq.n	800820e <HAL_GPIO_Init+0x226>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <HAL_GPIO_Init+0x250>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01f      	beq.n	800820a <HAL_GPIO_Init+0x222>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a1b      	ldr	r2, [pc, #108]	; (800823c <HAL_GPIO_Init+0x254>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d019      	beq.n	8008206 <HAL_GPIO_Init+0x21e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1a      	ldr	r2, [pc, #104]	; (8008240 <HAL_GPIO_Init+0x258>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <HAL_GPIO_Init+0x21a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a19      	ldr	r2, [pc, #100]	; (8008244 <HAL_GPIO_Init+0x25c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00d      	beq.n	80081fe <HAL_GPIO_Init+0x216>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a18      	ldr	r2, [pc, #96]	; (8008248 <HAL_GPIO_Init+0x260>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <HAL_GPIO_Init+0x212>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a17      	ldr	r2, [pc, #92]	; (800824c <HAL_GPIO_Init+0x264>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d101      	bne.n	80081f6 <HAL_GPIO_Init+0x20e>
 80081f2:	2309      	movs	r3, #9
 80081f4:	e02d      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 80081f6:	230a      	movs	r3, #10
 80081f8:	e02b      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 80081fa:	2308      	movs	r3, #8
 80081fc:	e029      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 80081fe:	2307      	movs	r3, #7
 8008200:	e027      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 8008202:	2306      	movs	r3, #6
 8008204:	e025      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 8008206:	2305      	movs	r3, #5
 8008208:	e023      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 800820a:	2304      	movs	r3, #4
 800820c:	e021      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 800820e:	2303      	movs	r3, #3
 8008210:	e01f      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 8008212:	2302      	movs	r3, #2
 8008214:	e01d      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 8008216:	2301      	movs	r3, #1
 8008218:	e01b      	b.n	8008252 <HAL_GPIO_Init+0x26a>
 800821a:	bf00      	nop
 800821c:	58000080 	.word	0x58000080
 8008220:	58024400 	.word	0x58024400
 8008224:	58000400 	.word	0x58000400
 8008228:	58020000 	.word	0x58020000
 800822c:	58020400 	.word	0x58020400
 8008230:	58020800 	.word	0x58020800
 8008234:	58020c00 	.word	0x58020c00
 8008238:	58021000 	.word	0x58021000
 800823c:	58021400 	.word	0x58021400
 8008240:	58021800 	.word	0x58021800
 8008244:	58021c00 	.word	0x58021c00
 8008248:	58022000 	.word	0x58022000
 800824c:	58022400 	.word	0x58022400
 8008250:	2300      	movs	r3, #0
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	f002 0203 	and.w	r2, r2, #3
 8008258:	0092      	lsls	r2, r2, #2
 800825a:	4093      	lsls	r3, r2
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	4313      	orrs	r3, r2
 8008260:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008262:	4938      	ldr	r1, [pc, #224]	; (8008344 <HAL_GPIO_Init+0x35c>)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	089b      	lsrs	r3, r3, #2
 8008268:	3302      	adds	r3, #2
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	43db      	mvns	r3, r3
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	4013      	ands	r3, r2
 8008280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800829e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	43db      	mvns	r3, r3
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	4013      	ands	r3, r2
 80082ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80082c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	43db      	mvns	r3, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4013      	ands	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	43db      	mvns	r3, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4013      	ands	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f ae63 	bne.w	8007ffc <HAL_GPIO_Init+0x14>
  }
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	3724      	adds	r7, #36	; 0x24
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	58000400 	.word	0x58000400

08008348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
 8008354:	4613      	mov	r3, r2
 8008356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008358:	787b      	ldrb	r3, [r7, #1]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800835e:	887a      	ldrh	r2, [r7, #2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008364:	e003      	b.n	800836e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008366:	887b      	ldrh	r3, [r7, #2]
 8008368:	041a      	lsls	r2, r3, #16
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	619a      	str	r2, [r3, #24]
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e07f      	b.n	800848e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fa f8c6 	bl	8002534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	; 0x24
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d107      	bne.n	80083f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f2:	609a      	str	r2, [r3, #8]
 80083f4:	e006      	b.n	8008404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d104      	bne.n	8008416 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	6859      	ldr	r1, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b1d      	ldr	r3, [pc, #116]	; (8008498 <HAL_I2C_Init+0x11c>)
 8008422:	430b      	orrs	r3, r1
 8008424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69d9      	ldr	r1, [r3, #28]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0201 	orr.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	02008000 	.word	0x02008000

0800849c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
  }
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d010      	beq.n	8008516 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	09db      	lsrs	r3, r3, #7
 80084f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	f043 0201 	orr.w	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008514:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	0a9b      	lsrs	r3, r3, #10
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	09db      	lsrs	r3, r3, #7
 8008526:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	f043 0208 	orr.w	r2, r3, #8
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008542:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	0a5b      	lsrs	r3, r3, #9
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d010      	beq.n	8008572 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	09db      	lsrs	r3, r3, #7
 8008554:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008560:	f043 0202 	orr.w	r2, r3, #2
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008570:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 030b 	and.w	r3, r3, #11
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fc77 	bl	8008e78 <I2C_ITError>
  }
}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
 80085c6:	4613      	mov	r3, r2
 80085c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <I2C_Slave_ISR_IT+0x24>
 8008632:	2302      	movs	r3, #2
 8008634:	e0ec      	b.n	8008810 <I2C_Slave_ISR_IT+0x1fe>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008656:	6939      	ldr	r1, [r7, #16]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f9bf 	bl	80089dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	091b      	lsrs	r3, r3, #4
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04d      	beq.n	8008706 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	091b      	lsrs	r3, r3, #4
 800866e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008672:	2b00      	cmp	r3, #0
 8008674:	d047      	beq.n	8008706 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d128      	bne.n	80086d2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b28      	cmp	r3, #40	; 0x28
 800868a:	d108      	bne.n	800869e <I2C_Slave_ISR_IT+0x8c>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008692:	d104      	bne.n	800869e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008694:	6939      	ldr	r1, [r7, #16]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fb98 	bl	8008dcc <I2C_ITListenCplt>
 800869c:	e032      	b.n	8008704 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b29      	cmp	r3, #41	; 0x29
 80086a8:	d10e      	bne.n	80086c8 <I2C_Slave_ISR_IT+0xb6>
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086b0:	d00a      	beq.n	80086c8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2210      	movs	r2, #16
 80086b8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fcd3 	bl	8009066 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f92d 	bl	8008920 <I2C_ITSlaveSeqCplt>
 80086c6:	e01d      	b.n	8008704 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2210      	movs	r2, #16
 80086ce:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80086d0:	e096      	b.n	8008800 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2210      	movs	r2, #16
 80086d8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	f043 0204 	orr.w	r2, r3, #4
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <I2C_Slave_ISR_IT+0xe4>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086f2:	f040 8085 	bne.w	8008800 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fbbb 	bl	8008e78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008702:	e07d      	b.n	8008800 <I2C_Slave_ISR_IT+0x1ee>
 8008704:	e07c      	b.n	8008800 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	089b      	lsrs	r3, r3, #2
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d030      	beq.n	8008774 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	089b      	lsrs	r3, r3, #2
 8008716:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800871a:	2b00      	cmp	r3, #0
 800871c:	d02a      	beq.n	8008774 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008722:	b29b      	uxth	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d018      	beq.n	800875a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	3b01      	subs	r3, #1
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d14f      	bne.n	8008804 <I2C_Slave_ISR_IT+0x1f2>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800876a:	d04b      	beq.n	8008804 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f8d7 	bl	8008920 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008772:	e047      	b.n	8008804 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	08db      	lsrs	r3, r3, #3
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	08db      	lsrs	r3, r3, #3
 8008784:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800878c:	6939      	ldr	r1, [r7, #16]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f842 	bl	8008818 <I2C_ITAddrCplt>
 8008794:	e037      	b.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d031      	beq.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	085b      	lsrs	r3, r3, #1
 80087a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d02b      	beq.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d018      	beq.n	80087ea <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80087e8:	e00d      	b.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087f0:	d002      	beq.n	80087f8 <I2C_Slave_ISR_IT+0x1e6>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f891 	bl	8008920 <I2C_ITSlaveSeqCplt>
 80087fe:	e002      	b.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008800:	bf00      	nop
 8008802:	e000      	b.n	8008806 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008804:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800882e:	2b28      	cmp	r3, #40	; 0x28
 8008830:	d16a      	bne.n	8008908 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	0c1b      	lsrs	r3, r3, #16
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	0c1b      	lsrs	r3, r3, #16
 800884a:	b29b      	uxth	r3, r3
 800884c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008850:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800885e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800886c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d138      	bne.n	80088e8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008876:	897b      	ldrh	r3, [r7, #10]
 8008878:	09db      	lsrs	r3, r3, #7
 800887a:	b29a      	uxth	r2, r3
 800887c:	89bb      	ldrh	r3, [r7, #12]
 800887e:	4053      	eors	r3, r2
 8008880:	b29b      	uxth	r3, r3
 8008882:	f003 0306 	and.w	r3, r3, #6
 8008886:	2b00      	cmp	r3, #0
 8008888:	d11c      	bne.n	80088c4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800888a:	897b      	ldrh	r3, [r7, #10]
 800888c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889c:	2b02      	cmp	r3, #2
 800889e:	d13b      	bne.n	8008918 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2208      	movs	r2, #8
 80088ac:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088b6:	89ba      	ldrh	r2, [r7, #12]
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff fe7c 	bl	80085ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80088c2:	e029      	b.n	8008918 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80088c4:	893b      	ldrh	r3, [r7, #8]
 80088c6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc0c 	bl	80090ea <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088da:	89ba      	ldrh	r2, [r7, #12]
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fe6a 	bl	80085ba <HAL_I2C_AddrCallback>
}
 80088e6:	e017      	b.n	8008918 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fbfc 	bl	80090ea <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088fa:	89ba      	ldrh	r2, [r7, #12]
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff fe5a 	bl	80085ba <HAL_I2C_AddrCallback>
}
 8008906:	e007      	b.n	8008918 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2208      	movs	r2, #8
 800890e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	0b9b      	lsrs	r3, r3, #14
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d008      	beq.n	8008956 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	e00d      	b.n	8008972 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	0bdb      	lsrs	r3, r3, #15
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008970:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b29      	cmp	r3, #41	; 0x29
 800897c:	d112      	bne.n	80089a4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2228      	movs	r2, #40	; 0x28
 8008982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800898c:	2101      	movs	r1, #1
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fbab 	bl	80090ea <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fdf8 	bl	8008592 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80089a2:	e017      	b.n	80089d4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b2a      	cmp	r3, #42	; 0x2a
 80089ae:	d111      	bne.n	80089d4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2228      	movs	r2, #40	; 0x28
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2222      	movs	r2, #34	; 0x22
 80089bc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80089be:	2102      	movs	r1, #2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fb92 	bl	80090ea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7ff fde9 	bl	80085a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2220      	movs	r2, #32
 8008a00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	2b21      	cmp	r3, #33	; 0x21
 8008a06:	d002      	beq.n	8008a0e <I2C_ITSlaveCplt+0x32>
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	2b29      	cmp	r3, #41	; 0x29
 8008a0c:	d108      	bne.n	8008a20 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008a0e:	f248 0101 	movw	r1, #32769	; 0x8001
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fb69 	bl	80090ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2221      	movs	r2, #33	; 0x21
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8008a1e:	e00d      	b.n	8008a3c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b22      	cmp	r3, #34	; 0x22
 8008a24:	d002      	beq.n	8008a2c <I2C_ITSlaveCplt+0x50>
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2a:	d107      	bne.n	8008a3c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008a2c:	f248 0102 	movw	r1, #32770	; 0x8002
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fb5a 	bl	80090ea <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2222      	movs	r2, #34	; 0x22
 8008a3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6859      	ldr	r1, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	4b80      	ldr	r3, [pc, #512]	; (8008c58 <I2C_ITSlaveCplt+0x27c>)
 8008a58:	400b      	ands	r3, r1
 8008a5a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fb02 	bl	8009066 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	0b9b      	lsrs	r3, r3, #14
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d07a      	beq.n	8008b64 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 8111 	beq.w	8008caa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a73      	ldr	r2, [pc, #460]	; (8008c5c <I2C_ITSlaveCplt+0x280>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d059      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a71      	ldr	r2, [pc, #452]	; (8008c60 <I2C_ITSlaveCplt+0x284>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d053      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a6f      	ldr	r2, [pc, #444]	; (8008c64 <I2C_ITSlaveCplt+0x288>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d04d      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a6d      	ldr	r2, [pc, #436]	; (8008c68 <I2C_ITSlaveCplt+0x28c>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d047      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a6b      	ldr	r2, [pc, #428]	; (8008c6c <I2C_ITSlaveCplt+0x290>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d041      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a69      	ldr	r2, [pc, #420]	; (8008c70 <I2C_ITSlaveCplt+0x294>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d03b      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a67      	ldr	r2, [pc, #412]	; (8008c74 <I2C_ITSlaveCplt+0x298>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d035      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a65      	ldr	r2, [pc, #404]	; (8008c78 <I2C_ITSlaveCplt+0x29c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d02f      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a63      	ldr	r2, [pc, #396]	; (8008c7c <I2C_ITSlaveCplt+0x2a0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d029      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a61      	ldr	r2, [pc, #388]	; (8008c80 <I2C_ITSlaveCplt+0x2a4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d023      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a5f      	ldr	r2, [pc, #380]	; (8008c84 <I2C_ITSlaveCplt+0x2a8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d01d      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a5d      	ldr	r2, [pc, #372]	; (8008c88 <I2C_ITSlaveCplt+0x2ac>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d017      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a5b      	ldr	r2, [pc, #364]	; (8008c8c <I2C_ITSlaveCplt+0x2b0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d011      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a59      	ldr	r2, [pc, #356]	; (8008c90 <I2C_ITSlaveCplt+0x2b4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00b      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a57      	ldr	r2, [pc, #348]	; (8008c94 <I2C_ITSlaveCplt+0x2b8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d005      	beq.n	8008b48 <I2C_ITSlaveCplt+0x16c>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a55      	ldr	r2, [pc, #340]	; (8008c98 <I2C_ITSlaveCplt+0x2bc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d105      	bne.n	8008b54 <I2C_ITSlaveCplt+0x178>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	e004      	b.n	8008b5e <I2C_ITSlaveCplt+0x182>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008b62:	e0a2      	b.n	8008caa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	0bdb      	lsrs	r3, r3, #15
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 809c 	beq.w	8008caa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 808f 	beq.w	8008caa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a32      	ldr	r2, [pc, #200]	; (8008c5c <I2C_ITSlaveCplt+0x280>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d059      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a30      	ldr	r2, [pc, #192]	; (8008c60 <I2C_ITSlaveCplt+0x284>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d053      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a2e      	ldr	r2, [pc, #184]	; (8008c64 <I2C_ITSlaveCplt+0x288>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d04d      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a2c      	ldr	r2, [pc, #176]	; (8008c68 <I2C_ITSlaveCplt+0x28c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d047      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <I2C_ITSlaveCplt+0x290>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d041      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a28      	ldr	r2, [pc, #160]	; (8008c70 <I2C_ITSlaveCplt+0x294>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d03b      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a26      	ldr	r2, [pc, #152]	; (8008c74 <I2C_ITSlaveCplt+0x298>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d035      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a24      	ldr	r2, [pc, #144]	; (8008c78 <I2C_ITSlaveCplt+0x29c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d02f      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a22      	ldr	r2, [pc, #136]	; (8008c7c <I2C_ITSlaveCplt+0x2a0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d029      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <I2C_ITSlaveCplt+0x2a4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d023      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <I2C_ITSlaveCplt+0x2a8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d01d      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <I2C_ITSlaveCplt+0x2ac>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d017      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <I2C_ITSlaveCplt+0x2b0>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d011      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <I2C_ITSlaveCplt+0x2b4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00b      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <I2C_ITSlaveCplt+0x2b8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d005      	beq.n	8008c4c <I2C_ITSlaveCplt+0x270>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a14      	ldr	r2, [pc, #80]	; (8008c98 <I2C_ITSlaveCplt+0x2bc>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d127      	bne.n	8008c9c <I2C_ITSlaveCplt+0x2c0>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	e026      	b.n	8008ca6 <I2C_ITSlaveCplt+0x2ca>
 8008c58:	fe00e800 	.word	0xfe00e800
 8008c5c:	40020010 	.word	0x40020010
 8008c60:	40020028 	.word	0x40020028
 8008c64:	40020040 	.word	0x40020040
 8008c68:	40020058 	.word	0x40020058
 8008c6c:	40020070 	.word	0x40020070
 8008c70:	40020088 	.word	0x40020088
 8008c74:	400200a0 	.word	0x400200a0
 8008c78:	400200b8 	.word	0x400200b8
 8008c7c:	40020410 	.word	0x40020410
 8008c80:	40020428 	.word	0x40020428
 8008c84:	40020440 	.word	0x40020440
 8008c88:	40020458 	.word	0x40020458
 8008c8c:	40020470 	.word	0x40020470
 8008c90:	40020488 	.word	0x40020488
 8008c94:	400204a0 	.word	0x400204a0
 8008c98:	400204b8 	.word	0x400204b8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	089b      	lsrs	r3, r3, #2
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d020      	beq.n	8008cf8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 0304 	bic.w	r3, r3, #4
 8008cbc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d06:	f043 0204 	orr.w	r2, r3, #4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d010      	beq.n	8008d46 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f8a4 	bl	8008e78 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b28      	cmp	r3, #40	; 0x28
 8008d3a:	d141      	bne.n	8008dc0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d3c:	6979      	ldr	r1, [r7, #20]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f844 	bl	8008dcc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008d44:	e03c      	b.n	8008dc0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d4e:	d014      	beq.n	8008d7a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fde5 	bl	8008920 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <I2C_ITSlaveCplt+0x3ec>)
 8008d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fc2f 	bl	80085d6 <HAL_I2C_ListenCpltCallback>
}
 8008d78:	e022      	b.n	8008dc0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b22      	cmp	r3, #34	; 0x22
 8008d84:	d10e      	bne.n	8008da4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff fc02 	bl	80085a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008da2:	e00d      	b.n	8008dc0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fbe9 	bl	8008592 <HAL_I2C_SlaveTxCpltCallback>
}
 8008dc0:	bf00      	nop
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	ffff0000 	.word	0xffff0000

08008dcc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a26      	ldr	r2, [pc, #152]	; (8008e74 <I2C_ITListenCplt+0xa8>)
 8008dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	089b      	lsrs	r3, r3, #2
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d022      	beq.n	8008e4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d012      	beq.n	8008e4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e42:	f043 0204 	orr.w	r2, r3, #4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008e4a:	f248 0103 	movw	r1, #32771	; 0x8003
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f94b 	bl	80090ea <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2210      	movs	r2, #16
 8008e5a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff fbb6 	bl	80085d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	ffff0000 	.word	0xffff0000

08008e78 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a5d      	ldr	r2, [pc, #372]	; (800900c <I2C_ITError+0x194>)
 8008e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b28      	cmp	r3, #40	; 0x28
 8008eae:	d005      	beq.n	8008ebc <I2C_ITError+0x44>
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2b29      	cmp	r3, #41	; 0x29
 8008eb4:	d002      	beq.n	8008ebc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eba:	d10b      	bne.n	8008ed4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ebc:	2103      	movs	r1, #3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f913 	bl	80090ea <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2228      	movs	r2, #40	; 0x28
 8008ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a50      	ldr	r2, [pc, #320]	; (8009010 <I2C_ITError+0x198>)
 8008ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ed2:	e011      	b.n	8008ef8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008ed4:	f248 0103 	movw	r1, #32771	; 0x8003
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f906 	bl	80090ea <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b60      	cmp	r3, #96	; 0x60
 8008ee8:	d003      	beq.n	8008ef2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d039      	beq.n	8008f7a <I2C_ITError+0x102>
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b11      	cmp	r3, #17
 8008f0a:	d002      	beq.n	8008f12 <I2C_ITError+0x9a>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b21      	cmp	r3, #33	; 0x21
 8008f10:	d133      	bne.n	8008f7a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f20:	d107      	bne.n	8008f32 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f30:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fc54 	bl	80077e4 <HAL_DMA_GetState>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d017      	beq.n	8008f72 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	4a33      	ldr	r2, [pc, #204]	; (8009014 <I2C_ITError+0x19c>)
 8008f48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fd fad4 	bl	8006504 <HAL_DMA_Abort_IT>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d04d      	beq.n	8008ffe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f70:	e045      	b.n	8008ffe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f850 	bl	8009018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008f78:	e041      	b.n	8008ffe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d039      	beq.n	8008ff6 <I2C_ITError+0x17e>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b12      	cmp	r3, #18
 8008f86:	d002      	beq.n	8008f8e <I2C_ITError+0x116>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b22      	cmp	r3, #34	; 0x22
 8008f8c:	d133      	bne.n	8008ff6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9c:	d107      	bne.n	8008fae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fc16 	bl	80077e4 <HAL_DMA_GetState>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d017      	beq.n	8008fee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	4a14      	ldr	r2, [pc, #80]	; (8009014 <I2C_ITError+0x19c>)
 8008fc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd fa96 	bl	8006504 <HAL_DMA_Abort_IT>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d011      	beq.n	8009002 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fec:	e009      	b.n	8009002 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f812 	bl	8009018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ff4:	e005      	b.n	8009002 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f80e 	bl	8009018 <I2C_TreatErrorCallback>
  }
}
 8008ffc:	e002      	b.n	8009004 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ffe:	bf00      	nop
 8009000:	e000      	b.n	8009004 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009002:	bf00      	nop
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	ffff0000 	.word	0xffff0000
 8009010:	08008613 	.word	0x08008613
 8009014:	080090af 	.word	0x080090af

08009018 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b60      	cmp	r3, #96	; 0x60
 800902a:	d10e      	bne.n	800904a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff fadb 	bl	80085fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009048:	e009      	b.n	800905e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff fac6 	bl	80085ea <HAL_I2C_ErrorCallback>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d103      	bne.n	8009084 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2200      	movs	r2, #0
 8009082:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b01      	cmp	r3, #1
 8009090:	d007      	beq.n	80090a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f042 0201 	orr.w	r2, r2, #1
 80090a0:	619a      	str	r2, [r3, #24]
  }
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	2200      	movs	r2, #0
 80090ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d8:	2200      	movs	r2, #0
 80090da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff ff9b 	bl	8009018 <I2C_TreatErrorCallback>
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80090fa:	887b      	ldrh	r3, [r7, #2]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00f      	beq.n	8009124 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800910a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009118:	2b28      	cmp	r3, #40	; 0x28
 800911a:	d003      	beq.n	8009124 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009122:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009124:	887b      	ldrh	r3, [r7, #2]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00f      	beq.n	800914e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009134:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009142:	2b28      	cmp	r3, #40	; 0x28
 8009144:	d003      	beq.n	800914e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800914c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800914e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009152:	2b00      	cmp	r3, #0
 8009154:	da03      	bge.n	800915e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800915c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800915e:	887b      	ldrh	r3, [r7, #2]
 8009160:	2b10      	cmp	r3, #16
 8009162:	d103      	bne.n	800916c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800916a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800916c:	887b      	ldrh	r3, [r7, #2]
 800916e:	2b20      	cmp	r3, #32
 8009170:	d103      	bne.n	800917a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800917a:	887b      	ldrh	r3, [r7, #2]
 800917c:	2b40      	cmp	r3, #64	; 0x40
 800917e:	d103      	bne.n	8009188 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009186:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6819      	ldr	r1, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	43da      	mvns	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	400a      	ands	r2, r1
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d138      	bne.n	800922e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e032      	b.n	8009230 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2224      	movs	r2, #36	; 0x24
 80091d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6819      	ldr	r1, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0201 	orr.w	r2, r2, #1
 8009218:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	e000      	b.n	8009230 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800922e:	2302      	movs	r3, #2
  }
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b20      	cmp	r3, #32
 8009250:	d139      	bne.n	80092c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800925c:	2302      	movs	r3, #2
 800925e:	e033      	b.n	80092c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2224      	movs	r2, #36	; 0x24
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0201 	bic.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800928e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0201 	orr.w	r2, r2, #1
 80092b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e000      	b.n	80092c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80092c6:	2302      	movs	r3, #2
  }
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d6:	b08f      	sub	sp, #60	; 0x3c
 80092d8:	af0a      	add	r7, sp, #40	; 0x28
 80092da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e116      	b.n	8009514 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d106      	bne.n	8009306 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7fb fa83 	bl	800480c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2203      	movs	r2, #3
 800930a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4618      	mov	r0, r3
 8009326:	f008 fa48 	bl	80117ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	687e      	ldr	r6, [r7, #4]
 8009332:	466d      	mov	r5, sp
 8009334:	f106 0410 	add.w	r4, r6, #16
 8009338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800933a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800933c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800933e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009344:	e885 0003 	stmia.w	r5, {r0, r1}
 8009348:	1d33      	adds	r3, r6, #4
 800934a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800934c:	6838      	ldr	r0, [r7, #0]
 800934e:	f008 f913 	bl	8011578 <USB_CoreInit>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e0d7      	b.n	8009514 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2100      	movs	r1, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f008 fa36 	bl	80117dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]
 8009374:	e04a      	b.n	800940c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009376:	7bfa      	ldrb	r2, [r7, #15]
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	4613      	mov	r3, r2
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	440b      	add	r3, r1
 8009384:	333d      	adds	r3, #61	; 0x3d
 8009386:	2201      	movs	r2, #1
 8009388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800938a:	7bfa      	ldrb	r2, [r7, #15]
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	333c      	adds	r3, #60	; 0x3c
 800939a:	7bfa      	ldrb	r2, [r7, #15]
 800939c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800939e:	7bfa      	ldrb	r2, [r7, #15]
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	b298      	uxth	r0, r3
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	3342      	adds	r3, #66	; 0x42
 80093b2:	4602      	mov	r2, r0
 80093b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093b6:	7bfa      	ldrb	r2, [r7, #15]
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	333f      	adds	r3, #63	; 0x3f
 80093c6:	2200      	movs	r2, #0
 80093c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	440b      	add	r3, r1
 80093d8:	3344      	adds	r3, #68	; 0x44
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093de:	7bfa      	ldrb	r2, [r7, #15]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	4613      	mov	r3, r2
 80093e4:	00db      	lsls	r3, r3, #3
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	3348      	adds	r3, #72	; 0x48
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093f2:	7bfa      	ldrb	r2, [r7, #15]
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	1a9b      	subs	r3, r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	3350      	adds	r3, #80	; 0x50
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	3301      	adds	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	7bfa      	ldrb	r2, [r7, #15]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d3af      	bcc.n	8009376 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
 800941a:	e044      	b.n	80094a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800941c:	7bfa      	ldrb	r2, [r7, #15]
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009432:	7bfa      	ldrb	r2, [r7, #15]
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009444:	7bfa      	ldrb	r2, [r7, #15]
 8009446:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009448:	7bfa      	ldrb	r2, [r7, #15]
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	4613      	mov	r3, r2
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	1a9b      	subs	r3, r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800945e:	7bfa      	ldrb	r2, [r7, #15]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	1a9b      	subs	r3, r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009474:	7bfa      	ldrb	r2, [r7, #15]
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800948a:	7bfa      	ldrb	r2, [r7, #15]
 800948c:	6879      	ldr	r1, [r7, #4]
 800948e:	4613      	mov	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	3301      	adds	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
 80094a6:	7bfa      	ldrb	r2, [r7, #15]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d3b5      	bcc.n	800941c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	687e      	ldr	r6, [r7, #4]
 80094b8:	466d      	mov	r5, sp
 80094ba:	f106 0410 	add.w	r4, r6, #16
 80094be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80094ce:	1d33      	adds	r3, r6, #4
 80094d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094d2:	6838      	ldr	r0, [r7, #0]
 80094d4:	f008 f9ce 	bl	8011874 <USB_DevInit>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e014      	b.n	8009514 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d102      	bne.n	8009508 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 f886 	bl	800a614 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4618      	mov	r0, r3
 800950e:	f009 fa66 	bl	80129de <USB_DevDisconnect>

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3714      	adds	r7, #20
 8009518:	46bd      	mov	sp, r7
 800951a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800951c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_PCD_Start+0x1c>
 8009534:	2302      	movs	r3, #2
 8009536:	e020      	b.n	800957a <HAL_PCD_Start+0x5e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	2b01      	cmp	r3, #1
 8009546:	d109      	bne.n	800955c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800954c:	2b01      	cmp	r3, #1
 800954e:	d005      	beq.n	800955c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f008 f919 	bl	8011798 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f009 fa16 	bl	801299c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009582:	b590      	push	{r4, r7, lr}
 8009584:	b08d      	sub	sp, #52	; 0x34
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f009 fad4 	bl	8012b46 <USB_GetMode>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 83be 	bne.w	8009d22 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f009 fa38 	bl	8012a20 <USB_ReadInterrupts>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 83b4 	beq.w	8009d20 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f009 fa2f 	bl	8012a20 <USB_ReadInterrupts>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d107      	bne.n	80095dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f002 0202 	and.w	r2, r2, #2
 80095da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f009 fa1d 	bl	8012a20 <USB_ReadInterrupts>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d161      	bne.n	80096b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0210 	bic.w	r2, r2, #16
 80095fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	f003 020f 	and.w	r2, r3, #15
 800960c:	4613      	mov	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	4413      	add	r3, r2
 800961c:	3304      	adds	r3, #4
 800961e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	0c5b      	lsrs	r3, r3, #17
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	2b02      	cmp	r3, #2
 800962a:	d124      	bne.n	8009676 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009632:	4013      	ands	r3, r2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d035      	beq.n	80096a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	091b      	lsrs	r3, r3, #4
 8009640:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009646:	b29b      	uxth	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	6a38      	ldr	r0, [r7, #32]
 800964c:	f009 f854 	bl	80126f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	091b      	lsrs	r3, r3, #4
 8009658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800965c:	441a      	add	r2, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	091b      	lsrs	r3, r3, #4
 800966a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800966e:	441a      	add	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	619a      	str	r2, [r3, #24]
 8009674:	e016      	b.n	80096a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	0c5b      	lsrs	r3, r3, #17
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	2b06      	cmp	r3, #6
 8009680:	d110      	bne.n	80096a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009688:	2208      	movs	r2, #8
 800968a:	4619      	mov	r1, r3
 800968c:	6a38      	ldr	r0, [r7, #32]
 800968e:	f009 f833 	bl	80126f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	091b      	lsrs	r3, r3, #4
 800969a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800969e:	441a      	add	r2, r3
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0210 	orr.w	r2, r2, #16
 80096b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f009 f9b1 	bl	8012a20 <USB_ReadInterrupts>
 80096be:	4603      	mov	r3, r0
 80096c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096c8:	d16e      	bne.n	80097a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f009 f9b7 	bl	8012a46 <USB_ReadDevAllOutEpInterrupt>
 80096d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80096da:	e062      	b.n	80097a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d057      	beq.n	8009796 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f009 f9dc 	bl	8012aae <USB_ReadDevOutEPInterrupt>
 80096f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00c      	beq.n	800971c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970e:	461a      	mov	r2, r3
 8009710:	2301      	movs	r3, #1
 8009712:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fdd2 	bl	800a2c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00c      	beq.n	8009740 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	461a      	mov	r2, r3
 8009734:	2308      	movs	r3, #8
 8009736:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fecc 	bl	800a4d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009756:	461a      	mov	r2, r3
 8009758:	2310      	movs	r3, #16
 800975a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d008      	beq.n	8009778 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	461a      	mov	r2, r3
 8009774:	2320      	movs	r3, #32
 8009776:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d009      	beq.n	8009796 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	461a      	mov	r2, r3
 8009790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009794:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	3301      	adds	r3, #1
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d199      	bne.n	80096dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f009 f937 	bl	8012a20 <USB_ReadInterrupts>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097bc:	f040 80c4 	bne.w	8009948 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f009 f958 	bl	8012a7a <USB_ReadDevAllInEpInterrupt>
 80097ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80097d0:	e0b6      	b.n	8009940 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 80ab 	beq.w	8009934 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	4611      	mov	r1, r2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f009 f97e 	bl	8012aea <USB_ReadDevInEPInterrupt>
 80097ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d057      	beq.n	80098aa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	2201      	movs	r2, #1
 8009802:	fa02 f303 	lsl.w	r3, r2, r3
 8009806:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	43db      	mvns	r3, r3
 8009814:	69f9      	ldr	r1, [r7, #28]
 8009816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800981a:	4013      	ands	r3, r2
 800981c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	461a      	mov	r2, r3
 800982c:	2301      	movs	r3, #1
 800982e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d132      	bne.n	800989e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800983c:	4613      	mov	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	1a9b      	subs	r3, r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3348      	adds	r3, #72	; 0x48
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984e:	4613      	mov	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4403      	add	r3, r0
 8009858:	3344      	adds	r3, #68	; 0x44
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4419      	add	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	4613      	mov	r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4403      	add	r3, r0
 800986c:	3348      	adds	r3, #72	; 0x48
 800986e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2b00      	cmp	r3, #0
 8009874:	d113      	bne.n	800989e <HAL_PCD_IRQHandler+0x31c>
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	4613      	mov	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	3350      	adds	r3, #80	; 0x50
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d108      	bne.n	800989e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009896:	461a      	mov	r2, r3
 8009898:	2101      	movs	r1, #1
 800989a:	f009 f987 	bl	8012bac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7fb f858 	bl	800495a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f003 0308 	and.w	r3, r3, #8
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c0:	461a      	mov	r2, r3
 80098c2:	2308      	movs	r3, #8
 80098c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d008      	beq.n	80098e2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098dc:	461a      	mov	r2, r3
 80098de:	2310      	movs	r3, #16
 80098e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d008      	beq.n	80098fe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f8:	461a      	mov	r2, r3
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00c      	beq.n	8009922 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800990a:	6a38      	ldr	r0, [r7, #32]
 800990c:	f008 f910 	bl	8011b30 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	461a      	mov	r2, r3
 800991e:	2302      	movs	r3, #2
 8009920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800992c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fc38 	bl	800a1a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	3301      	adds	r3, #1
 8009938:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	f47f af45 	bne.w	80097d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4618      	mov	r0, r3
 800994e:	f009 f867 	bl	8012a20 <USB_ReadInterrupts>
 8009952:	4603      	mov	r3, r0
 8009954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800995c:	d122      	bne.n	80099a4 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996c:	f023 0301 	bic.w	r3, r3, #1
 8009970:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009978:	2b01      	cmp	r3, #1
 800997a:	d108      	bne.n	800998e <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fe68 	bl	800a65c <HAL_PCDEx_LPM_Callback>
 800998c:	e002      	b.n	8009994 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fb f85a 	bl	8004a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695a      	ldr	r2, [r3, #20]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80099a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f009 f839 	bl	8012a20 <USB_ReadInterrupts>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b8:	d112      	bne.n	80099e0 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d102      	bne.n	80099d0 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fb f816 	bl	80049fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	695a      	ldr	r2, [r3, #20]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80099de:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f009 f81b 	bl	8012a20 <USB_ReadInterrupts>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099f4:	d121      	bne.n	8009a3a <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695a      	ldr	r2, [r3, #20]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009a04:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d111      	bne.n	8009a34 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	089b      	lsrs	r3, r3, #2
 8009a20:	f003 020f 	and.w	r2, r3, #15
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fe15 	bl	800a65c <HAL_PCDEx_LPM_Callback>
 8009a32:	e002      	b.n	8009a3a <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7fa ffe1 	bl	80049fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f008 ffee 	bl	8012a20 <USB_ReadInterrupts>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4e:	f040 80b7 	bne.w	8009bc0 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a60:	f023 0301 	bic.w	r3, r3, #1
 8009a64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2110      	movs	r1, #16
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f008 f85f 	bl	8011b30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a72:	2300      	movs	r3, #0
 8009a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a76:	e046      	b.n	8009b06 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a84:	461a      	mov	r2, r3
 8009a86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aaa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009abe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ade:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009af0:	0151      	lsls	r1, r2, #5
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	440a      	add	r2, r1
 8009af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009afe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	3301      	adds	r3, #1
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d3b3      	bcc.n	8009a78 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009b22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d016      	beq.n	8009b5a <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b3c:	f043 030b 	orr.w	r3, r3, #11
 8009b40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4c:	69fa      	ldr	r2, [r7, #28]
 8009b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b52:	f043 030b 	orr.w	r3, r3, #11
 8009b56:	6453      	str	r3, [r2, #68]	; 0x44
 8009b58:	e015      	b.n	8009b86 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f242 032b 	movw	r3, #8235	; 0x202b
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b80:	f043 030b 	orr.w	r3, r3, #11
 8009b84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009baa:	461a      	mov	r2, r3
 8009bac:	f008 fffe 	bl	8012bac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695a      	ldr	r2, [r3, #20]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f008 ff2b 	bl	8012a20 <USB_ReadInterrupts>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd4:	d124      	bne.n	8009c20 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f008 ffc2 	bl	8012b64 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f008 f81c 	bl	8011c22 <USB_GetDevSpeed>
 8009bea:	4603      	mov	r3, r0
 8009bec:	461a      	mov	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681c      	ldr	r4, [r3, #0]
 8009bf6:	f001 fce5 	bl	800b5c4 <HAL_RCC_GetHCLKFreq>
 8009bfa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	4620      	mov	r0, r4
 8009c06:	f007 fd25 	bl	8011654 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7fa fecd 	bl	80049aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695a      	ldr	r2, [r3, #20]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f008 fefb 	bl	8012a20 <USB_ReadInterrupts>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f003 0308 	and.w	r3, r3, #8
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d10a      	bne.n	8009c4a <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7fa feaa 	bl	800498e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f002 0208 	and.w	r2, r2, #8
 8009c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f008 fee6 	bl	8012a20 <USB_ReadInterrupts>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c5e:	d10f      	bne.n	8009c80 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fa ff0c 	bl	8004a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695a      	ldr	r2, [r3, #20]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f008 fecb 	bl	8012a20 <USB_ReadInterrupts>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c94:	d10f      	bne.n	8009cb6 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fa fedf 	bl	8004a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	695a      	ldr	r2, [r3, #20]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f008 feb0 	bl	8012a20 <USB_ReadInterrupts>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cca:	d10a      	bne.n	8009ce2 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7fa feed 	bl	8004aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	695a      	ldr	r2, [r3, #20]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f008 fe9a 	bl	8012a20 <USB_ReadInterrupts>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	d115      	bne.n	8009d22 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7fa fedd 	bl	8004ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6859      	ldr	r1, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	e000      	b.n	8009d22 <HAL_PCD_IRQHandler+0x7a0>
      return;
 8009d20:	bf00      	nop
    }
  }
}
 8009d22:	3734      	adds	r7, #52	; 0x34
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd90      	pop	{r4, r7, pc}

08009d28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_PCD_SetAddress+0x1a>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e013      	b.n	8009d6a <HAL_PCD_SetAddress+0x42>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	78fa      	ldrb	r2, [r7, #3]
 8009d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	78fa      	ldrb	r2, [r7, #3]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f008 fdf8 	bl	8012950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	461a      	mov	r2, r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	70fb      	strb	r3, [r7, #3]
 8009d84:	460b      	mov	r3, r1
 8009d86:	803b      	strh	r3, [r7, #0]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	da0f      	bge.n	8009db8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	4613      	mov	r3, r2
 8009da0:	00db      	lsls	r3, r3, #3
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	3338      	adds	r3, #56	; 0x38
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	4413      	add	r3, r2
 8009dac:	3304      	adds	r3, #4
 8009dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	705a      	strb	r2, [r3, #1]
 8009db6:	e00f      	b.n	8009dd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009db8:	78fb      	ldrb	r3, [r7, #3]
 8009dba:	f003 020f 	and.w	r2, r3, #15
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	3304      	adds	r3, #4
 8009dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	f003 030f 	and.w	r3, r3, #15
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009de4:	883a      	ldrh	r2, [r7, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	78ba      	ldrb	r2, [r7, #2]
 8009dee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009e02:	78bb      	ldrb	r3, [r7, #2]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d102      	bne.n	8009e0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_PCD_EP_Open+0xaa>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e00e      	b.n	8009e3a <HAL_PCD_EP_Open+0xc8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68f9      	ldr	r1, [r7, #12]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f007 ff1e 	bl	8011c6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009e38:	7afb      	ldrb	r3, [r7, #11]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da0f      	bge.n	8009e76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	f003 020f 	and.w	r2, r3, #15
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	1a9b      	subs	r3, r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	3338      	adds	r3, #56	; 0x38
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4413      	add	r3, r2
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	705a      	strb	r2, [r3, #1]
 8009e74:	e00f      	b.n	8009e96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	f003 020f 	and.w	r2, r3, #15
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_PCD_EP_Close+0x6e>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e00e      	b.n	8009ece <HAL_PCD_EP_Close+0x8c>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68f9      	ldr	r1, [r7, #12]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f007 ff5c 	bl	8011d7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b086      	sub	sp, #24
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ee6:	7afb      	ldrb	r3, [r7, #11]
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	4613      	mov	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	3304      	adds	r3, #4
 8009efe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2200      	movs	r2, #0
 8009f16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d102      	bne.n	8009f32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	f003 030f 	and.w	r3, r3, #15
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	6979      	ldr	r1, [r7, #20]
 8009f4a:	f008 fa3f 	bl	80123cc <USB_EP0StartXfer>
 8009f4e:	e008      	b.n	8009f62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6979      	ldr	r1, [r7, #20]
 8009f5e:	f007 ffe9 	bl	8011f34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	f003 020f 	and.w	r2, r3, #15
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4613      	mov	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	440b      	add	r3, r1
 8009f8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009f8e:	681b      	ldr	r3, [r3, #0]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fac:	7afb      	ldrb	r3, [r7, #11]
 8009fae:	f003 020f 	and.w	r2, r3, #15
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	3338      	adds	r3, #56	; 0x38
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d102      	bne.n	8009ff6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	f003 030f 	and.w	r3, r3, #15
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d109      	bne.n	800a014 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	6979      	ldr	r1, [r7, #20]
 800a00e:	f008 f9dd 	bl	80123cc <USB_EP0StartXfer>
 800a012:	e008      	b.n	800a026 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	6979      	ldr	r1, [r7, #20]
 800a022:	f007 ff87 	bl	8011f34 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	f003 020f 	and.w	r2, r3, #15
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	429a      	cmp	r2, r3
 800a048:	d901      	bls.n	800a04e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e050      	b.n	800a0f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a04e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a052:	2b00      	cmp	r3, #0
 800a054:	da0f      	bge.n	800a076 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a056:	78fb      	ldrb	r3, [r7, #3]
 800a058:	f003 020f 	and.w	r2, r3, #15
 800a05c:	4613      	mov	r3, r2
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	1a9b      	subs	r3, r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	3338      	adds	r3, #56	; 0x38
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	3304      	adds	r3, #4
 800a06c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	705a      	strb	r2, [r3, #1]
 800a074:	e00d      	b.n	800a092 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	4613      	mov	r3, r2
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4413      	add	r3, r2
 800a088:	3304      	adds	r3, #4
 800a08a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <HAL_PCD_EP_SetStall+0x82>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e01e      	b.n	800a0f0 <HAL_PCD_EP_SetStall+0xc0>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f008 fb71 	bl	80127a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	f003 030f 	and.w	r3, r3, #15
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	b2d9      	uxtb	r1, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f008 fd63 	bl	8012bac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	f003 020f 	and.w	r2, r3, #15
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d901      	bls.n	800a116 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e042      	b.n	800a19c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	da0f      	bge.n	800a13e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	f003 020f 	and.w	r2, r3, #15
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	3338      	adds	r3, #56	; 0x38
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	4413      	add	r3, r2
 800a132:	3304      	adds	r3, #4
 800a134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2201      	movs	r2, #1
 800a13a:	705a      	strb	r2, [r3, #1]
 800a13c:	e00f      	b.n	800a15e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	f003 020f 	and.w	r2, r3, #15
 800a144:	4613      	mov	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	1a9b      	subs	r3, r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	4413      	add	r3, r2
 800a154:	3304      	adds	r3, #4
 800a156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a176:	2b01      	cmp	r3, #1
 800a178:	d101      	bne.n	800a17e <HAL_PCD_EP_ClrStall+0x86>
 800a17a:	2302      	movs	r3, #2
 800a17c:	e00e      	b.n	800a19c <HAL_PCD_EP_ClrStall+0xa4>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f008 fb79 	bl	8012884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	1a9b      	subs	r3, r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	3338      	adds	r3, #56	; 0x38
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d901      	bls.n	800a1dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e06c      	b.n	800a2b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	695a      	ldr	r2, [r3, #20]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	69fa      	ldr	r2, [r7, #28]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d902      	bls.n	800a1f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	3303      	adds	r3, #3
 800a1fc:	089b      	lsrs	r3, r3, #2
 800a1fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a200:	e02b      	b.n	800a25a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	695a      	ldr	r2, [r3, #20]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	429a      	cmp	r2, r3
 800a216:	d902      	bls.n	800a21e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3303      	adds	r3, #3
 800a222:	089b      	lsrs	r3, r3, #2
 800a224:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68d9      	ldr	r1, [r3, #12]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a236:	b2db      	uxtb	r3, r3
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4603      	mov	r3, r0
 800a23c:	6978      	ldr	r0, [r7, #20]
 800a23e:	f008 fa1d 	bl	801267c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	441a      	add	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d809      	bhi.n	800a284 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a278:	429a      	cmp	r2, r3
 800a27a:	d203      	bcs.n	800a284 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1be      	bne.n	800a202 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	695a      	ldr	r2, [r3, #20]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d811      	bhi.n	800a2b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	f003 030f 	and.w	r3, r3, #15
 800a296:	2201      	movs	r2, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	6939      	ldr	r1, [r7, #16]
 800a2ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	333c      	adds	r3, #60	; 0x3c
 800a2d8:	3304      	adds	r3, #4
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	f040 80a0 	bne.w	800a438 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d015      	beq.n	800a32e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	4a72      	ldr	r2, [pc, #456]	; (800a4d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800a306:	4293      	cmp	r3, r2
 800a308:	f240 80dd 	bls.w	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80d7 	beq.w	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	461a      	mov	r2, r3
 800a326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a32a:	6093      	str	r3, [r2, #8]
 800a32c:	e0cb      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	015a      	lsls	r2, r3, #5
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	4413      	add	r3, r2
 800a340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a344:	461a      	mov	r2, r3
 800a346:	2320      	movs	r3, #32
 800a348:	6093      	str	r3, [r2, #8]
 800a34a:	e0bc      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a352:	2b00      	cmp	r3, #0
 800a354:	f040 80b7 	bne.w	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4a5d      	ldr	r2, [pc, #372]	; (800a4d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d90f      	bls.n	800a380 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4413      	add	r3, r2
 800a372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a376:	461a      	mov	r2, r3
 800a378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37c:	6093      	str	r3, [r2, #8]
 800a37e:	e0a2      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	4613      	mov	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	440b      	add	r3, r1
 800a38e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a392:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	0159      	lsls	r1, r3, #5
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	440b      	add	r3, r1
 800a39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a3a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4403      	add	r3, r0
 800a3b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a3ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4403      	add	r3, r0
 800a3de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4419      	add	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4403      	add	r3, r0
 800a3f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a3f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d114      	bne.n	800a42a <PCD_EP_OutXfrComplete_int+0x16a>
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4613      	mov	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	1a9b      	subs	r3, r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d108      	bne.n	800a42a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a422:	461a      	mov	r2, r3
 800a424:	2101      	movs	r1, #1
 800a426:	f008 fbc1 	bl	8012bac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7fa fa77 	bl	8004924 <HAL_PCD_DataOutStageCallback>
 800a436:	e046      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4a26      	ldr	r2, [pc, #152]	; (800a4d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d124      	bne.n	800a48a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a456:	461a      	mov	r2, r3
 800a458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a45c:	6093      	str	r3, [r2, #8]
 800a45e:	e032      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a476:	461a      	mov	r2, r3
 800a478:	2320      	movs	r3, #32
 800a47a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fa fa4e 	bl	8004924 <HAL_PCD_DataOutStageCallback>
 800a488:	e01d      	b.n	800a4c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d114      	bne.n	800a4ba <PCD_EP_OutXfrComplete_int+0x1fa>
 800a490:	6879      	ldr	r1, [r7, #4]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4613      	mov	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	1a9b      	subs	r3, r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d108      	bne.n	800a4ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	f008 fb79 	bl	8012bac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7fa fa2f 	bl	8004924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	4f54300a 	.word	0x4f54300a
 800a4d4:	4f54310a 	.word	0x4f54310a

0800a4d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	333c      	adds	r3, #60	; 0x3c
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4a15      	ldr	r2, [pc, #84]	; (800a560 <PCD_EP_OutSetupPacket_int+0x88>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d90e      	bls.n	800a52c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a524:	461a      	mov	r2, r3
 800a526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a52a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fa f9e7 	bl	8004900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4a0a      	ldr	r2, [pc, #40]	; (800a560 <PCD_EP_OutSetupPacket_int+0x88>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d90c      	bls.n	800a554 <PCD_EP_OutSetupPacket_int+0x7c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d108      	bne.n	800a554 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a54c:	461a      	mov	r2, r3
 800a54e:	2101      	movs	r1, #1
 800a550:	f008 fb2c 	bl	8012bac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	4f54300a 	.word	0x4f54300a

0800a564 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
 800a570:	4613      	mov	r3, r2
 800a572:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d107      	bne.n	800a592 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a582:	883b      	ldrh	r3, [r7, #0]
 800a584:	0419      	lsls	r1, r3, #16
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	629a      	str	r2, [r3, #40]	; 0x28
 800a590:	e028      	b.n	800a5e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	0c1b      	lsrs	r3, r3, #16
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	4413      	add	r3, r2
 800a59e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e00d      	b.n	800a5c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	3340      	adds	r3, #64	; 0x40
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	0c1b      	lsrs	r3, r3, #16
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	73fb      	strb	r3, [r7, #15]
 800a5c2:	7bfa      	ldrb	r2, [r7, #15]
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d3ec      	bcc.n	800a5a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a5cc:	883b      	ldrh	r3, [r7, #0]
 800a5ce:	0418      	lsls	r0, r3, #16
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6819      	ldr	r1, [r3, #0]
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	4302      	orrs	r2, r0
 800a5dc:	3340      	adds	r3, #64	; 0x40
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	887a      	ldrh	r2, [r7, #2]
 800a604:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <HAL_PCDEx_ActivateLPM+0x44>)
 800a644:	4313      	orrs	r3, r2
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	10000003 	.word	0x10000003

0800a65c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a67c:	4b19      	ldr	r3, [pc, #100]	; (800a6e4 <HAL_PWREx_ConfigSupply+0x70>)
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b04      	cmp	r3, #4
 800a686:	d00a      	beq.n	800a69e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a688:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <HAL_PWREx_ConfigSupply+0x70>)
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d001      	beq.n	800a69a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e01f      	b.n	800a6da <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	e01d      	b.n	800a6da <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <HAL_PWREx_ConfigSupply+0x70>)
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f023 0207 	bic.w	r2, r3, #7
 800a6a6:	490f      	ldr	r1, [pc, #60]	; (800a6e4 <HAL_PWREx_ConfigSupply+0x70>)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6ae:	f7fa fcf9 	bl	80050a4 <HAL_GetTick>
 800a6b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6b4:	e009      	b.n	800a6ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6b6:	f7fa fcf5 	bl	80050a4 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6c4:	d901      	bls.n	800a6ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e007      	b.n	800a6da <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6ca:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <HAL_PWREx_ConfigSupply+0x70>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d6:	d1ee      	bne.n	800a6b6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	58024800 	.word	0x58024800

0800a6e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a6ec:	4b05      	ldr	r3, [pc, #20]	; (800a704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	4a04      	ldr	r2, [pc, #16]	; (800a704 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6f6:	60d3      	str	r3, [r2, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	58024800 	.word	0x58024800

0800a708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08c      	sub	sp, #48	; 0x30
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	f000 bc1d 	b.w	800af56 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8087 	beq.w	800a838 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a72a:	4b99      	ldr	r3, [pc, #612]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a734:	4b96      	ldr	r3, [pc, #600]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d007      	beq.n	800a750 <HAL_RCC_OscConfig+0x48>
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	2b18      	cmp	r3, #24
 800a744:	d110      	bne.n	800a768 <HAL_RCC_OscConfig+0x60>
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d10b      	bne.n	800a768 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a750:	4b8f      	ldr	r3, [pc, #572]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d06c      	beq.n	800a836 <HAL_RCC_OscConfig+0x12e>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d168      	bne.n	800a836 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e3f6      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a770:	d106      	bne.n	800a780 <HAL_RCC_OscConfig+0x78>
 800a772:	4b87      	ldr	r3, [pc, #540]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a86      	ldr	r2, [pc, #536]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	e02e      	b.n	800a7de <HAL_RCC_OscConfig+0xd6>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10c      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x9a>
 800a788:	4b81      	ldr	r3, [pc, #516]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a80      	ldr	r2, [pc, #512]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a78e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	4b7e      	ldr	r3, [pc, #504]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a7d      	ldr	r2, [pc, #500]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a79a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e01d      	b.n	800a7de <HAL_RCC_OscConfig+0xd6>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7aa:	d10c      	bne.n	800a7c6 <HAL_RCC_OscConfig+0xbe>
 800a7ac:	4b78      	ldr	r3, [pc, #480]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a77      	ldr	r2, [pc, #476]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	4b75      	ldr	r3, [pc, #468]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a74      	ldr	r2, [pc, #464]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	e00b      	b.n	800a7de <HAL_RCC_OscConfig+0xd6>
 800a7c6:	4b72      	ldr	r3, [pc, #456]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a71      	ldr	r2, [pc, #452]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	4b6f      	ldr	r3, [pc, #444]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a6e      	ldr	r2, [pc, #440]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a7d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d013      	beq.n	800a80e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e6:	f7fa fc5d 	bl	80050a4 <HAL_GetTick>
 800a7ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7ec:	e008      	b.n	800a800 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7ee:	f7fa fc59 	bl	80050a4 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b64      	cmp	r3, #100	; 0x64
 800a7fa:	d901      	bls.n	800a800 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e3aa      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a800:	4b63      	ldr	r3, [pc, #396]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f0      	beq.n	800a7ee <HAL_RCC_OscConfig+0xe6>
 800a80c:	e014      	b.n	800a838 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7fa fc49 	bl	80050a4 <HAL_GetTick>
 800a812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a814:	e008      	b.n	800a828 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a816:	f7fa fc45 	bl	80050a4 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b64      	cmp	r3, #100	; 0x64
 800a822:	d901      	bls.n	800a828 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e396      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a828:	4b59      	ldr	r3, [pc, #356]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1f0      	bne.n	800a816 <HAL_RCC_OscConfig+0x10e>
 800a834:	e000      	b.n	800a838 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 80cb 	beq.w	800a9dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a846:	4b52      	ldr	r3, [pc, #328]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a84e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a850:	4b4f      	ldr	r3, [pc, #316]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a854:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <HAL_RCC_OscConfig+0x164>
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	2b18      	cmp	r3, #24
 800a860:	d156      	bne.n	800a910 <HAL_RCC_OscConfig+0x208>
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d151      	bne.n	800a910 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a86c:	4b48      	ldr	r3, [pc, #288]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_RCC_OscConfig+0x17c>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e368      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a884:	4b42      	ldr	r3, [pc, #264]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f023 0219 	bic.w	r2, r3, #25
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	493f      	ldr	r1, [pc, #252]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a892:	4313      	orrs	r3, r2
 800a894:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a896:	f7fa fc05 	bl	80050a4 <HAL_GetTick>
 800a89a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a89e:	f7fa fc01 	bl	80050a4 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e352      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8b0:	4b37      	ldr	r3, [pc, #220]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8bc:	f7fa fc22 	bl	8005104 <HAL_GetREVID>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	f241 0203 	movw	r2, #4099	; 0x1003
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d817      	bhi.n	800a8fa <HAL_RCC_OscConfig+0x1f2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	2b40      	cmp	r3, #64	; 0x40
 800a8d0:	d108      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x1dc>
 800a8d2:	4b2f      	ldr	r3, [pc, #188]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a8da:	4a2d      	ldr	r2, [pc, #180]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8e2:	e07b      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8e4:	4b2a      	ldr	r3, [pc, #168]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	031b      	lsls	r3, r3, #12
 800a8f2:	4927      	ldr	r1, [pc, #156]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8f8:	e070      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8fa:	4b25      	ldr	r3, [pc, #148]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	061b      	lsls	r3, r3, #24
 800a908:	4921      	ldr	r1, [pc, #132]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a90e:	e065      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d048      	beq.n	800a9aa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a918:	4b1d      	ldr	r3, [pc, #116]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f023 0219 	bic.w	r2, r3, #25
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	491a      	ldr	r1, [pc, #104]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a926:	4313      	orrs	r3, r2
 800a928:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92a:	f7fa fbbb 	bl	80050a4 <HAL_GetTick>
 800a92e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a930:	e008      	b.n	800a944 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a932:	f7fa fbb7 	bl	80050a4 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e308      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a944:	4b12      	ldr	r3, [pc, #72]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0f0      	beq.n	800a932 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a950:	f7fa fbd8 	bl	8005104 <HAL_GetREVID>
 800a954:	4603      	mov	r3, r0
 800a956:	f241 0203 	movw	r2, #4099	; 0x1003
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d81a      	bhi.n	800a994 <HAL_RCC_OscConfig+0x28c>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b40      	cmp	r3, #64	; 0x40
 800a964:	d108      	bne.n	800a978 <HAL_RCC_OscConfig+0x270>
 800a966:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a96e:	4a08      	ldr	r2, [pc, #32]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a974:	6053      	str	r3, [r2, #4]
 800a976:	e031      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	031b      	lsls	r3, r3, #12
 800a986:	4902      	ldr	r1, [pc, #8]	; (800a990 <HAL_RCC_OscConfig+0x288>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	604b      	str	r3, [r1, #4]
 800a98c:	e026      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
 800a98e:	bf00      	nop
 800a990:	58024400 	.word	0x58024400
 800a994:	4b9a      	ldr	r3, [pc, #616]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	061b      	lsls	r3, r3, #24
 800a9a2:	4997      	ldr	r1, [pc, #604]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	604b      	str	r3, [r1, #4]
 800a9a8:	e018      	b.n	800a9dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9aa:	4b95      	ldr	r3, [pc, #596]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a94      	ldr	r2, [pc, #592]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b6:	f7fa fb75 	bl	80050a4 <HAL_GetTick>
 800a9ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a9bc:	e008      	b.n	800a9d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9be:	f7fa fb71 	bl	80050a4 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e2c2      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a9d0:	4b8b      	ldr	r3, [pc, #556]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f0      	bne.n	800a9be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0310 	and.w	r3, r3, #16
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80a9 	beq.w	800ab3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ea:	4b85      	ldr	r3, [pc, #532]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9f4:	4b82      	ldr	r3, [pc, #520]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	d007      	beq.n	800aa10 <HAL_RCC_OscConfig+0x308>
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	2b18      	cmp	r3, #24
 800aa04:	d13a      	bne.n	800aa7c <HAL_RCC_OscConfig+0x374>
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f003 0303 	and.w	r3, r3, #3
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d135      	bne.n	800aa7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa10:	4b7b      	ldr	r3, [pc, #492]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <HAL_RCC_OscConfig+0x320>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	2b80      	cmp	r3, #128	; 0x80
 800aa22:	d001      	beq.n	800aa28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e296      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa28:	f7fa fb6c 	bl	8005104 <HAL_GetREVID>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d817      	bhi.n	800aa66 <HAL_RCC_OscConfig+0x35e>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	2b20      	cmp	r3, #32
 800aa3c:	d108      	bne.n	800aa50 <HAL_RCC_OscConfig+0x348>
 800aa3e:	4b70      	ldr	r3, [pc, #448]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aa46:	4a6e      	ldr	r2, [pc, #440]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa4e:	e075      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa50:	4b6b      	ldr	r3, [pc, #428]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	069b      	lsls	r3, r3, #26
 800aa5e:	4968      	ldr	r1, [pc, #416]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa64:	e06a      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa66:	4b66      	ldr	r3, [pc, #408]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	061b      	lsls	r3, r3, #24
 800aa74:	4962      	ldr	r1, [pc, #392]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa7a:	e05f      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d042      	beq.n	800ab0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aa84:	4b5e      	ldr	r3, [pc, #376]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a5d      	ldr	r2, [pc, #372]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aa8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa90:	f7fa fb08 	bl	80050a4 <HAL_GetTick>
 800aa94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aa98:	f7fa fb04 	bl	80050a4 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e255      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaaa:	4b55      	ldr	r3, [pc, #340]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f0      	beq.n	800aa98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aab6:	f7fa fb25 	bl	8005104 <HAL_GetREVID>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f241 0203 	movw	r2, #4099	; 0x1003
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d817      	bhi.n	800aaf4 <HAL_RCC_OscConfig+0x3ec>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d108      	bne.n	800aade <HAL_RCC_OscConfig+0x3d6>
 800aacc:	4b4c      	ldr	r3, [pc, #304]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aad4:	4a4a      	ldr	r2, [pc, #296]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aad6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aada:	6053      	str	r3, [r2, #4]
 800aadc:	e02e      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
 800aade:	4b48      	ldr	r3, [pc, #288]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	069b      	lsls	r3, r3, #26
 800aaec:	4944      	ldr	r1, [pc, #272]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	604b      	str	r3, [r1, #4]
 800aaf2:	e023      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
 800aaf4:	4b42      	ldr	r3, [pc, #264]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	061b      	lsls	r3, r3, #24
 800ab02:	493f      	ldr	r1, [pc, #252]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60cb      	str	r3, [r1, #12]
 800ab08:	e018      	b.n	800ab3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ab0a:	4b3d      	ldr	r3, [pc, #244]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a3c      	ldr	r2, [pc, #240]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab16:	f7fa fac5 	bl	80050a4 <HAL_GetTick>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab1c:	e008      	b.n	800ab30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ab1e:	f7fa fac1 	bl	80050a4 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e212      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab30:	4b33      	ldr	r3, [pc, #204]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0308 	and.w	r3, r3, #8
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d036      	beq.n	800abb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d019      	beq.n	800ab84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab50:	4b2b      	ldr	r3, [pc, #172]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab54:	4a2a      	ldr	r2, [pc, #168]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab5c:	f7fa faa2 	bl	80050a4 <HAL_GetTick>
 800ab60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab62:	e008      	b.n	800ab76 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab64:	f7fa fa9e 	bl	80050a4 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e1ef      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab76:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0f0      	beq.n	800ab64 <HAL_RCC_OscConfig+0x45c>
 800ab82:	e018      	b.n	800abb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab84:	4b1e      	ldr	r3, [pc, #120]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab88:	4a1d      	ldr	r2, [pc, #116]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800ab8a:	f023 0301 	bic.w	r3, r3, #1
 800ab8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab90:	f7fa fa88 	bl	80050a4 <HAL_GetTick>
 800ab94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab96:	e008      	b.n	800abaa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab98:	f7fa fa84 	bl	80050a4 <HAL_GetTick>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d901      	bls.n	800abaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e1d5      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800abaa:	4b15      	ldr	r3, [pc, #84]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800abac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1f0      	bne.n	800ab98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0320 	and.w	r3, r3, #32
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d039      	beq.n	800ac36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d01c      	beq.n	800ac04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800abca:	4b0d      	ldr	r3, [pc, #52]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a0c      	ldr	r2, [pc, #48]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800abd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800abd6:	f7fa fa65 	bl	80050a4 <HAL_GetTick>
 800abda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abdc:	e008      	b.n	800abf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800abde:	f7fa fa61 	bl	80050a4 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d901      	bls.n	800abf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e1b2      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800abf0:	4b03      	ldr	r3, [pc, #12]	; (800ac00 <HAL_RCC_OscConfig+0x4f8>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d0f0      	beq.n	800abde <HAL_RCC_OscConfig+0x4d6>
 800abfc:	e01b      	b.n	800ac36 <HAL_RCC_OscConfig+0x52e>
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac04:	4b9b      	ldr	r3, [pc, #620]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a9a      	ldr	r2, [pc, #616]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac10:	f7fa fa48 	bl	80050a4 <HAL_GetTick>
 800ac14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac16:	e008      	b.n	800ac2a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ac18:	f7fa fa44 	bl	80050a4 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e195      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac2a:	4b92      	ldr	r3, [pc, #584]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1f0      	bne.n	800ac18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0304 	and.w	r3, r3, #4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f000 8081 	beq.w	800ad46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac44:	4b8c      	ldr	r3, [pc, #560]	; (800ae78 <HAL_RCC_OscConfig+0x770>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a8b      	ldr	r2, [pc, #556]	; (800ae78 <HAL_RCC_OscConfig+0x770>)
 800ac4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac50:	f7fa fa28 	bl	80050a4 <HAL_GetTick>
 800ac54:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac56:	e008      	b.n	800ac6a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ac58:	f7fa fa24 	bl	80050a4 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b64      	cmp	r3, #100	; 0x64
 800ac64:	d901      	bls.n	800ac6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e175      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac6a:	4b83      	ldr	r3, [pc, #524]	; (800ae78 <HAL_RCC_OscConfig+0x770>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f0      	beq.n	800ac58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d106      	bne.n	800ac8c <HAL_RCC_OscConfig+0x584>
 800ac7e:	4b7d      	ldr	r3, [pc, #500]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac82:	4a7c      	ldr	r2, [pc, #496]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac84:	f043 0301 	orr.w	r3, r3, #1
 800ac88:	6713      	str	r3, [r2, #112]	; 0x70
 800ac8a:	e02d      	b.n	800ace8 <HAL_RCC_OscConfig+0x5e0>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <HAL_RCC_OscConfig+0x5a6>
 800ac94:	4b77      	ldr	r3, [pc, #476]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac98:	4a76      	ldr	r2, [pc, #472]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	6713      	str	r3, [r2, #112]	; 0x70
 800aca0:	4b74      	ldr	r3, [pc, #464]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800aca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca4:	4a73      	ldr	r2, [pc, #460]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800aca6:	f023 0304 	bic.w	r3, r3, #4
 800acaa:	6713      	str	r3, [r2, #112]	; 0x70
 800acac:	e01c      	b.n	800ace8 <HAL_RCC_OscConfig+0x5e0>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d10c      	bne.n	800acd0 <HAL_RCC_OscConfig+0x5c8>
 800acb6:	4b6f      	ldr	r3, [pc, #444]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acba:	4a6e      	ldr	r2, [pc, #440]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acbc:	f043 0304 	orr.w	r3, r3, #4
 800acc0:	6713      	str	r3, [r2, #112]	; 0x70
 800acc2:	4b6c      	ldr	r3, [pc, #432]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc6:	4a6b      	ldr	r2, [pc, #428]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acc8:	f043 0301 	orr.w	r3, r3, #1
 800accc:	6713      	str	r3, [r2, #112]	; 0x70
 800acce:	e00b      	b.n	800ace8 <HAL_RCC_OscConfig+0x5e0>
 800acd0:	4b68      	ldr	r3, [pc, #416]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	4a67      	ldr	r2, [pc, #412]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acd6:	f023 0301 	bic.w	r3, r3, #1
 800acda:	6713      	str	r3, [r2, #112]	; 0x70
 800acdc:	4b65      	ldr	r3, [pc, #404]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	4a64      	ldr	r2, [pc, #400]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ace2:	f023 0304 	bic.w	r3, r3, #4
 800ace6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d015      	beq.n	800ad1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acf0:	f7fa f9d8 	bl	80050a4 <HAL_GetTick>
 800acf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acf6:	e00a      	b.n	800ad0e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800acf8:	f7fa f9d4 	bl	80050a4 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e123      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad0e:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0ee      	beq.n	800acf8 <HAL_RCC_OscConfig+0x5f0>
 800ad1a:	e014      	b.n	800ad46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad1c:	f7fa f9c2 	bl	80050a4 <HAL_GetTick>
 800ad20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad22:	e00a      	b.n	800ad3a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad24:	f7fa f9be 	bl	80050a4 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d901      	bls.n	800ad3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e10d      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad3a:	4b4e      	ldr	r3, [pc, #312]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1ee      	bne.n	800ad24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8102 	beq.w	800af54 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ad50:	4b48      	ldr	r3, [pc, #288]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad58:	2b18      	cmp	r3, #24
 800ad5a:	f000 80bd 	beq.w	800aed8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	f040 809e 	bne.w	800aea4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad68:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a41      	ldr	r2, [pc, #260]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad74:	f7fa f996 	bl	80050a4 <HAL_GetTick>
 800ad78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad7a:	e008      	b.n	800ad8e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad7c:	f7fa f992 	bl	80050a4 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d901      	bls.n	800ad8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e0e3      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad8e:	4b39      	ldr	r3, [pc, #228]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1f0      	bne.n	800ad7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad9a:	4b36      	ldr	r3, [pc, #216]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ad9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad9e:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <HAL_RCC_OscConfig+0x774>)
 800ada0:	4013      	ands	r3, r2
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800adaa:	0112      	lsls	r2, r2, #4
 800adac:	430a      	orrs	r2, r1
 800adae:	4931      	ldr	r1, [pc, #196]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	628b      	str	r3, [r1, #40]	; 0x28
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb8:	3b01      	subs	r3, #1
 800adba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc2:	3b01      	subs	r3, #1
 800adc4:	025b      	lsls	r3, r3, #9
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	431a      	orrs	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adce:	3b01      	subs	r3, #1
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800addc:	3b01      	subs	r3, #1
 800adde:	061b      	lsls	r3, r3, #24
 800ade0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ade4:	4923      	ldr	r1, [pc, #140]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800adea:	4b22      	ldr	r3, [pc, #136]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800adec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adee:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800adf0:	f023 0301 	bic.w	r3, r3, #1
 800adf4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800adf6:	4b1f      	ldr	r3, [pc, #124]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800adf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adfa:	4b21      	ldr	r3, [pc, #132]	; (800ae80 <HAL_RCC_OscConfig+0x778>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae02:	00d2      	lsls	r2, r2, #3
 800ae04:	491b      	ldr	r1, [pc, #108]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae0a:	4b1a      	ldr	r3, [pc, #104]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	f023 020c 	bic.w	r2, r3, #12
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae16:	4917      	ldr	r1, [pc, #92]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae1c:	4b15      	ldr	r3, [pc, #84]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	f023 0202 	bic.w	r2, r3, #2
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae28:	4912      	ldr	r1, [pc, #72]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	4a10      	ldr	r2, [pc, #64]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae3a:	4b0e      	ldr	r3, [pc, #56]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3e:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	4a0a      	ldr	r2, [pc, #40]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ae52:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	4a07      	ldr	r2, [pc, #28]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae58:	f043 0301 	orr.w	r3, r3, #1
 800ae5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a04      	ldr	r2, [pc, #16]	; (800ae74 <HAL_RCC_OscConfig+0x76c>)
 800ae64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae6a:	f7fa f91b 	bl	80050a4 <HAL_GetTick>
 800ae6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae70:	e011      	b.n	800ae96 <HAL_RCC_OscConfig+0x78e>
 800ae72:	bf00      	nop
 800ae74:	58024400 	.word	0x58024400
 800ae78:	58024800 	.word	0x58024800
 800ae7c:	fffffc0c 	.word	0xfffffc0c
 800ae80:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae84:	f7fa f90e 	bl	80050a4 <HAL_GetTick>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d901      	bls.n	800ae96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e05f      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae96:	4b32      	ldr	r3, [pc, #200]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0f0      	beq.n	800ae84 <HAL_RCC_OscConfig+0x77c>
 800aea2:	e057      	b.n	800af54 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aea4:	4b2e      	ldr	r3, [pc, #184]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a2d      	ldr	r2, [pc, #180]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800aeaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb0:	f7fa f8f8 	bl	80050a4 <HAL_GetTick>
 800aeb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aeb8:	f7fa f8f4 	bl	80050a4 <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e045      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aeca:	4b25      	ldr	r3, [pc, #148]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1f0      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x7b0>
 800aed6:	e03d      	b.n	800af54 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aed8:	4b21      	ldr	r3, [pc, #132]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800aeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aedc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aede:	4b20      	ldr	r3, [pc, #128]	; (800af60 <HAL_RCC_OscConfig+0x858>)
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d031      	beq.n	800af50 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f003 0203 	and.w	r2, r3, #3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d12a      	bne.n	800af50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	091b      	lsrs	r3, r3, #4
 800aefe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af06:	429a      	cmp	r2, r3
 800af08:	d122      	bne.n	800af50 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af16:	429a      	cmp	r2, r3
 800af18:	d11a      	bne.n	800af50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	0a5b      	lsrs	r3, r3, #9
 800af1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af28:	429a      	cmp	r2, r3
 800af2a:	d111      	bne.n	800af50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d108      	bne.n	800af50 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	0e1b      	lsrs	r3, r3, #24
 800af42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d001      	beq.n	800af54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3730      	adds	r7, #48	; 0x30
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	58024400 	.word	0x58024400

0800af64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	e19c      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af78:	4b8a      	ldr	r3, [pc, #552]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	429a      	cmp	r2, r3
 800af84:	d910      	bls.n	800afa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af86:	4b87      	ldr	r3, [pc, #540]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f023 020f 	bic.w	r2, r3, #15
 800af8e:	4985      	ldr	r1, [pc, #532]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	4313      	orrs	r3, r2
 800af94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af96:	4b83      	ldr	r3, [pc, #524]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 030f 	and.w	r3, r3, #15
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d001      	beq.n	800afa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e184      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d010      	beq.n	800afd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	4b7b      	ldr	r3, [pc, #492]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d908      	bls.n	800afd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afc4:	4b78      	ldr	r3, [pc, #480]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	4975      	ldr	r1, [pc, #468]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695a      	ldr	r2, [r3, #20]
 800afe6:	4b70      	ldr	r3, [pc, #448]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afee:	429a      	cmp	r2, r3
 800aff0:	d908      	bls.n	800b004 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aff2:	4b6d      	ldr	r3, [pc, #436]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	496a      	ldr	r1, [pc, #424]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b000:	4313      	orrs	r3, r2
 800b002:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0310 	and.w	r3, r3, #16
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d010      	beq.n	800b032 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	4b64      	ldr	r3, [pc, #400]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d908      	bls.n	800b032 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b020:	4b61      	ldr	r3, [pc, #388]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b022:	69db      	ldr	r3, [r3, #28]
 800b024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	495e      	ldr	r1, [pc, #376]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0320 	and.w	r3, r3, #32
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69da      	ldr	r2, [r3, #28]
 800b042:	4b59      	ldr	r3, [pc, #356]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d908      	bls.n	800b060 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b04e:	4b56      	ldr	r3, [pc, #344]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	69db      	ldr	r3, [r3, #28]
 800b05a:	4953      	ldr	r1, [pc, #332]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d010      	beq.n	800b08e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	4b4d      	ldr	r3, [pc, #308]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	f003 030f 	and.w	r3, r3, #15
 800b078:	429a      	cmp	r2, r3
 800b07a:	d908      	bls.n	800b08e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b07c:	4b4a      	ldr	r3, [pc, #296]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f023 020f 	bic.w	r2, r3, #15
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	4947      	ldr	r1, [pc, #284]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d055      	beq.n	800b146 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b09a:	4b43      	ldr	r3, [pc, #268]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	4940      	ldr	r1, [pc, #256]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d107      	bne.n	800b0c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b0b4:	4b3c      	ldr	r3, [pc, #240]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d121      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e0f6      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	d107      	bne.n	800b0dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0cc:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d115      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e0ea      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d107      	bne.n	800b0f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b0e4:	4b30      	ldr	r3, [pc, #192]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d109      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e0de      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0f4:	4b2c      	ldr	r3, [pc, #176]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e0d6      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b104:	4b28      	ldr	r3, [pc, #160]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f023 0207 	bic.w	r2, r3, #7
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4925      	ldr	r1, [pc, #148]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b112:	4313      	orrs	r3, r2
 800b114:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b116:	f7f9 ffc5 	bl	80050a4 <HAL_GetTick>
 800b11a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11c:	e00a      	b.n	800b134 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b11e:	f7f9 ffc1 	bl	80050a4 <HAL_GetTick>
 800b122:	4602      	mov	r2, r0
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d901      	bls.n	800b134 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b130:	2303      	movs	r3, #3
 800b132:	e0be      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b134:	4b1c      	ldr	r3, [pc, #112]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	429a      	cmp	r2, r3
 800b144:	d1eb      	bne.n	800b11e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0302 	and.w	r3, r3, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d010      	beq.n	800b174 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f003 030f 	and.w	r3, r3, #15
 800b15e:	429a      	cmp	r2, r3
 800b160:	d208      	bcs.n	800b174 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b162:	4b11      	ldr	r3, [pc, #68]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	f023 020f 	bic.w	r2, r3, #15
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	490e      	ldr	r1, [pc, #56]	; (800b1a8 <HAL_RCC_ClockConfig+0x244>)
 800b170:	4313      	orrs	r3, r2
 800b172:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b174:	4b0b      	ldr	r3, [pc, #44]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 030f 	and.w	r3, r3, #15
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d214      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b182:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f023 020f 	bic.w	r2, r3, #15
 800b18a:	4906      	ldr	r1, [pc, #24]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	4313      	orrs	r3, r2
 800b190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b192:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <HAL_RCC_ClockConfig+0x240>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d005      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e086      	b.n	800b2b2 <HAL_RCC_ClockConfig+0x34e>
 800b1a4:	52002000 	.word	0x52002000
 800b1a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d010      	beq.n	800b1da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691a      	ldr	r2, [r3, #16]
 800b1bc:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d208      	bcs.n	800b1da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1c8:	4b3c      	ldr	r3, [pc, #240]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	4939      	ldr	r1, [pc, #228]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0308 	and.w	r3, r3, #8
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d010      	beq.n	800b208 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	4b34      	ldr	r3, [pc, #208]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d208      	bcs.n	800b208 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1f6:	4b31      	ldr	r3, [pc, #196]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	492e      	ldr	r1, [pc, #184]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b204:	4313      	orrs	r3, r2
 800b206:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0310 	and.w	r3, r3, #16
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699a      	ldr	r2, [r3, #24]
 800b218:	4b28      	ldr	r3, [pc, #160]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b220:	429a      	cmp	r2, r3
 800b222:	d208      	bcs.n	800b236 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b224:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	4922      	ldr	r1, [pc, #136]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b232:	4313      	orrs	r3, r2
 800b234:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d010      	beq.n	800b264 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	69da      	ldr	r2, [r3, #28]
 800b246:	4b1d      	ldr	r3, [pc, #116]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b24e:	429a      	cmp	r2, r3
 800b250:	d208      	bcs.n	800b264 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b252:	4b1a      	ldr	r3, [pc, #104]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	4917      	ldr	r1, [pc, #92]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b260:	4313      	orrs	r3, r2
 800b262:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b264:	f000 f834 	bl	800b2d0 <HAL_RCC_GetSysClockFreq>
 800b268:	4602      	mov	r2, r0
 800b26a:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	4912      	ldr	r1, [pc, #72]	; (800b2c0 <HAL_RCC_ClockConfig+0x35c>)
 800b276:	5ccb      	ldrb	r3, [r1, r3]
 800b278:	f003 031f 	and.w	r3, r3, #31
 800b27c:	fa22 f303 	lsr.w	r3, r2, r3
 800b280:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b282:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <HAL_RCC_ClockConfig+0x358>)
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	f003 030f 	and.w	r3, r3, #15
 800b28a:	4a0d      	ldr	r2, [pc, #52]	; (800b2c0 <HAL_RCC_ClockConfig+0x35c>)
 800b28c:	5cd3      	ldrb	r3, [r2, r3]
 800b28e:	f003 031f 	and.w	r3, r3, #31
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	fa22 f303 	lsr.w	r3, r2, r3
 800b298:	4a0a      	ldr	r2, [pc, #40]	; (800b2c4 <HAL_RCC_ClockConfig+0x360>)
 800b29a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b29c:	4a0a      	ldr	r2, [pc, #40]	; (800b2c8 <HAL_RCC_ClockConfig+0x364>)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b2a2:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <HAL_RCC_ClockConfig+0x368>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f9 feb2 	bl	8005010 <HAL_InitTick>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	58024400 	.word	0x58024400
 800b2c0:	0802fdf8 	.word	0x0802fdf8
 800b2c4:	240002a0 	.word	0x240002a0
 800b2c8:	2400029c 	.word	0x2400029c
 800b2cc:	240002a4 	.word	0x240002a4

0800b2d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b089      	sub	sp, #36	; 0x24
 800b2d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2d6:	4bb3      	ldr	r3, [pc, #716]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2de:	2b18      	cmp	r3, #24
 800b2e0:	f200 8155 	bhi.w	800b58e <HAL_RCC_GetSysClockFreq+0x2be>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <HAL_RCC_GetSysClockFreq+0x1c>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b351 	.word	0x0800b351
 800b2f0:	0800b58f 	.word	0x0800b58f
 800b2f4:	0800b58f 	.word	0x0800b58f
 800b2f8:	0800b58f 	.word	0x0800b58f
 800b2fc:	0800b58f 	.word	0x0800b58f
 800b300:	0800b58f 	.word	0x0800b58f
 800b304:	0800b58f 	.word	0x0800b58f
 800b308:	0800b58f 	.word	0x0800b58f
 800b30c:	0800b377 	.word	0x0800b377
 800b310:	0800b58f 	.word	0x0800b58f
 800b314:	0800b58f 	.word	0x0800b58f
 800b318:	0800b58f 	.word	0x0800b58f
 800b31c:	0800b58f 	.word	0x0800b58f
 800b320:	0800b58f 	.word	0x0800b58f
 800b324:	0800b58f 	.word	0x0800b58f
 800b328:	0800b58f 	.word	0x0800b58f
 800b32c:	0800b37d 	.word	0x0800b37d
 800b330:	0800b58f 	.word	0x0800b58f
 800b334:	0800b58f 	.word	0x0800b58f
 800b338:	0800b58f 	.word	0x0800b58f
 800b33c:	0800b58f 	.word	0x0800b58f
 800b340:	0800b58f 	.word	0x0800b58f
 800b344:	0800b58f 	.word	0x0800b58f
 800b348:	0800b58f 	.word	0x0800b58f
 800b34c:	0800b383 	.word	0x0800b383
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b350:	4b94      	ldr	r3, [pc, #592]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0320 	and.w	r3, r3, #32
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b35c:	4b91      	ldr	r3, [pc, #580]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	08db      	lsrs	r3, r3, #3
 800b362:	f003 0303 	and.w	r3, r3, #3
 800b366:	4a90      	ldr	r2, [pc, #576]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b368:	fa22 f303 	lsr.w	r3, r2, r3
 800b36c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b36e:	e111      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b370:	4b8d      	ldr	r3, [pc, #564]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b372:	61bb      	str	r3, [r7, #24]
    break;
 800b374:	e10e      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b376:	4b8d      	ldr	r3, [pc, #564]	; (800b5ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b378:	61bb      	str	r3, [r7, #24]
    break;
 800b37a:	e10b      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b37c:	4b8c      	ldr	r3, [pc, #560]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b37e:	61bb      	str	r3, [r7, #24]
    break;
 800b380:	e108      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b382:	4b88      	ldr	r3, [pc, #544]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	f003 0303 	and.w	r3, r3, #3
 800b38a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b38c:	4b85      	ldr	r3, [pc, #532]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	091b      	lsrs	r3, r3, #4
 800b392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b396:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b398:	4b82      	ldr	r3, [pc, #520]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	f003 0301 	and.w	r3, r3, #1
 800b3a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b3a2:	4b80      	ldr	r3, [pc, #512]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	08db      	lsrs	r3, r3, #3
 800b3a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	fb02 f303 	mul.w	r3, r2, r3
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80e1 	beq.w	800b588 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	f000 8083 	beq.w	800b4d4 <HAL_RCC_GetSysClockFreq+0x204>
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	f200 80a1 	bhi.w	800b518 <HAL_RCC_GetSysClockFreq+0x248>
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <HAL_RCC_GetSysClockFreq+0x114>
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d056      	beq.n	800b490 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b3e2:	e099      	b.n	800b518 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3e4:	4b6f      	ldr	r3, [pc, #444]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0320 	and.w	r3, r3, #32
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d02d      	beq.n	800b44c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3f0:	4b6c      	ldr	r3, [pc, #432]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	08db      	lsrs	r3, r3, #3
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	4a6b      	ldr	r2, [pc, #428]	; (800b5a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b400:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	ee07 3a90 	vmov	s15, r3
 800b408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b41a:	4b62      	ldr	r3, [pc, #392]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b422:	ee07 3a90 	vmov	s15, r3
 800b426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b42e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b5b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b44a:	e087      	b.n	800b55c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	ee07 3a90 	vmov	s15, r3
 800b452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b456:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b5b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b45a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b45e:	4b51      	ldr	r3, [pc, #324]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b466:	ee07 3a90 	vmov	s15, r3
 800b46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b46e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b472:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b5b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b47a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b47e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b48a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b48e:	e065      	b.n	800b55c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	ee07 3a90 	vmov	s15, r3
 800b496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b49a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b5bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a2:	4b40      	ldr	r3, [pc, #256]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4aa:	ee07 3a90 	vmov	s15, r3
 800b4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b5b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4d2:	e043      	b.n	800b55c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	ee07 3a90 	vmov	s15, r3
 800b4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4de:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e6:	4b2f      	ldr	r3, [pc, #188]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ee:	ee07 3a90 	vmov	s15, r3
 800b4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b5b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b516:	e021      	b.n	800b55c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b522:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b5bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b52a:	4b1e      	ldr	r3, [pc, #120]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b53e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b5b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b55a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b55c:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b560:	0a5b      	lsrs	r3, r3, #9
 800b562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b566:	3301      	adds	r3, #1
 800b568:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	ee07 3a90 	vmov	s15, r3
 800b570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b574:	edd7 6a07 	vldr	s13, [r7, #28]
 800b578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b580:	ee17 3a90 	vmov	r3, s15
 800b584:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b586:	e005      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b588:	2300      	movs	r3, #0
 800b58a:	61bb      	str	r3, [r7, #24]
    break;
 800b58c:	e002      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b590:	61bb      	str	r3, [r7, #24]
    break;
 800b592:	bf00      	nop
  }

  return sysclockfreq;
 800b594:	69bb      	ldr	r3, [r7, #24]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3724      	adds	r7, #36	; 0x24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	58024400 	.word	0x58024400
 800b5a8:	03d09000 	.word	0x03d09000
 800b5ac:	003d0900 	.word	0x003d0900
 800b5b0:	017d7840 	.word	0x017d7840
 800b5b4:	46000000 	.word	0x46000000
 800b5b8:	4c742400 	.word	0x4c742400
 800b5bc:	4a742400 	.word	0x4a742400
 800b5c0:	4bbebc20 	.word	0x4bbebc20

0800b5c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b5ca:	f7ff fe81 	bl	800b2d0 <HAL_RCC_GetSysClockFreq>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	4b10      	ldr	r3, [pc, #64]	; (800b614 <HAL_RCC_GetHCLKFreq+0x50>)
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	0a1b      	lsrs	r3, r3, #8
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	490f      	ldr	r1, [pc, #60]	; (800b618 <HAL_RCC_GetHCLKFreq+0x54>)
 800b5dc:	5ccb      	ldrb	r3, [r1, r3]
 800b5de:	f003 031f 	and.w	r3, r3, #31
 800b5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <HAL_RCC_GetHCLKFreq+0x50>)
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	f003 030f 	and.w	r3, r3, #15
 800b5f0:	4a09      	ldr	r2, [pc, #36]	; (800b618 <HAL_RCC_GetHCLKFreq+0x54>)
 800b5f2:	5cd3      	ldrb	r3, [r2, r3]
 800b5f4:	f003 031f 	and.w	r3, r3, #31
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fe:	4a07      	ldr	r2, [pc, #28]	; (800b61c <HAL_RCC_GetHCLKFreq+0x58>)
 800b600:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b602:	4a07      	ldr	r2, [pc, #28]	; (800b620 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b608:	4b04      	ldr	r3, [pc, #16]	; (800b61c <HAL_RCC_GetHCLKFreq+0x58>)
 800b60a:	681b      	ldr	r3, [r3, #0]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	58024400 	.word	0x58024400
 800b618:	0802fdf8 	.word	0x0802fdf8
 800b61c:	240002a0 	.word	0x240002a0
 800b620:	2400029c 	.word	0x2400029c

0800b624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b628:	f7ff ffcc 	bl	800b5c4 <HAL_RCC_GetHCLKFreq>
 800b62c:	4602      	mov	r2, r0
 800b62e:	4b06      	ldr	r3, [pc, #24]	; (800b648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	091b      	lsrs	r3, r3, #4
 800b634:	f003 0307 	and.w	r3, r3, #7
 800b638:	4904      	ldr	r1, [pc, #16]	; (800b64c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b63a:	5ccb      	ldrb	r3, [r1, r3]
 800b63c:	f003 031f 	and.w	r3, r3, #31
 800b640:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b644:	4618      	mov	r0, r3
 800b646:	bd80      	pop	{r7, pc}
 800b648:	58024400 	.word	0x58024400
 800b64c:	0802fdf8 	.word	0x0802fdf8

0800b650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b654:	f7ff ffb6 	bl	800b5c4 <HAL_RCC_GetHCLKFreq>
 800b658:	4602      	mov	r2, r0
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	0a1b      	lsrs	r3, r3, #8
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	4904      	ldr	r1, [pc, #16]	; (800b678 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b666:	5ccb      	ldrb	r3, [r1, r3]
 800b668:	f003 031f 	and.w	r3, r3, #31
 800b66c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b670:	4618      	mov	r0, r3
 800b672:	bd80      	pop	{r7, pc}
 800b674:	58024400 	.word	0x58024400
 800b678:	0802fdf8 	.word	0x0802fdf8

0800b67c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b684:	2300      	movs	r3, #0
 800b686:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b688:	2300      	movs	r3, #0
 800b68a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d03f      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b69c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6a0:	d02a      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b6a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6a6:	d824      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b6a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ac:	d018      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b6ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6b2:	d81e      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b6b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6bc:	d007      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b6be:	e018      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c0:	4ba3      	ldr	r3, [pc, #652]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	4aa2      	ldr	r2, [pc, #648]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b6c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b6cc:	e015      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	2102      	movs	r1, #2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f001 f9d5 	bl	800ca84 <RCCEx_PLL2_Config>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b6de:	e00c      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3324      	adds	r3, #36	; 0x24
 800b6e4:	2102      	movs	r1, #2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 fa7e 	bl	800cbe8 <RCCEx_PLL3_Config>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b6f0:	e003      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f6:	e000      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b6f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d109      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b700:	4b93      	ldr	r3, [pc, #588]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b70c:	4990      	ldr	r1, [pc, #576]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b70e:	4313      	orrs	r3, r2
 800b710:	650b      	str	r3, [r1, #80]	; 0x50
 800b712:	e001      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b720:	2b00      	cmp	r3, #0
 800b722:	d03d      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d826      	bhi.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b72c:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b732:	bf00      	nop
 800b734:	0800b749 	.word	0x0800b749
 800b738:	0800b757 	.word	0x0800b757
 800b73c:	0800b769 	.word	0x0800b769
 800b740:	0800b781 	.word	0x0800b781
 800b744:	0800b781 	.word	0x0800b781
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b748:	4b81      	ldr	r3, [pc, #516]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	4a80      	ldr	r2, [pc, #512]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b754:	e015      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3304      	adds	r3, #4
 800b75a:	2100      	movs	r1, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 f991 	bl	800ca84 <RCCEx_PLL2_Config>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b766:	e00c      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3324      	adds	r3, #36	; 0x24
 800b76c:	2100      	movs	r1, #0
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 fa3a 	bl	800cbe8 <RCCEx_PLL3_Config>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b778:	e003      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]
      break;
 800b77e:	e000      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b780:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b782:	7dfb      	ldrb	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d109      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b788:	4b71      	ldr	r3, [pc, #452]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78c:	f023 0207 	bic.w	r2, r3, #7
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b794:	496e      	ldr	r1, [pc, #440]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b796:	4313      	orrs	r3, r2
 800b798:	650b      	str	r3, [r1, #80]	; 0x50
 800b79a:	e001      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d042      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7b4:	d02b      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ba:	d825      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b7bc:	2bc0      	cmp	r3, #192	; 0xc0
 800b7be:	d028      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b7c0:	2bc0      	cmp	r3, #192	; 0xc0
 800b7c2:	d821      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b7c4:	2b80      	cmp	r3, #128	; 0x80
 800b7c6:	d016      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b7c8:	2b80      	cmp	r3, #128	; 0x80
 800b7ca:	d81d      	bhi.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b7d0:	2b40      	cmp	r3, #64	; 0x40
 800b7d2:	d007      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b7d4:	e018      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d6:	4b5e      	ldr	r3, [pc, #376]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7da:	4a5d      	ldr	r2, [pc, #372]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b7dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b7e2:	e017      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f001 f94a 	bl	800ca84 <RCCEx_PLL2_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b7f4:	e00e      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3324      	adds	r3, #36	; 0x24
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 f9f3 	bl	800cbe8 <RCCEx_PLL3_Config>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b806:	e005      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	75fb      	strb	r3, [r7, #23]
      break;
 800b80c:	e002      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b80e:	bf00      	nop
 800b810:	e000      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b812:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d109      	bne.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b81a:	4b4d      	ldr	r3, [pc, #308]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b826:	494a      	ldr	r1, [pc, #296]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b828:	4313      	orrs	r3, r2
 800b82a:	650b      	str	r3, [r1, #80]	; 0x50
 800b82c:	e001      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d049      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b848:	d030      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b84a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b84e:	d82a      	bhi.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b850:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b854:	d02c      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b856:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b85a:	d824      	bhi.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b85c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b860:	d018      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b866:	d81e      	bhi.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b86c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b870:	d007      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b872:	e018      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b874:	4b36      	ldr	r3, [pc, #216]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	4a35      	ldr	r2, [pc, #212]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b87a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b87e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b880:	e017      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3304      	adds	r3, #4
 800b886:	2100      	movs	r1, #0
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f8fb 	bl	800ca84 <RCCEx_PLL2_Config>
 800b88e:	4603      	mov	r3, r0
 800b890:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b892:	e00e      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3324      	adds	r3, #36	; 0x24
 800b898:	2100      	movs	r1, #0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f001 f9a4 	bl	800cbe8 <RCCEx_PLL3_Config>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b8a4:	e005      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8aa:	e002      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b8ac:	bf00      	nop
 800b8ae:	e000      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b8b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b8b8:	4b25      	ldr	r3, [pc, #148]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8c6:	4922      	ldr	r1, [pc, #136]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	658b      	str	r3, [r1, #88]	; 0x58
 800b8cc:	e001      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d04b      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8e8:	d030      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b8ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8ee:	d82a      	bhi.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b8f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8f4:	d02e      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b8f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8fa:	d824      	bhi.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b8fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b900:	d018      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b906:	d81e      	bhi.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b90c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b910:	d007      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b912:	e018      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b914:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b918:	4a0d      	ldr	r2, [pc, #52]	; (800b950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b91a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b91e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b920:	e019      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3304      	adds	r3, #4
 800b926:	2100      	movs	r1, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 f8ab 	bl	800ca84 <RCCEx_PLL2_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b932:	e010      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3324      	adds	r3, #36	; 0x24
 800b938:	2100      	movs	r1, #0
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 f954 	bl	800cbe8 <RCCEx_PLL3_Config>
 800b940:	4603      	mov	r3, r0
 800b942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b944:	e007      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
      break;
 800b94a:	e004      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b94c:	bf00      	nop
 800b94e:	e002      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b950:	58024400 	.word	0x58024400
      break;
 800b954:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b956:	7dfb      	ldrb	r3, [r7, #23]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b95c:	4b99      	ldr	r3, [pc, #612]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b95e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b960:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b96a:	4996      	ldr	r1, [pc, #600]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	658b      	str	r3, [r1, #88]	; 0x58
 800b970:	e001      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d032      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b986:	2b30      	cmp	r3, #48	; 0x30
 800b988:	d01c      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b98a:	2b30      	cmp	r3, #48	; 0x30
 800b98c:	d817      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b98e:	2b20      	cmp	r3, #32
 800b990:	d00c      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b992:	2b20      	cmp	r3, #32
 800b994:	d813      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d016      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b99a:	2b10      	cmp	r3, #16
 800b99c:	d10f      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99e:	4b89      	ldr	r3, [pc, #548]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	4a88      	ldr	r2, [pc, #544]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b9aa:	e00e      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f866 	bl	800ca84 <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b9bc:	e005      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c2:	e002      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b9c4:	bf00      	nop
 800b9c6:	e000      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b9c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d109      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b9d0:	4b7c      	ldr	r3, [pc, #496]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9dc:	4979      	ldr	r1, [pc, #484]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9e2:	e001      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
 800b9e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d047      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9fc:	d030      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b9fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba02:	d82a      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ba04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba08:	d02c      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800ba0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba0e:	d824      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ba10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba14:	d018      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800ba16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba1a:	d81e      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800ba20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba24:	d007      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800ba26:	e018      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b66      	ldr	r3, [pc, #408]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	4a65      	ldr	r2, [pc, #404]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ba34:	e017      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 f821 	bl	800ca84 <RCCEx_PLL2_Config>
 800ba42:	4603      	mov	r3, r0
 800ba44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ba46:	e00e      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3324      	adds	r3, #36	; 0x24
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f001 f8ca 	bl	800cbe8 <RCCEx_PLL3_Config>
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ba58:	e005      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba5e:	e002      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ba60:	bf00      	nop
 800ba62:	e000      	b.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ba64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba6c:	4b55      	ldr	r3, [pc, #340]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba78:	4952      	ldr	r1, [pc, #328]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	650b      	str	r3, [r1, #80]	; 0x50
 800ba7e:	e001      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d049      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba98:	d02e      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ba9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba9e:	d828      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800baa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800baa4:	d02a      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x480>
 800baa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800baaa:	d822      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800baac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bab0:	d026      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800bab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bab6:	d81c      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800babc:	d010      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800babe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bac2:	d816      	bhi.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01d      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800bac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bacc:	d111      	bne.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3304      	adds	r3, #4
 800bad2:	2101      	movs	r1, #1
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 ffd5 	bl	800ca84 <RCCEx_PLL2_Config>
 800bada:	4603      	mov	r3, r0
 800badc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bade:	e012      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3324      	adds	r3, #36	; 0x24
 800bae4:	2101      	movs	r1, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 f87e 	bl	800cbe8 <RCCEx_PLL3_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800baf0:	e009      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]
      break;
 800baf6:	e006      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800baf8:	bf00      	nop
 800bafa:	e004      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bafc:	bf00      	nop
 800bafe:	e002      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bb00:	bf00      	nop
 800bb02:	e000      	b.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800bb04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb0c:	4b2d      	ldr	r3, [pc, #180]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb18:	492a      	ldr	r1, [pc, #168]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	650b      	str	r3, [r1, #80]	; 0x50
 800bb1e:	e001      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d04d      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb3a:	d02e      	beq.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bb3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb40:	d828      	bhi.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb46:	d02a      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800bb48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb4c:	d822      	bhi.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bb4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb52:	d026      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800bb54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb58:	d81c      	bhi.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bb5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb5e:	d010      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb64:	d816      	bhi.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d01d      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800bb6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb6e:	d111      	bne.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3304      	adds	r3, #4
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 ff84 	bl	800ca84 <RCCEx_PLL2_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bb80:	e012      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3324      	adds	r3, #36	; 0x24
 800bb86:	2101      	movs	r1, #1
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f001 f82d 	bl	800cbe8 <RCCEx_PLL3_Config>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bb92:	e009      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	75fb      	strb	r3, [r7, #23]
      break;
 800bb98:	e006      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bb9a:	bf00      	nop
 800bb9c:	e004      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bb9e:	bf00      	nop
 800bba0:	e002      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bba2:	bf00      	nop
 800bba4:	e000      	b.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800bba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10c      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbbc:	4901      	ldr	r1, [pc, #4]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	658b      	str	r3, [r1, #88]	; 0x58
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x550>
 800bbc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d02f      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe0:	d00e      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800bbe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe6:	d814      	bhi.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d015      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800bbec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbf0:	d10f      	bne.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf2:	4baf      	ldr	r3, [pc, #700]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	4aae      	ldr	r2, [pc, #696]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bbf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bbfe:	e00c      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	2101      	movs	r1, #1
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 ff3c 	bl	800ca84 <RCCEx_PLL2_Config>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bc10:	e003      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	75fb      	strb	r3, [r7, #23]
      break;
 800bc16:	e000      	b.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800bc18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d109      	bne.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc20:	4ba3      	ldr	r3, [pc, #652]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc2c:	49a0      	ldr	r1, [pc, #640]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	650b      	str	r3, [r1, #80]	; 0x50
 800bc32:	e001      	b.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d032      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d81b      	bhi.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc8b 	.word	0x0800bc8b
 800bc58:	0800bc65 	.word	0x0800bc65
 800bc5c:	0800bc73 	.word	0x0800bc73
 800bc60:	0800bc8b 	.word	0x0800bc8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc64:	4b92      	ldr	r3, [pc, #584]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	4a91      	ldr	r2, [pc, #580]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bc6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bc70:	e00c      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	3304      	adds	r3, #4
 800bc76:	2102      	movs	r1, #2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 ff03 	bl	800ca84 <RCCEx_PLL2_Config>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bc82:	e003      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
      break;
 800bc88:	e000      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bc8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d109      	bne.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc92:	4b87      	ldr	r3, [pc, #540]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bc94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc96:	f023 0203 	bic.w	r2, r3, #3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9e:	4984      	ldr	r1, [pc, #528]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bca4:	e001      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 8086 	beq.w	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcb8:	4b7e      	ldr	r3, [pc, #504]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a7d      	ldr	r2, [pc, #500]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bcbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcc4:	f7f9 f9ee 	bl	80050a4 <HAL_GetTick>
 800bcc8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcca:	e009      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bccc:	f7f9 f9ea 	bl	80050a4 <HAL_GetTick>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	2b64      	cmp	r3, #100	; 0x64
 800bcd8:	d902      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	75fb      	strb	r3, [r7, #23]
        break;
 800bcde:	e005      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bce0:	4b74      	ldr	r3, [pc, #464]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ef      	beq.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d166      	bne.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bcf2:	4b6f      	ldr	r3, [pc, #444]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bcf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcfc:	4053      	eors	r3, r2
 800bcfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d013      	beq.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd06:	4b6a      	ldr	r3, [pc, #424]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd10:	4b67      	ldr	r3, [pc, #412]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd14:	4a66      	ldr	r2, [pc, #408]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd1c:	4b64      	ldr	r3, [pc, #400]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd20:	4a63      	ldr	r2, [pc, #396]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd28:	4a61      	ldr	r2, [pc, #388]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd38:	d115      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3a:	f7f9 f9b3 	bl	80050a4 <HAL_GetTick>
 800bd3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd40:	e00b      	b.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd42:	f7f9 f9af 	bl	80050a4 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d902      	bls.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	75fb      	strb	r3, [r7, #23]
            break;
 800bd58:	e005      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd5a:	4b55      	ldr	r3, [pc, #340]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0ed      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d126      	bne.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd7a:	d10d      	bne.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bd7c:	4b4c      	ldr	r3, [pc, #304]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd8a:	0919      	lsrs	r1, r3, #4
 800bd8c:	4b4a      	ldr	r3, [pc, #296]	; (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800bd8e:	400b      	ands	r3, r1
 800bd90:	4947      	ldr	r1, [pc, #284]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	610b      	str	r3, [r1, #16]
 800bd96:	e005      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bd98:	4b45      	ldr	r3, [pc, #276]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	4a44      	ldr	r2, [pc, #272]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bd9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bda2:	6113      	str	r3, [r2, #16]
 800bda4:	4b42      	ldr	r3, [pc, #264]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bda6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdb2:	493f      	ldr	r1, [pc, #252]	; (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	670b      	str	r3, [r1, #112]	; 0x70
 800bdb8:	e004      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	75bb      	strb	r3, [r7, #22]
 800bdbe:	e001      	b.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 8085 	beq.w	800bedc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdd6:	2b28      	cmp	r3, #40	; 0x28
 800bdd8:	d866      	bhi.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bdda:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800bebd 	.word	0x0800bebd
 800bde4:	0800bea9 	.word	0x0800bea9
 800bde8:	0800bea9 	.word	0x0800bea9
 800bdec:	0800bea9 	.word	0x0800bea9
 800bdf0:	0800bea9 	.word	0x0800bea9
 800bdf4:	0800bea9 	.word	0x0800bea9
 800bdf8:	0800bea9 	.word	0x0800bea9
 800bdfc:	0800bea9 	.word	0x0800bea9
 800be00:	0800be85 	.word	0x0800be85
 800be04:	0800bea9 	.word	0x0800bea9
 800be08:	0800bea9 	.word	0x0800bea9
 800be0c:	0800bea9 	.word	0x0800bea9
 800be10:	0800bea9 	.word	0x0800bea9
 800be14:	0800bea9 	.word	0x0800bea9
 800be18:	0800bea9 	.word	0x0800bea9
 800be1c:	0800bea9 	.word	0x0800bea9
 800be20:	0800be97 	.word	0x0800be97
 800be24:	0800bea9 	.word	0x0800bea9
 800be28:	0800bea9 	.word	0x0800bea9
 800be2c:	0800bea9 	.word	0x0800bea9
 800be30:	0800bea9 	.word	0x0800bea9
 800be34:	0800bea9 	.word	0x0800bea9
 800be38:	0800bea9 	.word	0x0800bea9
 800be3c:	0800bea9 	.word	0x0800bea9
 800be40:	0800bebd 	.word	0x0800bebd
 800be44:	0800bea9 	.word	0x0800bea9
 800be48:	0800bea9 	.word	0x0800bea9
 800be4c:	0800bea9 	.word	0x0800bea9
 800be50:	0800bea9 	.word	0x0800bea9
 800be54:	0800bea9 	.word	0x0800bea9
 800be58:	0800bea9 	.word	0x0800bea9
 800be5c:	0800bea9 	.word	0x0800bea9
 800be60:	0800bebd 	.word	0x0800bebd
 800be64:	0800bea9 	.word	0x0800bea9
 800be68:	0800bea9 	.word	0x0800bea9
 800be6c:	0800bea9 	.word	0x0800bea9
 800be70:	0800bea9 	.word	0x0800bea9
 800be74:	0800bea9 	.word	0x0800bea9
 800be78:	0800bea9 	.word	0x0800bea9
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	0800bebd 	.word	0x0800bebd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3304      	adds	r3, #4
 800be88:	2101      	movs	r1, #1
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fdfa 	bl	800ca84 <RCCEx_PLL2_Config>
 800be90:	4603      	mov	r3, r0
 800be92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800be94:	e013      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3324      	adds	r3, #36	; 0x24
 800be9a:	2101      	movs	r1, #1
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fea3 	bl	800cbe8 <RCCEx_PLL3_Config>
 800bea2:	4603      	mov	r3, r0
 800bea4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bea6:	e00a      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	75fb      	strb	r3, [r7, #23]
      break;
 800beac:	e007      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x842>
 800beae:	bf00      	nop
 800beb0:	58024400 	.word	0x58024400
 800beb4:	58024800 	.word	0x58024800
 800beb8:	00ffffcf 	.word	0x00ffffcf
      break;
 800bebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bec4:	4b96      	ldr	r3, [pc, #600]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed0:	4993      	ldr	r1, [pc, #588]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	654b      	str	r3, [r1, #84]	; 0x54
 800bed6:	e001      	b.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d038      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beec:	2b05      	cmp	r3, #5
 800beee:	d821      	bhi.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800bef0:	a201      	add	r2, pc, #4	; (adr r2, 800bef8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800bef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef6:	bf00      	nop
 800bef8:	0800bf3b 	.word	0x0800bf3b
 800befc:	0800bf11 	.word	0x0800bf11
 800bf00:	0800bf23 	.word	0x0800bf23
 800bf04:	0800bf3b 	.word	0x0800bf3b
 800bf08:	0800bf3b 	.word	0x0800bf3b
 800bf0c:	0800bf3b 	.word	0x0800bf3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	3304      	adds	r3, #4
 800bf14:	2101      	movs	r1, #1
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fdb4 	bl	800ca84 <RCCEx_PLL2_Config>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bf20:	e00c      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3324      	adds	r3, #36	; 0x24
 800bf26:	2101      	movs	r1, #1
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 fe5d 	bl	800cbe8 <RCCEx_PLL3_Config>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bf32:	e003      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	75fb      	strb	r3, [r7, #23]
      break;
 800bf38:	e000      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800bf3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf3c:	7dfb      	ldrb	r3, [r7, #23]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d109      	bne.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bf42:	4b77      	ldr	r3, [pc, #476]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf46:	f023 0207 	bic.w	r2, r3, #7
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf4e:	4974      	ldr	r1, [pc, #464]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	654b      	str	r3, [r1, #84]	; 0x54
 800bf54:	e001      	b.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0304 	and.w	r3, r3, #4
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d03a      	beq.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf6c:	2b05      	cmp	r3, #5
 800bf6e:	d821      	bhi.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bf70:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800bf72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf76:	bf00      	nop
 800bf78:	0800bfbb 	.word	0x0800bfbb
 800bf7c:	0800bf91 	.word	0x0800bf91
 800bf80:	0800bfa3 	.word	0x0800bfa3
 800bf84:	0800bfbb 	.word	0x0800bfbb
 800bf88:	0800bfbb 	.word	0x0800bfbb
 800bf8c:	0800bfbb 	.word	0x0800bfbb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3304      	adds	r3, #4
 800bf94:	2101      	movs	r1, #1
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fd74 	bl	800ca84 <RCCEx_PLL2_Config>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bfa0:	e00c      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3324      	adds	r3, #36	; 0x24
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fe1d 	bl	800cbe8 <RCCEx_PLL3_Config>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bfb2:	e003      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	75fb      	strb	r3, [r7, #23]
      break;
 800bfb8:	e000      	b.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800bfba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bfc2:	4b57      	ldr	r3, [pc, #348]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bfc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfc6:	f023 0207 	bic.w	r2, r3, #7
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd0:	4953      	ldr	r1, [pc, #332]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	658b      	str	r3, [r1, #88]	; 0x58
 800bfd6:	e001      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d04b      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bff2:	d02e      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bff8:	d828      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bffe:	d02a      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c004:	d822      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c006:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c00a:	d026      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c00c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c010:	d81c      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c016:	d010      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c01c:	d816      	bhi.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d01d      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c026:	d111      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3304      	adds	r3, #4
 800c02c:	2100      	movs	r1, #0
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fd28 	bl	800ca84 <RCCEx_PLL2_Config>
 800c034:	4603      	mov	r3, r0
 800c036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c038:	e012      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3324      	adds	r3, #36	; 0x24
 800c03e:	2102      	movs	r1, #2
 800c040:	4618      	mov	r0, r3
 800c042:	f000 fdd1 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c046:	4603      	mov	r3, r0
 800c048:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c04a:	e009      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	75fb      	strb	r3, [r7, #23]
      break;
 800c050:	e006      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c052:	bf00      	nop
 800c054:	e004      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c056:	bf00      	nop
 800c058:	e002      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c05a:	bf00      	nop
 800c05c:	e000      	b.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c066:	4b2e      	ldr	r3, [pc, #184]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c06a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c074:	492a      	ldr	r1, [pc, #168]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c076:	4313      	orrs	r3, r2
 800c078:	654b      	str	r3, [r1, #84]	; 0x54
 800c07a:	e001      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
 800c07e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d04d      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c092:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c096:	d02e      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c098:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c09c:	d828      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c09e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a2:	d02a      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a8:	d822      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c0aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0ae:	d026      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c0b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0b4:	d81c      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ba:	d010      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c0bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0c0:	d816      	bhi.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d01d      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c0c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ca:	d111      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3304      	adds	r3, #4
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 fcd6 	bl	800ca84 <RCCEx_PLL2_Config>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c0dc:	e012      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	3324      	adds	r3, #36	; 0x24
 800c0e2:	2102      	movs	r1, #2
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 fd7f 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c0ee:	e009      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f4:	e006      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c0f6:	bf00      	nop
 800c0f8:	e004      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c0fa:	bf00      	nop
 800c0fc:	e002      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c0fe:	bf00      	nop
 800c100:	e000      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c102:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c104:	7dfb      	ldrb	r3, [r7, #23]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10c      	bne.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c10a:	4b05      	ldr	r3, [pc, #20]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c118:	4901      	ldr	r1, [pc, #4]	; (800c120 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	658b      	str	r3, [r1, #88]	; 0x58
 800c11e:	e003      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c124:	7dfb      	ldrb	r3, [r7, #23]
 800c126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c130:	2b00      	cmp	r3, #0
 800c132:	d04b      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c13a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c13e:	d02e      	beq.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c140:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c144:	d828      	bhi.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c14a:	d02a      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c14c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c150:	d822      	bhi.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c152:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c156:	d026      	beq.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c158:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c15c:	d81c      	bhi.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c15e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c162:	d010      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c168:	d816      	bhi.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d01d      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c16e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c172:	d111      	bne.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	3304      	adds	r3, #4
 800c178:	2100      	movs	r1, #0
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 fc82 	bl	800ca84 <RCCEx_PLL2_Config>
 800c180:	4603      	mov	r3, r0
 800c182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c184:	e012      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3324      	adds	r3, #36	; 0x24
 800c18a:	2102      	movs	r1, #2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fd2b 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c192:	4603      	mov	r3, r0
 800c194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c196:	e009      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	75fb      	strb	r3, [r7, #23]
      break;
 800c19c:	e006      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c19e:	bf00      	nop
 800c1a0:	e004      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c1a2:	bf00      	nop
 800c1a4:	e002      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c1a6:	bf00      	nop
 800c1a8:	e000      	b.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c1aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c1b2:	4b9d      	ldr	r3, [pc, #628]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1c0:	4999      	ldr	r1, [pc, #612]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	658b      	str	r3, [r1, #88]	; 0x58
 800c1c6:	e001      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01a      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e2:	d10a      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	3324      	adds	r3, #36	; 0x24
 800c1e8:	2102      	movs	r1, #2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fcfc 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c1fa:	4b8b      	ldr	r3, [pc, #556]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c208:	4987      	ldr	r1, [pc, #540]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0310 	and.w	r3, r3, #16
 800c216:	2b00      	cmp	r3, #0
 800c218:	d01a      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c224:	d10a      	bne.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3324      	adds	r3, #36	; 0x24
 800c22a:	2102      	movs	r1, #2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fcdb 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c23c:	4b7a      	ldr	r3, [pc, #488]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c23e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c24a:	4977      	ldr	r1, [pc, #476]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c24c:	4313      	orrs	r3, r2
 800c24e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d034      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c266:	d01d      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c26c:	d817      	bhi.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c276:	d009      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c278:	e011      	b.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3304      	adds	r3, #4
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fbff 	bl	800ca84 <RCCEx_PLL2_Config>
 800c286:	4603      	mov	r3, r0
 800c288:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c28a:	e00c      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3324      	adds	r3, #36	; 0x24
 800c290:	2102      	movs	r1, #2
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fca8 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c29c:	e003      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c2a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c2ac:	4b5e      	ldr	r3, [pc, #376]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2ba:	495b      	ldr	r1, [pc, #364]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	658b      	str	r3, [r1, #88]	; 0x58
 800c2c0:	e001      	b.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d033      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2dc:	d01c      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c2de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2e2:	d816      	bhi.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c2e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2e8:	d003      	beq.n	800c2f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c2ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2ee:	d007      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c2f0:	e00f      	b.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2f2:	4b4d      	ldr	r3, [pc, #308]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	4a4c      	ldr	r2, [pc, #304]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c2fe:	e00c      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3324      	adds	r3, #36	; 0x24
 800c304:	2101      	movs	r1, #1
 800c306:	4618      	mov	r0, r3
 800c308:	f000 fc6e 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c310:	e003      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c312:	2301      	movs	r3, #1
 800c314:	75fb      	strb	r3, [r7, #23]
      break;
 800c316:	e000      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c320:	4b41      	ldr	r3, [pc, #260]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c32e:	493e      	ldr	r1, [pc, #248]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c330:	4313      	orrs	r3, r2
 800c332:	654b      	str	r3, [r1, #84]	; 0x54
 800c334:	e001      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d029      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c352:	d007      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c354:	e00f      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c356:	4b34      	ldr	r3, [pc, #208]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35a:	4a33      	ldr	r2, [pc, #204]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c35c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c360:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c362:	e00b      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3304      	adds	r3, #4
 800c368:	2102      	movs	r1, #2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fb8a 	bl	800ca84 <RCCEx_PLL2_Config>
 800c370:	4603      	mov	r3, r0
 800c372:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c374:	e002      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	75fb      	strb	r3, [r7, #23]
      break;
 800c37a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c382:	4b29      	ldr	r3, [pc, #164]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c386:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c38e:	4926      	ldr	r1, [pc, #152]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c390:	4313      	orrs	r3, r2
 800c392:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c394:	e001      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00a      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3324      	adds	r3, #36	; 0x24
 800c3aa:	2102      	movs	r1, #2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fc1b 	bl	800cbe8 <RCCEx_PLL3_Config>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d033      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3d0:	d017      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c3d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3d6:	d811      	bhi.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c3d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3dc:	d013      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3e2:	d80b      	bhi.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d010      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800c3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ec:	d106      	bne.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ee:	4b0e      	ldr	r3, [pc, #56]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f2:	4a0d      	ldr	r2, [pc, #52]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c3f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c3fa:	e007      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c400:	e004      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c402:	bf00      	nop
 800c404:	e002      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c406:	bf00      	nop
 800c408:	e000      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800c40a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10c      	bne.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c412:	4b05      	ldr	r3, [pc, #20]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41e:	4902      	ldr	r1, [pc, #8]	; (800c428 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c420:	4313      	orrs	r3, r2
 800c422:	654b      	str	r3, [r1, #84]	; 0x54
 800c424:	e004      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800c426:	bf00      	nop
 800c428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d008      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c43c:	4b31      	ldr	r3, [pc, #196]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c440:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c448:	492e      	ldr	r1, [pc, #184]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c44a:	4313      	orrs	r3, r2
 800c44c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c45a:	4b2a      	ldr	r3, [pc, #168]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c468:	4926      	ldr	r1, [pc, #152]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d008      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c47a:	4b22      	ldr	r3, [pc, #136]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c486:	491f      	ldr	r1, [pc, #124]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c488:	4313      	orrs	r3, r2
 800c48a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00d      	beq.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c498:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	4a19      	ldr	r2, [pc, #100]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c49e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4a2:	6113      	str	r3, [r2, #16]
 800c4a4:	4b17      	ldr	r3, [pc, #92]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4a6:	691a      	ldr	r2, [r3, #16]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4ae:	4915      	ldr	r1, [pc, #84]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da08      	bge.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c4bc:	4b11      	ldr	r3, [pc, #68]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4c8:	490e      	ldr	r1, [pc, #56]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d009      	beq.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4e8:	4906      	ldr	r1, [pc, #24]	; (800c504 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c4ee:	7dbb      	ldrb	r3, [r7, #22]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	e000      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	58024400 	.word	0x58024400

0800c508 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c50c:	f7ff f85a 	bl	800b5c4 <HAL_RCC_GetHCLKFreq>
 800c510:	4602      	mov	r2, r0
 800c512:	4b06      	ldr	r3, [pc, #24]	; (800c52c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	091b      	lsrs	r3, r3, #4
 800c518:	f003 0307 	and.w	r3, r3, #7
 800c51c:	4904      	ldr	r1, [pc, #16]	; (800c530 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c51e:	5ccb      	ldrb	r3, [r1, r3]
 800c520:	f003 031f 	and.w	r3, r3, #31
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c528:	4618      	mov	r0, r3
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	58024400 	.word	0x58024400
 800c530:	0802fdf8 	.word	0x0802fdf8

0800c534 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c534:	b480      	push	{r7}
 800c536:	b089      	sub	sp, #36	; 0x24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c53c:	4ba1      	ldr	r3, [pc, #644]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	f003 0303 	and.w	r3, r3, #3
 800c544:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c546:	4b9f      	ldr	r3, [pc, #636]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54a:	0b1b      	lsrs	r3, r3, #12
 800c54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c550:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c552:	4b9c      	ldr	r3, [pc, #624]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c556:	091b      	lsrs	r3, r3, #4
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c55e:	4b99      	ldr	r3, [pc, #612]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c562:	08db      	lsrs	r3, r3, #3
 800c564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	fb02 f303 	mul.w	r3, r2, r3
 800c56e:	ee07 3a90 	vmov	s15, r3
 800c572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c576:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 8111 	beq.w	800c7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	2b02      	cmp	r3, #2
 800c586:	f000 8083 	beq.w	800c690 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	f200 80a1 	bhi.w	800c6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d056      	beq.n	800c64c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c59e:	e099      	b.n	800c6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5a0:	4b88      	ldr	r3, [pc, #544]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f003 0320 	and.w	r3, r3, #32
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d02d      	beq.n	800c608 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c5ac:	4b85      	ldr	r3, [pc, #532]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	08db      	lsrs	r3, r3, #3
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	4a84      	ldr	r2, [pc, #528]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	ee07 3a90 	vmov	s15, r3
 800c5c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	ee07 3a90 	vmov	s15, r3
 800c5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5d6:	4b7b      	ldr	r3, [pc, #492]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c602:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c606:	e087      	b.n	800c718 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c612:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c61a:	4b6a      	ldr	r3, [pc, #424]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c622:	ee07 3a90 	vmov	s15, r3
 800c626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c62e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c63e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c642:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c646:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c64a:	e065      	b.n	800c718 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c656:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c65a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c65e:	4b59      	ldr	r3, [pc, #356]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c66e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c672:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c67a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c67e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c68a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c68e:	e043      	b.n	800c718 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c69a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c69e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6a2:	4b48      	ldr	r3, [pc, #288]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6aa:	ee07 3a90 	vmov	s15, r3
 800c6ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6d2:	e021      	b.n	800c718 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6e6:	4b37      	ldr	r3, [pc, #220]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ee:	ee07 3a90 	vmov	s15, r3
 800c6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c712:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c716:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c718:	4b2a      	ldr	r3, [pc, #168]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	0a5b      	lsrs	r3, r3, #9
 800c71e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c722:	ee07 3a90 	vmov	s15, r3
 800c726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c72e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c732:	edd7 6a07 	vldr	s13, [r7, #28]
 800c736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c73e:	ee17 2a90 	vmov	r2, s15
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c746:	4b1f      	ldr	r3, [pc, #124]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74a:	0c1b      	lsrs	r3, r3, #16
 800c74c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c750:	ee07 3a90 	vmov	s15, r3
 800c754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c75c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c760:	edd7 6a07 	vldr	s13, [r7, #28]
 800c764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c76c:	ee17 2a90 	vmov	r2, s15
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c774:	4b13      	ldr	r3, [pc, #76]	; (800c7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	0e1b      	lsrs	r3, r3, #24
 800c77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77e:	ee07 3a90 	vmov	s15, r3
 800c782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c78a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c78e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79a:	ee17 2a90 	vmov	r2, s15
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7a2:	e008      	b.n	800c7b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	609a      	str	r2, [r3, #8]
}
 800c7b6:	bf00      	nop
 800c7b8:	3724      	adds	r7, #36	; 0x24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	58024400 	.word	0x58024400
 800c7c8:	03d09000 	.word	0x03d09000
 800c7cc:	46000000 	.word	0x46000000
 800c7d0:	4c742400 	.word	0x4c742400
 800c7d4:	4a742400 	.word	0x4a742400
 800c7d8:	4bbebc20 	.word	0x4bbebc20

0800c7dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b089      	sub	sp, #36	; 0x24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7e4:	4ba1      	ldr	r3, [pc, #644]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e8:	f003 0303 	and.w	r3, r3, #3
 800c7ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c7ee:	4b9f      	ldr	r3, [pc, #636]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f2:	0d1b      	lsrs	r3, r3, #20
 800c7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7fa:	4b9c      	ldr	r3, [pc, #624]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	f003 0301 	and.w	r3, r3, #1
 800c804:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c806:	4b99      	ldr	r3, [pc, #612]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80a:	08db      	lsrs	r3, r3, #3
 800c80c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	fb02 f303 	mul.w	r3, r2, r3
 800c816:	ee07 3a90 	vmov	s15, r3
 800c81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8111 	beq.w	800ca4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	f000 8083 	beq.w	800c938 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2b02      	cmp	r3, #2
 800c836:	f200 80a1 	bhi.w	800c97c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d056      	beq.n	800c8f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c846:	e099      	b.n	800c97c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c848:	4b88      	ldr	r3, [pc, #544]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0320 	and.w	r3, r3, #32
 800c850:	2b00      	cmp	r3, #0
 800c852:	d02d      	beq.n	800c8b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c854:	4b85      	ldr	r3, [pc, #532]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	08db      	lsrs	r3, r3, #3
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	4a84      	ldr	r2, [pc, #528]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
 800c864:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	ee07 3a90 	vmov	s15, r3
 800c86c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	ee07 3a90 	vmov	s15, r3
 800c876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87e:	4b7b      	ldr	r3, [pc, #492]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c886:	ee07 3a90 	vmov	s15, r3
 800c88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c892:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c8ae:	e087      	b.n	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8c2:	4b6a      	ldr	r3, [pc, #424]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8f2:	e065      	b.n	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c906:	4b59      	ldr	r3, [pc, #356]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c916:	ed97 6a03 	vldr	s12, [r7, #12]
 800c91a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c936:	e043      	b.n	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c942:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c94a:	4b48      	ldr	r3, [pc, #288]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c952:	ee07 3a90 	vmov	s15, r3
 800c956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c95a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c95e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c97a:	e021      	b.n	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c986:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c98e:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c996:	ee07 3a90 	vmov	s15, r3
 800c99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c9c0:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	0a5b      	lsrs	r3, r3, #9
 800c9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ca:	ee07 3a90 	vmov	s15, r3
 800c9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9e6:	ee17 2a90 	vmov	r2, s15
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c9ee:	4b1f      	ldr	r3, [pc, #124]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f2:	0c1b      	lsrs	r3, r3, #16
 800c9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f8:	ee07 3a90 	vmov	s15, r3
 800c9fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca14:	ee17 2a90 	vmov	r2, s15
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ca1c:	4b13      	ldr	r3, [pc, #76]	; (800ca6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca20:	0e1b      	lsrs	r3, r3, #24
 800ca22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca42:	ee17 2a90 	vmov	r2, s15
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca4a:	e008      	b.n	800ca5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	609a      	str	r2, [r3, #8]
}
 800ca5e:	bf00      	nop
 800ca60:	3724      	adds	r7, #36	; 0x24
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	58024400 	.word	0x58024400
 800ca70:	03d09000 	.word	0x03d09000
 800ca74:	46000000 	.word	0x46000000
 800ca78:	4c742400 	.word	0x4c742400
 800ca7c:	4a742400 	.word	0x4a742400
 800ca80:	4bbebc20 	.word	0x4bbebc20

0800ca84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ca92:	4b53      	ldr	r3, [pc, #332]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800ca94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca96:	f003 0303 	and.w	r3, r3, #3
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d101      	bne.n	800caa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e099      	b.n	800cbd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800caa2:	4b4f      	ldr	r3, [pc, #316]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a4e      	ldr	r2, [pc, #312]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800caa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800caac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caae:	f7f8 faf9 	bl	80050a4 <HAL_GetTick>
 800cab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cab4:	e008      	b.n	800cac8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cab6:	f7f8 faf5 	bl	80050a4 <HAL_GetTick>
 800caba:	4602      	mov	r2, r0
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d901      	bls.n	800cac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e086      	b.n	800cbd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cac8:	4b45      	ldr	r3, [pc, #276]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1f0      	bne.n	800cab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cad4:	4b42      	ldr	r3, [pc, #264]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	031b      	lsls	r3, r3, #12
 800cae2:	493f      	ldr	r1, [pc, #252]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cae4:	4313      	orrs	r3, r2
 800cae6:	628b      	str	r3, [r1, #40]	; 0x28
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	3b01      	subs	r3, #1
 800caee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	3b01      	subs	r3, #1
 800caf8:	025b      	lsls	r3, r3, #9
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	431a      	orrs	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	041b      	lsls	r3, r3, #16
 800cb06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	3b01      	subs	r3, #1
 800cb12:	061b      	lsls	r3, r3, #24
 800cb14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb18:	4931      	ldr	r1, [pc, #196]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cb1e:	4b30      	ldr	r3, [pc, #192]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	695b      	ldr	r3, [r3, #20]
 800cb2a:	492d      	ldr	r1, [pc, #180]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cb30:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb34:	f023 0220 	bic.w	r2, r3, #32
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	4928      	ldr	r1, [pc, #160]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cb42:	4b27      	ldr	r3, [pc, #156]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb46:	4a26      	ldr	r2, [pc, #152]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb48:	f023 0310 	bic.w	r3, r3, #16
 800cb4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cb4e:	4b24      	ldr	r3, [pc, #144]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb52:	4b24      	ldr	r3, [pc, #144]	; (800cbe4 <RCCEx_PLL2_Config+0x160>)
 800cb54:	4013      	ands	r3, r2
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	69d2      	ldr	r2, [r2, #28]
 800cb5a:	00d2      	lsls	r2, r2, #3
 800cb5c:	4920      	ldr	r1, [pc, #128]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cb62:	4b1f      	ldr	r3, [pc, #124]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb66:	4a1e      	ldr	r2, [pc, #120]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb68:	f043 0310 	orr.w	r3, r3, #16
 800cb6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cb74:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	4a19      	ldr	r2, [pc, #100]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb80:	e00f      	b.n	800cba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d106      	bne.n	800cb96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cb88:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8c:	4a14      	ldr	r2, [pc, #80]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cb94:	e005      	b.n	800cba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cb96:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	4a11      	ldr	r2, [pc, #68]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cb9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cba2:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a0e      	ldr	r2, [pc, #56]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cbac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbae:	f7f8 fa79 	bl	80050a4 <HAL_GetTick>
 800cbb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbb4:	e008      	b.n	800cbc8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cbb6:	f7f8 fa75 	bl	80050a4 <HAL_GetTick>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d901      	bls.n	800cbc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e006      	b.n	800cbd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cbc8:	4b05      	ldr	r3, [pc, #20]	; (800cbe0 <RCCEx_PLL2_Config+0x15c>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d0f0      	beq.n	800cbb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	58024400 	.word	0x58024400
 800cbe4:	ffff0007 	.word	0xffff0007

0800cbe8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbf6:	4b53      	ldr	r3, [pc, #332]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfa:	f003 0303 	and.w	r3, r3, #3
 800cbfe:	2b03      	cmp	r3, #3
 800cc00:	d101      	bne.n	800cc06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e099      	b.n	800cd3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cc06:	4b4f      	ldr	r3, [pc, #316]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a4e      	ldr	r2, [pc, #312]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc12:	f7f8 fa47 	bl	80050a4 <HAL_GetTick>
 800cc16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc18:	e008      	b.n	800cc2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc1a:	f7f8 fa43 	bl	80050a4 <HAL_GetTick>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d901      	bls.n	800cc2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e086      	b.n	800cd3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cc2c:	4b45      	ldr	r3, [pc, #276]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1f0      	bne.n	800cc1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cc38:	4b42      	ldr	r3, [pc, #264]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	051b      	lsls	r3, r3, #20
 800cc46:	493f      	ldr	r1, [pc, #252]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	628b      	str	r3, [r1, #40]	; 0x28
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	025b      	lsls	r3, r3, #9
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	431a      	orrs	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	041b      	lsls	r3, r3, #16
 800cc6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	061b      	lsls	r3, r3, #24
 800cc78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cc7c:	4931      	ldr	r1, [pc, #196]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cc82:	4b30      	ldr	r3, [pc, #192]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	492d      	ldr	r1, [pc, #180]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc90:	4313      	orrs	r3, r2
 800cc92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cc94:	4b2b      	ldr	r3, [pc, #172]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	4928      	ldr	r1, [pc, #160]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cca2:	4313      	orrs	r3, r2
 800cca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cca6:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	4a26      	ldr	r2, [pc, #152]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ccb2:	4b24      	ldr	r3, [pc, #144]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccb6:	4b24      	ldr	r3, [pc, #144]	; (800cd48 <RCCEx_PLL3_Config+0x160>)
 800ccb8:	4013      	ands	r3, r2
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	69d2      	ldr	r2, [r2, #28]
 800ccbe:	00d2      	lsls	r2, r2, #3
 800ccc0:	4920      	ldr	r1, [pc, #128]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ccc6:	4b1f      	ldr	r3, [pc, #124]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccca:	4a1e      	ldr	r2, [pc, #120]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d106      	bne.n	800cce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ccd8:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccdc:	4a19      	ldr	r2, [pc, #100]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cce4:	e00f      	b.n	800cd06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d106      	bne.n	800ccfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ccec:	4b15      	ldr	r3, [pc, #84]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf0:	4a14      	ldr	r2, [pc, #80]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ccf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ccf8:	e005      	b.n	800cd06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ccfa:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800ccfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfe:	4a11      	ldr	r2, [pc, #68]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cd00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cd06:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a0e      	ldr	r2, [pc, #56]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cd0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd12:	f7f8 f9c7 	bl	80050a4 <HAL_GetTick>
 800cd16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd18:	e008      	b.n	800cd2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cd1a:	f7f8 f9c3 	bl	80050a4 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d901      	bls.n	800cd2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e006      	b.n	800cd3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cd2c:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <RCCEx_PLL3_Config+0x15c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f0      	beq.n	800cd1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	58024400 	.word	0x58024400
 800cd48:	ffff0007 	.word	0xffff0007

0800cd4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e0f1      	b.n	800cf42 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a78      	ldr	r2, [pc, #480]	; (800cf4c <HAL_SPI_Init+0x200>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00f      	beq.n	800cd8e <HAL_SPI_Init+0x42>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a77      	ldr	r2, [pc, #476]	; (800cf50 <HAL_SPI_Init+0x204>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d00a      	beq.n	800cd8e <HAL_SPI_Init+0x42>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a75      	ldr	r2, [pc, #468]	; (800cf54 <HAL_SPI_Init+0x208>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d005      	beq.n	800cd8e <HAL_SPI_Init+0x42>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	2b0f      	cmp	r3, #15
 800cd88:	d901      	bls.n	800cd8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e0d9      	b.n	800cf42 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 f902 	bl	800df98 <SPI_GetPacketSize>
 800cd94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a6c      	ldr	r2, [pc, #432]	; (800cf4c <HAL_SPI_Init+0x200>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d00c      	beq.n	800cdba <HAL_SPI_Init+0x6e>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a6a      	ldr	r2, [pc, #424]	; (800cf50 <HAL_SPI_Init+0x204>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d007      	beq.n	800cdba <HAL_SPI_Init+0x6e>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a69      	ldr	r2, [pc, #420]	; (800cf54 <HAL_SPI_Init+0x208>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d002      	beq.n	800cdba <HAL_SPI_Init+0x6e>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b08      	cmp	r3, #8
 800cdb8:	d811      	bhi.n	800cdde <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cdbe:	4a63      	ldr	r2, [pc, #396]	; (800cf4c <HAL_SPI_Init+0x200>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d009      	beq.n	800cdd8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a61      	ldr	r2, [pc, #388]	; (800cf50 <HAL_SPI_Init+0x204>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d004      	beq.n	800cdd8 <HAL_SPI_Init+0x8c>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a60      	ldr	r2, [pc, #384]	; (800cf54 <HAL_SPI_Init+0x208>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d104      	bne.n	800cde2 <HAL_SPI_Init+0x96>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b10      	cmp	r3, #16
 800cddc:	d901      	bls.n	800cde2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e0af      	b.n	800cf42 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f7f6 fbfc 	bl	80035f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f022 0201 	bic.w	r2, r2, #1
 800ce12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ce1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	699b      	ldr	r3, [r3, #24]
 800ce24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce28:	d119      	bne.n	800ce5e <HAL_SPI_Init+0x112>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce32:	d103      	bne.n	800ce3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d008      	beq.n	800ce4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10c      	bne.n	800ce5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce4c:	d107      	bne.n	800ce5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	69da      	ldr	r2, [r3, #28]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce66:	431a      	orrs	r2, r3
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce70:	ea42 0103 	orr.w	r1, r2, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	430a      	orrs	r2, r1
 800ce7e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8e:	431a      	orrs	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	431a      	orrs	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	431a      	orrs	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	431a      	orrs	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceb2:	431a      	orrs	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	431a      	orrs	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cebe:	ea42 0103 	orr.w	r1, r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	430a      	orrs	r2, r1
 800cecc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d113      	bne.n	800cefe <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cee8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cefc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f022 0201 	bic.w	r2, r2, #1
 800cf0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	40013000 	.word	0x40013000
 800cf50:	40003800 	.word	0x40003800
 800cf54:	40003c00 	.word	0x40003c00

0800cf58 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	4613      	mov	r3, r2
 800cf64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf66:	2300      	movs	r3, #0
 800cf68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d101      	bne.n	800cf78 <HAL_SPI_Transmit_DMA+0x20>
 800cf74:	2302      	movs	r3, #2
 800cf76:	e12c      	b.n	800d1d2 <HAL_SPI_Transmit_DMA+0x27a>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d007      	beq.n	800cf9c <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	e11a      	b.n	800d1d2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <HAL_SPI_Transmit_DMA+0x50>
 800cfa2:	88fb      	ldrh	r3, [r7, #6]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d107      	bne.n	800cfb8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	e10c      	b.n	800d1d2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2203      	movs	r2, #3
 800cfbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	88fa      	ldrh	r2, [r7, #6]
 800cfd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	88fa      	ldrh	r2, [r7, #6]
 800cfda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d008:	d107      	bne.n	800d01a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d018:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	2b0f      	cmp	r3, #15
 800d020:	d905      	bls.n	800d02e <HAL_SPI_Transmit_DMA+0xd6>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d02c:	d10f      	bne.n	800d04e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d032:	2b07      	cmp	r3, #7
 800d034:	d913      	bls.n	800d05e <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d040:	d00d      	beq.n	800d05e <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d046:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d04c:	d007      	beq.n	800d05e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d05a:	7dfb      	ldrb	r3, [r7, #23]
 800d05c:	e0b9      	b.n	800d1d2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	2b07      	cmp	r3, #7
 800d064:	d820      	bhi.n	800d0a8 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d070:	d109      	bne.n	800d086 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d078:	b29b      	uxth	r3, r3
 800d07a:	3301      	adds	r3, #1
 800d07c:	105b      	asrs	r3, r3, #1
 800d07e:	b29a      	uxth	r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d090:	d11e      	bne.n	800d0d0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d098:	b29b      	uxth	r3, r3
 800d09a:	3303      	adds	r3, #3
 800d09c:	109b      	asrs	r3, r3, #2
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d0a6:	e013      	b.n	800d0d0 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	2b0f      	cmp	r3, #15
 800d0ae:	d80f      	bhi.n	800d0d0 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0ba:	d109      	bne.n	800d0d0 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	105b      	asrs	r3, r3, #1
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0d4:	4a41      	ldr	r2, [pc, #260]	; (800d1dc <HAL_SPI_Transmit_DMA+0x284>)
 800d0d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0dc:	4a40      	ldr	r2, [pc, #256]	; (800d1e0 <HAL_SPI_Transmit_DMA+0x288>)
 800d0de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0e4:	4a3f      	ldr	r2, [pc, #252]	; (800d1e4 <HAL_SPI_Transmit_DMA+0x28c>)
 800d0e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	689a      	ldr	r2, [r3, #8]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0fe:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d108:	4619      	mov	r1, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3320      	adds	r3, #32
 800d110:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d118:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d11a:	f7f8 fc6b 	bl	80059f4 <HAL_DMA_Start_IT>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d013      	beq.n	800d14c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d12a:	f043 0210 	orr.w	r2, r3, #16
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800d144:	2301      	movs	r3, #1
 800d146:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d148:	7dfb      	ldrb	r3, [r7, #23]
 800d14a:	e042      	b.n	800d1d2 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d156:	d108      	bne.n	800d16a <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	6859      	ldr	r1, [r3, #4]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	4b21      	ldr	r3, [pc, #132]	; (800d1e8 <HAL_SPI_Transmit_DMA+0x290>)
 800d164:	400b      	ands	r3, r1
 800d166:	6053      	str	r3, [r2, #4]
 800d168:	e009      	b.n	800d17e <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	4b1d      	ldr	r3, [pc, #116]	; (800d1e8 <HAL_SPI_Transmit_DMA+0x290>)
 800d172:	4013      	ands	r3, r2
 800d174:	88f9      	ldrh	r1, [r7, #6]
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	6812      	ldr	r2, [r2, #0]
 800d17a:	430b      	orrs	r3, r1
 800d17c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	689a      	ldr	r2, [r3, #8]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d18c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	691a      	ldr	r2, [r3, #16]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800d19c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f042 0201 	orr.w	r2, r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1b6:	d107      	bne.n	800d1c8 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1c6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800d1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3718      	adds	r7, #24
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	0800dd8b 	.word	0x0800dd8b
 800d1e0:	0800dcb9 	.word	0x0800dcb9
 800d1e4:	0800dddf 	.word	0x0800dddf
 800d1e8:	ffff0000 	.word	0xffff0000

0800d1ec <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d110      	bne.n	800d228 <HAL_SPI_Receive_DMA+0x3c>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d20e:	d10b      	bne.n	800d228 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2204      	movs	r2, #4
 800d214:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f940 	bl	800d4a4 <HAL_SPI_TransmitReceive_DMA>
 800d224:	4603      	mov	r3, r0
 800d226:	e130      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d101      	bne.n	800d236 <HAL_SPI_Receive_DMA+0x4a>
 800d232:	2302      	movs	r3, #2
 800d234:	e129      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d244:	b2db      	uxtb	r3, r3
 800d246:	2b01      	cmp	r3, #1
 800d248:	d007      	beq.n	800d25a <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 800d24a:	2302      	movs	r3, #2
 800d24c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	e117      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <HAL_SPI_Receive_DMA+0x7a>
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d272:	7dfb      	ldrb	r3, [r7, #23]
 800d274:	e109      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2204      	movs	r2, #4
 800d27a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2200      	movs	r2, #0
 800d282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	68ba      	ldr	r2, [r7, #8]
 800d28a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	88fa      	ldrh	r2, [r7, #6]
 800d290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	88fa      	ldrh	r2, [r7, #6]
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d2c0:	d107      	bne.n	800d2d2 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2d0:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	2b0f      	cmp	r3, #15
 800d2d8:	d905      	bls.n	800d2e6 <HAL_SPI_Receive_DMA+0xfa>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2e4:	d10f      	bne.n	800d306 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d2ea:	2b07      	cmp	r3, #7
 800d2ec:	d913      	bls.n	800d316 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2f8:	d00d      	beq.n	800d316 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2fe:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d304:	d007      	beq.n	800d316 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	e0b9      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	689a      	ldr	r2, [r3, #8]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d324:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	2b07      	cmp	r3, #7
 800d32c:	d820      	bhi.n	800d370 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d338:	d109      	bne.n	800d34e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d340:	b29b      	uxth	r3, r3
 800d342:	3301      	adds	r3, #1
 800d344:	105b      	asrs	r3, r3, #1
 800d346:	b29a      	uxth	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d358:	d11e      	bne.n	800d398 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d360:	b29b      	uxth	r3, r3
 800d362:	3303      	adds	r3, #3
 800d364:	109b      	asrs	r3, r3, #2
 800d366:	b29a      	uxth	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d36e:	e013      	b.n	800d398 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b0f      	cmp	r3, #15
 800d376:	d80f      	bhi.n	800d398 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d382:	d109      	bne.n	800d398 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	3301      	adds	r3, #1
 800d38e:	105b      	asrs	r3, r3, #1
 800d390:	b29a      	uxth	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d39c:	4a3d      	ldr	r2, [pc, #244]	; (800d494 <HAL_SPI_Receive_DMA+0x2a8>)
 800d39e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3a4:	4a3c      	ldr	r2, [pc, #240]	; (800d498 <HAL_SPI_Receive_DMA+0x2ac>)
 800d3a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ac:	4a3b      	ldr	r2, [pc, #236]	; (800d49c <HAL_SPI_Receive_DMA+0x2b0>)
 800d3ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3330      	adds	r3, #48	; 0x30
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d3d2:	f7f8 fb0f 	bl	80059f4 <HAL_DMA_Start_IT>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d013      	beq.n	800d404 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3e2:	f043 0210 	orr.w	r2, r3, #16
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	e042      	b.n	800d48a <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d40e:	d108      	bne.n	800d422 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6859      	ldr	r1, [r3, #4]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	4b21      	ldr	r3, [pc, #132]	; (800d4a0 <HAL_SPI_Receive_DMA+0x2b4>)
 800d41c:	400b      	ands	r3, r1
 800d41e:	6053      	str	r3, [r2, #4]
 800d420:	e009      	b.n	800d436 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685a      	ldr	r2, [r3, #4]
 800d428:	4b1d      	ldr	r3, [pc, #116]	; (800d4a0 <HAL_SPI_Receive_DMA+0x2b4>)
 800d42a:	4013      	ands	r3, r2
 800d42c:	88f9      	ldrh	r1, [r7, #6]
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	6812      	ldr	r2, [r2, #0]
 800d432:	430b      	orrs	r3, r1
 800d434:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d444:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	691a      	ldr	r2, [r3, #16]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800d454:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f042 0201 	orr.w	r2, r2, #1
 800d464:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d46e:	d107      	bne.n	800d480 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d47e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	0800dda7 	.word	0x0800dda7
 800d498:	0800dcff 	.word	0x0800dcff
 800d49c:	0800dddf 	.word	0x0800dddf
 800d4a0:	ffff0000 	.word	0xffff0000

0800d4a4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d101      	bne.n	800d4c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	e1b4      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d4d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d4da:	7dbb      	ldrb	r3, [r7, #22]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d012      	beq.n	800d506 <HAL_SPI_TransmitReceive_DMA+0x62>
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4e6:	d106      	bne.n	800d4f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d102      	bne.n	800d4f6 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d4f0:	7dbb      	ldrb	r3, [r7, #22]
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	d007      	beq.n	800d506 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d502:	7dfb      	ldrb	r3, [r7, #23]
 800d504:	e193      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d005      	beq.n	800d518 <HAL_SPI_TransmitReceive_DMA+0x74>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <HAL_SPI_TransmitReceive_DMA+0x74>
 800d512:	887b      	ldrh	r3, [r7, #2]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d107      	bne.n	800d528 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d524:	7dfb      	ldrb	r3, [r7, #23]
 800d526:	e182      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b04      	cmp	r3, #4
 800d532:	d003      	beq.n	800d53c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2205      	movs	r2, #5
 800d538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	887a      	ldrh	r2, [r7, #2]
 800d54e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	887a      	ldrh	r2, [r7, #2]
 800d556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	887a      	ldrh	r2, [r7, #2]
 800d564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	887a      	ldrh	r2, [r7, #2]
 800d56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	689a      	ldr	r2, [r3, #8]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d58a:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	2b0f      	cmp	r3, #15
 800d592:	d905      	bls.n	800d5a0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d59e:	d10f      	bne.n	800d5c0 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d5a4:	2b07      	cmp	r3, #7
 800d5a6:	d913      	bls.n	800d5d0 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5ac:	699b      	ldr	r3, [r3, #24]
 800d5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5b2:	d00d      	beq.n	800d5d0 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d5ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5be:	d007      	beq.n	800d5d0 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
 800d5ce:	e12e      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	2b07      	cmp	r3, #7
 800d5d6:	d840      	bhi.n	800d65a <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5e2:	d109      	bne.n	800d5f8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	3301      	adds	r3, #1
 800d5ee:	105b      	asrs	r3, r3, #1
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d602:	d109      	bne.n	800d618 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	3303      	adds	r3, #3
 800d60e:	109b      	asrs	r3, r3, #2
 800d610:	b29a      	uxth	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d622:	d109      	bne.n	800d638 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	3301      	adds	r3, #1
 800d62e:	105b      	asrs	r3, r3, #1
 800d630:	b29a      	uxth	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d642:	d12e      	bne.n	800d6a2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	3303      	adds	r3, #3
 800d64e:	109b      	asrs	r3, r3, #2
 800d650:	b29a      	uxth	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d658:	e023      	b.n	800d6a2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	2b0f      	cmp	r3, #15
 800d660:	d81f      	bhi.n	800d6a2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d66c:	d109      	bne.n	800d682 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d674:	b29b      	uxth	r3, r3
 800d676:	3301      	adds	r3, #1
 800d678:	105b      	asrs	r3, r3, #1
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d68c:	d109      	bne.n	800d6a2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d694:	b29b      	uxth	r3, r3
 800d696:	3301      	adds	r3, #1
 800d698:	105b      	asrs	r3, r3, #1
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	d108      	bne.n	800d6c0 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b2:	4a61      	ldr	r2, [pc, #388]	; (800d838 <HAL_SPI_TransmitReceive_DMA+0x394>)
 800d6b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ba:	4a60      	ldr	r2, [pc, #384]	; (800d83c <HAL_SPI_TransmitReceive_DMA+0x398>)
 800d6bc:	63da      	str	r2, [r3, #60]	; 0x3c
 800d6be:	e007      	b.n	800d6d0 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c4:	4a5e      	ldr	r2, [pc, #376]	; (800d840 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 800d6c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6cc:	4a5d      	ldr	r2, [pc, #372]	; (800d844 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 800d6ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6d4:	4a5c      	ldr	r2, [pc, #368]	; (800d848 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 800d6d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6dc:	2200      	movs	r2, #0
 800d6de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3330      	adds	r3, #48	; 0x30
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d6fa:	f7f8 f97b 	bl	80059f4 <HAL_DMA_Start_IT>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d013      	beq.n	800d72c <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d70a:	f043 0210 	orr.w	r2, r3, #16
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	e080      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689a      	ldr	r2, [r3, #8]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d73a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d740:	2200      	movs	r2, #0
 800d742:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d748:	2200      	movs	r2, #0
 800d74a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d750:	2200      	movs	r2, #0
 800d752:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d758:	2200      	movs	r2, #0
 800d75a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d764:	4619      	mov	r1, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	3320      	adds	r3, #32
 800d76c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d774:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800d776:	f7f8 f93d 	bl	80059f4 <HAL_DMA_Start_IT>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d013      	beq.n	800d7a8 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d786:	f043 0210 	orr.w	r2, r3, #16
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800d7a4:	7dfb      	ldrb	r3, [r7, #23]
 800d7a6:	e042      	b.n	800d82e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ac:	69db      	ldr	r3, [r3, #28]
 800d7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b2:	d108      	bne.n	800d7c6 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6859      	ldr	r1, [r3, #4]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	4b23      	ldr	r3, [pc, #140]	; (800d84c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800d7c0:	400b      	ands	r3, r1
 800d7c2:	6053      	str	r3, [r2, #4]
 800d7c4:	e009      	b.n	800d7da <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	4b1f      	ldr	r3, [pc, #124]	; (800d84c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	8879      	ldrh	r1, [r7, #2]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	6812      	ldr	r2, [r2, #0]
 800d7d6:	430b      	orrs	r3, r1
 800d7d8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	689a      	ldr	r2, [r3, #8]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7e8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	691a      	ldr	r2, [r3, #16]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800d7f8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f042 0201 	orr.w	r2, r2, #1
 800d808:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d812:	d107      	bne.n	800d824 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d822:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	0800dda7 	.word	0x0800dda7
 800d83c:	0800dcff 	.word	0x0800dcff
 800d840:	0800ddc3 	.word	0x0800ddc3
 800d844:	0800dd45 	.word	0x0800dd45
 800d848:	0800dddf 	.word	0x0800dddf
 800d84c:	ffff0000 	.word	0xffff0000

0800d850 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800d868:	6a3a      	ldr	r2, [r7, #32]
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	4013      	ands	r3, r2
 800d86e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800d878:	2300      	movs	r3, #0
 800d87a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d882:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3330      	adds	r3, #48	; 0x30
 800d88a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d113      	bne.n	800d8be <HAL_SPI_IRQHandler+0x6e>
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f003 0320 	and.w	r3, r3, #32
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10e      	bne.n	800d8be <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d009      	beq.n	800d8be <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	4798      	blx	r3
    handled = 1UL;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10f      	bne.n	800d8e8 <HAL_SPI_IRQHandler+0x98>
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00a      	beq.n	800d8e8 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d105      	bne.n	800d8e8 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	4798      	blx	r3
    handled = 1UL;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	f003 0320 	and.w	r3, r3, #32
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10f      	bne.n	800d912 <HAL_SPI_IRQHandler+0xc2>
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	f003 0302 	and.w	r3, r3, #2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d902:	2b00      	cmp	r3, #0
 800d904:	d105      	bne.n	800d912 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	4798      	blx	r3
    handled = 1UL;
 800d90e:	2301      	movs	r3, #1
 800d910:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d914:	2b00      	cmp	r3, #0
 800d916:	f040 816f 	bne.w	800dbf8 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	f003 0308 	and.w	r3, r3, #8
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 80a0 	beq.w	800da66 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	699a      	ldr	r2, [r3, #24]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f042 0208 	orr.w	r2, r2, #8
 800d934:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	699a      	ldr	r2, [r3, #24]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f042 0210 	orr.w	r2, r2, #16
 800d944:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	699a      	ldr	r2, [r3, #24]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d954:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	691a      	ldr	r2, [r3, #16]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0208 	bic.w	r2, r2, #8
 800d964:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00f      	beq.n	800d990 <HAL_SPI_IRQHandler+0x140>
 800d970:	7cfb      	ldrb	r3, [r7, #19]
 800d972:	2b04      	cmp	r3, #4
 800d974:	d004      	beq.n	800d980 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d97a:	69db      	ldr	r3, [r3, #28]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d007      	beq.n	800d990 <HAL_SPI_IRQHandler+0x140>
 800d980:	7cfb      	ldrb	r3, [r7, #19]
 800d982:	2b03      	cmp	r3, #3
 800d984:	d059      	beq.n	800da3a <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d98a:	69db      	ldr	r3, [r3, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d154      	bne.n	800da3a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d13d      	bne.n	800da1a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800d99e:	e036      	b.n	800da0e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	2b0f      	cmp	r3, #15
 800d9a6:	d90b      	bls.n	800d9c0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9b2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b8:	1d1a      	adds	r2, r3, #4
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	665a      	str	r2, [r3, #100]	; 0x64
 800d9be:	e01d      	b.n	800d9fc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	2b07      	cmp	r3, #7
 800d9c6:	d90b      	bls.n	800d9e0 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	8812      	ldrh	r2, [r2, #0]
 800d9d0:	b292      	uxth	r2, r2
 800d9d2:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9d8:	1c9a      	adds	r2, r3, #2
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	665a      	str	r2, [r3, #100]	; 0x64
 800d9de:	e00d      	b.n	800d9fc <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	b2d2      	uxtb	r2, r2
 800d9f0:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f6:	1c5a      	adds	r2, r3, #1
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da02:	b29b      	uxth	r3, r3
 800da04:	3b01      	subs	r3, #1
 800da06:	b29a      	uxth	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da14:	b29b      	uxth	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1c2      	bne.n	800d9a0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fa1c 	bl	800de58 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d003      	beq.n	800da3a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f928 	bl	800dc88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800da38:	e0e3      	b.n	800dc02 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800da3a:	7cfb      	ldrb	r3, [r7, #19]
 800da3c:	2b05      	cmp	r3, #5
 800da3e:	d103      	bne.n	800da48 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f8f9 	bl	800dc38 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800da46:	e0d9      	b.n	800dbfc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800da48:	7cfb      	ldrb	r3, [r7, #19]
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d103      	bne.n	800da56 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 f8e8 	bl	800dc24 <HAL_SPI_RxCpltCallback>
    return;
 800da54:	e0d2      	b.n	800dbfc <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800da56:	7cfb      	ldrb	r3, [r7, #19]
 800da58:	2b03      	cmp	r3, #3
 800da5a:	f040 80cf 	bne.w	800dbfc <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f8d6 	bl	800dc10 <HAL_SPI_TxCpltCallback>
    return;
 800da64:	e0ca      	b.n	800dbfc <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d00d      	beq.n	800da8c <HAL_SPI_IRQHandler+0x23c>
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	f003 0308 	and.w	r3, r3, #8
 800da76:	2b00      	cmp	r3, #0
 800da78:	d008      	beq.n	800da8c <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	699a      	ldr	r2, [r3, #24]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da88:	619a      	str	r2, [r3, #24]

    return;
 800da8a:	e0ba      	b.n	800dc02 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800da8c:	69bb      	ldr	r3, [r7, #24]
 800da8e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800da92:	2b00      	cmp	r3, #0
 800da94:	f000 80b5 	beq.w	800dc02 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00f      	beq.n	800dac2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daa8:	f043 0204 	orr.w	r2, r3, #4
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	699a      	ldr	r2, [r3, #24]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dac0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00f      	beq.n	800daec <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dad2:	f043 0201 	orr.w	r2, r3, #1
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	699a      	ldr	r2, [r3, #24]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00f      	beq.n	800db16 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dafc:	f043 0208 	orr.w	r2, r3, #8
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699a      	ldr	r2, [r3, #24]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00f      	beq.n	800db40 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699a      	ldr	r2, [r3, #24]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0220 	orr.w	r2, r2, #32
 800db3e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db46:	2b00      	cmp	r3, #0
 800db48:	d05a      	beq.n	800dc00 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0201 	bic.w	r2, r2, #1
 800db58:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	6919      	ldr	r1, [r3, #16]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	4b28      	ldr	r3, [pc, #160]	; (800dc08 <HAL_SPI_IRQHandler+0x3b8>)
 800db66:	400b      	ands	r3, r1
 800db68:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800db70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800db74:	d138      	bne.n	800dbe8 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689a      	ldr	r2, [r3, #8]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800db84:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d013      	beq.n	800dbb6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db92:	4a1e      	ldr	r2, [pc, #120]	; (800dc0c <HAL_SPI_IRQHandler+0x3bc>)
 800db94:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7f8 fcb2 	bl	8006504 <HAL_DMA_Abort_IT>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d007      	beq.n	800dbb6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d020      	beq.n	800dc00 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbc2:	4a12      	ldr	r2, [pc, #72]	; (800dc0c <HAL_SPI_IRQHandler+0x3bc>)
 800dbc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f8 fc9a 	bl	8006504 <HAL_DMA_Abort_IT>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d014      	beq.n	800dc00 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dbe6:	e00b      	b.n	800dc00 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f849 	bl	800dc88 <HAL_SPI_ErrorCallback>
    return;
 800dbf6:	e003      	b.n	800dc00 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800dbf8:	bf00      	nop
 800dbfa:	e002      	b.n	800dc02 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800dbfc:	bf00      	nop
 800dbfe:	e000      	b.n	800dc02 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800dc00:	bf00      	nop
  }
}
 800dc02:	3728      	adds	r7, #40	; 0x28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	fffffc94 	.word	0xfffffc94
 800dc0c:	0800de25 	.word	0x0800de25

0800dc10 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800dc2c:	bf00      	nop
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800dc68:	bf00      	nop
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcaa:	b2db      	uxtb	r3, r3
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	2b07      	cmp	r3, #7
 800dcd0:	d011      	beq.n	800dcf6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcd6:	69db      	ldr	r3, [r3, #28]
 800dcd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcdc:	d103      	bne.n	800dce6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f7ff ff96 	bl	800dc10 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800dce4:	e007      	b.n	800dcf6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	691a      	ldr	r2, [r3, #16]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f042 0208 	orr.w	r2, r2, #8
 800dcf4:	611a      	str	r2, [r3, #16]
}
 800dcf6:	bf00      	nop
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b07      	cmp	r3, #7
 800dd16:	d011      	beq.n	800dd3c <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd1c:	69db      	ldr	r3, [r3, #28]
 800dd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd22:	d103      	bne.n	800dd2c <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f7ff ff7d 	bl	800dc24 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800dd2a:	e007      	b.n	800dd3c <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	691a      	ldr	r2, [r3, #16]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f042 0208 	orr.w	r2, r2, #8
 800dd3a:	611a      	str	r2, [r3, #16]
}
 800dd3c:	bf00      	nop
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd50:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b07      	cmp	r3, #7
 800dd5c:	d011      	beq.n	800dd82 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd62:	69db      	ldr	r3, [r3, #28]
 800dd64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd68:	d103      	bne.n	800dd72 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7ff ff64 	bl	800dc38 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800dd70:	e007      	b.n	800dd82 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	691a      	ldr	r2, [r3, #16]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f042 0208 	orr.w	r2, r2, #8
 800dd80:	611a      	str	r2, [r3, #16]
}
 800dd82:	bf00      	nop
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f7ff ff57 	bl	800dc4c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff ff53 	bl	800dc60 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ddba:	bf00      	nop
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddc2:	b580      	push	{r7, lr}
 800ddc4:	b084      	sub	sp, #16
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddce:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f7ff ff4f 	bl	800dc74 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ddd6:	bf00      	nop
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7f9 fd07 	bl	8007800 <HAL_DMA_GetError>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b02      	cmp	r3, #2
 800ddf6:	d011      	beq.n	800de1c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f82d 	bl	800de58 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de04:	f043 0210 	orr.w	r2, r3, #16
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7ff ff36 	bl	800dc88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800de1c:	bf00      	nop
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff ff1c 	bl	800dc88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800de50:	bf00      	nop
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	699a      	ldr	r2, [r3, #24]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f042 0208 	orr.w	r2, r2, #8
 800de76:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	699a      	ldr	r2, [r3, #24]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f042 0210 	orr.w	r2, r2, #16
 800de86:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f022 0201 	bic.w	r2, r2, #1
 800de96:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6919      	ldr	r1, [r3, #16]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	4b3c      	ldr	r3, [pc, #240]	; (800df94 <SPI_CloseTransfer+0x13c>)
 800dea4:	400b      	ands	r3, r1
 800dea6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800deb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b04      	cmp	r3, #4
 800dec2:	d014      	beq.n	800deee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f003 0320 	and.w	r3, r3, #32
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00f      	beq.n	800deee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ded4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	699a      	ldr	r2, [r3, #24]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f042 0220 	orr.w	r2, r2, #32
 800deec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b03      	cmp	r3, #3
 800def8:	d014      	beq.n	800df24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00f      	beq.n	800df24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0a:	f043 0204 	orr.w	r2, r3, #4
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	699a      	ldr	r2, [r3, #24]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00f      	beq.n	800df4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	f043 0201 	orr.w	r2, r3, #1
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	699a      	ldr	r2, [r3, #24]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00f      	beq.n	800df78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df5e:	f043 0208 	orr.w	r2, r3, #8
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	699a      	ldr	r2, [r3, #24]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800df88:	bf00      	nop
 800df8a:	3714      	adds	r7, #20
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr
 800df94:	fffffc90 	.word	0xfffffc90

0800df98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa4:	095b      	lsrs	r3, r3, #5
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	3307      	adds	r3, #7
 800dfb6:	08db      	lsrs	r3, r3, #3
 800dfb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	fb02 f303 	mul.w	r3, r2, r3
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3714      	adds	r7, #20
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d101      	bne.n	800dfe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e049      	b.n	800e074 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d106      	bne.n	800dffa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7f5 fe61 	bl	8003cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2202      	movs	r2, #2
 800dffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	3304      	adds	r3, #4
 800e00a:	4619      	mov	r1, r3
 800e00c:	4610      	mov	r0, r2
 800e00e:	f000 faed 	bl	800e5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d001      	beq.n	800e094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e090:	2301      	movs	r3, #1
 800e092:	e054      	b.n	800e13e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2202      	movs	r2, #2
 800e098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68da      	ldr	r2, [r3, #12]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f042 0201 	orr.w	r2, r2, #1
 800e0aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a26      	ldr	r2, [pc, #152]	; (800e14c <HAL_TIM_Base_Start_IT+0xd0>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d022      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0be:	d01d      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a22      	ldr	r2, [pc, #136]	; (800e150 <HAL_TIM_Base_Start_IT+0xd4>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d018      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a21      	ldr	r2, [pc, #132]	; (800e154 <HAL_TIM_Base_Start_IT+0xd8>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d013      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a1f      	ldr	r2, [pc, #124]	; (800e158 <HAL_TIM_Base_Start_IT+0xdc>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d00e      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a1e      	ldr	r2, [pc, #120]	; (800e15c <HAL_TIM_Base_Start_IT+0xe0>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d009      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a1c      	ldr	r2, [pc, #112]	; (800e160 <HAL_TIM_Base_Start_IT+0xe4>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d004      	beq.n	800e0fc <HAL_TIM_Base_Start_IT+0x80>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a1b      	ldr	r2, [pc, #108]	; (800e164 <HAL_TIM_Base_Start_IT+0xe8>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d115      	bne.n	800e128 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	689a      	ldr	r2, [r3, #8]
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <HAL_TIM_Base_Start_IT+0xec>)
 800e104:	4013      	ands	r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2b06      	cmp	r3, #6
 800e10c:	d015      	beq.n	800e13a <HAL_TIM_Base_Start_IT+0xbe>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e114:	d011      	beq.n	800e13a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f042 0201 	orr.w	r2, r2, #1
 800e124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e126:	e008      	b.n	800e13a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f042 0201 	orr.w	r2, r2, #1
 800e136:	601a      	str	r2, [r3, #0]
 800e138:	e000      	b.n	800e13c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e13a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	40010000 	.word	0x40010000
 800e150:	40000400 	.word	0x40000400
 800e154:	40000800 	.word	0x40000800
 800e158:	40000c00 	.word	0x40000c00
 800e15c:	40010400 	.word	0x40010400
 800e160:	40001800 	.word	0x40001800
 800e164:	40014000 	.word	0x40014000
 800e168:	00010007 	.word	0x00010007

0800e16c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	f003 0302 	and.w	r3, r3, #2
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d122      	bne.n	800e1c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d11b      	bne.n	800e1c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f06f 0202 	mvn.w	r2, #2
 800e198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	699b      	ldr	r3, [r3, #24]
 800e1a6:	f003 0303 	and.w	r3, r3, #3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d003      	beq.n	800e1b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f9fe 	bl	800e5b0 <HAL_TIM_IC_CaptureCallback>
 800e1b4:	e005      	b.n	800e1c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f9f0 	bl	800e59c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fa01 	bl	800e5c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	f003 0304 	and.w	r3, r3, #4
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	d122      	bne.n	800e21c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f003 0304 	and.w	r3, r3, #4
 800e1e0:	2b04      	cmp	r3, #4
 800e1e2:	d11b      	bne.n	800e21c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f06f 0204 	mvn.w	r2, #4
 800e1ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2202      	movs	r2, #2
 800e1f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 f9d4 	bl	800e5b0 <HAL_TIM_IC_CaptureCallback>
 800e208:	e005      	b.n	800e216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f9c6 	bl	800e59c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f9d7 	bl	800e5c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2200      	movs	r2, #0
 800e21a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	f003 0308 	and.w	r3, r3, #8
 800e226:	2b08      	cmp	r3, #8
 800e228:	d122      	bne.n	800e270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	f003 0308 	and.w	r3, r3, #8
 800e234:	2b08      	cmp	r3, #8
 800e236:	d11b      	bne.n	800e270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f06f 0208 	mvn.w	r2, #8
 800e240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2204      	movs	r2, #4
 800e246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	69db      	ldr	r3, [r3, #28]
 800e24e:	f003 0303 	and.w	r3, r3, #3
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 f9aa 	bl	800e5b0 <HAL_TIM_IC_CaptureCallback>
 800e25c:	e005      	b.n	800e26a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f99c 	bl	800e59c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 f9ad 	bl	800e5c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	f003 0310 	and.w	r3, r3, #16
 800e27a:	2b10      	cmp	r3, #16
 800e27c:	d122      	bne.n	800e2c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	f003 0310 	and.w	r3, r3, #16
 800e288:	2b10      	cmp	r3, #16
 800e28a:	d11b      	bne.n	800e2c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f06f 0210 	mvn.w	r2, #16
 800e294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2208      	movs	r2, #8
 800e29a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d003      	beq.n	800e2b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f980 	bl	800e5b0 <HAL_TIM_IC_CaptureCallback>
 800e2b0:	e005      	b.n	800e2be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f972 	bl	800e59c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f983 	bl	800e5c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	691b      	ldr	r3, [r3, #16]
 800e2ca:	f003 0301 	and.w	r3, r3, #1
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d10e      	bne.n	800e2f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	f003 0301 	and.w	r3, r3, #1
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d107      	bne.n	800e2f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f06f 0201 	mvn.w	r2, #1
 800e2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7f5 f8fa 	bl	80034e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2fa:	2b80      	cmp	r3, #128	; 0x80
 800e2fc:	d10e      	bne.n	800e31c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e308:	2b80      	cmp	r3, #128	; 0x80
 800e30a:	d107      	bne.n	800e31c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fb38 	bl	800e98c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e32a:	d10e      	bne.n	800e34a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e336:	2b80      	cmp	r3, #128	; 0x80
 800e338:	d107      	bne.n	800e34a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fb2b 	bl	800e9a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e354:	2b40      	cmp	r3, #64	; 0x40
 800e356:	d10e      	bne.n	800e376 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e362:	2b40      	cmp	r3, #64	; 0x40
 800e364:	d107      	bne.n	800e376 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e36e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f931 	bl	800e5d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	f003 0320 	and.w	r3, r3, #32
 800e380:	2b20      	cmp	r3, #32
 800e382:	d10e      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f003 0320 	and.w	r3, r3, #32
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d107      	bne.n	800e3a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f06f 0220 	mvn.w	r2, #32
 800e39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 faeb 	bl	800e978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3a2:	bf00      	nop
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <HAL_TIM_ConfigClockSource+0x1c>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	e0dc      	b.n	800e582 <HAL_TIM_ConfigClockSource+0x1d6>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	4b6a      	ldr	r3, [pc, #424]	; (800e58c <HAL_TIM_ConfigClockSource+0x1e0>)
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e3ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4a64      	ldr	r2, [pc, #400]	; (800e590 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e3fe:	4293      	cmp	r3, r2
 800e400:	f000 80a9 	beq.w	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e404:	4a62      	ldr	r2, [pc, #392]	; (800e590 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e406:	4293      	cmp	r3, r2
 800e408:	f200 80ae 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e40c:	4a61      	ldr	r2, [pc, #388]	; (800e594 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	f000 80a1 	beq.w	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e414:	4a5f      	ldr	r2, [pc, #380]	; (800e594 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e416:	4293      	cmp	r3, r2
 800e418:	f200 80a6 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e41c:	4a5e      	ldr	r2, [pc, #376]	; (800e598 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	f000 8099 	beq.w	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e424:	4a5c      	ldr	r2, [pc, #368]	; (800e598 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e426:	4293      	cmp	r3, r2
 800e428:	f200 809e 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e42c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e430:	f000 8091 	beq.w	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e434:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e438:	f200 8096 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e43c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e440:	f000 8089 	beq.w	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e448:	f200 808e 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e450:	d03e      	beq.n	800e4d0 <HAL_TIM_ConfigClockSource+0x124>
 800e452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e456:	f200 8087 	bhi.w	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e45e:	f000 8086 	beq.w	800e56e <HAL_TIM_ConfigClockSource+0x1c2>
 800e462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e466:	d87f      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e468:	2b70      	cmp	r3, #112	; 0x70
 800e46a:	d01a      	beq.n	800e4a2 <HAL_TIM_ConfigClockSource+0xf6>
 800e46c:	2b70      	cmp	r3, #112	; 0x70
 800e46e:	d87b      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e470:	2b60      	cmp	r3, #96	; 0x60
 800e472:	d050      	beq.n	800e516 <HAL_TIM_ConfigClockSource+0x16a>
 800e474:	2b60      	cmp	r3, #96	; 0x60
 800e476:	d877      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e478:	2b50      	cmp	r3, #80	; 0x50
 800e47a:	d03c      	beq.n	800e4f6 <HAL_TIM_ConfigClockSource+0x14a>
 800e47c:	2b50      	cmp	r3, #80	; 0x50
 800e47e:	d873      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e480:	2b40      	cmp	r3, #64	; 0x40
 800e482:	d058      	beq.n	800e536 <HAL_TIM_ConfigClockSource+0x18a>
 800e484:	2b40      	cmp	r3, #64	; 0x40
 800e486:	d86f      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e488:	2b30      	cmp	r3, #48	; 0x30
 800e48a:	d064      	beq.n	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e48c:	2b30      	cmp	r3, #48	; 0x30
 800e48e:	d86b      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e490:	2b20      	cmp	r3, #32
 800e492:	d060      	beq.n	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e494:	2b20      	cmp	r3, #32
 800e496:	d867      	bhi.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d05c      	beq.n	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e49c:	2b10      	cmp	r3, #16
 800e49e:	d05a      	beq.n	800e556 <HAL_TIM_ConfigClockSource+0x1aa>
 800e4a0:	e062      	b.n	800e568 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	6899      	ldr	r1, [r3, #8]
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	f000 f9b3 	bl	800e81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e4c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	609a      	str	r2, [r3, #8]
      break;
 800e4ce:	e04f      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	6899      	ldr	r1, [r3, #8]
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	f000 f99c 	bl	800e81c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	689a      	ldr	r2, [r3, #8]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e4f2:	609a      	str	r2, [r3, #8]
      break;
 800e4f4:	e03c      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6818      	ldr	r0, [r3, #0]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	6859      	ldr	r1, [r3, #4]
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	461a      	mov	r2, r3
 800e504:	f000 f90c 	bl	800e720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2150      	movs	r1, #80	; 0x50
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f966 	bl	800e7e0 <TIM_ITRx_SetConfig>
      break;
 800e514:	e02c      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6818      	ldr	r0, [r3, #0]
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	6859      	ldr	r1, [r3, #4]
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	461a      	mov	r2, r3
 800e524:	f000 f92b 	bl	800e77e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2160      	movs	r1, #96	; 0x60
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 f956 	bl	800e7e0 <TIM_ITRx_SetConfig>
      break;
 800e534:	e01c      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	6859      	ldr	r1, [r3, #4]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	461a      	mov	r2, r3
 800e544:	f000 f8ec 	bl	800e720 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2140      	movs	r1, #64	; 0x40
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f946 	bl	800e7e0 <TIM_ITRx_SetConfig>
      break;
 800e554:	e00c      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4619      	mov	r1, r3
 800e560:	4610      	mov	r0, r2
 800e562:	f000 f93d 	bl	800e7e0 <TIM_ITRx_SetConfig>
      break;
 800e566:	e003      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	73fb      	strb	r3, [r7, #15]
      break;
 800e56c:	e000      	b.n	800e570 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e56e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e580:	7bfb      	ldrb	r3, [r7, #15]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	ffceff88 	.word	0xffceff88
 800e590:	00100040 	.word	0x00100040
 800e594:	00100030 	.word	0x00100030
 800e598:	00100020 	.word	0x00100020

0800e59c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a40      	ldr	r2, [pc, #256]	; (800e700 <TIM_Base_SetConfig+0x114>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d013      	beq.n	800e62c <TIM_Base_SetConfig+0x40>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e60a:	d00f      	beq.n	800e62c <TIM_Base_SetConfig+0x40>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a3d      	ldr	r2, [pc, #244]	; (800e704 <TIM_Base_SetConfig+0x118>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d00b      	beq.n	800e62c <TIM_Base_SetConfig+0x40>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a3c      	ldr	r2, [pc, #240]	; (800e708 <TIM_Base_SetConfig+0x11c>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d007      	beq.n	800e62c <TIM_Base_SetConfig+0x40>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a3b      	ldr	r2, [pc, #236]	; (800e70c <TIM_Base_SetConfig+0x120>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d003      	beq.n	800e62c <TIM_Base_SetConfig+0x40>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a3a      	ldr	r2, [pc, #232]	; (800e710 <TIM_Base_SetConfig+0x124>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d108      	bne.n	800e63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a2f      	ldr	r2, [pc, #188]	; (800e700 <TIM_Base_SetConfig+0x114>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d01f      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e64c:	d01b      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a2c      	ldr	r2, [pc, #176]	; (800e704 <TIM_Base_SetConfig+0x118>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d017      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a2b      	ldr	r2, [pc, #172]	; (800e708 <TIM_Base_SetConfig+0x11c>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d013      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a2a      	ldr	r2, [pc, #168]	; (800e70c <TIM_Base_SetConfig+0x120>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d00f      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a29      	ldr	r2, [pc, #164]	; (800e710 <TIM_Base_SetConfig+0x124>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d00b      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a28      	ldr	r2, [pc, #160]	; (800e714 <TIM_Base_SetConfig+0x128>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d007      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a27      	ldr	r2, [pc, #156]	; (800e718 <TIM_Base_SetConfig+0x12c>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d003      	beq.n	800e686 <TIM_Base_SetConfig+0x9a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a26      	ldr	r2, [pc, #152]	; (800e71c <TIM_Base_SetConfig+0x130>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d108      	bne.n	800e698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	4313      	orrs	r3, r2
 800e696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	695b      	ldr	r3, [r3, #20]
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	689a      	ldr	r2, [r3, #8]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a10      	ldr	r2, [pc, #64]	; (800e700 <TIM_Base_SetConfig+0x114>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d00f      	beq.n	800e6e4 <TIM_Base_SetConfig+0xf8>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a12      	ldr	r2, [pc, #72]	; (800e710 <TIM_Base_SetConfig+0x124>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d00b      	beq.n	800e6e4 <TIM_Base_SetConfig+0xf8>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a11      	ldr	r2, [pc, #68]	; (800e714 <TIM_Base_SetConfig+0x128>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d007      	beq.n	800e6e4 <TIM_Base_SetConfig+0xf8>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a10      	ldr	r2, [pc, #64]	; (800e718 <TIM_Base_SetConfig+0x12c>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d003      	beq.n	800e6e4 <TIM_Base_SetConfig+0xf8>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a0f      	ldr	r2, [pc, #60]	; (800e71c <TIM_Base_SetConfig+0x130>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d103      	bne.n	800e6ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	691a      	ldr	r2, [r3, #16]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	615a      	str	r2, [r3, #20]
}
 800e6f2:	bf00      	nop
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	40010000 	.word	0x40010000
 800e704:	40000400 	.word	0x40000400
 800e708:	40000800 	.word	0x40000800
 800e70c:	40000c00 	.word	0x40000c00
 800e710:	40010400 	.word	0x40010400
 800e714:	40014000 	.word	0x40014000
 800e718:	40014400 	.word	0x40014400
 800e71c:	40014800 	.word	0x40014800

0800e720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	f023 0201 	bic.w	r2, r3, #1
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e74a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	4313      	orrs	r3, r2
 800e754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f023 030a 	bic.w	r3, r3, #10
 800e75c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4313      	orrs	r3, r2
 800e764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	621a      	str	r2, [r3, #32]
}
 800e772:	bf00      	nop
 800e774:	371c      	adds	r7, #28
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e77e:	b480      	push	{r7}
 800e780:	b087      	sub	sp, #28
 800e782:	af00      	add	r7, sp, #0
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	f023 0210 	bic.w	r2, r3, #16
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	699b      	ldr	r3, [r3, #24]
 800e79a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6a1b      	ldr	r3, [r3, #32]
 800e7a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e7a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	031b      	lsls	r3, r3, #12
 800e7ae:	697a      	ldr	r2, [r7, #20]
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e7ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	697a      	ldr	r2, [r7, #20]
 800e7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	621a      	str	r2, [r3, #32]
}
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
	...

0800e7e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	4b09      	ldr	r3, [pc, #36]	; (800e818 <TIM_ITRx_SetConfig+0x38>)
 800e7f4:	4013      	ands	r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	f043 0307 	orr.w	r3, r3, #7
 800e802:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	609a      	str	r2, [r3, #8]
}
 800e80a:	bf00      	nop
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	ffcfff8f 	.word	0xffcfff8f

0800e81c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b087      	sub	sp, #28
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	021a      	lsls	r2, r3, #8
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	431a      	orrs	r2, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	4313      	orrs	r3, r2
 800e844:	697a      	ldr	r2, [r7, #20]
 800e846:	4313      	orrs	r3, r2
 800e848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	609a      	str	r2, [r3, #8]
}
 800e850:	bf00      	nop
 800e852:	371c      	adds	r7, #28
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d101      	bne.n	800e874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e870:	2302      	movs	r3, #2
 800e872:	e06d      	b.n	800e950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a30      	ldr	r2, [pc, #192]	; (800e95c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d004      	beq.n	800e8a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a2f      	ldr	r2, [pc, #188]	; (800e960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d108      	bne.n	800e8ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e8ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a20      	ldr	r2, [pc, #128]	; (800e95c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d022      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8e6:	d01d      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a1d      	ldr	r2, [pc, #116]	; (800e964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d018      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	4a1c      	ldr	r2, [pc, #112]	; (800e968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d013      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a1a      	ldr	r2, [pc, #104]	; (800e96c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d00e      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a15      	ldr	r2, [pc, #84]	; (800e960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d009      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a16      	ldr	r2, [pc, #88]	; (800e970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d004      	beq.n	800e924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a15      	ldr	r2, [pc, #84]	; (800e974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d10c      	bne.n	800e93e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e92a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	4313      	orrs	r3, r2
 800e934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2201      	movs	r2, #1
 800e942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e94e:	2300      	movs	r3, #0
}
 800e950:	4618      	mov	r0, r3
 800e952:	3714      	adds	r7, #20
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	40010000 	.word	0x40010000
 800e960:	40010400 	.word	0x40010400
 800e964:	40000400 	.word	0x40000400
 800e968:	40000800 	.word	0x40000800
 800e96c:	40000c00 	.word	0x40000c00
 800e970:	40001800 	.word	0x40001800
 800e974:	40014000 	.word	0x40014000

0800e978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e042      	b.n	800ea4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d106      	bne.n	800e9de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7f5 fb67 	bl	80040ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2224      	movs	r2, #36	; 0x24
 800e9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 0201 	bic.w	r2, r2, #1
 800e9f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fd74 	bl	800f4e4 <UART_SetConfig>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d101      	bne.n	800ea06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e022      	b.n	800ea4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d002      	beq.n	800ea14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f001 fad0 	bl	800ffb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ea22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	689a      	ldr	r2, [r3, #8]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ea32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0201 	orr.w	r2, r2, #1
 800ea42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f001 fb57 	bl	80100f8 <UART_CheckIdleState>
 800ea4a:	4603      	mov	r3, r0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08a      	sub	sp, #40	; 0x28
 800ea58:	af02      	add	r7, sp, #8
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	603b      	str	r3, [r7, #0]
 800ea60:	4613      	mov	r3, r2
 800ea62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea6a:	2b20      	cmp	r3, #32
 800ea6c:	f040 8083 	bne.w	800eb76 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d002      	beq.n	800ea7c <HAL_UART_Transmit+0x28>
 800ea76:	88fb      	ldrh	r3, [r7, #6]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e07b      	b.n	800eb78 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d101      	bne.n	800ea8e <HAL_UART_Transmit+0x3a>
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	e074      	b.n	800eb78 <HAL_UART_Transmit+0x124>
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2221      	movs	r2, #33	; 0x21
 800eaa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eaa6:	f7f6 fafd 	bl	80050a4 <HAL_GetTick>
 800eaaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	88fa      	ldrh	r2, [r7, #6]
 800eab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	88fa      	ldrh	r2, [r7, #6]
 800eab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac4:	d108      	bne.n	800ead8 <HAL_UART_Transmit+0x84>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d104      	bne.n	800ead8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	61bb      	str	r3, [r7, #24]
 800ead6:	e003      	b.n	800eae0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eadc:	2300      	movs	r3, #0
 800eade:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800eae8:	e02c      	b.n	800eb44 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	2180      	movs	r1, #128	; 0x80
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f001 fb4a 	bl	801018e <UART_WaitOnFlagUntilTimeout>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800eb00:	2303      	movs	r3, #3
 800eb02:	e039      	b.n	800eb78 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d10b      	bne.n	800eb22 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eb18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800eb1a:	69bb      	ldr	r3, [r7, #24]
 800eb1c:	3302      	adds	r3, #2
 800eb1e:	61bb      	str	r3, [r7, #24]
 800eb20:	e007      	b.n	800eb32 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	781a      	ldrb	r2, [r3, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	b29a      	uxth	r2, r3
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1cc      	bne.n	800eaea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	9300      	str	r3, [sp, #0]
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	2200      	movs	r2, #0
 800eb58:	2140      	movs	r1, #64	; 0x40
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f001 fb17 	bl	801018e <UART_WaitOnFlagUntilTimeout>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eb66:	2303      	movs	r3, #3
 800eb68:	e006      	b.n	800eb78 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	e000      	b.n	800eb78 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800eb76:	2302      	movs	r3, #2
  }
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3720      	adds	r7, #32
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b091      	sub	sp, #68	; 0x44
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb94:	2b20      	cmp	r3, #32
 800eb96:	f040 808c 	bne.w	800ecb2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <HAL_UART_Transmit_IT+0x26>
 800eba0:	88fb      	ldrh	r3, [r7, #6]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e084      	b.n	800ecb4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_UART_Transmit_IT+0x38>
 800ebb4:	2302      	movs	r3, #2
 800ebb6:	e07d      	b.n	800ecb4 <HAL_UART_Transmit_IT+0x134>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	88fa      	ldrh	r2, [r7, #6]
 800ebca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	88fa      	ldrh	r2, [r7, #6]
 800ebd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2221      	movs	r2, #33	; 0x21
 800ebe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebf4:	d12e      	bne.n	800ec54 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebfe:	d107      	bne.n	800ec10 <HAL_UART_Transmit_IT+0x90>
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d103      	bne.n	800ec10 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a2d      	ldr	r2, [pc, #180]	; (800ecc0 <HAL_UART_Transmit_IT+0x140>)
 800ec0c:	675a      	str	r2, [r3, #116]	; 0x74
 800ec0e:	e002      	b.n	800ec16 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4a2c      	ldr	r2, [pc, #176]	; (800ecc4 <HAL_UART_Transmit_IT+0x144>)
 800ec14:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3308      	adds	r3, #8
 800ec24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	e853 3f00 	ldrex	r3, [r3]
 800ec2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec3e:	637a      	str	r2, [r7, #52]	; 0x34
 800ec40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec46:	e841 2300 	strex	r3, r2, [r1]
 800ec4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1e5      	bne.n	800ec1e <HAL_UART_Transmit_IT+0x9e>
 800ec52:	e02c      	b.n	800ecae <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec5c:	d107      	bne.n	800ec6e <HAL_UART_Transmit_IT+0xee>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	4a17      	ldr	r2, [pc, #92]	; (800ecc8 <HAL_UART_Transmit_IT+0x148>)
 800ec6a:	675a      	str	r2, [r3, #116]	; 0x74
 800ec6c:	e002      	b.n	800ec74 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	4a16      	ldr	r2, [pc, #88]	; (800eccc <HAL_UART_Transmit_IT+0x14c>)
 800ec72:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	e853 3f00 	ldrex	r3, [r3]
 800ec88:	613b      	str	r3, [r7, #16]
   return(result);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9a:	623b      	str	r3, [r7, #32]
 800ec9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9e:	69f9      	ldr	r1, [r7, #28]
 800eca0:	6a3a      	ldr	r2, [r7, #32]
 800eca2:	e841 2300 	strex	r3, r2, [r1]
 800eca6:	61bb      	str	r3, [r7, #24]
   return(result);
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1e6      	bne.n	800ec7c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e000      	b.n	800ecb4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ecb2:	2302      	movs	r3, #2
  }
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3744      	adds	r7, #68	; 0x44
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr
 800ecc0:	080108c7 	.word	0x080108c7
 800ecc4:	080107e7 	.word	0x080107e7
 800ecc8:	08010725 	.word	0x08010725
 800eccc:	0801066d 	.word	0x0801066d

0800ecd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08a      	sub	sp, #40	; 0x28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ece4:	2b20      	cmp	r3, #32
 800ece6:	d142      	bne.n	800ed6e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d002      	beq.n	800ecf4 <HAL_UART_Receive_IT+0x24>
 800ecee:	88fb      	ldrh	r3, [r7, #6]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e03b      	b.n	800ed70 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d101      	bne.n	800ed06 <HAL_UART_Receive_IT+0x36>
 800ed02:	2302      	movs	r3, #2
 800ed04:	e034      	b.n	800ed70 <HAL_UART_Receive_IT+0xa0>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <HAL_UART_Receive_IT+0xa8>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d01f      	beq.n	800ed5e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d018      	beq.n	800ed5e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	e853 3f00 	ldrex	r3, [r3]
 800ed38:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed40:	627b      	str	r3, [r7, #36]	; 0x24
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	623b      	str	r3, [r7, #32]
 800ed4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4e:	69f9      	ldr	r1, [r7, #28]
 800ed50:	6a3a      	ldr	r2, [r7, #32]
 800ed52:	e841 2300 	strex	r3, r2, [r1]
 800ed56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1e6      	bne.n	800ed2c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ed5e:	88fb      	ldrh	r3, [r7, #6]
 800ed60:	461a      	mov	r2, r3
 800ed62:	68b9      	ldr	r1, [r7, #8]
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f001 fadb 	bl	8010320 <UART_Start_Receive_IT>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	e000      	b.n	800ed70 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ed6e:	2302      	movs	r3, #2
  }
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3728      	adds	r7, #40	; 0x28
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	58000c00 	.word	0x58000c00

0800ed7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b0ba      	sub	sp, #232	; 0xe8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	69db      	ldr	r3, [r3, #28]
 800ed8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eda2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eda6:	f640 030f 	movw	r3, #2063	; 0x80f
 800edaa:	4013      	ands	r3, r2
 800edac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800edb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11b      	bne.n	800edf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edbc:	f003 0320 	and.w	r3, r3, #32
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d015      	beq.n	800edf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc8:	f003 0320 	and.w	r3, r3, #32
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d105      	bne.n	800eddc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d009      	beq.n	800edf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 835a 	beq.w	800f49a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	4798      	blx	r3
      }
      return;
 800edee:	e354      	b.n	800f49a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800edf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 811f 	beq.w	800f038 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800edfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800edfe:	4b8b      	ldr	r3, [pc, #556]	; (800f02c <HAL_UART_IRQHandler+0x2b0>)
 800ee00:	4013      	ands	r3, r2
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ee06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ee0a:	4b89      	ldr	r3, [pc, #548]	; (800f030 <HAL_UART_IRQHandler+0x2b4>)
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 8112 	beq.w	800f038 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee18:	f003 0301 	and.w	r3, r3, #1
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d011      	beq.n	800ee44 <HAL_UART_IRQHandler+0xc8>
 800ee20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00b      	beq.n	800ee44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2201      	movs	r2, #1
 800ee32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee3a:	f043 0201 	orr.w	r2, r3, #1
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d011      	beq.n	800ee74 <HAL_UART_IRQHandler+0xf8>
 800ee50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee54:	f003 0301 	and.w	r3, r3, #1
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00b      	beq.n	800ee74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2202      	movs	r2, #2
 800ee62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee6a:	f043 0204 	orr.w	r2, r3, #4
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee78:	f003 0304 	and.w	r3, r3, #4
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d011      	beq.n	800eea4 <HAL_UART_IRQHandler+0x128>
 800ee80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee84:	f003 0301 	and.w	r3, r3, #1
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00b      	beq.n	800eea4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2204      	movs	r2, #4
 800ee92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee9a:	f043 0202 	orr.w	r2, r3, #2
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eea8:	f003 0308 	and.w	r3, r3, #8
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d017      	beq.n	800eee0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eeb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eeb4:	f003 0320 	and.w	r3, r3, #32
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d105      	bne.n	800eec8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eebc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eec0:	4b5a      	ldr	r3, [pc, #360]	; (800f02c <HAL_UART_IRQHandler+0x2b0>)
 800eec2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2208      	movs	r2, #8
 800eece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eed6:	f043 0208 	orr.w	r2, r3, #8
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d012      	beq.n	800ef12 <HAL_UART_IRQHandler+0x196>
 800eeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00c      	beq.n	800ef12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef08:	f043 0220 	orr.w	r2, r3, #32
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 82c0 	beq.w	800f49e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef22:	f003 0320 	and.w	r3, r3, #32
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d013      	beq.n	800ef52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef2e:	f003 0320 	and.w	r3, r3, #32
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d105      	bne.n	800ef42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d007      	beq.n	800ef52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef66:	2b40      	cmp	r3, #64	; 0x40
 800ef68:	d005      	beq.n	800ef76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ef6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ef6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d04f      	beq.n	800f016 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f001 fafc 	bl	8010574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef86:	2b40      	cmp	r3, #64	; 0x40
 800ef88:	d141      	bne.n	800f00e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	3308      	adds	r3, #8
 800ef90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef98:	e853 3f00 	ldrex	r3, [r3]
 800ef9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800efa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800efa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	3308      	adds	r3, #8
 800efb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800efb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800efba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800efc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800efc6:	e841 2300 	strex	r3, r2, [r1]
 800efca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800efce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d1d9      	bne.n	800ef8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d013      	beq.n	800f006 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe2:	4a14      	ldr	r2, [pc, #80]	; (800f034 <HAL_UART_IRQHandler+0x2b8>)
 800efe4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efea:	4618      	mov	r0, r3
 800efec:	f7f7 fa8a 	bl	8006504 <HAL_DMA_Abort_IT>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d017      	beq.n	800f026 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800effa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f000:	4610      	mov	r0, r2
 800f002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f004:	e00f      	b.n	800f026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 fa56 	bl	800f4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f00c:	e00b      	b.n	800f026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fa52 	bl	800f4b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f014:	e007      	b.n	800f026 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fa4e 	bl	800f4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f024:	e23b      	b.n	800f49e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f026:	bf00      	nop
    return;
 800f028:	e239      	b.n	800f49e <HAL_UART_IRQHandler+0x722>
 800f02a:	bf00      	nop
 800f02c:	10000001 	.word	0x10000001
 800f030:	04000120 	.word	0x04000120
 800f034:	08010641 	.word	0x08010641

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	f040 81ce 	bne.w	800f3de <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f046:	f003 0310 	and.w	r3, r3, #16
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f000 81c7 	beq.w	800f3de <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f054:	f003 0310 	and.w	r3, r3, #16
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f000 81c0 	beq.w	800f3de <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2210      	movs	r2, #16
 800f064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f070:	2b40      	cmp	r3, #64	; 0x40
 800f072:	f040 813b 	bne.w	800f2ec <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a8b      	ldr	r2, [pc, #556]	; (800f2ac <HAL_UART_IRQHandler+0x530>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d059      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a89      	ldr	r2, [pc, #548]	; (800f2b0 <HAL_UART_IRQHandler+0x534>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d053      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a87      	ldr	r2, [pc, #540]	; (800f2b4 <HAL_UART_IRQHandler+0x538>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d04d      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a85      	ldr	r2, [pc, #532]	; (800f2b8 <HAL_UART_IRQHandler+0x53c>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d047      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a83      	ldr	r2, [pc, #524]	; (800f2bc <HAL_UART_IRQHandler+0x540>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d041      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a81      	ldr	r2, [pc, #516]	; (800f2c0 <HAL_UART_IRQHandler+0x544>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d03b      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a7f      	ldr	r2, [pc, #508]	; (800f2c4 <HAL_UART_IRQHandler+0x548>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d035      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4a7d      	ldr	r2, [pc, #500]	; (800f2c8 <HAL_UART_IRQHandler+0x54c>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d02f      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a7b      	ldr	r2, [pc, #492]	; (800f2cc <HAL_UART_IRQHandler+0x550>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d029      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a79      	ldr	r2, [pc, #484]	; (800f2d0 <HAL_UART_IRQHandler+0x554>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d023      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a77      	ldr	r2, [pc, #476]	; (800f2d4 <HAL_UART_IRQHandler+0x558>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d01d      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a75      	ldr	r2, [pc, #468]	; (800f2d8 <HAL_UART_IRQHandler+0x55c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d017      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a73      	ldr	r2, [pc, #460]	; (800f2dc <HAL_UART_IRQHandler+0x560>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d011      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a71      	ldr	r2, [pc, #452]	; (800f2e0 <HAL_UART_IRQHandler+0x564>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d00b      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a6f      	ldr	r2, [pc, #444]	; (800f2e4 <HAL_UART_IRQHandler+0x568>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d005      	beq.n	800f136 <HAL_UART_IRQHandler+0x3ba>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4a6d      	ldr	r2, [pc, #436]	; (800f2e8 <HAL_UART_IRQHandler+0x56c>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d105      	bne.n	800f142 <HAL_UART_IRQHandler+0x3c6>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	e004      	b.n	800f14c <HAL_UART_IRQHandler+0x3d0>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f154:	2b00      	cmp	r3, #0
 800f156:	f000 81a4 	beq.w	800f4a2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f164:	429a      	cmp	r2, r3
 800f166:	f080 819c 	bcs.w	800f4a2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f178:	69db      	ldr	r3, [r3, #28]
 800f17a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f17e:	f000 8086 	beq.w	800f28e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f18e:	e853 3f00 	ldrex	r3, [r3]
 800f192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f19a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f19e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f1ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f1b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f1b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f1bc:	e841 2300 	strex	r3, r2, [r1]
 800f1c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1da      	bne.n	800f182 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1d6:	e853 3f00 	ldrex	r3, [r3]
 800f1da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f1dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1de:	f023 0301 	bic.w	r3, r3, #1
 800f1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f1f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f1f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f1f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1fc:	e841 2300 	strex	r3, r2, [r1]
 800f200:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f204:	2b00      	cmp	r3, #0
 800f206:	d1e1      	bne.n	800f1cc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3308      	adds	r3, #8
 800f20e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f212:	e853 3f00 	ldrex	r3, [r3]
 800f216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f21a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f21e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	3308      	adds	r3, #8
 800f228:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f22c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f22e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f234:	e841 2300 	strex	r3, r2, [r1]
 800f238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1e3      	bne.n	800f208 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2220      	movs	r2, #32
 800f244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f256:	e853 3f00 	ldrex	r3, [r3]
 800f25a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f25e:	f023 0310 	bic.w	r3, r3, #16
 800f262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f270:	65bb      	str	r3, [r7, #88]	; 0x58
 800f272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f278:	e841 2300 	strex	r3, r2, [r1]
 800f27c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f280:	2b00      	cmp	r3, #0
 800f282:	d1e4      	bne.n	800f24e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f6 fe1d 	bl	8005ec8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f912 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f2a8:	e0fb      	b.n	800f4a2 <HAL_UART_IRQHandler+0x726>
 800f2aa:	bf00      	nop
 800f2ac:	40020010 	.word	0x40020010
 800f2b0:	40020028 	.word	0x40020028
 800f2b4:	40020040 	.word	0x40020040
 800f2b8:	40020058 	.word	0x40020058
 800f2bc:	40020070 	.word	0x40020070
 800f2c0:	40020088 	.word	0x40020088
 800f2c4:	400200a0 	.word	0x400200a0
 800f2c8:	400200b8 	.word	0x400200b8
 800f2cc:	40020410 	.word	0x40020410
 800f2d0:	40020428 	.word	0x40020428
 800f2d4:	40020440 	.word	0x40020440
 800f2d8:	40020458 	.word	0x40020458
 800f2dc:	40020470 	.word	0x40020470
 800f2e0:	40020488 	.word	0x40020488
 800f2e4:	400204a0 	.word	0x400204a0
 800f2e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f306:	b29b      	uxth	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 80cc 	beq.w	800f4a6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f30e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 80c7 	beq.w	800f4a6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f320:	e853 3f00 	ldrex	r3, [r3]
 800f324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f32c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	461a      	mov	r2, r3
 800f336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f33a:	647b      	str	r3, [r7, #68]	; 0x44
 800f33c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f342:	e841 2300 	strex	r3, r2, [r1]
 800f346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1e4      	bne.n	800f318 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3308      	adds	r3, #8
 800f354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f358:	e853 3f00 	ldrex	r3, [r3]
 800f35c:	623b      	str	r3, [r7, #32]
   return(result);
 800f35e:	6a3a      	ldr	r2, [r7, #32]
 800f360:	4b54      	ldr	r3, [pc, #336]	; (800f4b4 <HAL_UART_IRQHandler+0x738>)
 800f362:	4013      	ands	r3, r2
 800f364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3308      	adds	r3, #8
 800f36e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f372:	633a      	str	r2, [r7, #48]	; 0x30
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f37a:	e841 2300 	strex	r3, r2, [r1]
 800f37e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1e3      	bne.n	800f34e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2220      	movs	r2, #32
 800f38a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	e853 3f00 	ldrex	r3, [r3]
 800f3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f023 0310 	bic.w	r3, r3, #16
 800f3ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	69b9      	ldr	r1, [r7, #24]
 800f3c2:	69fa      	ldr	r2, [r7, #28]
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e4      	bne.n	800f39a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f3d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f878 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f3dc:	e063      	b.n	800f4a6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00e      	beq.n	800f408 <HAL_UART_IRQHandler+0x68c>
 800f3ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d008      	beq.n	800f408 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f3fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f001 ff5d 	bl	80112c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f406:	e051      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f410:	2b00      	cmp	r3, #0
 800f412:	d014      	beq.n	800f43e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d008      	beq.n	800f43e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f430:	2b00      	cmp	r3, #0
 800f432:	d03a      	beq.n	800f4aa <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	4798      	blx	r3
    }
    return;
 800f43c:	e035      	b.n	800f4aa <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f446:	2b00      	cmp	r3, #0
 800f448:	d009      	beq.n	800f45e <HAL_UART_IRQHandler+0x6e2>
 800f44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f001 faaa 	bl	80109b0 <UART_EndTransmit_IT>
    return;
 800f45c:	e026      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f466:	2b00      	cmp	r3, #0
 800f468:	d009      	beq.n	800f47e <HAL_UART_IRQHandler+0x702>
 800f46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f46e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f472:	2b00      	cmp	r3, #0
 800f474:	d003      	beq.n	800f47e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f001 ff36 	bl	80112e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f47c:	e016      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f486:	2b00      	cmp	r3, #0
 800f488:	d010      	beq.n	800f4ac <HAL_UART_IRQHandler+0x730>
 800f48a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	da0c      	bge.n	800f4ac <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f001 ff1e 	bl	80112d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f498:	e008      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
      return;
 800f49a:	bf00      	nop
 800f49c:	e006      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
    return;
 800f49e:	bf00      	nop
 800f4a0:	e004      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
      return;
 800f4a2:	bf00      	nop
 800f4a4:	e002      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
      return;
 800f4a6:	bf00      	nop
 800f4a8:	e000      	b.n	800f4ac <HAL_UART_IRQHandler+0x730>
    return;
 800f4aa:	bf00      	nop
  }
}
 800f4ac:	37e8      	adds	r7, #232	; 0xe8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	effffffe 	.word	0xeffffffe

0800f4b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f4d8:	bf00      	nop
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4e8:	b092      	sub	sp, #72	; 0x48
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	431a      	orrs	r2, r3
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	4313      	orrs	r3, r2
 800f50a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	4bbe      	ldr	r3, [pc, #760]	; (800f80c <UART_SetConfig+0x328>)
 800f514:	4013      	ands	r3, r2
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	6812      	ldr	r2, [r2, #0]
 800f51a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f51c:	430b      	orrs	r3, r1
 800f51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	68da      	ldr	r2, [r3, #12]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	430a      	orrs	r2, r1
 800f534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4ab3      	ldr	r2, [pc, #716]	; (800f810 <UART_SetConfig+0x32c>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d004      	beq.n	800f550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	6a1b      	ldr	r3, [r3, #32]
 800f54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f54c:	4313      	orrs	r3, r2
 800f54e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	689a      	ldr	r2, [r3, #8]
 800f556:	4baf      	ldr	r3, [pc, #700]	; (800f814 <UART_SetConfig+0x330>)
 800f558:	4013      	ands	r3, r2
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	6812      	ldr	r2, [r2, #0]
 800f55e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f560:	430b      	orrs	r3, r1
 800f562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56a:	f023 010f 	bic.w	r1, r3, #15
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	430a      	orrs	r2, r1
 800f578:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4aa6      	ldr	r2, [pc, #664]	; (800f818 <UART_SetConfig+0x334>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d177      	bne.n	800f674 <UART_SetConfig+0x190>
 800f584:	4ba5      	ldr	r3, [pc, #660]	; (800f81c <UART_SetConfig+0x338>)
 800f586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f58c:	2b28      	cmp	r3, #40	; 0x28
 800f58e:	d86d      	bhi.n	800f66c <UART_SetConfig+0x188>
 800f590:	a201      	add	r2, pc, #4	; (adr r2, 800f598 <UART_SetConfig+0xb4>)
 800f592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f596:	bf00      	nop
 800f598:	0800f63d 	.word	0x0800f63d
 800f59c:	0800f66d 	.word	0x0800f66d
 800f5a0:	0800f66d 	.word	0x0800f66d
 800f5a4:	0800f66d 	.word	0x0800f66d
 800f5a8:	0800f66d 	.word	0x0800f66d
 800f5ac:	0800f66d 	.word	0x0800f66d
 800f5b0:	0800f66d 	.word	0x0800f66d
 800f5b4:	0800f66d 	.word	0x0800f66d
 800f5b8:	0800f645 	.word	0x0800f645
 800f5bc:	0800f66d 	.word	0x0800f66d
 800f5c0:	0800f66d 	.word	0x0800f66d
 800f5c4:	0800f66d 	.word	0x0800f66d
 800f5c8:	0800f66d 	.word	0x0800f66d
 800f5cc:	0800f66d 	.word	0x0800f66d
 800f5d0:	0800f66d 	.word	0x0800f66d
 800f5d4:	0800f66d 	.word	0x0800f66d
 800f5d8:	0800f64d 	.word	0x0800f64d
 800f5dc:	0800f66d 	.word	0x0800f66d
 800f5e0:	0800f66d 	.word	0x0800f66d
 800f5e4:	0800f66d 	.word	0x0800f66d
 800f5e8:	0800f66d 	.word	0x0800f66d
 800f5ec:	0800f66d 	.word	0x0800f66d
 800f5f0:	0800f66d 	.word	0x0800f66d
 800f5f4:	0800f66d 	.word	0x0800f66d
 800f5f8:	0800f655 	.word	0x0800f655
 800f5fc:	0800f66d 	.word	0x0800f66d
 800f600:	0800f66d 	.word	0x0800f66d
 800f604:	0800f66d 	.word	0x0800f66d
 800f608:	0800f66d 	.word	0x0800f66d
 800f60c:	0800f66d 	.word	0x0800f66d
 800f610:	0800f66d 	.word	0x0800f66d
 800f614:	0800f66d 	.word	0x0800f66d
 800f618:	0800f65d 	.word	0x0800f65d
 800f61c:	0800f66d 	.word	0x0800f66d
 800f620:	0800f66d 	.word	0x0800f66d
 800f624:	0800f66d 	.word	0x0800f66d
 800f628:	0800f66d 	.word	0x0800f66d
 800f62c:	0800f66d 	.word	0x0800f66d
 800f630:	0800f66d 	.word	0x0800f66d
 800f634:	0800f66d 	.word	0x0800f66d
 800f638:	0800f665 	.word	0x0800f665
 800f63c:	2301      	movs	r3, #1
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f642:	e222      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f644:	2304      	movs	r3, #4
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e21e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f64c:	2308      	movs	r3, #8
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e21a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f654:	2310      	movs	r3, #16
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65a:	e216      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f65c:	2320      	movs	r3, #32
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f662:	e212      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f664:	2340      	movs	r3, #64	; 0x40
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66a:	e20e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f66c:	2380      	movs	r3, #128	; 0x80
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f672:	e20a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a69      	ldr	r2, [pc, #420]	; (800f820 <UART_SetConfig+0x33c>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d130      	bne.n	800f6e0 <UART_SetConfig+0x1fc>
 800f67e:	4b67      	ldr	r3, [pc, #412]	; (800f81c <UART_SetConfig+0x338>)
 800f680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	2b05      	cmp	r3, #5
 800f688:	d826      	bhi.n	800f6d8 <UART_SetConfig+0x1f4>
 800f68a:	a201      	add	r2, pc, #4	; (adr r2, 800f690 <UART_SetConfig+0x1ac>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6b1 	.word	0x0800f6b1
 800f698:	0800f6b9 	.word	0x0800f6b9
 800f69c:	0800f6c1 	.word	0x0800f6c1
 800f6a0:	0800f6c9 	.word	0x0800f6c9
 800f6a4:	0800f6d1 	.word	0x0800f6d1
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ae:	e1ec      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6b0:	2304      	movs	r3, #4
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e1e8      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6b8:	2308      	movs	r3, #8
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e1e4      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6c0:	2310      	movs	r3, #16
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c6:	e1e0      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6c8:	2320      	movs	r3, #32
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ce:	e1dc      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6d0:	2340      	movs	r3, #64	; 0x40
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d6:	e1d8      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6d8:	2380      	movs	r3, #128	; 0x80
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6de:	e1d4      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a4f      	ldr	r2, [pc, #316]	; (800f824 <UART_SetConfig+0x340>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d130      	bne.n	800f74c <UART_SetConfig+0x268>
 800f6ea:	4b4c      	ldr	r3, [pc, #304]	; (800f81c <UART_SetConfig+0x338>)
 800f6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ee:	f003 0307 	and.w	r3, r3, #7
 800f6f2:	2b05      	cmp	r3, #5
 800f6f4:	d826      	bhi.n	800f744 <UART_SetConfig+0x260>
 800f6f6:	a201      	add	r2, pc, #4	; (adr r2, 800f6fc <UART_SetConfig+0x218>)
 800f6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fc:	0800f715 	.word	0x0800f715
 800f700:	0800f71d 	.word	0x0800f71d
 800f704:	0800f725 	.word	0x0800f725
 800f708:	0800f72d 	.word	0x0800f72d
 800f70c:	0800f735 	.word	0x0800f735
 800f710:	0800f73d 	.word	0x0800f73d
 800f714:	2300      	movs	r3, #0
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e1b6      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f71c:	2304      	movs	r3, #4
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e1b2      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f724:	2308      	movs	r3, #8
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e1ae      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f72c:	2310      	movs	r3, #16
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e1aa      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f734:	2320      	movs	r3, #32
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73a:	e1a6      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f73c:	2340      	movs	r3, #64	; 0x40
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f742:	e1a2      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f744:	2380      	movs	r3, #128	; 0x80
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74a:	e19e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a35      	ldr	r2, [pc, #212]	; (800f828 <UART_SetConfig+0x344>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d130      	bne.n	800f7b8 <UART_SetConfig+0x2d4>
 800f756:	4b31      	ldr	r3, [pc, #196]	; (800f81c <UART_SetConfig+0x338>)
 800f758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f75a:	f003 0307 	and.w	r3, r3, #7
 800f75e:	2b05      	cmp	r3, #5
 800f760:	d826      	bhi.n	800f7b0 <UART_SetConfig+0x2cc>
 800f762:	a201      	add	r2, pc, #4	; (adr r2, 800f768 <UART_SetConfig+0x284>)
 800f764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f768:	0800f781 	.word	0x0800f781
 800f76c:	0800f789 	.word	0x0800f789
 800f770:	0800f791 	.word	0x0800f791
 800f774:	0800f799 	.word	0x0800f799
 800f778:	0800f7a1 	.word	0x0800f7a1
 800f77c:	0800f7a9 	.word	0x0800f7a9
 800f780:	2300      	movs	r3, #0
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f786:	e180      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f788:	2304      	movs	r3, #4
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e17c      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f790:	2308      	movs	r3, #8
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e178      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f798:	2310      	movs	r3, #16
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e174      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7a0:	2320      	movs	r3, #32
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a6:	e170      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7a8:	2340      	movs	r3, #64	; 0x40
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ae:	e16c      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7b0:	2380      	movs	r3, #128	; 0x80
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b6:	e168      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a1b      	ldr	r2, [pc, #108]	; (800f82c <UART_SetConfig+0x348>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d142      	bne.n	800f848 <UART_SetConfig+0x364>
 800f7c2:	4b16      	ldr	r3, [pc, #88]	; (800f81c <UART_SetConfig+0x338>)
 800f7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b05      	cmp	r3, #5
 800f7cc:	d838      	bhi.n	800f840 <UART_SetConfig+0x35c>
 800f7ce:	a201      	add	r2, pc, #4	; (adr r2, 800f7d4 <UART_SetConfig+0x2f0>)
 800f7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d4:	0800f7ed 	.word	0x0800f7ed
 800f7d8:	0800f7f5 	.word	0x0800f7f5
 800f7dc:	0800f7fd 	.word	0x0800f7fd
 800f7e0:	0800f805 	.word	0x0800f805
 800f7e4:	0800f831 	.word	0x0800f831
 800f7e8:	0800f839 	.word	0x0800f839
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e14a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e146      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e142      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f804:	2310      	movs	r3, #16
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e13e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f80c:	cfff69f3 	.word	0xcfff69f3
 800f810:	58000c00 	.word	0x58000c00
 800f814:	11fff4ff 	.word	0x11fff4ff
 800f818:	40011000 	.word	0x40011000
 800f81c:	58024400 	.word	0x58024400
 800f820:	40004400 	.word	0x40004400
 800f824:	40004800 	.word	0x40004800
 800f828:	40004c00 	.word	0x40004c00
 800f82c:	40005000 	.word	0x40005000
 800f830:	2320      	movs	r3, #32
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f836:	e128      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f838:	2340      	movs	r3, #64	; 0x40
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f83e:	e124      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f840:	2380      	movs	r3, #128	; 0x80
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e120      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4acb      	ldr	r2, [pc, #812]	; (800fb7c <UART_SetConfig+0x698>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d176      	bne.n	800f940 <UART_SetConfig+0x45c>
 800f852:	4bcb      	ldr	r3, [pc, #812]	; (800fb80 <UART_SetConfig+0x69c>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f85a:	2b28      	cmp	r3, #40	; 0x28
 800f85c:	d86c      	bhi.n	800f938 <UART_SetConfig+0x454>
 800f85e:	a201      	add	r2, pc, #4	; (adr r2, 800f864 <UART_SetConfig+0x380>)
 800f860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f864:	0800f909 	.word	0x0800f909
 800f868:	0800f939 	.word	0x0800f939
 800f86c:	0800f939 	.word	0x0800f939
 800f870:	0800f939 	.word	0x0800f939
 800f874:	0800f939 	.word	0x0800f939
 800f878:	0800f939 	.word	0x0800f939
 800f87c:	0800f939 	.word	0x0800f939
 800f880:	0800f939 	.word	0x0800f939
 800f884:	0800f911 	.word	0x0800f911
 800f888:	0800f939 	.word	0x0800f939
 800f88c:	0800f939 	.word	0x0800f939
 800f890:	0800f939 	.word	0x0800f939
 800f894:	0800f939 	.word	0x0800f939
 800f898:	0800f939 	.word	0x0800f939
 800f89c:	0800f939 	.word	0x0800f939
 800f8a0:	0800f939 	.word	0x0800f939
 800f8a4:	0800f919 	.word	0x0800f919
 800f8a8:	0800f939 	.word	0x0800f939
 800f8ac:	0800f939 	.word	0x0800f939
 800f8b0:	0800f939 	.word	0x0800f939
 800f8b4:	0800f939 	.word	0x0800f939
 800f8b8:	0800f939 	.word	0x0800f939
 800f8bc:	0800f939 	.word	0x0800f939
 800f8c0:	0800f939 	.word	0x0800f939
 800f8c4:	0800f921 	.word	0x0800f921
 800f8c8:	0800f939 	.word	0x0800f939
 800f8cc:	0800f939 	.word	0x0800f939
 800f8d0:	0800f939 	.word	0x0800f939
 800f8d4:	0800f939 	.word	0x0800f939
 800f8d8:	0800f939 	.word	0x0800f939
 800f8dc:	0800f939 	.word	0x0800f939
 800f8e0:	0800f939 	.word	0x0800f939
 800f8e4:	0800f929 	.word	0x0800f929
 800f8e8:	0800f939 	.word	0x0800f939
 800f8ec:	0800f939 	.word	0x0800f939
 800f8f0:	0800f939 	.word	0x0800f939
 800f8f4:	0800f939 	.word	0x0800f939
 800f8f8:	0800f939 	.word	0x0800f939
 800f8fc:	0800f939 	.word	0x0800f939
 800f900:	0800f939 	.word	0x0800f939
 800f904:	0800f931 	.word	0x0800f931
 800f908:	2301      	movs	r3, #1
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90e:	e0bc      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f910:	2304      	movs	r3, #4
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f916:	e0b8      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f918:	2308      	movs	r3, #8
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91e:	e0b4      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f920:	2310      	movs	r3, #16
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f926:	e0b0      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f928:	2320      	movs	r3, #32
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92e:	e0ac      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f930:	2340      	movs	r3, #64	; 0x40
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f936:	e0a8      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f938:	2380      	movs	r3, #128	; 0x80
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93e:	e0a4      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a8f      	ldr	r2, [pc, #572]	; (800fb84 <UART_SetConfig+0x6a0>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d130      	bne.n	800f9ac <UART_SetConfig+0x4c8>
 800f94a:	4b8d      	ldr	r3, [pc, #564]	; (800fb80 <UART_SetConfig+0x69c>)
 800f94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f94e:	f003 0307 	and.w	r3, r3, #7
 800f952:	2b05      	cmp	r3, #5
 800f954:	d826      	bhi.n	800f9a4 <UART_SetConfig+0x4c0>
 800f956:	a201      	add	r2, pc, #4	; (adr r2, 800f95c <UART_SetConfig+0x478>)
 800f958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95c:	0800f975 	.word	0x0800f975
 800f960:	0800f97d 	.word	0x0800f97d
 800f964:	0800f985 	.word	0x0800f985
 800f968:	0800f98d 	.word	0x0800f98d
 800f96c:	0800f995 	.word	0x0800f995
 800f970:	0800f99d 	.word	0x0800f99d
 800f974:	2300      	movs	r3, #0
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97a:	e086      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f97c:	2304      	movs	r3, #4
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f982:	e082      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f984:	2308      	movs	r3, #8
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98a:	e07e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f98c:	2310      	movs	r3, #16
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f992:	e07a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f994:	2320      	movs	r3, #32
 800f996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99a:	e076      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f99c:	2340      	movs	r3, #64	; 0x40
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a2:	e072      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f9a4:	2380      	movs	r3, #128	; 0x80
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9aa:	e06e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a75      	ldr	r2, [pc, #468]	; (800fb88 <UART_SetConfig+0x6a4>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d130      	bne.n	800fa18 <UART_SetConfig+0x534>
 800f9b6:	4b72      	ldr	r3, [pc, #456]	; (800fb80 <UART_SetConfig+0x69c>)
 800f9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ba:	f003 0307 	and.w	r3, r3, #7
 800f9be:	2b05      	cmp	r3, #5
 800f9c0:	d826      	bhi.n	800fa10 <UART_SetConfig+0x52c>
 800f9c2:	a201      	add	r2, pc, #4	; (adr r2, 800f9c8 <UART_SetConfig+0x4e4>)
 800f9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c8:	0800f9e1 	.word	0x0800f9e1
 800f9cc:	0800f9e9 	.word	0x0800f9e9
 800f9d0:	0800f9f1 	.word	0x0800f9f1
 800f9d4:	0800f9f9 	.word	0x0800f9f9
 800f9d8:	0800fa01 	.word	0x0800fa01
 800f9dc:	0800fa09 	.word	0x0800fa09
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e6:	e050      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ee:	e04c      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f6:	e048      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fe:	e044      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa00:	2320      	movs	r3, #32
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa06:	e040      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa08:	2340      	movs	r3, #64	; 0x40
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0e:	e03c      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa10:	2380      	movs	r3, #128	; 0x80
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa16:	e038      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a5b      	ldr	r2, [pc, #364]	; (800fb8c <UART_SetConfig+0x6a8>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d130      	bne.n	800fa84 <UART_SetConfig+0x5a0>
 800fa22:	4b57      	ldr	r3, [pc, #348]	; (800fb80 <UART_SetConfig+0x69c>)
 800fa24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa26:	f003 0307 	and.w	r3, r3, #7
 800fa2a:	2b05      	cmp	r3, #5
 800fa2c:	d826      	bhi.n	800fa7c <UART_SetConfig+0x598>
 800fa2e:	a201      	add	r2, pc, #4	; (adr r2, 800fa34 <UART_SetConfig+0x550>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fa4d 	.word	0x0800fa4d
 800fa38:	0800fa55 	.word	0x0800fa55
 800fa3c:	0800fa5d 	.word	0x0800fa5d
 800fa40:	0800fa65 	.word	0x0800fa65
 800fa44:	0800fa6d 	.word	0x0800fa6d
 800fa48:	0800fa75 	.word	0x0800fa75
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa52:	e01a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa54:	2304      	movs	r3, #4
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5a:	e016      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa5c:	2308      	movs	r3, #8
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa62:	e012      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa64:	2310      	movs	r3, #16
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6a:	e00e      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa6c:	2320      	movs	r3, #32
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa72:	e00a      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa74:	2340      	movs	r3, #64	; 0x40
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7a:	e006      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa7c:	2380      	movs	r3, #128	; 0x80
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa82:	e002      	b.n	800fa8a <UART_SetConfig+0x5a6>
 800fa84:	2380      	movs	r3, #128	; 0x80
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4a3f      	ldr	r2, [pc, #252]	; (800fb8c <UART_SetConfig+0x6a8>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	f040 80f8 	bne.w	800fc86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa9a:	2b20      	cmp	r3, #32
 800fa9c:	dc46      	bgt.n	800fb2c <UART_SetConfig+0x648>
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	f2c0 8082 	blt.w	800fba8 <UART_SetConfig+0x6c4>
 800faa4:	3b02      	subs	r3, #2
 800faa6:	2b1e      	cmp	r3, #30
 800faa8:	d87e      	bhi.n	800fba8 <UART_SetConfig+0x6c4>
 800faaa:	a201      	add	r2, pc, #4	; (adr r2, 800fab0 <UART_SetConfig+0x5cc>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fb33 	.word	0x0800fb33
 800fab4:	0800fba9 	.word	0x0800fba9
 800fab8:	0800fb3b 	.word	0x0800fb3b
 800fabc:	0800fba9 	.word	0x0800fba9
 800fac0:	0800fba9 	.word	0x0800fba9
 800fac4:	0800fba9 	.word	0x0800fba9
 800fac8:	0800fb4b 	.word	0x0800fb4b
 800facc:	0800fba9 	.word	0x0800fba9
 800fad0:	0800fba9 	.word	0x0800fba9
 800fad4:	0800fba9 	.word	0x0800fba9
 800fad8:	0800fba9 	.word	0x0800fba9
 800fadc:	0800fba9 	.word	0x0800fba9
 800fae0:	0800fba9 	.word	0x0800fba9
 800fae4:	0800fba9 	.word	0x0800fba9
 800fae8:	0800fb5b 	.word	0x0800fb5b
 800faec:	0800fba9 	.word	0x0800fba9
 800faf0:	0800fba9 	.word	0x0800fba9
 800faf4:	0800fba9 	.word	0x0800fba9
 800faf8:	0800fba9 	.word	0x0800fba9
 800fafc:	0800fba9 	.word	0x0800fba9
 800fb00:	0800fba9 	.word	0x0800fba9
 800fb04:	0800fba9 	.word	0x0800fba9
 800fb08:	0800fba9 	.word	0x0800fba9
 800fb0c:	0800fba9 	.word	0x0800fba9
 800fb10:	0800fba9 	.word	0x0800fba9
 800fb14:	0800fba9 	.word	0x0800fba9
 800fb18:	0800fba9 	.word	0x0800fba9
 800fb1c:	0800fba9 	.word	0x0800fba9
 800fb20:	0800fba9 	.word	0x0800fba9
 800fb24:	0800fba9 	.word	0x0800fba9
 800fb28:	0800fb9b 	.word	0x0800fb9b
 800fb2c:	2b40      	cmp	r3, #64	; 0x40
 800fb2e:	d037      	beq.n	800fba0 <UART_SetConfig+0x6bc>
 800fb30:	e03a      	b.n	800fba8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb32:	f7fc fce9 	bl	800c508 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb38:	e03c      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fc fcf8 	bl	800c534 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb48:	e034      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb4a:	f107 0318 	add.w	r3, r7, #24
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fc fe44 	bl	800c7dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb58:	e02c      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb5a:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <UART_SetConfig+0x69c>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f003 0320 	and.w	r3, r3, #32
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d016      	beq.n	800fb94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb66:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <UART_SetConfig+0x69c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	08db      	lsrs	r3, r3, #3
 800fb6c:	f003 0303 	and.w	r3, r3, #3
 800fb70:	4a07      	ldr	r2, [pc, #28]	; (800fb90 <UART_SetConfig+0x6ac>)
 800fb72:	fa22 f303 	lsr.w	r3, r2, r3
 800fb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb78:	e01c      	b.n	800fbb4 <UART_SetConfig+0x6d0>
 800fb7a:	bf00      	nop
 800fb7c:	40011400 	.word	0x40011400
 800fb80:	58024400 	.word	0x58024400
 800fb84:	40007800 	.word	0x40007800
 800fb88:	40007c00 	.word	0x40007c00
 800fb8c:	58000c00 	.word	0x58000c00
 800fb90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fb94:	4b9d      	ldr	r3, [pc, #628]	; (800fe0c <UART_SetConfig+0x928>)
 800fb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb98:	e00c      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb9a:	4b9d      	ldr	r3, [pc, #628]	; (800fe10 <UART_SetConfig+0x92c>)
 800fb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb9e:	e009      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fba6:	e005      	b.n	800fbb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbac:	2301      	movs	r3, #1
 800fbae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fbb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f000 81de 	beq.w	800ff78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc0:	4a94      	ldr	r2, [pc, #592]	; (800fe14 <UART_SetConfig+0x930>)
 800fbc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbca:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	685a      	ldr	r2, [r3, #4]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	4413      	add	r3, r2
 800fbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d305      	bcc.n	800fbec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d903      	bls.n	800fbf4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fbec:	2301      	movs	r3, #1
 800fbee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fbf2:	e1c1      	b.n	800ff78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	60bb      	str	r3, [r7, #8]
 800fbfa:	60fa      	str	r2, [r7, #12]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc00:	4a84      	ldr	r2, [pc, #528]	; (800fe14 <UART_SetConfig+0x930>)
 800fc02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	2200      	movs	r2, #0
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc16:	f7f0 fbb3 	bl	8000380 <__aeabi_uldivmod>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4610      	mov	r0, r2
 800fc20:	4619      	mov	r1, r3
 800fc22:	f04f 0200 	mov.w	r2, #0
 800fc26:	f04f 0300 	mov.w	r3, #0
 800fc2a:	020b      	lsls	r3, r1, #8
 800fc2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc30:	0202      	lsls	r2, r0, #8
 800fc32:	6979      	ldr	r1, [r7, #20]
 800fc34:	6849      	ldr	r1, [r1, #4]
 800fc36:	0849      	lsrs	r1, r1, #1
 800fc38:	2000      	movs	r0, #0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	eb12 0804 	adds.w	r8, r2, r4
 800fc42:	eb43 0905 	adc.w	r9, r3, r5
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	469a      	mov	sl, r3
 800fc4e:	4693      	mov	fp, r2
 800fc50:	4652      	mov	r2, sl
 800fc52:	465b      	mov	r3, fp
 800fc54:	4640      	mov	r0, r8
 800fc56:	4649      	mov	r1, r9
 800fc58:	f7f0 fb92 	bl	8000380 <__aeabi_uldivmod>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4613      	mov	r3, r2
 800fc62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc6a:	d308      	bcc.n	800fc7e <UART_SetConfig+0x79a>
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc72:	d204      	bcs.n	800fc7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc7a:	60da      	str	r2, [r3, #12]
 800fc7c:	e17c      	b.n	800ff78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc84:	e178      	b.n	800ff78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	69db      	ldr	r3, [r3, #28]
 800fc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc8e:	f040 80c5 	bne.w	800fe1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fc92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc96:	2b20      	cmp	r3, #32
 800fc98:	dc48      	bgt.n	800fd2c <UART_SetConfig+0x848>
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	db7b      	blt.n	800fd96 <UART_SetConfig+0x8b2>
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	d879      	bhi.n	800fd96 <UART_SetConfig+0x8b2>
 800fca2:	a201      	add	r2, pc, #4	; (adr r2, 800fca8 <UART_SetConfig+0x7c4>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd3b 	.word	0x0800fd3b
 800fcb0:	0800fd97 	.word	0x0800fd97
 800fcb4:	0800fd97 	.word	0x0800fd97
 800fcb8:	0800fd43 	.word	0x0800fd43
 800fcbc:	0800fd97 	.word	0x0800fd97
 800fcc0:	0800fd97 	.word	0x0800fd97
 800fcc4:	0800fd97 	.word	0x0800fd97
 800fcc8:	0800fd53 	.word	0x0800fd53
 800fccc:	0800fd97 	.word	0x0800fd97
 800fcd0:	0800fd97 	.word	0x0800fd97
 800fcd4:	0800fd97 	.word	0x0800fd97
 800fcd8:	0800fd97 	.word	0x0800fd97
 800fcdc:	0800fd97 	.word	0x0800fd97
 800fce0:	0800fd97 	.word	0x0800fd97
 800fce4:	0800fd97 	.word	0x0800fd97
 800fce8:	0800fd63 	.word	0x0800fd63
 800fcec:	0800fd97 	.word	0x0800fd97
 800fcf0:	0800fd97 	.word	0x0800fd97
 800fcf4:	0800fd97 	.word	0x0800fd97
 800fcf8:	0800fd97 	.word	0x0800fd97
 800fcfc:	0800fd97 	.word	0x0800fd97
 800fd00:	0800fd97 	.word	0x0800fd97
 800fd04:	0800fd97 	.word	0x0800fd97
 800fd08:	0800fd97 	.word	0x0800fd97
 800fd0c:	0800fd97 	.word	0x0800fd97
 800fd10:	0800fd97 	.word	0x0800fd97
 800fd14:	0800fd97 	.word	0x0800fd97
 800fd18:	0800fd97 	.word	0x0800fd97
 800fd1c:	0800fd97 	.word	0x0800fd97
 800fd20:	0800fd97 	.word	0x0800fd97
 800fd24:	0800fd97 	.word	0x0800fd97
 800fd28:	0800fd89 	.word	0x0800fd89
 800fd2c:	2b40      	cmp	r3, #64	; 0x40
 800fd2e:	d02e      	beq.n	800fd8e <UART_SetConfig+0x8aa>
 800fd30:	e031      	b.n	800fd96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd32:	f7fb fc77 	bl	800b624 <HAL_RCC_GetPCLK1Freq>
 800fd36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd38:	e033      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd3a:	f7fb fc89 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800fd3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd40:	e02f      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fc fbf4 	bl	800c534 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd50:	e027      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fc fd40 	bl	800c7dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd60:	e01f      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd62:	4b2d      	ldr	r3, [pc, #180]	; (800fe18 <UART_SetConfig+0x934>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd6e:	4b2a      	ldr	r3, [pc, #168]	; (800fe18 <UART_SetConfig+0x934>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	08db      	lsrs	r3, r3, #3
 800fd74:	f003 0303 	and.w	r3, r3, #3
 800fd78:	4a24      	ldr	r2, [pc, #144]	; (800fe0c <UART_SetConfig+0x928>)
 800fd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd80:	e00f      	b.n	800fda2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd82:	4b22      	ldr	r3, [pc, #136]	; (800fe0c <UART_SetConfig+0x928>)
 800fd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd86:	e00c      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd88:	4b21      	ldr	r3, [pc, #132]	; (800fe10 <UART_SetConfig+0x92c>)
 800fd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd8c:	e009      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd94:	e005      	b.n	800fda2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd96:	2300      	movs	r3, #0
 800fd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fda0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 80e7 	beq.w	800ff78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdae:	4a19      	ldr	r2, [pc, #100]	; (800fe14 <UART_SetConfig+0x930>)
 800fdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdbc:	005a      	lsls	r2, r3, #1
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	085b      	lsrs	r3, r3, #1
 800fdc4:	441a      	add	r2, r3
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd2:	2b0f      	cmp	r3, #15
 800fdd4:	d916      	bls.n	800fe04 <UART_SetConfig+0x920>
 800fdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fddc:	d212      	bcs.n	800fe04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	f023 030f 	bic.w	r3, r3, #15
 800fde6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdea:	085b      	lsrs	r3, r3, #1
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	f003 0307 	and.w	r3, r3, #7
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe00:	60da      	str	r2, [r3, #12]
 800fe02:	e0b9      	b.n	800ff78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe0a:	e0b5      	b.n	800ff78 <UART_SetConfig+0xa94>
 800fe0c:	03d09000 	.word	0x03d09000
 800fe10:	003d0900 	.word	0x003d0900
 800fe14:	0802fe10 	.word	0x0802fe10
 800fe18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe20:	2b20      	cmp	r3, #32
 800fe22:	dc49      	bgt.n	800feb8 <UART_SetConfig+0x9d4>
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	db7c      	blt.n	800ff22 <UART_SetConfig+0xa3e>
 800fe28:	2b20      	cmp	r3, #32
 800fe2a:	d87a      	bhi.n	800ff22 <UART_SetConfig+0xa3e>
 800fe2c:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <UART_SetConfig+0x950>)
 800fe2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe32:	bf00      	nop
 800fe34:	0800febf 	.word	0x0800febf
 800fe38:	0800fec7 	.word	0x0800fec7
 800fe3c:	0800ff23 	.word	0x0800ff23
 800fe40:	0800ff23 	.word	0x0800ff23
 800fe44:	0800fecf 	.word	0x0800fecf
 800fe48:	0800ff23 	.word	0x0800ff23
 800fe4c:	0800ff23 	.word	0x0800ff23
 800fe50:	0800ff23 	.word	0x0800ff23
 800fe54:	0800fedf 	.word	0x0800fedf
 800fe58:	0800ff23 	.word	0x0800ff23
 800fe5c:	0800ff23 	.word	0x0800ff23
 800fe60:	0800ff23 	.word	0x0800ff23
 800fe64:	0800ff23 	.word	0x0800ff23
 800fe68:	0800ff23 	.word	0x0800ff23
 800fe6c:	0800ff23 	.word	0x0800ff23
 800fe70:	0800ff23 	.word	0x0800ff23
 800fe74:	0800feef 	.word	0x0800feef
 800fe78:	0800ff23 	.word	0x0800ff23
 800fe7c:	0800ff23 	.word	0x0800ff23
 800fe80:	0800ff23 	.word	0x0800ff23
 800fe84:	0800ff23 	.word	0x0800ff23
 800fe88:	0800ff23 	.word	0x0800ff23
 800fe8c:	0800ff23 	.word	0x0800ff23
 800fe90:	0800ff23 	.word	0x0800ff23
 800fe94:	0800ff23 	.word	0x0800ff23
 800fe98:	0800ff23 	.word	0x0800ff23
 800fe9c:	0800ff23 	.word	0x0800ff23
 800fea0:	0800ff23 	.word	0x0800ff23
 800fea4:	0800ff23 	.word	0x0800ff23
 800fea8:	0800ff23 	.word	0x0800ff23
 800feac:	0800ff23 	.word	0x0800ff23
 800feb0:	0800ff23 	.word	0x0800ff23
 800feb4:	0800ff15 	.word	0x0800ff15
 800feb8:	2b40      	cmp	r3, #64	; 0x40
 800feba:	d02e      	beq.n	800ff1a <UART_SetConfig+0xa36>
 800febc:	e031      	b.n	800ff22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800febe:	f7fb fbb1 	bl	800b624 <HAL_RCC_GetPCLK1Freq>
 800fec2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fec4:	e033      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fec6:	f7fb fbc3 	bl	800b650 <HAL_RCC_GetPCLK2Freq>
 800feca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fecc:	e02f      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fc fb2e 	bl	800c534 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fedc:	e027      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fede:	f107 0318 	add.w	r3, r7, #24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fc fc7a 	bl	800c7dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feec:	e01f      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800feee:	4b2d      	ldr	r3, [pc, #180]	; (800ffa4 <UART_SetConfig+0xac0>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f003 0320 	and.w	r3, r3, #32
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d009      	beq.n	800ff0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fefa:	4b2a      	ldr	r3, [pc, #168]	; (800ffa4 <UART_SetConfig+0xac0>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	08db      	lsrs	r3, r3, #3
 800ff00:	f003 0303 	and.w	r3, r3, #3
 800ff04:	4a28      	ldr	r2, [pc, #160]	; (800ffa8 <UART_SetConfig+0xac4>)
 800ff06:	fa22 f303 	lsr.w	r3, r2, r3
 800ff0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff0c:	e00f      	b.n	800ff2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ff0e:	4b26      	ldr	r3, [pc, #152]	; (800ffa8 <UART_SetConfig+0xac4>)
 800ff10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff12:	e00c      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff14:	4b25      	ldr	r3, [pc, #148]	; (800ffac <UART_SetConfig+0xac8>)
 800ff16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff18:	e009      	b.n	800ff2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff20:	e005      	b.n	800ff2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ff22:	2300      	movs	r3, #0
 800ff24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff26:	2301      	movs	r3, #1
 800ff28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff2c:	bf00      	nop
    }

    if (pclk != 0U)
 800ff2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d021      	beq.n	800ff78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff38:	4a1d      	ldr	r2, [pc, #116]	; (800ffb0 <UART_SetConfig+0xacc>)
 800ff3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	085b      	lsrs	r3, r3, #1
 800ff4c:	441a      	add	r2, r3
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	2b0f      	cmp	r3, #15
 800ff5c:	d909      	bls.n	800ff72 <UART_SetConfig+0xa8e>
 800ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff64:	d205      	bcs.n	800ff72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	60da      	str	r2, [r3, #12]
 800ff70:	e002      	b.n	800ff78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	2201      	movs	r2, #1
 800ff84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	2200      	movs	r2, #0
 800ff92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ff94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3748      	adds	r7, #72	; 0x48
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffa2:	bf00      	nop
 800ffa4:	58024400 	.word	0x58024400
 800ffa8:	03d09000 	.word	0x03d09000
 800ffac:	003d0900 	.word	0x003d0900
 800ffb0:	0802fe10 	.word	0x0802fe10

0800ffb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc0:	f003 0301 	and.w	r3, r3, #1
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00a      	beq.n	800ffde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe2:	f003 0302 	and.w	r3, r3, #2
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00a      	beq.n	8010000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	430a      	orrs	r2, r1
 800fffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010004:	f003 0304 	and.w	r3, r3, #4
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00a      	beq.n	8010022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	430a      	orrs	r2, r1
 8010020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010026:	f003 0308 	and.w	r3, r3, #8
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00a      	beq.n	8010044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	430a      	orrs	r2, r1
 8010042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010048:	f003 0310 	and.w	r3, r3, #16
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00a      	beq.n	8010066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	689b      	ldr	r3, [r3, #8]
 8010056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	430a      	orrs	r2, r1
 8010064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801006a:	f003 0320 	and.w	r3, r3, #32
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00a      	beq.n	8010088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	689b      	ldr	r3, [r3, #8]
 8010078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	430a      	orrs	r2, r1
 8010086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801008c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010090:	2b00      	cmp	r3, #0
 8010092:	d01a      	beq.n	80100ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	430a      	orrs	r2, r1
 80100a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100b2:	d10a      	bne.n	80100ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00a      	beq.n	80100ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	430a      	orrs	r2, r1
 80100ea:	605a      	str	r2, [r3, #4]
  }
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010108:	f7f4 ffcc 	bl	80050a4 <HAL_GetTick>
 801010c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b08      	cmp	r3, #8
 801011a:	d10e      	bne.n	801013a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801011c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2200      	movs	r2, #0
 8010126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f82f 	bl	801018e <UART_WaitOnFlagUntilTimeout>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010136:	2303      	movs	r3, #3
 8010138:	e025      	b.n	8010186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f003 0304 	and.w	r3, r3, #4
 8010144:	2b04      	cmp	r3, #4
 8010146:	d10e      	bne.n	8010166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	2200      	movs	r2, #0
 8010152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f819 	bl	801018e <UART_WaitOnFlagUntilTimeout>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010162:	2303      	movs	r3, #3
 8010164:	e00f      	b.n	8010186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2220      	movs	r2, #32
 801016a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2220      	movs	r2, #32
 8010172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b09c      	sub	sp, #112	; 0x70
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	60b9      	str	r1, [r7, #8]
 8010198:	603b      	str	r3, [r7, #0]
 801019a:	4613      	mov	r3, r2
 801019c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801019e:	e0a9      	b.n	80102f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a6:	f000 80a5 	beq.w	80102f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101aa:	f7f4 ff7b 	bl	80050a4 <HAL_GetTick>
 80101ae:	4602      	mov	r2, r0
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d302      	bcc.n	80101c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80101ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d140      	bne.n	8010242 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c8:	e853 3f00 	ldrex	r3, [r3]
 80101cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80101ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80101d4:	667b      	str	r3, [r7, #100]	; 0x64
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80101e6:	e841 2300 	strex	r3, r2, [r1]
 80101ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80101ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1e6      	bne.n	80101c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3308      	adds	r3, #8
 80101f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101fc:	e853 3f00 	ldrex	r3, [r3]
 8010200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010204:	f023 0301 	bic.w	r3, r3, #1
 8010208:	663b      	str	r3, [r7, #96]	; 0x60
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	3308      	adds	r3, #8
 8010210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010212:	64ba      	str	r2, [r7, #72]	; 0x48
 8010214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801021a:	e841 2300 	strex	r3, r2, [r1]
 801021e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1e5      	bne.n	80101f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2220      	movs	r2, #32
 801022a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2220      	movs	r2, #32
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801023e:	2303      	movs	r3, #3
 8010240:	e069      	b.n	8010316 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f003 0304 	and.w	r3, r3, #4
 801024c:	2b00      	cmp	r3, #0
 801024e:	d051      	beq.n	80102f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	69db      	ldr	r3, [r3, #28]
 8010256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801025a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801025e:	d149      	bne.n	80102f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010272:	e853 3f00 	ldrex	r3, [r3]
 8010276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801027e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	461a      	mov	r2, r3
 8010286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010288:	637b      	str	r3, [r7, #52]	; 0x34
 801028a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801028c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801028e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010290:	e841 2300 	strex	r3, r2, [r1]
 8010294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1e6      	bne.n	801026a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	3308      	adds	r3, #8
 80102a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	e853 3f00 	ldrex	r3, [r3]
 80102aa:	613b      	str	r3, [r7, #16]
   return(result);
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	f023 0301 	bic.w	r3, r3, #1
 80102b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	3308      	adds	r3, #8
 80102ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102bc:	623a      	str	r2, [r7, #32]
 80102be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c0:	69f9      	ldr	r1, [r7, #28]
 80102c2:	6a3a      	ldr	r2, [r7, #32]
 80102c4:	e841 2300 	strex	r3, r2, [r1]
 80102c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d1e5      	bne.n	801029c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2220      	movs	r2, #32
 80102d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2220      	movs	r2, #32
 80102dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2220      	movs	r2, #32
 80102e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	e010      	b.n	8010316 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	69da      	ldr	r2, [r3, #28]
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	4013      	ands	r3, r2
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	429a      	cmp	r2, r3
 8010302:	bf0c      	ite	eq
 8010304:	2301      	moveq	r3, #1
 8010306:	2300      	movne	r3, #0
 8010308:	b2db      	uxtb	r3, r3
 801030a:	461a      	mov	r2, r3
 801030c:	79fb      	ldrb	r3, [r7, #7]
 801030e:	429a      	cmp	r2, r3
 8010310:	f43f af46 	beq.w	80101a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3770      	adds	r7, #112	; 0x70
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010320:	b480      	push	{r7}
 8010322:	b0a3      	sub	sp, #140	; 0x8c
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	68ba      	ldr	r2, [r7, #8]
 8010332:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	88fa      	ldrh	r2, [r7, #6]
 8010338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	88fa      	ldrh	r2, [r7, #6]
 8010340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010352:	d10e      	bne.n	8010372 <UART_Start_Receive_IT+0x52>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <UART_Start_Receive_IT+0x48>
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010366:	e02d      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	22ff      	movs	r2, #255	; 0xff
 801036c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010370:	e028      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10d      	bne.n	8010396 <UART_Start_Receive_IT+0x76>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <UART_Start_Receive_IT+0x6c>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	22ff      	movs	r2, #255	; 0xff
 8010386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801038a:	e01b      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	227f      	movs	r2, #127	; 0x7f
 8010390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010394:	e016      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801039e:	d10d      	bne.n	80103bc <UART_Start_Receive_IT+0x9c>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d104      	bne.n	80103b2 <UART_Start_Receive_IT+0x92>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	227f      	movs	r2, #127	; 0x7f
 80103ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103b0:	e008      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	223f      	movs	r2, #63	; 0x3f
 80103b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103ba:	e003      	b.n	80103c4 <UART_Start_Receive_IT+0xa4>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2200      	movs	r2, #0
 80103c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2222      	movs	r2, #34	; 0x22
 80103d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3308      	adds	r3, #8
 80103da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103de:	e853 3f00 	ldrex	r3, [r3]
 80103e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80103e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103e6:	f043 0301 	orr.w	r3, r3, #1
 80103ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	3308      	adds	r3, #8
 80103f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80103f8:	673a      	str	r2, [r7, #112]	; 0x70
 80103fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80103fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010400:	e841 2300 	strex	r3, r2, [r1]
 8010404:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1e3      	bne.n	80103d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010414:	d153      	bne.n	80104be <UART_Start_Receive_IT+0x19e>
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801041c:	88fa      	ldrh	r2, [r7, #6]
 801041e:	429a      	cmp	r2, r3
 8010420:	d34d      	bcc.n	80104be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	689b      	ldr	r3, [r3, #8]
 8010426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801042a:	d107      	bne.n	801043c <UART_Start_Receive_IT+0x11c>
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d103      	bne.n	801043c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	4a4b      	ldr	r2, [pc, #300]	; (8010564 <UART_Start_Receive_IT+0x244>)
 8010438:	671a      	str	r2, [r3, #112]	; 0x70
 801043a:	e002      	b.n	8010442 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4a4a      	ldr	r2, [pc, #296]	; (8010568 <UART_Start_Receive_IT+0x248>)
 8010440:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2200      	movs	r2, #0
 8010446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d01a      	beq.n	8010488 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801045a:	e853 3f00 	ldrex	r3, [r3]
 801045e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010476:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010478:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801047a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801047c:	e841 2300 	strex	r3, r2, [r1]
 8010480:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e4      	bne.n	8010452 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3308      	adds	r3, #8
 801048e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010492:	e853 3f00 	ldrex	r3, [r3]
 8010496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801049e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3308      	adds	r3, #8
 80104a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80104a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80104aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80104ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104b0:	e841 2300 	strex	r3, r2, [r1]
 80104b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80104b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1e5      	bne.n	8010488 <UART_Start_Receive_IT+0x168>
 80104bc:	e04a      	b.n	8010554 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104c6:	d107      	bne.n	80104d8 <UART_Start_Receive_IT+0x1b8>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4a26      	ldr	r2, [pc, #152]	; (801056c <UART_Start_Receive_IT+0x24c>)
 80104d4:	671a      	str	r2, [r3, #112]	; 0x70
 80104d6:	e002      	b.n	80104de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	4a25      	ldr	r2, [pc, #148]	; (8010570 <UART_Start_Receive_IT+0x250>)
 80104dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d019      	beq.n	8010522 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f6:	e853 3f00 	ldrex	r3, [r3]
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010502:	677b      	str	r3, [r7, #116]	; 0x74
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
 801050e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010514:	e841 2300 	strex	r3, r2, [r1]
 8010518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1e6      	bne.n	80104ee <UART_Start_Receive_IT+0x1ce>
 8010520:	e018      	b.n	8010554 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	e853 3f00 	ldrex	r3, [r3]
 801052e:	613b      	str	r3, [r7, #16]
   return(result);
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	f043 0320 	orr.w	r3, r3, #32
 8010536:	67bb      	str	r3, [r7, #120]	; 0x78
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	461a      	mov	r2, r3
 801053e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010540:	623b      	str	r3, [r7, #32]
 8010542:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010544:	69f9      	ldr	r1, [r7, #28]
 8010546:	6a3a      	ldr	r2, [r7, #32]
 8010548:	e841 2300 	strex	r3, r2, [r1]
 801054c:	61bb      	str	r3, [r7, #24]
   return(result);
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1e6      	bne.n	8010522 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	378c      	adds	r7, #140	; 0x8c
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	08010fc1 	.word	0x08010fc1
 8010568:	08010cc9 	.word	0x08010cc9
 801056c:	08010b67 	.word	0x08010b67
 8010570:	08010a07 	.word	0x08010a07

08010574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010574:	b480      	push	{r7}
 8010576:	b095      	sub	sp, #84	; 0x54
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010584:	e853 3f00 	ldrex	r3, [r3]
 8010588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	461a      	mov	r2, r3
 8010598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801059a:	643b      	str	r3, [r7, #64]	; 0x40
 801059c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801059e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105a2:	e841 2300 	strex	r3, r2, [r1]
 80105a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d1e6      	bne.n	801057c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	3308      	adds	r3, #8
 80105b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b6:	6a3b      	ldr	r3, [r7, #32]
 80105b8:	e853 3f00 	ldrex	r3, [r3]
 80105bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	4b1e      	ldr	r3, [pc, #120]	; (801063c <UART_EndRxTransfer+0xc8>)
 80105c2:	4013      	ands	r3, r2
 80105c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	3308      	adds	r3, #8
 80105cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105d6:	e841 2300 	strex	r3, r2, [r1]
 80105da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e5      	bne.n	80105ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d118      	bne.n	801061c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	e853 3f00 	ldrex	r3, [r3]
 80105f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	f023 0310 	bic.w	r3, r3, #16
 80105fe:	647b      	str	r3, [r7, #68]	; 0x44
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	461a      	mov	r2, r3
 8010606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010608:	61bb      	str	r3, [r7, #24]
 801060a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801060c:	6979      	ldr	r1, [r7, #20]
 801060e:	69ba      	ldr	r2, [r7, #24]
 8010610:	e841 2300 	strex	r3, r2, [r1]
 8010614:	613b      	str	r3, [r7, #16]
   return(result);
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d1e6      	bne.n	80105ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2220      	movs	r2, #32
 8010620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010630:	bf00      	nop
 8010632:	3754      	adds	r7, #84	; 0x54
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr
 801063c:	effffffe 	.word	0xeffffffe

08010640 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801064c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2200      	movs	r2, #0
 801065a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	f7fe ff2a 	bl	800f4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010664:	bf00      	nop
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801066c:	b480      	push	{r7}
 801066e:	b08f      	sub	sp, #60	; 0x3c
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801067a:	2b21      	cmp	r3, #33	; 0x21
 801067c:	d14c      	bne.n	8010718 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010684:	b29b      	uxth	r3, r3
 8010686:	2b00      	cmp	r3, #0
 8010688:	d132      	bne.n	80106f0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	e853 3f00 	ldrex	r3, [r3]
 8010696:	61fb      	str	r3, [r7, #28]
   return(result);
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	461a      	mov	r2, r3
 80106a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b0:	e841 2300 	strex	r3, r2, [r1]
 80106b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1e6      	bne.n	801068a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	e853 3f00 	ldrex	r3, [r3]
 80106c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d0:	633b      	str	r3, [r7, #48]	; 0x30
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106da:	61bb      	str	r3, [r7, #24]
 80106dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106de:	6979      	ldr	r1, [r7, #20]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	e841 2300 	strex	r3, r2, [r1]
 80106e6:	613b      	str	r3, [r7, #16]
   return(result);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1e6      	bne.n	80106bc <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80106ee:	e013      	b.n	8010718 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f4:	781a      	ldrb	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010700:	1c5a      	adds	r2, r3, #1
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801070c:	b29b      	uxth	r3, r3
 801070e:	3b01      	subs	r3, #1
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010718:	bf00      	nop
 801071a:	373c      	adds	r7, #60	; 0x3c
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010724:	b480      	push	{r7}
 8010726:	b091      	sub	sp, #68	; 0x44
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010732:	2b21      	cmp	r3, #33	; 0x21
 8010734:	d151      	bne.n	80107da <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801073c:	b29b      	uxth	r3, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	d132      	bne.n	80107a8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	e853 3f00 	ldrex	r3, [r3]
 801074e:	623b      	str	r3, [r7, #32]
   return(result);
 8010750:	6a3b      	ldr	r3, [r7, #32]
 8010752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010756:	63bb      	str	r3, [r7, #56]	; 0x38
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	461a      	mov	r2, r3
 801075e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010760:	633b      	str	r3, [r7, #48]	; 0x30
 8010762:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010768:	e841 2300 	strex	r3, r2, [r1]
 801076c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1e6      	bne.n	8010742 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	e853 3f00 	ldrex	r3, [r3]
 8010780:	60fb      	str	r3, [r7, #12]
   return(result);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010788:	637b      	str	r3, [r7, #52]	; 0x34
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010792:	61fb      	str	r3, [r7, #28]
 8010794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010796:	69b9      	ldr	r1, [r7, #24]
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	e841 2300 	strex	r3, r2, [r1]
 801079e:	617b      	str	r3, [r7, #20]
   return(result);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e6      	bne.n	8010774 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80107a6:	e018      	b.n	80107da <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80107ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b0:	881b      	ldrh	r3, [r3, #0]
 80107b2:	461a      	mov	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80107bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107c2:	1c9a      	adds	r2, r3, #2
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	3b01      	subs	r3, #1
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80107da:	bf00      	nop
 80107dc:	3744      	adds	r7, #68	; 0x44
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80107e6:	b480      	push	{r7}
 80107e8:	b091      	sub	sp, #68	; 0x44
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107f4:	2b21      	cmp	r3, #33	; 0x21
 80107f6:	d160      	bne.n	80108ba <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80107fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010800:	e057      	b.n	80108b2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010808:	b29b      	uxth	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	d133      	bne.n	8010876 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3308      	adds	r3, #8
 8010814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	e853 3f00 	ldrex	r3, [r3]
 801081c:	623b      	str	r3, [r7, #32]
   return(result);
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010824:	63bb      	str	r3, [r7, #56]	; 0x38
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3308      	adds	r3, #8
 801082c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801082e:	633a      	str	r2, [r7, #48]	; 0x30
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010836:	e841 2300 	strex	r3, r2, [r1]
 801083a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1e5      	bne.n	801080e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	e853 3f00 	ldrex	r3, [r3]
 801084e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010856:	637b      	str	r3, [r7, #52]	; 0x34
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	461a      	mov	r2, r3
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010860:	61fb      	str	r3, [r7, #28]
 8010862:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010864:	69b9      	ldr	r1, [r7, #24]
 8010866:	69fa      	ldr	r2, [r7, #28]
 8010868:	e841 2300 	strex	r3, r2, [r1]
 801086c:	617b      	str	r3, [r7, #20]
   return(result);
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1e6      	bne.n	8010842 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010874:	e021      	b.n	80108ba <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	69db      	ldr	r3, [r3, #28]
 801087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010880:	2b00      	cmp	r3, #0
 8010882:	d013      	beq.n	80108ac <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010888:	781a      	ldrb	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010894:	1c5a      	adds	r2, r3, #1
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	3b01      	subs	r3, #1
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80108ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108ae:	3b01      	subs	r3, #1
 80108b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80108b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1a4      	bne.n	8010802 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80108b8:	e7ff      	b.n	80108ba <UART_TxISR_8BIT_FIFOEN+0xd4>
 80108ba:	bf00      	nop
 80108bc:	3744      	adds	r7, #68	; 0x44
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b091      	sub	sp, #68	; 0x44
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108d4:	2b21      	cmp	r3, #33	; 0x21
 80108d6:	d165      	bne.n	80109a4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80108de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80108e0:	e05c      	b.n	801099c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d133      	bne.n	8010956 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3308      	adds	r3, #8
 80108f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	e853 3f00 	ldrex	r3, [r3]
 80108fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010904:	637b      	str	r3, [r7, #52]	; 0x34
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	3308      	adds	r3, #8
 801090c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801090e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010916:	e841 2300 	strex	r3, r2, [r1]
 801091a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	2b00      	cmp	r3, #0
 8010920:	d1e5      	bne.n	80108ee <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	e853 3f00 	ldrex	r3, [r3]
 801092e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010936:	633b      	str	r3, [r7, #48]	; 0x30
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	461a      	mov	r2, r3
 801093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010940:	61bb      	str	r3, [r7, #24]
 8010942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010944:	6979      	ldr	r1, [r7, #20]
 8010946:	69ba      	ldr	r2, [r7, #24]
 8010948:	e841 2300 	strex	r3, r2, [r1]
 801094c:	613b      	str	r3, [r7, #16]
   return(result);
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d1e6      	bne.n	8010922 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8010954:	e026      	b.n	80109a4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	69db      	ldr	r3, [r3, #28]
 801095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010960:	2b00      	cmp	r3, #0
 8010962:	d018      	beq.n	8010996 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010968:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	461a      	mov	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010978:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801097e:	1c9a      	adds	r2, r3, #2
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801098a:	b29b      	uxth	r3, r3
 801098c:	3b01      	subs	r3, #1
 801098e:	b29a      	uxth	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010998:	3b01      	subs	r3, #1
 801099a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801099c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d19f      	bne.n	80108e2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80109a2:	e7ff      	b.n	80109a4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80109a4:	bf00      	nop
 80109a6:	3744      	adds	r7, #68	; 0x44
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b088      	sub	sp, #32
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	e853 3f00 	ldrex	r3, [r3]
 80109c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109cc:	61fb      	str	r3, [r7, #28]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	461a      	mov	r2, r3
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	61bb      	str	r3, [r7, #24]
 80109d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109da:	6979      	ldr	r1, [r7, #20]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	e841 2300 	strex	r3, r2, [r1]
 80109e2:	613b      	str	r3, [r7, #16]
   return(result);
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1e6      	bne.n	80109b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2220      	movs	r2, #32
 80109ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2200      	movs	r2, #0
 80109f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7f2 fca7 	bl	800334c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109fe:	bf00      	nop
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b096      	sub	sp, #88	; 0x58
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a1e:	2b22      	cmp	r3, #34	; 0x22
 8010a20:	f040 8095 	bne.w	8010b4e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a2e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010a32:	b2d9      	uxtb	r1, r3
 8010a34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a3e:	400a      	ands	r2, r1
 8010a40:	b2d2      	uxtb	r2, r2
 8010a42:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a48:	1c5a      	adds	r2, r3, #1
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	3b01      	subs	r3, #1
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d178      	bne.n	8010b5e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a74:	e853 3f00 	ldrex	r3, [r3]
 8010a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a80:	653b      	str	r3, [r7, #80]	; 0x50
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8010a8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a92:	e841 2300 	strex	r3, r2, [r1]
 8010a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1e6      	bne.n	8010a6c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3308      	adds	r3, #8
 8010aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa8:	e853 3f00 	ldrex	r3, [r3]
 8010aac:	623b      	str	r3, [r7, #32]
   return(result);
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	f023 0301 	bic.w	r3, r3, #1
 8010ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3308      	adds	r3, #8
 8010abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010abe:	633a      	str	r2, [r7, #48]	; 0x30
 8010ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ac6:	e841 2300 	strex	r3, r2, [r1]
 8010aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1e5      	bne.n	8010a9e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d12e      	bne.n	8010b46 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	e853 3f00 	ldrex	r3, [r3]
 8010afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f023 0310 	bic.w	r3, r3, #16
 8010b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	461a      	mov	r2, r3
 8010b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b0c:	61fb      	str	r3, [r7, #28]
 8010b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b10:	69b9      	ldr	r1, [r7, #24]
 8010b12:	69fa      	ldr	r2, [r7, #28]
 8010b14:	e841 2300 	strex	r3, r2, [r1]
 8010b18:	617b      	str	r3, [r7, #20]
   return(result);
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d1e6      	bne.n	8010aee <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	69db      	ldr	r3, [r3, #28]
 8010b26:	f003 0310 	and.w	r3, r3, #16
 8010b2a:	2b10      	cmp	r3, #16
 8010b2c:	d103      	bne.n	8010b36 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2210      	movs	r2, #16
 8010b34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f7fe fcc4 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b44:	e00b      	b.n	8010b5e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f7f2 fc22 	bl	8003390 <HAL_UART_RxCpltCallback>
}
 8010b4c:	e007      	b.n	8010b5e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	699a      	ldr	r2, [r3, #24]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f042 0208 	orr.w	r2, r2, #8
 8010b5c:	619a      	str	r2, [r3, #24]
}
 8010b5e:	bf00      	nop
 8010b60:	3758      	adds	r7, #88	; 0x58
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b096      	sub	sp, #88	; 0x58
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b7e:	2b22      	cmp	r3, #34	; 0x22
 8010b80:	f040 8095 	bne.w	8010cae <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b92:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010b94:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010b98:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ba8:	1c9a      	adds	r2, r3, #2
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	3b01      	subs	r3, #1
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d178      	bne.n	8010cbe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd4:	e853 3f00 	ldrex	r3, [r3]
 8010bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	461a      	mov	r2, r3
 8010be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bea:	643b      	str	r3, [r7, #64]	; 0x40
 8010bec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bf2:	e841 2300 	strex	r3, r2, [r1]
 8010bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e6      	bne.n	8010bcc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	3308      	adds	r3, #8
 8010c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c06:	6a3b      	ldr	r3, [r7, #32]
 8010c08:	e853 3f00 	ldrex	r3, [r3]
 8010c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	f023 0301 	bic.w	r3, r3, #1
 8010c14:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	3308      	adds	r3, #8
 8010c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c26:	e841 2300 	strex	r3, r2, [r1]
 8010c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1e5      	bne.n	8010bfe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2220      	movs	r2, #32
 8010c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d12e      	bne.n	8010ca6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	e853 3f00 	ldrex	r3, [r3]
 8010c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	f023 0310 	bic.w	r3, r3, #16
 8010c62:	647b      	str	r3, [r7, #68]	; 0x44
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c6c:	61bb      	str	r3, [r7, #24]
 8010c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c70:	6979      	ldr	r1, [r7, #20]
 8010c72:	69ba      	ldr	r2, [r7, #24]
 8010c74:	e841 2300 	strex	r3, r2, [r1]
 8010c78:	613b      	str	r3, [r7, #16]
   return(result);
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1e6      	bne.n	8010c4e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	69db      	ldr	r3, [r3, #28]
 8010c86:	f003 0310 	and.w	r3, r3, #16
 8010c8a:	2b10      	cmp	r3, #16
 8010c8c:	d103      	bne.n	8010c96 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2210      	movs	r2, #16
 8010c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7fe fc14 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ca4:	e00b      	b.n	8010cbe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7f2 fb72 	bl	8003390 <HAL_UART_RxCpltCallback>
}
 8010cac:	e007      	b.n	8010cbe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	699a      	ldr	r2, [r3, #24]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f042 0208 	orr.w	r2, r2, #8
 8010cbc:	619a      	str	r2, [r3, #24]
}
 8010cbe:	bf00      	nop
 8010cc0:	3758      	adds	r7, #88	; 0x58
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b0a6      	sub	sp, #152	; 0x98
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cd6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	69db      	ldr	r3, [r3, #28]
 8010ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cfe:	2b22      	cmp	r3, #34	; 0x22
 8010d00:	f040 814d 	bne.w	8010f9e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d0e:	e0f4      	b.n	8010efa <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d16:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010d1a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010d1e:	b2d9      	uxtb	r1, r3
 8010d20:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d2a:	400a      	ands	r2, r1
 8010d2c:	b2d2      	uxtb	r2, r2
 8010d2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d34:	1c5a      	adds	r2, r3, #1
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	3b01      	subs	r3, #1
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	69db      	ldr	r3, [r3, #28]
 8010d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d5a:	f003 0307 	and.w	r3, r3, #7
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d053      	beq.n	8010e0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d66:	f003 0301 	and.w	r3, r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d011      	beq.n	8010d92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00b      	beq.n	8010d92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d88:	f043 0201 	orr.w	r2, r3, #1
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010d92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d011      	beq.n	8010dc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00b      	beq.n	8010dc2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2202      	movs	r2, #2
 8010db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010db8:	f043 0204 	orr.w	r2, r3, #4
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d011      	beq.n	8010df2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00b      	beq.n	8010df2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2204      	movs	r2, #4
 8010de0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010de8:	f043 0202 	orr.w	r2, r3, #2
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d006      	beq.n	8010e0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7fe fb5b 	bl	800f4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d171      	bne.n	8010efa <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e1e:	e853 3f00 	ldrex	r3, [r3]
 8010e22:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	461a      	mov	r2, r3
 8010e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8010e3a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010e40:	e841 2300 	strex	r3, r2, [r1]
 8010e44:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d1e4      	bne.n	8010e16 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	3308      	adds	r3, #8
 8010e52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e56:	e853 3f00 	ldrex	r3, [r3]
 8010e5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e5e:	4b56      	ldr	r3, [pc, #344]	; (8010fb8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8010e60:	4013      	ands	r3, r2
 8010e62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3308      	adds	r3, #8
 8010e6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010e6c:	657a      	str	r2, [r7, #84]	; 0x54
 8010e6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e74:	e841 2300 	strex	r3, r2, [r1]
 8010e78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1e5      	bne.n	8010e4c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2220      	movs	r2, #32
 8010e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d12e      	bne.n	8010ef4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea4:	e853 3f00 	ldrex	r3, [r3]
 8010ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eac:	f023 0310 	bic.w	r3, r3, #16
 8010eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010eba:	643b      	str	r3, [r7, #64]	; 0x40
 8010ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ec2:	e841 2300 	strex	r3, r2, [r1]
 8010ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1e6      	bne.n	8010e9c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	69db      	ldr	r3, [r3, #28]
 8010ed4:	f003 0310 	and.w	r3, r3, #16
 8010ed8:	2b10      	cmp	r3, #16
 8010eda:	d103      	bne.n	8010ee4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2210      	movs	r2, #16
 8010ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010eea:	4619      	mov	r1, r3
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f7fe faed 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
 8010ef2:	e002      	b.n	8010efa <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7f2 fa4b 	bl	8003390 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010efa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d006      	beq.n	8010f10 <UART_RxISR_8BIT_FIFOEN+0x248>
 8010f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f06:	f003 0320 	and.w	r3, r3, #32
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	f47f af00 	bne.w	8010d10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010f1a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d045      	beq.n	8010fae <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f28:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d23e      	bcs.n	8010fae <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3308      	adds	r3, #8
 8010f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f38:	6a3b      	ldr	r3, [r7, #32]
 8010f3a:	e853 3f00 	ldrex	r3, [r3]
 8010f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f40:	69fb      	ldr	r3, [r7, #28]
 8010f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010f46:	673b      	str	r3, [r7, #112]	; 0x70
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	3308      	adds	r3, #8
 8010f4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f58:	e841 2300 	strex	r3, r2, [r1]
 8010f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1e5      	bne.n	8010f30 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	4a15      	ldr	r2, [pc, #84]	; (8010fbc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010f68:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	e853 3f00 	ldrex	r3, [r3]
 8010f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	f043 0320 	orr.w	r3, r3, #32
 8010f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	461a      	mov	r2, r3
 8010f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f88:	61bb      	str	r3, [r7, #24]
 8010f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f8c:	6979      	ldr	r1, [r7, #20]
 8010f8e:	69ba      	ldr	r2, [r7, #24]
 8010f90:	e841 2300 	strex	r3, r2, [r1]
 8010f94:	613b      	str	r3, [r7, #16]
   return(result);
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d1e6      	bne.n	8010f6a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010f9c:	e007      	b.n	8010fae <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	699a      	ldr	r2, [r3, #24]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f042 0208 	orr.w	r2, r2, #8
 8010fac:	619a      	str	r2, [r3, #24]
}
 8010fae:	bf00      	nop
 8010fb0:	3798      	adds	r7, #152	; 0x98
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	effffffe 	.word	0xeffffffe
 8010fbc:	08010a07 	.word	0x08010a07

08010fc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b0a8      	sub	sp, #160	; 0xa0
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fce:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	69db      	ldr	r3, [r3, #28]
 8010fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ff6:	2b22      	cmp	r3, #34	; 0x22
 8010ff8:	f040 8151 	bne.w	801129e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011002:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011006:	e0f8      	b.n	80111fa <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801101a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801101e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8011022:	4013      	ands	r3, r2
 8011024:	b29a      	uxth	r2, r3
 8011026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801102a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011030:	1c9a      	adds	r2, r3, #2
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801103c:	b29b      	uxth	r3, r3
 801103e:	3b01      	subs	r3, #1
 8011040:	b29a      	uxth	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	69db      	ldr	r3, [r3, #28]
 801104e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011056:	f003 0307 	and.w	r3, r3, #7
 801105a:	2b00      	cmp	r3, #0
 801105c:	d053      	beq.n	8011106 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801105e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011062:	f003 0301 	and.w	r3, r3, #1
 8011066:	2b00      	cmp	r3, #0
 8011068:	d011      	beq.n	801108e <UART_RxISR_16BIT_FIFOEN+0xce>
 801106a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00b      	beq.n	801108e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2201      	movs	r2, #1
 801107c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011084:	f043 0201 	orr.w	r2, r3, #1
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801108e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011092:	f003 0302 	and.w	r3, r3, #2
 8011096:	2b00      	cmp	r3, #0
 8011098:	d011      	beq.n	80110be <UART_RxISR_16BIT_FIFOEN+0xfe>
 801109a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801109e:	f003 0301 	and.w	r3, r3, #1
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00b      	beq.n	80110be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2202      	movs	r2, #2
 80110ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110b4:	f043 0204 	orr.w	r2, r3, #4
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80110be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80110c2:	f003 0304 	and.w	r3, r3, #4
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d011      	beq.n	80110ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80110ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80110ce:	f003 0301 	and.w	r3, r3, #1
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00b      	beq.n	80110ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2204      	movs	r2, #4
 80110dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110e4:	f043 0202 	orr.w	r2, r3, #2
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d006      	beq.n	8011106 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f7fe f9dd 	bl	800f4b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2200      	movs	r2, #0
 8011102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801110c:	b29b      	uxth	r3, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	d173      	bne.n	80111fa <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801111a:	e853 3f00 	ldrex	r3, [r3]
 801111e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011136:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011138:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801113a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801113c:	e841 2300 	strex	r3, r2, [r1]
 8011140:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1e4      	bne.n	8011112 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	3308      	adds	r3, #8
 801114e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011152:	e853 3f00 	ldrex	r3, [r3]
 8011156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801115a:	4b57      	ldr	r3, [pc, #348]	; (80112b8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801115c:	4013      	ands	r3, r2
 801115e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3308      	adds	r3, #8
 8011168:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801116c:	65ba      	str	r2, [r7, #88]	; 0x58
 801116e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011174:	e841 2300 	strex	r3, r2, [r1]
 8011178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801117a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1e3      	bne.n	8011148 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2220      	movs	r2, #32
 8011184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011192:	2b01      	cmp	r3, #1
 8011194:	d12e      	bne.n	80111f4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2200      	movs	r2, #0
 801119a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	e853 3f00 	ldrex	r3, [r3]
 80111a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80111aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ac:	f023 0310 	bic.w	r3, r3, #16
 80111b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	461a      	mov	r2, r3
 80111b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80111ba:	647b      	str	r3, [r7, #68]	; 0x44
 80111bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80111c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111c2:	e841 2300 	strex	r3, r2, [r1]
 80111c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80111c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1e6      	bne.n	801119c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	69db      	ldr	r3, [r3, #28]
 80111d4:	f003 0310 	and.w	r3, r3, #16
 80111d8:	2b10      	cmp	r3, #16
 80111da:	d103      	bne.n	80111e4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2210      	movs	r2, #16
 80111e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80111ea:	4619      	mov	r1, r3
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7fe f96d 	bl	800f4cc <HAL_UARTEx_RxEventCallback>
 80111f2:	e002      	b.n	80111fa <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7f2 f8cb 	bl	8003390 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80111fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d006      	beq.n	8011210 <UART_RxISR_16BIT_FIFOEN+0x250>
 8011202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011206:	f003 0320 	and.w	r3, r3, #32
 801120a:	2b00      	cmp	r3, #0
 801120c:	f47f aefc 	bne.w	8011008 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011216:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801121a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801121e:	2b00      	cmp	r3, #0
 8011220:	d045      	beq.n	80112ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011228:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801122c:	429a      	cmp	r2, r3
 801122e:	d23e      	bcs.n	80112ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	3308      	adds	r3, #8
 8011236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	e853 3f00 	ldrex	r3, [r3]
 801123e:	623b      	str	r3, [r7, #32]
   return(result);
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011246:	677b      	str	r3, [r7, #116]	; 0x74
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	3308      	adds	r3, #8
 801124e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011250:	633a      	str	r2, [r7, #48]	; 0x30
 8011252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011258:	e841 2300 	strex	r3, r2, [r1]
 801125c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1e5      	bne.n	8011230 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a15      	ldr	r2, [pc, #84]	; (80112bc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011268:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	e853 3f00 	ldrex	r3, [r3]
 8011276:	60fb      	str	r3, [r7, #12]
   return(result);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f043 0320 	orr.w	r3, r3, #32
 801127e:	673b      	str	r3, [r7, #112]	; 0x70
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	461a      	mov	r2, r3
 8011286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011288:	61fb      	str	r3, [r7, #28]
 801128a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128c:	69b9      	ldr	r1, [r7, #24]
 801128e:	69fa      	ldr	r2, [r7, #28]
 8011290:	e841 2300 	strex	r3, r2, [r1]
 8011294:	617b      	str	r3, [r7, #20]
   return(result);
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d1e6      	bne.n	801126a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801129c:	e007      	b.n	80112ae <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	699a      	ldr	r2, [r3, #24]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f042 0208 	orr.w	r2, r2, #8
 80112ac:	619a      	str	r2, [r3, #24]
}
 80112ae:	bf00      	nop
 80112b0:	37a0      	adds	r7, #160	; 0xa0
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	effffffe 	.word	0xeffffffe
 80112bc:	08010b67 	.word	0x08010b67

080112c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80112c8:	bf00      	nop
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801130a:	2b01      	cmp	r3, #1
 801130c:	d101      	bne.n	8011312 <HAL_UARTEx_EnableFifoMode+0x16>
 801130e:	2302      	movs	r3, #2
 8011310:	e02b      	b.n	801136a <HAL_UARTEx_EnableFifoMode+0x6e>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2201      	movs	r2, #1
 8011316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2224      	movs	r2, #36	; 0x24
 801131e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f022 0201 	bic.w	r2, r2, #1
 8011338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8011348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 f8c2 	bl	80114dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2220      	movs	r2, #32
 801135c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011368:	2300      	movs	r3, #0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011372:	b480      	push	{r7}
 8011374:	b085      	sub	sp, #20
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011380:	2b01      	cmp	r3, #1
 8011382:	d101      	bne.n	8011388 <HAL_UARTEx_DisableFifoMode+0x16>
 8011384:	2302      	movs	r3, #2
 8011386:	e027      	b.n	80113d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2201      	movs	r2, #1
 801138c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2224      	movs	r2, #36	; 0x24
 8011394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	681a      	ldr	r2, [r3, #0]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f022 0201 	bic.w	r2, r2, #1
 80113ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80113b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2220      	movs	r2, #32
 80113ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2200      	movs	r2, #0
 80113d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d101      	bne.n	80113fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80113f8:	2302      	movs	r3, #2
 80113fa:	e02d      	b.n	8011458 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2201      	movs	r2, #1
 8011400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2224      	movs	r2, #36	; 0x24
 8011408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f022 0201 	bic.w	r2, r2, #1
 8011422:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	689b      	ldr	r3, [r3, #8]
 801142a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	430a      	orrs	r2, r1
 8011436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f84f 	bl	80114dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2220      	movs	r2, #32
 801144a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3710      	adds	r7, #16
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011470:	2b01      	cmp	r3, #1
 8011472:	d101      	bne.n	8011478 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011474:	2302      	movs	r3, #2
 8011476:	e02d      	b.n	80114d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2201      	movs	r2, #1
 801147c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2224      	movs	r2, #36	; 0x24
 8011484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f022 0201 	bic.w	r2, r2, #1
 801149e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	683a      	ldr	r2, [r7, #0]
 80114b0:	430a      	orrs	r2, r1
 80114b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 f811 	bl	80114dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2220      	movs	r2, #32
 80114c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d108      	bne.n	80114fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2201      	movs	r2, #1
 80114f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80114fc:	e031      	b.n	8011562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80114fe:	2310      	movs	r3, #16
 8011500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011502:	2310      	movs	r3, #16
 8011504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	689b      	ldr	r3, [r3, #8]
 801150c:	0e5b      	lsrs	r3, r3, #25
 801150e:	b2db      	uxtb	r3, r3
 8011510:	f003 0307 	and.w	r3, r3, #7
 8011514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	689b      	ldr	r3, [r3, #8]
 801151c:	0f5b      	lsrs	r3, r3, #29
 801151e:	b2db      	uxtb	r3, r3
 8011520:	f003 0307 	and.w	r3, r3, #7
 8011524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011526:	7bbb      	ldrb	r3, [r7, #14]
 8011528:	7b3a      	ldrb	r2, [r7, #12]
 801152a:	4911      	ldr	r1, [pc, #68]	; (8011570 <UARTEx_SetNbDataToProcess+0x94>)
 801152c:	5c8a      	ldrb	r2, [r1, r2]
 801152e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011532:	7b3a      	ldrb	r2, [r7, #12]
 8011534:	490f      	ldr	r1, [pc, #60]	; (8011574 <UARTEx_SetNbDataToProcess+0x98>)
 8011536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011538:	fb93 f3f2 	sdiv	r3, r3, r2
 801153c:	b29a      	uxth	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011544:	7bfb      	ldrb	r3, [r7, #15]
 8011546:	7b7a      	ldrb	r2, [r7, #13]
 8011548:	4909      	ldr	r1, [pc, #36]	; (8011570 <UARTEx_SetNbDataToProcess+0x94>)
 801154a:	5c8a      	ldrb	r2, [r1, r2]
 801154c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011550:	7b7a      	ldrb	r2, [r7, #13]
 8011552:	4908      	ldr	r1, [pc, #32]	; (8011574 <UARTEx_SetNbDataToProcess+0x98>)
 8011554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011556:	fb93 f3f2 	sdiv	r3, r3, r2
 801155a:	b29a      	uxth	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011562:	bf00      	nop
 8011564:	3714      	adds	r7, #20
 8011566:	46bd      	mov	sp, r7
 8011568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	0802fe28 	.word	0x0802fe28
 8011574:	0802fe30 	.word	0x0802fe30

08011578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011578:	b084      	sub	sp, #16
 801157a:	b580      	push	{r7, lr}
 801157c:	b084      	sub	sp, #16
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
 8011582:	f107 001c 	add.w	r0, r7, #28
 8011586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801158a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158c:	2b01      	cmp	r3, #1
 801158e:	d120      	bne.n	80115d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68da      	ldr	r2, [r3, #12]
 80115a0:	4b2a      	ldr	r3, [pc, #168]	; (801164c <USB_CoreInit+0xd4>)
 80115a2:	4013      	ands	r3, r2
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80115b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d105      	bne.n	80115c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f001 fb4e 	bl	8012c68 <USB_CoreReset>
 80115cc:	4603      	mov	r3, r0
 80115ce:	73fb      	strb	r3, [r7, #15]
 80115d0:	e01a      	b.n	8011608 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f001 fb42 	bl	8012c68 <USB_CoreReset>
 80115e4:	4603      	mov	r3, r0
 80115e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80115e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d106      	bne.n	80115fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	639a      	str	r2, [r3, #56]	; 0x38
 80115fa:	e005      	b.n	8011608 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160a:	2b01      	cmp	r3, #1
 801160c:	d116      	bne.n	801163c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011612:	b29a      	uxth	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801161c:	4b0c      	ldr	r3, [pc, #48]	; (8011650 <USB_CoreInit+0xd8>)
 801161e:	4313      	orrs	r3, r2
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	f043 0206 	orr.w	r2, r3, #6
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	f043 0220 	orr.w	r2, r3, #32
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801163c:	7bfb      	ldrb	r3, [r7, #15]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011648:	b004      	add	sp, #16
 801164a:	4770      	bx	lr
 801164c:	ffbdffbf 	.word	0xffbdffbf
 8011650:	03ee0000 	.word	0x03ee0000

08011654 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011654:	b480      	push	{r7}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	4613      	mov	r3, r2
 8011660:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011662:	79fb      	ldrb	r3, [r7, #7]
 8011664:	2b02      	cmp	r3, #2
 8011666:	d165      	bne.n	8011734 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	4a41      	ldr	r2, [pc, #260]	; (8011770 <USB_SetTurnaroundTime+0x11c>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d906      	bls.n	801167e <USB_SetTurnaroundTime+0x2a>
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	4a40      	ldr	r2, [pc, #256]	; (8011774 <USB_SetTurnaroundTime+0x120>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d202      	bcs.n	801167e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011678:	230f      	movs	r3, #15
 801167a:	617b      	str	r3, [r7, #20]
 801167c:	e062      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	4a3c      	ldr	r2, [pc, #240]	; (8011774 <USB_SetTurnaroundTime+0x120>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d306      	bcc.n	8011694 <USB_SetTurnaroundTime+0x40>
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	4a3b      	ldr	r2, [pc, #236]	; (8011778 <USB_SetTurnaroundTime+0x124>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d202      	bcs.n	8011694 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801168e:	230e      	movs	r3, #14
 8011690:	617b      	str	r3, [r7, #20]
 8011692:	e057      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	4a38      	ldr	r2, [pc, #224]	; (8011778 <USB_SetTurnaroundTime+0x124>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d306      	bcc.n	80116aa <USB_SetTurnaroundTime+0x56>
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	4a37      	ldr	r2, [pc, #220]	; (801177c <USB_SetTurnaroundTime+0x128>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d202      	bcs.n	80116aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80116a4:	230d      	movs	r3, #13
 80116a6:	617b      	str	r3, [r7, #20]
 80116a8:	e04c      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	4a33      	ldr	r2, [pc, #204]	; (801177c <USB_SetTurnaroundTime+0x128>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d306      	bcc.n	80116c0 <USB_SetTurnaroundTime+0x6c>
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	4a32      	ldr	r2, [pc, #200]	; (8011780 <USB_SetTurnaroundTime+0x12c>)
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d802      	bhi.n	80116c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80116ba:	230c      	movs	r3, #12
 80116bc:	617b      	str	r3, [r7, #20]
 80116be:	e041      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	4a2f      	ldr	r2, [pc, #188]	; (8011780 <USB_SetTurnaroundTime+0x12c>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d906      	bls.n	80116d6 <USB_SetTurnaroundTime+0x82>
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	4a2e      	ldr	r2, [pc, #184]	; (8011784 <USB_SetTurnaroundTime+0x130>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d802      	bhi.n	80116d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80116d0:	230b      	movs	r3, #11
 80116d2:	617b      	str	r3, [r7, #20]
 80116d4:	e036      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	4a2a      	ldr	r2, [pc, #168]	; (8011784 <USB_SetTurnaroundTime+0x130>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d906      	bls.n	80116ec <USB_SetTurnaroundTime+0x98>
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4a29      	ldr	r2, [pc, #164]	; (8011788 <USB_SetTurnaroundTime+0x134>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d802      	bhi.n	80116ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80116e6:	230a      	movs	r3, #10
 80116e8:	617b      	str	r3, [r7, #20]
 80116ea:	e02b      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	4a26      	ldr	r2, [pc, #152]	; (8011788 <USB_SetTurnaroundTime+0x134>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d906      	bls.n	8011702 <USB_SetTurnaroundTime+0xae>
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	4a25      	ldr	r2, [pc, #148]	; (801178c <USB_SetTurnaroundTime+0x138>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d202      	bcs.n	8011702 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80116fc:	2309      	movs	r3, #9
 80116fe:	617b      	str	r3, [r7, #20]
 8011700:	e020      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4a21      	ldr	r2, [pc, #132]	; (801178c <USB_SetTurnaroundTime+0x138>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d306      	bcc.n	8011718 <USB_SetTurnaroundTime+0xc4>
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	4a20      	ldr	r2, [pc, #128]	; (8011790 <USB_SetTurnaroundTime+0x13c>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d802      	bhi.n	8011718 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011712:	2308      	movs	r3, #8
 8011714:	617b      	str	r3, [r7, #20]
 8011716:	e015      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	4a1d      	ldr	r2, [pc, #116]	; (8011790 <USB_SetTurnaroundTime+0x13c>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d906      	bls.n	801172e <USB_SetTurnaroundTime+0xda>
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	4a1c      	ldr	r2, [pc, #112]	; (8011794 <USB_SetTurnaroundTime+0x140>)
 8011724:	4293      	cmp	r3, r2
 8011726:	d202      	bcs.n	801172e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011728:	2307      	movs	r3, #7
 801172a:	617b      	str	r3, [r7, #20]
 801172c:	e00a      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801172e:	2306      	movs	r3, #6
 8011730:	617b      	str	r3, [r7, #20]
 8011732:	e007      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011734:	79fb      	ldrb	r3, [r7, #7]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d102      	bne.n	8011740 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801173a:	2309      	movs	r3, #9
 801173c:	617b      	str	r3, [r7, #20]
 801173e:	e001      	b.n	8011744 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011740:	2309      	movs	r3, #9
 8011742:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	68da      	ldr	r2, [r3, #12]
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	029b      	lsls	r3, r3, #10
 8011758:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801175c:	431a      	orrs	r2, r3
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	371c      	adds	r7, #28
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	00d8acbf 	.word	0x00d8acbf
 8011774:	00e4e1c0 	.word	0x00e4e1c0
 8011778:	00f42400 	.word	0x00f42400
 801177c:	01067380 	.word	0x01067380
 8011780:	011a499f 	.word	0x011a499f
 8011784:	01312cff 	.word	0x01312cff
 8011788:	014ca43f 	.word	0x014ca43f
 801178c:	016e3600 	.word	0x016e3600
 8011790:	01a6ab1f 	.word	0x01a6ab1f
 8011794:	01e84800 	.word	0x01e84800

08011798 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	f043 0201 	orr.w	r2, r3, #1
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117ac:	2300      	movs	r3, #0
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	370c      	adds	r7, #12
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr

080117ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80117ba:	b480      	push	{r7}
 80117bc:	b083      	sub	sp, #12
 80117be:	af00      	add	r7, sp, #0
 80117c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	f023 0201 	bic.w	r2, r3, #1
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	460b      	mov	r3, r1
 80117e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80117e8:	2300      	movs	r3, #0
 80117ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80117f8:	78fb      	ldrb	r3, [r7, #3]
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d115      	bne.n	801182a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801180a:	2001      	movs	r0, #1
 801180c:	f7f3 fc56 	bl	80050bc <HAL_Delay>
      ms++;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	3301      	adds	r3, #1
 8011814:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f001 f995 	bl	8012b46 <USB_GetMode>
 801181c:	4603      	mov	r3, r0
 801181e:	2b01      	cmp	r3, #1
 8011820:	d01e      	beq.n	8011860 <USB_SetCurrentMode+0x84>
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2b31      	cmp	r3, #49	; 0x31
 8011826:	d9f0      	bls.n	801180a <USB_SetCurrentMode+0x2e>
 8011828:	e01a      	b.n	8011860 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801182a:	78fb      	ldrb	r3, [r7, #3]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d115      	bne.n	801185c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801183c:	2001      	movs	r0, #1
 801183e:	f7f3 fc3d 	bl	80050bc <HAL_Delay>
      ms++;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	3301      	adds	r3, #1
 8011846:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f001 f97c 	bl	8012b46 <USB_GetMode>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d005      	beq.n	8011860 <USB_SetCurrentMode+0x84>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2b31      	cmp	r3, #49	; 0x31
 8011858:	d9f0      	bls.n	801183c <USB_SetCurrentMode+0x60>
 801185a:	e001      	b.n	8011860 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801185c:	2301      	movs	r3, #1
 801185e:	e005      	b.n	801186c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b32      	cmp	r3, #50	; 0x32
 8011864:	d101      	bne.n	801186a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011866:	2301      	movs	r3, #1
 8011868:	e000      	b.n	801186c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801186a:	2300      	movs	r3, #0
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011874:	b084      	sub	sp, #16
 8011876:	b580      	push	{r7, lr}
 8011878:	b086      	sub	sp, #24
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
 801187e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801188e:	2300      	movs	r3, #0
 8011890:	613b      	str	r3, [r7, #16]
 8011892:	e009      	b.n	80118a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	3340      	adds	r3, #64	; 0x40
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	4413      	add	r3, r2
 801189e:	2200      	movs	r2, #0
 80118a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	3301      	adds	r3, #1
 80118a6:	613b      	str	r3, [r7, #16]
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	2b0e      	cmp	r3, #14
 80118ac:	d9f2      	bls.n	8011894 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80118ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d11c      	bne.n	80118ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	68fa      	ldr	r2, [r7, #12]
 80118be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80118c2:	f043 0302 	orr.w	r3, r3, #2
 80118c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	601a      	str	r2, [r3, #0]
 80118ec:	e005      	b.n	80118fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011900:	461a      	mov	r2, r3
 8011902:	2300      	movs	r3, #0
 8011904:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801190c:	4619      	mov	r1, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011914:	461a      	mov	r2, r3
 8011916:	680b      	ldr	r3, [r1, #0]
 8011918:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801191a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191c:	2b01      	cmp	r3, #1
 801191e:	d10c      	bne.n	801193a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	2b00      	cmp	r3, #0
 8011924:	d104      	bne.n	8011930 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011926:	2100      	movs	r1, #0
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f000 f961 	bl	8011bf0 <USB_SetDevSpeed>
 801192e:	e008      	b.n	8011942 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011930:	2101      	movs	r1, #1
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f000 f95c 	bl	8011bf0 <USB_SetDevSpeed>
 8011938:	e003      	b.n	8011942 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801193a:	2103      	movs	r1, #3
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 f957 	bl	8011bf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011942:	2110      	movs	r1, #16
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f8f3 	bl	8011b30 <USB_FlushTxFifo>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011950:	2301      	movs	r3, #1
 8011952:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 f91d 	bl	8011b94 <USB_FlushRxFifo>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d001      	beq.n	8011964 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011960:	2301      	movs	r3, #1
 8011962:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801196a:	461a      	mov	r2, r3
 801196c:	2300      	movs	r3, #0
 801196e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011976:	461a      	mov	r2, r3
 8011978:	2300      	movs	r3, #0
 801197a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011982:	461a      	mov	r2, r3
 8011984:	2300      	movs	r3, #0
 8011986:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011988:	2300      	movs	r3, #0
 801198a:	613b      	str	r3, [r7, #16]
 801198c:	e043      	b.n	8011a16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	015a      	lsls	r2, r3, #5
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	4413      	add	r3, r2
 8011996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80119a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80119a4:	d118      	bne.n	80119d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10a      	bne.n	80119c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	015a      	lsls	r2, r3, #5
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	4413      	add	r3, r2
 80119b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119b8:	461a      	mov	r2, r3
 80119ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80119be:	6013      	str	r3, [r2, #0]
 80119c0:	e013      	b.n	80119ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	015a      	lsls	r2, r3, #5
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	4413      	add	r3, r2
 80119ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119ce:	461a      	mov	r2, r3
 80119d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80119d4:	6013      	str	r3, [r2, #0]
 80119d6:	e008      	b.n	80119ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	015a      	lsls	r2, r3, #5
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	4413      	add	r3, r2
 80119e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119e4:	461a      	mov	r2, r3
 80119e6:	2300      	movs	r3, #0
 80119e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	015a      	lsls	r2, r3, #5
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	4413      	add	r3, r2
 80119f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119f6:	461a      	mov	r2, r3
 80119f8:	2300      	movs	r3, #0
 80119fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	015a      	lsls	r2, r3, #5
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	4413      	add	r3, r2
 8011a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a08:	461a      	mov	r2, r3
 8011a0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	3301      	adds	r3, #1
 8011a14:	613b      	str	r3, [r7, #16]
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a18:	693a      	ldr	r2, [r7, #16]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d3b7      	bcc.n	801198e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a1e:	2300      	movs	r3, #0
 8011a20:	613b      	str	r3, [r7, #16]
 8011a22:	e043      	b.n	8011aac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	015a      	lsls	r2, r3, #5
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a3a:	d118      	bne.n	8011a6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10a      	bne.n	8011a58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	015a      	lsls	r2, r3, #5
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a4e:	461a      	mov	r2, r3
 8011a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	e013      	b.n	8011a80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	015a      	lsls	r2, r3, #5
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	4413      	add	r3, r2
 8011a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a64:	461a      	mov	r2, r3
 8011a66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011a6a:	6013      	str	r3, [r2, #0]
 8011a6c:	e008      	b.n	8011a80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	015a      	lsls	r2, r3, #5
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	4413      	add	r3, r2
 8011a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	015a      	lsls	r2, r3, #5
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	4413      	add	r3, r2
 8011a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	2300      	movs	r3, #0
 8011a90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	015a      	lsls	r2, r3, #5
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	4413      	add	r3, r2
 8011a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011aa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	613b      	str	r3, [r7, #16]
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	693a      	ldr	r2, [r7, #16]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d3b7      	bcc.n	8011a24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ac6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011ad4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d105      	bne.n	8011ae8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	699b      	ldr	r3, [r3, #24]
 8011ae0:	f043 0210 	orr.w	r2, r3, #16
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	699a      	ldr	r2, [r3, #24]
 8011aec:	4b0e      	ldr	r3, [pc, #56]	; (8011b28 <USB_DevInit+0x2b4>)
 8011aee:	4313      	orrs	r3, r2
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d005      	beq.n	8011b06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	699b      	ldr	r3, [r3, #24]
 8011afe:	f043 0208 	orr.w	r2, r3, #8
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b08:	2b01      	cmp	r3, #1
 8011b0a:	d105      	bne.n	8011b18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	699a      	ldr	r2, [r3, #24]
 8011b10:	4b06      	ldr	r3, [pc, #24]	; (8011b2c <USB_DevInit+0x2b8>)
 8011b12:	4313      	orrs	r3, r2
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3718      	adds	r7, #24
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b24:	b004      	add	sp, #16
 8011b26:	4770      	bx	lr
 8011b28:	803c3800 	.word	0x803c3800
 8011b2c:	40000004 	.word	0x40000004

08011b30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	3301      	adds	r3, #1
 8011b42:	60fb      	str	r3, [r7, #12]
 8011b44:	4a12      	ldr	r2, [pc, #72]	; (8011b90 <USB_FlushTxFifo+0x60>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d901      	bls.n	8011b4e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011b4a:	2303      	movs	r3, #3
 8011b4c:	e01a      	b.n	8011b84 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	daf3      	bge.n	8011b3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011b56:	2300      	movs	r3, #0
 8011b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	019b      	lsls	r3, r3, #6
 8011b5e:	f043 0220 	orr.w	r2, r3, #32
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	4a08      	ldr	r2, [pc, #32]	; (8011b90 <USB_FlushTxFifo+0x60>)
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	d901      	bls.n	8011b76 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8011b72:	2303      	movs	r3, #3
 8011b74:	e006      	b.n	8011b84 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	f003 0320 	and.w	r3, r3, #32
 8011b7e:	2b20      	cmp	r3, #32
 8011b80:	d0f1      	beq.n	8011b66 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8011b82:	2300      	movs	r3, #0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3714      	adds	r7, #20
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8e:	4770      	bx	lr
 8011b90:	00030d40 	.word	0x00030d40

08011b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	4a11      	ldr	r2, [pc, #68]	; (8011bec <USB_FlushRxFifo+0x58>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d901      	bls.n	8011bb0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8011bac:	2303      	movs	r3, #3
 8011bae:	e017      	b.n	8011be0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	691b      	ldr	r3, [r3, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	daf3      	bge.n	8011ba0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2210      	movs	r2, #16
 8011bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	60fb      	str	r3, [r7, #12]
 8011bc8:	4a08      	ldr	r2, [pc, #32]	; (8011bec <USB_FlushRxFifo+0x58>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d901      	bls.n	8011bd2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	e006      	b.n	8011be0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	f003 0310 	and.w	r3, r3, #16
 8011bda:	2b10      	cmp	r3, #16
 8011bdc:	d0f1      	beq.n	8011bc2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8011bde:	2300      	movs	r3, #0
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3714      	adds	r7, #20
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr
 8011bec:	00030d40 	.word	0x00030d40

08011bf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b085      	sub	sp, #20
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	78fb      	ldrb	r3, [r7, #3]
 8011c0a:	68f9      	ldr	r1, [r7, #12]
 8011c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c10:	4313      	orrs	r3, r2
 8011c12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011c14:	2300      	movs	r3, #0
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr

08011c22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c22:	b480      	push	{r7}
 8011c24:	b087      	sub	sp, #28
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	f003 0306 	and.w	r3, r3, #6
 8011c3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d102      	bne.n	8011c48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011c42:	2300      	movs	r3, #0
 8011c44:	75fb      	strb	r3, [r7, #23]
 8011c46:	e00a      	b.n	8011c5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d002      	beq.n	8011c54 <USB_GetDevSpeed+0x32>
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2b06      	cmp	r3, #6
 8011c52:	d102      	bne.n	8011c5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011c54:	2302      	movs	r3, #2
 8011c56:	75fb      	strb	r3, [r7, #23]
 8011c58:	e001      	b.n	8011c5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011c5a:	230f      	movs	r3, #15
 8011c5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	371c      	adds	r7, #28
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr

08011c6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	785b      	ldrb	r3, [r3, #1]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d139      	bne.n	8011cfc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c8e:	69da      	ldr	r2, [r3, #28]
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f003 030f 	and.w	r3, r3, #15
 8011c98:	2101      	movs	r1, #1
 8011c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	68f9      	ldr	r1, [r7, #12]
 8011ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	015a      	lsls	r2, r3, #5
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d153      	bne.n	8011d68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	015a      	lsls	r2, r3, #5
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	4413      	add	r3, r2
 8011cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	78db      	ldrb	r3, [r3, #3]
 8011cda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011cdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	059b      	lsls	r3, r3, #22
 8011ce2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011ce4:	431a      	orrs	r2, r3
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	0159      	lsls	r1, r3, #5
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	440b      	add	r3, r1
 8011cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	4b20      	ldr	r3, [pc, #128]	; (8011d78 <USB_ActivateEndpoint+0x10c>)
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	600b      	str	r3, [r1, #0]
 8011cfa:	e035      	b.n	8011d68 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d02:	69da      	ldr	r2, [r3, #28]
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	f003 030f 	and.w	r3, r3, #15
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d12:	041b      	lsls	r3, r3, #16
 8011d14:	68f9      	ldr	r1, [r7, #12]
 8011d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d1a:	4313      	orrs	r3, r2
 8011d1c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	015a      	lsls	r2, r3, #5
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	4413      	add	r3, r2
 8011d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d119      	bne.n	8011d68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	015a      	lsls	r2, r3, #5
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	78db      	ldrb	r3, [r3, #3]
 8011d4e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d50:	430b      	orrs	r3, r1
 8011d52:	431a      	orrs	r2, r3
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	0159      	lsls	r1, r3, #5
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	440b      	add	r3, r1
 8011d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d60:	4619      	mov	r1, r3
 8011d62:	4b05      	ldr	r3, [pc, #20]	; (8011d78 <USB_ActivateEndpoint+0x10c>)
 8011d64:	4313      	orrs	r3, r2
 8011d66:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	10008000 	.word	0x10008000

08011d7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b085      	sub	sp, #20
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	785b      	ldrb	r3, [r3, #1]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d161      	bne.n	8011e5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	015a      	lsls	r2, r3, #5
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	4413      	add	r3, r2
 8011da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011dae:	d11f      	bne.n	8011df0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	015a      	lsls	r2, r3, #5
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	4413      	add	r3, r2
 8011db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	0151      	lsls	r1, r2, #5
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	440a      	add	r2, r1
 8011dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011dce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	015a      	lsls	r2, r3, #5
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	68ba      	ldr	r2, [r7, #8]
 8011de0:	0151      	lsls	r1, r2, #5
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	440a      	add	r2, r1
 8011de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011dee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	f003 030f 	and.w	r3, r3, #15
 8011e00:	2101      	movs	r1, #1
 8011e02:	fa01 f303 	lsl.w	r3, r1, r3
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	43db      	mvns	r3, r3
 8011e0a:	68f9      	ldr	r1, [r7, #12]
 8011e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e10:	4013      	ands	r3, r2
 8011e12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e1a:	69da      	ldr	r2, [r3, #28]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	f003 030f 	and.w	r3, r3, #15
 8011e24:	2101      	movs	r1, #1
 8011e26:	fa01 f303 	lsl.w	r3, r1, r3
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	43db      	mvns	r3, r3
 8011e2e:	68f9      	ldr	r1, [r7, #12]
 8011e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e34:	4013      	ands	r3, r2
 8011e36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	015a      	lsls	r2, r3, #5
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	4413      	add	r3, r2
 8011e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	0159      	lsls	r1, r3, #5
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	440b      	add	r3, r1
 8011e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e52:	4619      	mov	r1, r3
 8011e54:	4b35      	ldr	r3, [pc, #212]	; (8011f2c <USB_DeactivateEndpoint+0x1b0>)
 8011e56:	4013      	ands	r3, r2
 8011e58:	600b      	str	r3, [r1, #0]
 8011e5a:	e060      	b.n	8011f1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	015a      	lsls	r2, r3, #5
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4413      	add	r3, r2
 8011e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e72:	d11f      	bne.n	8011eb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	015a      	lsls	r2, r3, #5
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	68ba      	ldr	r2, [r7, #8]
 8011e84:	0151      	lsls	r1, r2, #5
 8011e86:	68fa      	ldr	r2, [r7, #12]
 8011e88:	440a      	add	r2, r1
 8011e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011e92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	015a      	lsls	r2, r3, #5
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	68ba      	ldr	r2, [r7, #8]
 8011ea4:	0151      	lsls	r1, r2, #5
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	440a      	add	r2, r1
 8011eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	f003 030f 	and.w	r3, r3, #15
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8011eca:	041b      	lsls	r3, r3, #16
 8011ecc:	43db      	mvns	r3, r3
 8011ece:	68f9      	ldr	r1, [r7, #12]
 8011ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ede:	69da      	ldr	r2, [r3, #28]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f003 030f 	and.w	r3, r3, #15
 8011ee8:	2101      	movs	r1, #1
 8011eea:	fa01 f303 	lsl.w	r3, r1, r3
 8011eee:	041b      	lsls	r3, r3, #16
 8011ef0:	43db      	mvns	r3, r3
 8011ef2:	68f9      	ldr	r1, [r7, #12]
 8011ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ef8:	4013      	ands	r3, r2
 8011efa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	015a      	lsls	r2, r3, #5
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4413      	add	r3, r2
 8011f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	0159      	lsls	r1, r3, #5
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	440b      	add	r3, r1
 8011f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f16:	4619      	mov	r1, r3
 8011f18:	4b05      	ldr	r3, [pc, #20]	; (8011f30 <USB_DeactivateEndpoint+0x1b4>)
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr
 8011f2c:	ec337800 	.word	0xec337800
 8011f30:	eff37800 	.word	0xeff37800

08011f34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b08a      	sub	sp, #40	; 0x28
 8011f38:	af02      	add	r7, sp, #8
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	4613      	mov	r3, r2
 8011f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	785b      	ldrb	r3, [r3, #1]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	f040 8163 	bne.w	801221c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	695b      	ldr	r3, [r3, #20]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d132      	bne.n	8011fc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	015a      	lsls	r2, r3, #5
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	4413      	add	r3, r2
 8011f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f6a:	691a      	ldr	r2, [r3, #16]
 8011f6c:	69bb      	ldr	r3, [r7, #24]
 8011f6e:	0159      	lsls	r1, r3, #5
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	440b      	add	r3, r1
 8011f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4ba5      	ldr	r3, [pc, #660]	; (8012210 <USB_EPStartXfer+0x2dc>)
 8011f7c:	4013      	ands	r3, r2
 8011f7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	015a      	lsls	r2, r3, #5
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	4413      	add	r3, r2
 8011f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	69ba      	ldr	r2, [r7, #24]
 8011f90:	0151      	lsls	r1, r2, #5
 8011f92:	69fa      	ldr	r2, [r7, #28]
 8011f94:	440a      	add	r2, r1
 8011f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	015a      	lsls	r2, r3, #5
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fac:	691a      	ldr	r2, [r3, #16]
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	0159      	lsls	r1, r3, #5
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	440b      	add	r3, r1
 8011fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fba:	4619      	mov	r1, r3
 8011fbc:	4b95      	ldr	r3, [pc, #596]	; (8012214 <USB_EPStartXfer+0x2e0>)
 8011fbe:	4013      	ands	r3, r2
 8011fc0:	610b      	str	r3, [r1, #16]
 8011fc2:	e074      	b.n	80120ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	015a      	lsls	r2, r3, #5
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	4413      	add	r3, r2
 8011fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd0:	691a      	ldr	r2, [r3, #16]
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	0159      	lsls	r1, r3, #5
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	440b      	add	r3, r1
 8011fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4b8c      	ldr	r3, [pc, #560]	; (8012214 <USB_EPStartXfer+0x2e0>)
 8011fe2:	4013      	ands	r3, r2
 8011fe4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	015a      	lsls	r2, r3, #5
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	4413      	add	r3, r2
 8011fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ff2:	691a      	ldr	r2, [r3, #16]
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	0159      	lsls	r1, r3, #5
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	440b      	add	r3, r1
 8011ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012000:	4619      	mov	r1, r3
 8012002:	4b83      	ldr	r3, [pc, #524]	; (8012210 <USB_EPStartXfer+0x2dc>)
 8012004:	4013      	ands	r3, r2
 8012006:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	015a      	lsls	r2, r3, #5
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	4413      	add	r3, r2
 8012010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012014:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	6959      	ldr	r1, [r3, #20]
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	440b      	add	r3, r1
 8012020:	1e59      	subs	r1, r3, #1
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	fbb1 f3f3 	udiv	r3, r1, r3
 801202a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801202c:	4b7a      	ldr	r3, [pc, #488]	; (8012218 <USB_EPStartXfer+0x2e4>)
 801202e:	400b      	ands	r3, r1
 8012030:	69b9      	ldr	r1, [r7, #24]
 8012032:	0148      	lsls	r0, r1, #5
 8012034:	69f9      	ldr	r1, [r7, #28]
 8012036:	4401      	add	r1, r0
 8012038:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801203c:	4313      	orrs	r3, r2
 801203e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	015a      	lsls	r2, r3, #5
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	4413      	add	r3, r2
 8012048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801204c:	691a      	ldr	r2, [r3, #16]
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012056:	69b9      	ldr	r1, [r7, #24]
 8012058:	0148      	lsls	r0, r1, #5
 801205a:	69f9      	ldr	r1, [r7, #28]
 801205c:	4401      	add	r1, r0
 801205e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012062:	4313      	orrs	r3, r2
 8012064:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	78db      	ldrb	r3, [r3, #3]
 801206a:	2b01      	cmp	r3, #1
 801206c:	d11f      	bne.n	80120ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	015a      	lsls	r2, r3, #5
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	4413      	add	r3, r2
 8012076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	69ba      	ldr	r2, [r7, #24]
 801207e:	0151      	lsls	r1, r2, #5
 8012080:	69fa      	ldr	r2, [r7, #28]
 8012082:	440a      	add	r2, r1
 8012084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012088:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801208c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	015a      	lsls	r2, r3, #5
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	4413      	add	r3, r2
 8012096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	69ba      	ldr	r2, [r7, #24]
 801209e:	0151      	lsls	r1, r2, #5
 80120a0:	69fa      	ldr	r2, [r7, #28]
 80120a2:	440a      	add	r2, r1
 80120a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80120ae:	79fb      	ldrb	r3, [r7, #7]
 80120b0:	2b01      	cmp	r3, #1
 80120b2:	d14b      	bne.n	801214c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	691b      	ldr	r3, [r3, #16]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d009      	beq.n	80120d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	015a      	lsls	r2, r3, #5
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	4413      	add	r3, r2
 80120c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120c8:	461a      	mov	r2, r3
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	691b      	ldr	r3, [r3, #16]
 80120ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	78db      	ldrb	r3, [r3, #3]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d128      	bne.n	801212a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d110      	bne.n	801210a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	015a      	lsls	r2, r3, #5
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	4413      	add	r3, r2
 80120f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	69ba      	ldr	r2, [r7, #24]
 80120f8:	0151      	lsls	r1, r2, #5
 80120fa:	69fa      	ldr	r2, [r7, #28]
 80120fc:	440a      	add	r2, r1
 80120fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012102:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012106:	6013      	str	r3, [r2, #0]
 8012108:	e00f      	b.n	801212a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	015a      	lsls	r2, r3, #5
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	4413      	add	r3, r2
 8012112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	69ba      	ldr	r2, [r7, #24]
 801211a:	0151      	lsls	r1, r2, #5
 801211c:	69fa      	ldr	r2, [r7, #28]
 801211e:	440a      	add	r2, r1
 8012120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012128:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	015a      	lsls	r2, r3, #5
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	4413      	add	r3, r2
 8012132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	69ba      	ldr	r2, [r7, #24]
 801213a:	0151      	lsls	r1, r2, #5
 801213c:	69fa      	ldr	r2, [r7, #28]
 801213e:	440a      	add	r2, r1
 8012140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012148:	6013      	str	r3, [r2, #0]
 801214a:	e133      	b.n	80123b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	4413      	add	r3, r2
 8012154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	69ba      	ldr	r2, [r7, #24]
 801215c:	0151      	lsls	r1, r2, #5
 801215e:	69fa      	ldr	r2, [r7, #28]
 8012160:	440a      	add	r2, r1
 8012162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801216a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	78db      	ldrb	r3, [r3, #3]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d015      	beq.n	80121a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	695b      	ldr	r3, [r3, #20]
 8012178:	2b00      	cmp	r3, #0
 801217a:	f000 811b 	beq.w	80123b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	f003 030f 	and.w	r3, r3, #15
 801218e:	2101      	movs	r1, #1
 8012190:	fa01 f303 	lsl.w	r3, r1, r3
 8012194:	69f9      	ldr	r1, [r7, #28]
 8012196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801219a:	4313      	orrs	r3, r2
 801219c:	634b      	str	r3, [r1, #52]	; 0x34
 801219e:	e109      	b.n	80123b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d110      	bne.n	80121d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	015a      	lsls	r2, r3, #5
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	4413      	add	r3, r2
 80121b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	69ba      	ldr	r2, [r7, #24]
 80121c0:	0151      	lsls	r1, r2, #5
 80121c2:	69fa      	ldr	r2, [r7, #28]
 80121c4:	440a      	add	r2, r1
 80121c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	e00f      	b.n	80121f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	015a      	lsls	r2, r3, #5
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	4413      	add	r3, r2
 80121da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	69ba      	ldr	r2, [r7, #24]
 80121e2:	0151      	lsls	r1, r2, #5
 80121e4:	69fa      	ldr	r2, [r7, #28]
 80121e6:	440a      	add	r2, r1
 80121e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80121f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	68d9      	ldr	r1, [r3, #12]
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	781a      	ldrb	r2, [r3, #0]
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	695b      	ldr	r3, [r3, #20]
 80121fe:	b298      	uxth	r0, r3
 8012200:	79fb      	ldrb	r3, [r7, #7]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4603      	mov	r3, r0
 8012206:	68f8      	ldr	r0, [r7, #12]
 8012208:	f000 fa38 	bl	801267c <USB_WritePacket>
 801220c:	e0d2      	b.n	80123b4 <USB_EPStartXfer+0x480>
 801220e:	bf00      	nop
 8012210:	e007ffff 	.word	0xe007ffff
 8012214:	fff80000 	.word	0xfff80000
 8012218:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801221c:	69bb      	ldr	r3, [r7, #24]
 801221e:	015a      	lsls	r2, r3, #5
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	4413      	add	r3, r2
 8012224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012228:	691a      	ldr	r2, [r3, #16]
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	0159      	lsls	r1, r3, #5
 801222e:	69fb      	ldr	r3, [r7, #28]
 8012230:	440b      	add	r3, r1
 8012232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012236:	4619      	mov	r1, r3
 8012238:	4b61      	ldr	r3, [pc, #388]	; (80123c0 <USB_EPStartXfer+0x48c>)
 801223a:	4013      	ands	r3, r2
 801223c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	015a      	lsls	r2, r3, #5
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	4413      	add	r3, r2
 8012246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224a:	691a      	ldr	r2, [r3, #16]
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	0159      	lsls	r1, r3, #5
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	440b      	add	r3, r1
 8012254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012258:	4619      	mov	r1, r3
 801225a:	4b5a      	ldr	r3, [pc, #360]	; (80123c4 <USB_EPStartXfer+0x490>)
 801225c:	4013      	ands	r3, r2
 801225e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	695b      	ldr	r3, [r3, #20]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d123      	bne.n	80122b0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	015a      	lsls	r2, r3, #5
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	4413      	add	r3, r2
 8012270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012274:	691a      	ldr	r2, [r3, #16]
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801227e:	69b9      	ldr	r1, [r7, #24]
 8012280:	0148      	lsls	r0, r1, #5
 8012282:	69f9      	ldr	r1, [r7, #28]
 8012284:	4401      	add	r1, r0
 8012286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801228a:	4313      	orrs	r3, r2
 801228c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	015a      	lsls	r2, r3, #5
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	4413      	add	r3, r2
 8012296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	69ba      	ldr	r2, [r7, #24]
 801229e:	0151      	lsls	r1, r2, #5
 80122a0:	69fa      	ldr	r2, [r7, #28]
 80122a2:	440a      	add	r2, r1
 80122a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80122ac:	6113      	str	r3, [r2, #16]
 80122ae:	e033      	b.n	8012318 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	695a      	ldr	r2, [r3, #20]
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	4413      	add	r3, r2
 80122ba:	1e5a      	subs	r2, r3, #1
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	689b      	ldr	r3, [r3, #8]
 80122c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80122c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	015a      	lsls	r2, r3, #5
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	4413      	add	r3, r2
 80122ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122d2:	691a      	ldr	r2, [r3, #16]
 80122d4:	8afb      	ldrh	r3, [r7, #22]
 80122d6:	04d9      	lsls	r1, r3, #19
 80122d8:	4b3b      	ldr	r3, [pc, #236]	; (80123c8 <USB_EPStartXfer+0x494>)
 80122da:	400b      	ands	r3, r1
 80122dc:	69b9      	ldr	r1, [r7, #24]
 80122de:	0148      	lsls	r0, r1, #5
 80122e0:	69f9      	ldr	r1, [r7, #28]
 80122e2:	4401      	add	r1, r0
 80122e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80122e8:	4313      	orrs	r3, r2
 80122ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	015a      	lsls	r2, r3, #5
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	4413      	add	r3, r2
 80122f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122f8:	691a      	ldr	r2, [r3, #16]
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	8af9      	ldrh	r1, [r7, #22]
 8012300:	fb01 f303 	mul.w	r3, r1, r3
 8012304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012308:	69b9      	ldr	r1, [r7, #24]
 801230a:	0148      	lsls	r0, r1, #5
 801230c:	69f9      	ldr	r1, [r7, #28]
 801230e:	4401      	add	r1, r0
 8012310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012314:	4313      	orrs	r3, r2
 8012316:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012318:	79fb      	ldrb	r3, [r7, #7]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d10d      	bne.n	801233a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d009      	beq.n	801233a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	68d9      	ldr	r1, [r3, #12]
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	015a      	lsls	r2, r3, #5
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	4413      	add	r3, r2
 8012332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012336:	460a      	mov	r2, r1
 8012338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	78db      	ldrb	r3, [r3, #3]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d128      	bne.n	8012394 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012348:	689b      	ldr	r3, [r3, #8]
 801234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801234e:	2b00      	cmp	r3, #0
 8012350:	d110      	bne.n	8012374 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	015a      	lsls	r2, r3, #5
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	4413      	add	r3, r2
 801235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	0151      	lsls	r1, r2, #5
 8012364:	69fa      	ldr	r2, [r7, #28]
 8012366:	440a      	add	r2, r1
 8012368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801236c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012370:	6013      	str	r3, [r2, #0]
 8012372:	e00f      	b.n	8012394 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	015a      	lsls	r2, r3, #5
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	4413      	add	r3, r2
 801237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	69ba      	ldr	r2, [r7, #24]
 8012384:	0151      	lsls	r1, r2, #5
 8012386:	69fa      	ldr	r2, [r7, #28]
 8012388:	440a      	add	r2, r1
 801238a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801238e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	015a      	lsls	r2, r3, #5
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	4413      	add	r3, r2
 801239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	69ba      	ldr	r2, [r7, #24]
 80123a4:	0151      	lsls	r1, r2, #5
 80123a6:	69fa      	ldr	r2, [r7, #28]
 80123a8:	440a      	add	r2, r1
 80123aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80123b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3720      	adds	r7, #32
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	fff80000 	.word	0xfff80000
 80123c4:	e007ffff 	.word	0xe007ffff
 80123c8:	1ff80000 	.word	0x1ff80000

080123cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b087      	sub	sp, #28
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	4613      	mov	r3, r2
 80123d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	785b      	ldrb	r3, [r3, #1]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	f040 80cd 	bne.w	8012588 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	695b      	ldr	r3, [r3, #20]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d132      	bne.n	801245c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	015a      	lsls	r2, r3, #5
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	4413      	add	r3, r2
 80123fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012402:	691a      	ldr	r2, [r3, #16]
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	0159      	lsls	r1, r3, #5
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	440b      	add	r3, r1
 801240c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012410:	4619      	mov	r1, r3
 8012412:	4b98      	ldr	r3, [pc, #608]	; (8012674 <USB_EP0StartXfer+0x2a8>)
 8012414:	4013      	ands	r3, r2
 8012416:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	015a      	lsls	r2, r3, #5
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	4413      	add	r3, r2
 8012420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012424:	691b      	ldr	r3, [r3, #16]
 8012426:	693a      	ldr	r2, [r7, #16]
 8012428:	0151      	lsls	r1, r2, #5
 801242a:	697a      	ldr	r2, [r7, #20]
 801242c:	440a      	add	r2, r1
 801242e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	015a      	lsls	r2, r3, #5
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	4413      	add	r3, r2
 8012440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012444:	691a      	ldr	r2, [r3, #16]
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	0159      	lsls	r1, r3, #5
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	440b      	add	r3, r1
 801244e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012452:	4619      	mov	r1, r3
 8012454:	4b88      	ldr	r3, [pc, #544]	; (8012678 <USB_EP0StartXfer+0x2ac>)
 8012456:	4013      	ands	r3, r2
 8012458:	610b      	str	r3, [r1, #16]
 801245a:	e04e      	b.n	80124fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	015a      	lsls	r2, r3, #5
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	4413      	add	r3, r2
 8012464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012468:	691a      	ldr	r2, [r3, #16]
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	0159      	lsls	r1, r3, #5
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	440b      	add	r3, r1
 8012472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012476:	4619      	mov	r1, r3
 8012478:	4b7f      	ldr	r3, [pc, #508]	; (8012678 <USB_EP0StartXfer+0x2ac>)
 801247a:	4013      	ands	r3, r2
 801247c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	015a      	lsls	r2, r3, #5
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	4413      	add	r3, r2
 8012486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801248a:	691a      	ldr	r2, [r3, #16]
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	0159      	lsls	r1, r3, #5
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	440b      	add	r3, r1
 8012494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012498:	4619      	mov	r1, r3
 801249a:	4b76      	ldr	r3, [pc, #472]	; (8012674 <USB_EP0StartXfer+0x2a8>)
 801249c:	4013      	ands	r3, r2
 801249e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	695a      	ldr	r2, [r3, #20]
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d903      	bls.n	80124b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	689a      	ldr	r2, [r3, #8]
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	015a      	lsls	r2, r3, #5
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	4413      	add	r3, r2
 80124bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	693a      	ldr	r2, [r7, #16]
 80124c4:	0151      	lsls	r1, r2, #5
 80124c6:	697a      	ldr	r2, [r7, #20]
 80124c8:	440a      	add	r2, r1
 80124ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80124d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	015a      	lsls	r2, r3, #5
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	4413      	add	r3, r2
 80124dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124e0:	691a      	ldr	r2, [r3, #16]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80124ea:	6939      	ldr	r1, [r7, #16]
 80124ec:	0148      	lsls	r0, r1, #5
 80124ee:	6979      	ldr	r1, [r7, #20]
 80124f0:	4401      	add	r1, r0
 80124f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80124f6:	4313      	orrs	r3, r2
 80124f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80124fa:	79fb      	ldrb	r3, [r7, #7]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d11e      	bne.n	801253e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	691b      	ldr	r3, [r3, #16]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d009      	beq.n	801251c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	015a      	lsls	r2, r3, #5
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	4413      	add	r3, r2
 8012510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012514:	461a      	mov	r2, r3
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	691b      	ldr	r3, [r3, #16]
 801251a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	015a      	lsls	r2, r3, #5
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	4413      	add	r3, r2
 8012524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	693a      	ldr	r2, [r7, #16]
 801252c:	0151      	lsls	r1, r2, #5
 801252e:	697a      	ldr	r2, [r7, #20]
 8012530:	440a      	add	r2, r1
 8012532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801253a:	6013      	str	r3, [r2, #0]
 801253c:	e092      	b.n	8012664 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	015a      	lsls	r2, r3, #5
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	4413      	add	r3, r2
 8012546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	693a      	ldr	r2, [r7, #16]
 801254e:	0151      	lsls	r1, r2, #5
 8012550:	697a      	ldr	r2, [r7, #20]
 8012552:	440a      	add	r2, r1
 8012554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012558:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801255c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	695b      	ldr	r3, [r3, #20]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d07e      	beq.n	8012664 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f003 030f 	and.w	r3, r3, #15
 8012576:	2101      	movs	r1, #1
 8012578:	fa01 f303 	lsl.w	r3, r1, r3
 801257c:	6979      	ldr	r1, [r7, #20]
 801257e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012582:	4313      	orrs	r3, r2
 8012584:	634b      	str	r3, [r1, #52]	; 0x34
 8012586:	e06d      	b.n	8012664 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	015a      	lsls	r2, r3, #5
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	4413      	add	r3, r2
 8012590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012594:	691a      	ldr	r2, [r3, #16]
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	0159      	lsls	r1, r3, #5
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	440b      	add	r3, r1
 801259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125a2:	4619      	mov	r1, r3
 80125a4:	4b34      	ldr	r3, [pc, #208]	; (8012678 <USB_EP0StartXfer+0x2ac>)
 80125a6:	4013      	ands	r3, r2
 80125a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	015a      	lsls	r2, r3, #5
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	4413      	add	r3, r2
 80125b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b6:	691a      	ldr	r2, [r3, #16]
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	0159      	lsls	r1, r3, #5
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	440b      	add	r3, r1
 80125c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125c4:	4619      	mov	r1, r3
 80125c6:	4b2b      	ldr	r3, [pc, #172]	; (8012674 <USB_EP0StartXfer+0x2a8>)
 80125c8:	4013      	ands	r3, r2
 80125ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	695b      	ldr	r3, [r3, #20]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d003      	beq.n	80125dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	689a      	ldr	r2, [r3, #8]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	015a      	lsls	r2, r3, #5
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	4413      	add	r3, r2
 80125e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125e8:	691b      	ldr	r3, [r3, #16]
 80125ea:	693a      	ldr	r2, [r7, #16]
 80125ec:	0151      	lsls	r1, r2, #5
 80125ee:	697a      	ldr	r2, [r7, #20]
 80125f0:	440a      	add	r2, r1
 80125f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80125fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	015a      	lsls	r2, r3, #5
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	4413      	add	r3, r2
 8012604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012608:	691a      	ldr	r2, [r3, #16]
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	689b      	ldr	r3, [r3, #8]
 801260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012612:	6939      	ldr	r1, [r7, #16]
 8012614:	0148      	lsls	r0, r1, #5
 8012616:	6979      	ldr	r1, [r7, #20]
 8012618:	4401      	add	r1, r0
 801261a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801261e:	4313      	orrs	r3, r2
 8012620:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012622:	79fb      	ldrb	r3, [r7, #7]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d10d      	bne.n	8012644 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	68d9      	ldr	r1, [r3, #12]
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	015a      	lsls	r2, r3, #5
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	4413      	add	r3, r2
 801263c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012640:	460a      	mov	r2, r1
 8012642:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	015a      	lsls	r2, r3, #5
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	4413      	add	r3, r2
 801264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	693a      	ldr	r2, [r7, #16]
 8012654:	0151      	lsls	r1, r2, #5
 8012656:	697a      	ldr	r2, [r7, #20]
 8012658:	440a      	add	r2, r1
 801265a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801265e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	371c      	adds	r7, #28
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	e007ffff 	.word	0xe007ffff
 8012678:	fff80000 	.word	0xfff80000

0801267c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801267c:	b480      	push	{r7}
 801267e:	b089      	sub	sp, #36	; 0x24
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	4611      	mov	r1, r2
 8012688:	461a      	mov	r2, r3
 801268a:	460b      	mov	r3, r1
 801268c:	71fb      	strb	r3, [r7, #7]
 801268e:	4613      	mov	r3, r2
 8012690:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801269a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d123      	bne.n	80126ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80126a2:	88bb      	ldrh	r3, [r7, #4]
 80126a4:	3303      	adds	r3, #3
 80126a6:	089b      	lsrs	r3, r3, #2
 80126a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80126aa:	2300      	movs	r3, #0
 80126ac:	61bb      	str	r3, [r7, #24]
 80126ae:	e018      	b.n	80126e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80126b0:	79fb      	ldrb	r3, [r7, #7]
 80126b2:	031a      	lsls	r2, r3, #12
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	4413      	add	r3, r2
 80126b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80126bc:	461a      	mov	r2, r3
 80126be:	69fb      	ldr	r3, [r7, #28]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	3301      	adds	r3, #1
 80126c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80126ca:	69fb      	ldr	r3, [r7, #28]
 80126cc:	3301      	adds	r3, #1
 80126ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	3301      	adds	r3, #1
 80126d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	3301      	adds	r3, #1
 80126da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	3301      	adds	r3, #1
 80126e0:	61bb      	str	r3, [r7, #24]
 80126e2:	69ba      	ldr	r2, [r7, #24]
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d3e2      	bcc.n	80126b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3724      	adds	r7, #36	; 0x24
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b08b      	sub	sp, #44	; 0x2c
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	4613      	mov	r3, r2
 8012704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801270a:	68bb      	ldr	r3, [r7, #8]
 801270c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801270e:	88fb      	ldrh	r3, [r7, #6]
 8012710:	089b      	lsrs	r3, r3, #2
 8012712:	b29b      	uxth	r3, r3
 8012714:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012716:	88fb      	ldrh	r3, [r7, #6]
 8012718:	f003 0303 	and.w	r3, r3, #3
 801271c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801271e:	2300      	movs	r3, #0
 8012720:	623b      	str	r3, [r7, #32]
 8012722:	e014      	b.n	801274e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801272a:	681a      	ldr	r2, [r3, #0]
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012732:	3301      	adds	r3, #1
 8012734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012738:	3301      	adds	r3, #1
 801273a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273e:	3301      	adds	r3, #1
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012744:	3301      	adds	r3, #1
 8012746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012748:	6a3b      	ldr	r3, [r7, #32]
 801274a:	3301      	adds	r3, #1
 801274c:	623b      	str	r3, [r7, #32]
 801274e:	6a3a      	ldr	r2, [r7, #32]
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	429a      	cmp	r2, r3
 8012754:	d3e6      	bcc.n	8012724 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012756:	8bfb      	ldrh	r3, [r7, #30]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01e      	beq.n	801279a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801275c:	2300      	movs	r3, #0
 801275e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012766:	461a      	mov	r2, r3
 8012768:	f107 0310 	add.w	r3, r7, #16
 801276c:	6812      	ldr	r2, [r2, #0]
 801276e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012770:	693a      	ldr	r2, [r7, #16]
 8012772:	6a3b      	ldr	r3, [r7, #32]
 8012774:	b2db      	uxtb	r3, r3
 8012776:	00db      	lsls	r3, r3, #3
 8012778:	fa22 f303 	lsr.w	r3, r2, r3
 801277c:	b2da      	uxtb	r2, r3
 801277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012780:	701a      	strb	r2, [r3, #0]
      i++;
 8012782:	6a3b      	ldr	r3, [r7, #32]
 8012784:	3301      	adds	r3, #1
 8012786:	623b      	str	r3, [r7, #32]
      pDest++;
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	3301      	adds	r3, #1
 801278c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801278e:	8bfb      	ldrh	r3, [r7, #30]
 8012790:	3b01      	subs	r3, #1
 8012792:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012794:	8bfb      	ldrh	r3, [r7, #30]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1ea      	bne.n	8012770 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801279c:	4618      	mov	r0, r3
 801279e:	372c      	adds	r7, #44	; 0x2c
 80127a0:	46bd      	mov	sp, r7
 80127a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a6:	4770      	bx	lr

080127a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	785b      	ldrb	r3, [r3, #1]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d12c      	bne.n	801281e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	015a      	lsls	r2, r3, #5
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	4413      	add	r3, r2
 80127cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	db12      	blt.n	80127fc <USB_EPSetStall+0x54>
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00f      	beq.n	80127fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	015a      	lsls	r2, r3, #5
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	4413      	add	r3, r2
 80127e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	68ba      	ldr	r2, [r7, #8]
 80127ec:	0151      	lsls	r1, r2, #5
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	440a      	add	r2, r1
 80127f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80127fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	015a      	lsls	r2, r3, #5
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4413      	add	r3, r2
 8012804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	0151      	lsls	r1, r2, #5
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	440a      	add	r2, r1
 8012812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801281a:	6013      	str	r3, [r2, #0]
 801281c:	e02b      	b.n	8012876 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	015a      	lsls	r2, r3, #5
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	4413      	add	r3, r2
 8012826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	db12      	blt.n	8012856 <USB_EPSetStall+0xae>
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00f      	beq.n	8012856 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	015a      	lsls	r2, r3, #5
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	4413      	add	r3, r2
 801283e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	68ba      	ldr	r2, [r7, #8]
 8012846:	0151      	lsls	r1, r2, #5
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	440a      	add	r2, r1
 801284c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012854:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	015a      	lsls	r2, r3, #5
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	4413      	add	r3, r2
 801285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	68ba      	ldr	r2, [r7, #8]
 8012866:	0151      	lsls	r1, r2, #5
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	440a      	add	r2, r1
 801286c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012876:	2300      	movs	r3, #0
}
 8012878:	4618      	mov	r0, r3
 801287a:	3714      	adds	r7, #20
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr

08012884 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	785b      	ldrb	r3, [r3, #1]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d128      	bne.n	80128f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	015a      	lsls	r2, r3, #5
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	4413      	add	r3, r2
 80128a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	68ba      	ldr	r2, [r7, #8]
 80128b0:	0151      	lsls	r1, r2, #5
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	440a      	add	r2, r1
 80128b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80128be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	78db      	ldrb	r3, [r3, #3]
 80128c4:	2b03      	cmp	r3, #3
 80128c6:	d003      	beq.n	80128d0 <USB_EPClearStall+0x4c>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	78db      	ldrb	r3, [r3, #3]
 80128cc:	2b02      	cmp	r3, #2
 80128ce:	d138      	bne.n	8012942 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	015a      	lsls	r2, r3, #5
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	4413      	add	r3, r2
 80128d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	68ba      	ldr	r2, [r7, #8]
 80128e0:	0151      	lsls	r1, r2, #5
 80128e2:	68fa      	ldr	r2, [r7, #12]
 80128e4:	440a      	add	r2, r1
 80128e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128ee:	6013      	str	r3, [r2, #0]
 80128f0:	e027      	b.n	8012942 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	015a      	lsls	r2, r3, #5
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	4413      	add	r3, r2
 80128fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	68ba      	ldr	r2, [r7, #8]
 8012902:	0151      	lsls	r1, r2, #5
 8012904:	68fa      	ldr	r2, [r7, #12]
 8012906:	440a      	add	r2, r1
 8012908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801290c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012910:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	78db      	ldrb	r3, [r3, #3]
 8012916:	2b03      	cmp	r3, #3
 8012918:	d003      	beq.n	8012922 <USB_EPClearStall+0x9e>
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	78db      	ldrb	r3, [r3, #3]
 801291e:	2b02      	cmp	r3, #2
 8012920:	d10f      	bne.n	8012942 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	015a      	lsls	r2, r3, #5
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	4413      	add	r3, r2
 801292a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	68ba      	ldr	r2, [r7, #8]
 8012932:	0151      	lsls	r1, r2, #5
 8012934:	68fa      	ldr	r2, [r7, #12]
 8012936:	440a      	add	r2, r1
 8012938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012940:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3714      	adds	r7, #20
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012950:	b480      	push	{r7}
 8012952:	b085      	sub	sp, #20
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	68fa      	ldr	r2, [r7, #12]
 801296a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801296e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012972:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	78fb      	ldrb	r3, [r7, #3]
 801297e:	011b      	lsls	r3, r3, #4
 8012980:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012984:	68f9      	ldr	r1, [r7, #12]
 8012986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801298a:	4313      	orrs	r3, r2
 801298c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801298e:	2300      	movs	r3, #0
}
 8012990:	4618      	mov	r0, r3
 8012992:	3714      	adds	r7, #20
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801299c:	b480      	push	{r7}
 801299e:	b085      	sub	sp, #20
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129b6:	f023 0303 	bic.w	r3, r3, #3
 80129ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	68fa      	ldr	r2, [r7, #12]
 80129c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80129ca:	f023 0302 	bic.w	r3, r3, #2
 80129ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80129d0:	2300      	movs	r3, #0
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3714      	adds	r7, #20
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr

080129de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80129de:	b480      	push	{r7}
 80129e0:	b085      	sub	sp, #20
 80129e2:	af00      	add	r7, sp, #0
 80129e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	68fa      	ldr	r2, [r7, #12]
 80129f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129f8:	f023 0303 	bic.w	r3, r3, #3
 80129fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a0c:	f043 0302 	orr.w	r3, r3, #2
 8012a10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3714      	adds	r7, #20
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr

08012a20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	695b      	ldr	r3, [r3, #20]
 8012a2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	699b      	ldr	r3, [r3, #24]
 8012a32:	68fa      	ldr	r2, [r7, #12]
 8012a34:	4013      	ands	r3, r2
 8012a36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012a38:	68fb      	ldr	r3, [r7, #12]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr

08012a46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012a46:	b480      	push	{r7}
 8012a48:	b085      	sub	sp, #20
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a58:	699b      	ldr	r3, [r3, #24]
 8012a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a62:	69db      	ldr	r3, [r3, #28]
 8012a64:	68ba      	ldr	r2, [r7, #8]
 8012a66:	4013      	ands	r3, r2
 8012a68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	0c1b      	lsrs	r3, r3, #16
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3714      	adds	r7, #20
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012a7a:	b480      	push	{r7}
 8012a7c:	b085      	sub	sp, #20
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a8c:	699b      	ldr	r3, [r3, #24]
 8012a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	4013      	ands	r3, r2
 8012a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	b29b      	uxth	r3, r3
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3714      	adds	r7, #20
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aac:	4770      	bx	lr

08012aae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012aae:	b480      	push	{r7}
 8012ab0:	b085      	sub	sp, #20
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012abe:	78fb      	ldrb	r3, [r7, #3]
 8012ac0:	015a      	lsls	r2, r3, #5
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012aca:	689b      	ldr	r3, [r3, #8]
 8012acc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ad4:	695b      	ldr	r3, [r3, #20]
 8012ad6:	68ba      	ldr	r2, [r7, #8]
 8012ad8:	4013      	ands	r3, r2
 8012ada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012adc:	68bb      	ldr	r3, [r7, #8]
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3714      	adds	r7, #20
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012aea:	b480      	push	{r7}
 8012aec:	b087      	sub	sp, #28
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	460b      	mov	r3, r1
 8012af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b00:	691b      	ldr	r3, [r3, #16]
 8012b02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012b0e:	78fb      	ldrb	r3, [r7, #3]
 8012b10:	f003 030f 	and.w	r3, r3, #15
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	fa22 f303 	lsr.w	r3, r2, r3
 8012b1a:	01db      	lsls	r3, r3, #7
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	693a      	ldr	r2, [r7, #16]
 8012b20:	4313      	orrs	r3, r2
 8012b22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012b24:	78fb      	ldrb	r3, [r7, #3]
 8012b26:	015a      	lsls	r2, r3, #5
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b30:	689b      	ldr	r3, [r3, #8]
 8012b32:	693a      	ldr	r2, [r7, #16]
 8012b34:	4013      	ands	r3, r2
 8012b36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012b38:	68bb      	ldr	r3, [r7, #8]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	371c      	adds	r7, #28
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b44:	4770      	bx	lr

08012b46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012b46:	b480      	push	{r7}
 8012b48:	b083      	sub	sp, #12
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	695b      	ldr	r3, [r3, #20]
 8012b52:	f003 0301 	and.w	r3, r3, #1
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
	...

08012b64 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b085      	sub	sp, #20
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b7e:	4619      	mov	r1, r3
 8012b80:	4b09      	ldr	r3, [pc, #36]	; (8012ba8 <USB_ActivateSetup+0x44>)
 8012b82:	4013      	ands	r3, r2
 8012b84:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	68fa      	ldr	r2, [r7, #12]
 8012b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3714      	adds	r7, #20
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	fffff800 	.word	0xfffff800

08012bac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b087      	sub	sp, #28
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	607a      	str	r2, [r7, #4]
 8012bb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	333c      	adds	r3, #60	; 0x3c
 8012bc2:	3304      	adds	r3, #4
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	4a26      	ldr	r2, [pc, #152]	; (8012c64 <USB_EP0_OutStart+0xb8>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d90a      	bls.n	8012be6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012be0:	d101      	bne.n	8012be6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e037      	b.n	8012c56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bec:	461a      	mov	r2, r3
 8012bee:	2300      	movs	r3, #0
 8012bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf8:	691b      	ldr	r3, [r3, #16]
 8012bfa:	697a      	ldr	r2, [r7, #20]
 8012bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c0c:	691b      	ldr	r3, [r3, #16]
 8012c0e:	697a      	ldr	r2, [r7, #20]
 8012c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c14:	f043 0318 	orr.w	r3, r3, #24
 8012c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c20:	691b      	ldr	r3, [r3, #16]
 8012c22:	697a      	ldr	r2, [r7, #20]
 8012c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012c2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012c2e:	7afb      	ldrb	r3, [r7, #11]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d10f      	bne.n	8012c54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	697a      	ldr	r2, [r7, #20]
 8012c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	371c      	adds	r7, #28
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	4f54300a 	.word	0x4f54300a

08012c68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b085      	sub	sp, #20
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012c70:	2300      	movs	r3, #0
 8012c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	3301      	adds	r3, #1
 8012c78:	60fb      	str	r3, [r7, #12]
 8012c7a:	4a13      	ldr	r2, [pc, #76]	; (8012cc8 <USB_CoreReset+0x60>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d901      	bls.n	8012c84 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8012c80:	2303      	movs	r3, #3
 8012c82:	e01a      	b.n	8012cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	691b      	ldr	r3, [r3, #16]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	daf3      	bge.n	8012c74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	691b      	ldr	r3, [r3, #16]
 8012c94:	f043 0201 	orr.w	r2, r3, #1
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	60fb      	str	r3, [r7, #12]
 8012ca2:	4a09      	ldr	r2, [pc, #36]	; (8012cc8 <USB_CoreReset+0x60>)
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d901      	bls.n	8012cac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8012ca8:	2303      	movs	r3, #3
 8012caa:	e006      	b.n	8012cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	f003 0301 	and.w	r3, r3, #1
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d0f1      	beq.n	8012c9c <USB_CoreReset+0x34>

  return HAL_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop
 8012cc8:	00030d40 	.word	0x00030d40

08012ccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012cd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012cdc:	f7f2 f890 	bl	8004e00 <USBD_static_malloc>
 8012ce0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d105      	bne.n	8012cf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	e066      	b.n	8012dc2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	68fa      	ldr	r2, [r7, #12]
 8012cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	7c1b      	ldrb	r3, [r3, #16]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d119      	bne.n	8012d38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d08:	2202      	movs	r2, #2
 8012d0a:	2181      	movs	r1, #129	; 0x81
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7f1 ff54 	bl	8004bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2201      	movs	r2, #1
 8012d16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d1c:	2202      	movs	r2, #2
 8012d1e:	2101      	movs	r1, #1
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7f1 ff4a 	bl	8004bba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2201      	movs	r2, #1
 8012d2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2210      	movs	r2, #16
 8012d32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012d36:	e016      	b.n	8012d66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012d38:	2340      	movs	r3, #64	; 0x40
 8012d3a:	2202      	movs	r2, #2
 8012d3c:	2181      	movs	r1, #129	; 0x81
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7f1 ff3b 	bl	8004bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2201      	movs	r2, #1
 8012d48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012d4a:	2340      	movs	r3, #64	; 0x40
 8012d4c:	2202      	movs	r2, #2
 8012d4e:	2101      	movs	r1, #1
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f7f1 ff32 	bl	8004bba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2210      	movs	r2, #16
 8012d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012d66:	2308      	movs	r3, #8
 8012d68:	2203      	movs	r2, #3
 8012d6a:	2182      	movs	r1, #130	; 0x82
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7f1 ff24 	bl	8004bba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2201      	movs	r2, #1
 8012d76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2200      	movs	r2, #0
 8012d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	7c1b      	ldrb	r3, [r3, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d109      	bne.n	8012db0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012da6:	2101      	movs	r1, #1
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7f1 fff5 	bl	8004d98 <USBD_LL_PrepareReceive>
 8012dae:	e007      	b.n	8012dc0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012db6:	2340      	movs	r3, #64	; 0x40
 8012db8:	2101      	movs	r1, #1
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7f1 ffec 	bl	8004d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3710      	adds	r7, #16
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b082      	sub	sp, #8
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
 8012dd2:	460b      	mov	r3, r1
 8012dd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012dd6:	2181      	movs	r1, #129	; 0x81
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7f1 ff14 	bl	8004c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2200      	movs	r2, #0
 8012de2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012de4:	2101      	movs	r1, #1
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7f1 ff0d 	bl	8004c06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012df4:	2182      	movs	r1, #130	; 0x82
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7f1 ff05 	bl	8004c06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2200      	movs	r2, #0
 8012e08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00e      	beq.n	8012e34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f1 fff8 	bl	8004e1c <USBD_static_free>
    pdev->pClassData = NULL;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012e34:	2300      	movs	r3, #0
}
 8012e36:	4618      	mov	r0, r3
 8012e38:	3708      	adds	r7, #8
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}
	...

08012e40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012e52:	2300      	movs	r3, #0
 8012e54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012e56:	2300      	movs	r3, #0
 8012e58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d101      	bne.n	8012e68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012e64:	2303      	movs	r3, #3
 8012e66:	e0af      	b.n	8012fc8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d03f      	beq.n	8012ef4 <USBD_CDC_Setup+0xb4>
 8012e74:	2b20      	cmp	r3, #32
 8012e76:	f040 809f 	bne.w	8012fb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	88db      	ldrh	r3, [r3, #6]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d02e      	beq.n	8012ee0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	b25b      	sxtb	r3, r3
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da16      	bge.n	8012eba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	683a      	ldr	r2, [r7, #0]
 8012e96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012e98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e9a:	683a      	ldr	r2, [r7, #0]
 8012e9c:	88d2      	ldrh	r2, [r2, #6]
 8012e9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	88db      	ldrh	r3, [r3, #6]
 8012ea4:	2b07      	cmp	r3, #7
 8012ea6:	bf28      	it	cs
 8012ea8:	2307      	movcs	r3, #7
 8012eaa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	89fa      	ldrh	r2, [r7, #14]
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f001 fae9 	bl	801448a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012eb8:	e085      	b.n	8012fc6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	785a      	ldrb	r2, [r3, #1]
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	88db      	ldrh	r3, [r3, #6]
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012ed0:	6939      	ldr	r1, [r7, #16]
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	88db      	ldrh	r3, [r3, #6]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f001 fb02 	bl	80144e2 <USBD_CtlPrepareRx>
      break;
 8012ede:	e072      	b.n	8012fc6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	7850      	ldrb	r0, [r2, #1]
 8012eec:	2200      	movs	r2, #0
 8012eee:	6839      	ldr	r1, [r7, #0]
 8012ef0:	4798      	blx	r3
      break;
 8012ef2:	e068      	b.n	8012fc6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	785b      	ldrb	r3, [r3, #1]
 8012ef8:	2b0b      	cmp	r3, #11
 8012efa:	d852      	bhi.n	8012fa2 <USBD_CDC_Setup+0x162>
 8012efc:	a201      	add	r2, pc, #4	; (adr r2, 8012f04 <USBD_CDC_Setup+0xc4>)
 8012efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f02:	bf00      	nop
 8012f04:	08012f35 	.word	0x08012f35
 8012f08:	08012fb1 	.word	0x08012fb1
 8012f0c:	08012fa3 	.word	0x08012fa3
 8012f10:	08012fa3 	.word	0x08012fa3
 8012f14:	08012fa3 	.word	0x08012fa3
 8012f18:	08012fa3 	.word	0x08012fa3
 8012f1c:	08012fa3 	.word	0x08012fa3
 8012f20:	08012fa3 	.word	0x08012fa3
 8012f24:	08012fa3 	.word	0x08012fa3
 8012f28:	08012fa3 	.word	0x08012fa3
 8012f2c:	08012f5f 	.word	0x08012f5f
 8012f30:	08012f89 	.word	0x08012f89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	2b03      	cmp	r3, #3
 8012f3e:	d107      	bne.n	8012f50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012f40:	f107 030a 	add.w	r3, r7, #10
 8012f44:	2202      	movs	r2, #2
 8012f46:	4619      	mov	r1, r3
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f001 fa9e 	bl	801448a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f4e:	e032      	b.n	8012fb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f001 fa28 	bl	80143a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f58:	2303      	movs	r3, #3
 8012f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8012f5c:	e02b      	b.n	8012fb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d107      	bne.n	8012f7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012f6a:	f107 030d 	add.w	r3, r7, #13
 8012f6e:	2201      	movs	r2, #1
 8012f70:	4619      	mov	r1, r3
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f001 fa89 	bl	801448a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012f78:	e01d      	b.n	8012fb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012f7a:	6839      	ldr	r1, [r7, #0]
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f001 fa13 	bl	80143a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f82:	2303      	movs	r3, #3
 8012f84:	75fb      	strb	r3, [r7, #23]
          break;
 8012f86:	e016      	b.n	8012fb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2b03      	cmp	r3, #3
 8012f92:	d00f      	beq.n	8012fb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012f94:	6839      	ldr	r1, [r7, #0]
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f001 fa06 	bl	80143a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f9c:	2303      	movs	r3, #3
 8012f9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012fa0:	e008      	b.n	8012fb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012fa2:	6839      	ldr	r1, [r7, #0]
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f001 f9ff 	bl	80143a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8012faa:	2303      	movs	r3, #3
 8012fac:	75fb      	strb	r3, [r7, #23]
          break;
 8012fae:	e002      	b.n	8012fb6 <USBD_CDC_Setup+0x176>
          break;
 8012fb0:	bf00      	nop
 8012fb2:	e008      	b.n	8012fc6 <USBD_CDC_Setup+0x186>
          break;
 8012fb4:	bf00      	nop
      }
      break;
 8012fb6:	e006      	b.n	8012fc6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f001 f9f4 	bl	80143a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8012fc0:	2303      	movs	r3, #3
 8012fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8012fc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8012fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3718      	adds	r7, #24
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b084      	sub	sp, #16
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012fee:	2303      	movs	r3, #3
 8012ff0:	e04f      	b.n	8013092 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ff8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012ffa:	78fa      	ldrb	r2, [r7, #3]
 8012ffc:	6879      	ldr	r1, [r7, #4]
 8012ffe:	4613      	mov	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	440b      	add	r3, r1
 8013008:	3318      	adds	r3, #24
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d029      	beq.n	8013064 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013010:	78fa      	ldrb	r2, [r7, #3]
 8013012:	6879      	ldr	r1, [r7, #4]
 8013014:	4613      	mov	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	4413      	add	r3, r2
 801301a:	009b      	lsls	r3, r3, #2
 801301c:	440b      	add	r3, r1
 801301e:	3318      	adds	r3, #24
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	78f9      	ldrb	r1, [r7, #3]
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	460b      	mov	r3, r1
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	1a5b      	subs	r3, r3, r1
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4403      	add	r3, r0
 8013030:	3344      	adds	r3, #68	; 0x44
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	fbb2 f1f3 	udiv	r1, r2, r3
 8013038:	fb01 f303 	mul.w	r3, r1, r3
 801303c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801303e:	2b00      	cmp	r3, #0
 8013040:	d110      	bne.n	8013064 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013042:	78fa      	ldrb	r2, [r7, #3]
 8013044:	6879      	ldr	r1, [r7, #4]
 8013046:	4613      	mov	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4413      	add	r3, r2
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	440b      	add	r3, r1
 8013050:	3318      	adds	r3, #24
 8013052:	2200      	movs	r2, #0
 8013054:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013056:	78f9      	ldrb	r1, [r7, #3]
 8013058:	2300      	movs	r3, #0
 801305a:	2200      	movs	r2, #0
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7f1 fe7a 	bl	8004d56 <USBD_LL_Transmit>
 8013062:	e015      	b.n	8013090 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	2200      	movs	r2, #0
 8013068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d00b      	beq.n	8013090 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	68ba      	ldr	r2, [r7, #8]
 8013082:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013086:	68ba      	ldr	r2, [r7, #8]
 8013088:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801308c:	78fa      	ldrb	r2, [r7, #3]
 801308e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013090:	2300      	movs	r3, #0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b084      	sub	sp, #16
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d101      	bne.n	80130bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80130b8:	2303      	movs	r3, #3
 80130ba:	e015      	b.n	80130e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	4619      	mov	r1, r3
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7f1 fe8a 	bl	8004dda <USBD_LL_GetRxDataSize>
 80130c6:	4602      	mov	r2, r0
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80130dc:	68fa      	ldr	r2, [r7, #12]
 80130de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80130e2:	4611      	mov	r1, r2
 80130e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80130e6:	2300      	movs	r3, #0
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3710      	adds	r7, #16
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b084      	sub	sp, #16
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d101      	bne.n	801310a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013106:	2303      	movs	r3, #3
 8013108:	e01b      	b.n	8013142 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013110:	2b00      	cmp	r3, #0
 8013112:	d015      	beq.n	8013140 <USBD_CDC_EP0_RxReady+0x50>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801311a:	2bff      	cmp	r3, #255	; 0xff
 801311c:	d010      	beq.n	8013140 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801312c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013134:	b292      	uxth	r2, r2
 8013136:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	22ff      	movs	r2, #255	; 0xff
 801313c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
	...

0801314c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2243      	movs	r2, #67	; 0x43
 8013158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801315a:	4b03      	ldr	r3, [pc, #12]	; (8013168 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801315c:	4618      	mov	r0, r3
 801315e:	370c      	adds	r7, #12
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr
 8013168:	24000334 	.word	0x24000334

0801316c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801316c:	b480      	push	{r7}
 801316e:	b083      	sub	sp, #12
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2243      	movs	r2, #67	; 0x43
 8013178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801317a:	4b03      	ldr	r3, [pc, #12]	; (8013188 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801317c:	4618      	mov	r0, r3
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	240002f0 	.word	0x240002f0

0801318c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801318c:	b480      	push	{r7}
 801318e:	b083      	sub	sp, #12
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2243      	movs	r2, #67	; 0x43
 8013198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801319a:	4b03      	ldr	r3, [pc, #12]	; (80131a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801319c:	4618      	mov	r0, r3
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr
 80131a8:	24000378 	.word	0x24000378

080131ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	220a      	movs	r2, #10
 80131b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80131ba:	4b03      	ldr	r3, [pc, #12]	; (80131c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80131bc:	4618      	mov	r0, r3
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr
 80131c8:	240002ac 	.word	0x240002ac

080131cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d101      	bne.n	80131e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80131dc:	2303      	movs	r3, #3
 80131de:	e004      	b.n	80131ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr

080131f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80131f6:	b480      	push	{r7}
 80131f8:	b087      	sub	sp, #28
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	60f8      	str	r0, [r7, #12]
 80131fe:	60b9      	str	r1, [r7, #8]
 8013200:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013208:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d101      	bne.n	8013214 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013210:	2303      	movs	r3, #3
 8013212:	e008      	b.n	8013226 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	68ba      	ldr	r2, [r7, #8]
 8013218:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	371c      	adds	r7, #28
 801322a:	46bd      	mov	sp, r7
 801322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013230:	4770      	bx	lr

08013232 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013232:	b480      	push	{r7}
 8013234:	b085      	sub	sp, #20
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
 801323a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013242:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d101      	bne.n	801324e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801324a:	2303      	movs	r3, #3
 801324c:	e004      	b.n	8013258 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013256:	2300      	movs	r3, #0
}
 8013258:	4618      	mov	r0, r3
 801325a:	3714      	adds	r7, #20
 801325c:	46bd      	mov	sp, r7
 801325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013262:	4770      	bx	lr

08013264 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013272:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801327e:	2303      	movs	r3, #3
 8013280:	e016      	b.n	80132b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	7c1b      	ldrb	r3, [r3, #16]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d109      	bne.n	801329e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013294:	2101      	movs	r1, #1
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7f1 fd7e 	bl	8004d98 <USBD_LL_PrepareReceive>
 801329c:	e007      	b.n	80132ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132a4:	2340      	movs	r3, #64	; 0x40
 80132a6:	2101      	movs	r1, #1
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7f1 fd75 	bl	8004d98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80132ae:	2300      	movs	r3, #0
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3710      	adds	r7, #16
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b086      	sub	sp, #24
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	60b9      	str	r1, [r7, #8]
 80132c2:	4613      	mov	r3, r2
 80132c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80132cc:	2303      	movs	r3, #3
 80132ce:	e01f      	b.n	8013310 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2200      	movs	r2, #0
 80132d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2200      	movs	r2, #0
 80132dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2200      	movs	r2, #0
 80132e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d003      	beq.n	80132f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	68ba      	ldr	r2, [r7, #8]
 80132f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2201      	movs	r2, #1
 80132fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	79fa      	ldrb	r2, [r7, #7]
 8013302:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f7f1 fbed 	bl	8004ae4 <USBD_LL_Init>
 801330a:	4603      	mov	r3, r0
 801330c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013322:	2300      	movs	r3, #0
 8013324:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d101      	bne.n	8013330 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801332c:	2303      	movs	r3, #3
 801332e:	e016      	b.n	801335e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00b      	beq.n	801335c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801334c:	f107 020e 	add.w	r2, r7, #14
 8013350:	4610      	mov	r0, r2
 8013352:	4798      	blx	r3
 8013354:	4602      	mov	r2, r0
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b082      	sub	sp, #8
 801336a:	af00      	add	r7, sp, #0
 801336c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7f1 fc08 	bl	8004b84 <USBD_LL_Start>
 8013374:	4603      	mov	r3, r0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801337e:	b480      	push	{r7}
 8013380:	b083      	sub	sp, #12
 8013382:	af00      	add	r7, sp, #0
 8013384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013386:	2300      	movs	r3, #0
}
 8013388:	4618      	mov	r0, r3
 801338a:	370c      	adds	r7, #12
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr

08013394 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	460b      	mov	r3, r1
 801339e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80133a0:	2303      	movs	r3, #3
 80133a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d009      	beq.n	80133c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	78fa      	ldrb	r2, [r7, #3]
 80133b8:	4611      	mov	r1, r2
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	4798      	blx	r3
 80133be:	4603      	mov	r3, r0
 80133c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80133c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3710      	adds	r7, #16
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}

080133cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	460b      	mov	r3, r1
 80133d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d007      	beq.n	80133f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	78fa      	ldrb	r2, [r7, #3]
 80133ec:	4611      	mov	r1, r2
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	4798      	blx	r3
  }

  return USBD_OK;
 80133f2:	2300      	movs	r3, #0
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3708      	adds	r7, #8
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}

080133fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801340c:	6839      	ldr	r1, [r7, #0]
 801340e:	4618      	mov	r0, r3
 8013410:	f000 ff90 	bl	8014334 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2201      	movs	r2, #1
 8013418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013422:	461a      	mov	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013430:	f003 031f 	and.w	r3, r3, #31
 8013434:	2b02      	cmp	r3, #2
 8013436:	d01a      	beq.n	801346e <USBD_LL_SetupStage+0x72>
 8013438:	2b02      	cmp	r3, #2
 801343a:	d822      	bhi.n	8013482 <USBD_LL_SetupStage+0x86>
 801343c:	2b00      	cmp	r3, #0
 801343e:	d002      	beq.n	8013446 <USBD_LL_SetupStage+0x4a>
 8013440:	2b01      	cmp	r3, #1
 8013442:	d00a      	beq.n	801345a <USBD_LL_SetupStage+0x5e>
 8013444:	e01d      	b.n	8013482 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801344c:	4619      	mov	r1, r3
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 fa62 	bl	8013918 <USBD_StdDevReq>
 8013454:	4603      	mov	r3, r0
 8013456:	73fb      	strb	r3, [r7, #15]
      break;
 8013458:	e020      	b.n	801349c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013460:	4619      	mov	r1, r3
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 fac6 	bl	80139f4 <USBD_StdItfReq>
 8013468:	4603      	mov	r3, r0
 801346a:	73fb      	strb	r3, [r7, #15]
      break;
 801346c:	e016      	b.n	801349c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013474:	4619      	mov	r1, r3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 fb05 	bl	8013a86 <USBD_StdEPReq>
 801347c:	4603      	mov	r3, r0
 801347e:	73fb      	strb	r3, [r7, #15]
      break;
 8013480:	e00c      	b.n	801349c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801348c:	b2db      	uxtb	r3, r3
 801348e:	4619      	mov	r1, r3
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7f1 fbd7 	bl	8004c44 <USBD_LL_StallEP>
 8013496:	4603      	mov	r3, r0
 8013498:	73fb      	strb	r3, [r7, #15]
      break;
 801349a:	bf00      	nop
  }

  return ret;
 801349c:	7bfb      	ldrb	r3, [r7, #15]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b086      	sub	sp, #24
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	60f8      	str	r0, [r7, #12]
 80134ae:	460b      	mov	r3, r1
 80134b0:	607a      	str	r2, [r7, #4]
 80134b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80134b4:	7afb      	ldrb	r3, [r7, #11]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d138      	bne.n	801352c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80134c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80134c8:	2b03      	cmp	r3, #3
 80134ca:	d14a      	bne.n	8013562 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	689a      	ldr	r2, [r3, #8]
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d913      	bls.n	8013500 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	689a      	ldr	r2, [r3, #8]
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	1ad2      	subs	r2, r2, r3
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	68da      	ldr	r2, [r3, #12]
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	4293      	cmp	r3, r2
 80134f0:	bf28      	it	cs
 80134f2:	4613      	movcs	r3, r2
 80134f4:	461a      	mov	r2, r3
 80134f6:	6879      	ldr	r1, [r7, #4]
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f001 f80f 	bl	801451c <USBD_CtlContinueRx>
 80134fe:	e030      	b.n	8013562 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b03      	cmp	r3, #3
 801350a:	d10b      	bne.n	8013524 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013512:	691b      	ldr	r3, [r3, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d005      	beq.n	8013524 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801351e:	691b      	ldr	r3, [r3, #16]
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f001 f80a 	bl	801453e <USBD_CtlSendStatus>
 801352a:	e01a      	b.n	8013562 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013532:	b2db      	uxtb	r3, r3
 8013534:	2b03      	cmp	r3, #3
 8013536:	d114      	bne.n	8013562 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00e      	beq.n	8013562 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801354a:	699b      	ldr	r3, [r3, #24]
 801354c:	7afa      	ldrb	r2, [r7, #11]
 801354e:	4611      	mov	r1, r2
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	4798      	blx	r3
 8013554:	4603      	mov	r3, r0
 8013556:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d001      	beq.n	8013562 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801355e:	7dfb      	ldrb	r3, [r7, #23]
 8013560:	e000      	b.n	8013564 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3718      	adds	r7, #24
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b086      	sub	sp, #24
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	460b      	mov	r3, r1
 8013576:	607a      	str	r2, [r7, #4]
 8013578:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801357a:	7afb      	ldrb	r3, [r7, #11]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d16b      	bne.n	8013658 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	3314      	adds	r3, #20
 8013584:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801358c:	2b02      	cmp	r3, #2
 801358e:	d156      	bne.n	801363e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	689a      	ldr	r2, [r3, #8]
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	429a      	cmp	r2, r3
 801359a:	d914      	bls.n	80135c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	689a      	ldr	r2, [r3, #8]
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	1ad2      	subs	r2, r2, r3
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	461a      	mov	r2, r3
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	68f8      	ldr	r0, [r7, #12]
 80135b4:	f000 ff84 	bl	80144c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135b8:	2300      	movs	r3, #0
 80135ba:	2200      	movs	r2, #0
 80135bc:	2100      	movs	r1, #0
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f7f1 fbea 	bl	8004d98 <USBD_LL_PrepareReceive>
 80135c4:	e03b      	b.n	801363e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	68da      	ldr	r2, [r3, #12]
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d11c      	bne.n	801360c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	685a      	ldr	r2, [r3, #4]
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80135da:	429a      	cmp	r2, r3
 80135dc:	d316      	bcc.n	801360c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	685a      	ldr	r2, [r3, #4]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d20f      	bcs.n	801360c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80135ec:	2200      	movs	r2, #0
 80135ee:	2100      	movs	r1, #0
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f000 ff65 	bl	80144c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2200      	movs	r2, #0
 80135fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135fe:	2300      	movs	r3, #0
 8013600:	2200      	movs	r2, #0
 8013602:	2100      	movs	r1, #0
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f7f1 fbc7 	bl	8004d98 <USBD_LL_PrepareReceive>
 801360a:	e018      	b.n	801363e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013612:	b2db      	uxtb	r3, r3
 8013614:	2b03      	cmp	r3, #3
 8013616:	d10b      	bne.n	8013630 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d005      	beq.n	8013630 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	68f8      	ldr	r0, [r7, #12]
 801362e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013630:	2180      	movs	r1, #128	; 0x80
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	f7f1 fb06 	bl	8004c44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f000 ff93 	bl	8014564 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013644:	2b01      	cmp	r3, #1
 8013646:	d122      	bne.n	801368e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7ff fe98 	bl	801337e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2200      	movs	r2, #0
 8013652:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013656:	e01a      	b.n	801368e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801365e:	b2db      	uxtb	r3, r3
 8013660:	2b03      	cmp	r3, #3
 8013662:	d114      	bne.n	801368e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801366a:	695b      	ldr	r3, [r3, #20]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d00e      	beq.n	801368e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013676:	695b      	ldr	r3, [r3, #20]
 8013678:	7afa      	ldrb	r2, [r7, #11]
 801367a:	4611      	mov	r1, r2
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	4798      	blx	r3
 8013680:	4603      	mov	r3, r0
 8013682:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013684:	7dfb      	ldrb	r3, [r7, #23]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801368a:	7dfb      	ldrb	r3, [r7, #23]
 801368c:	e000      	b.n	8013690 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	3718      	adds	r7, #24
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2200      	movs	r2, #0
 80136ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d101      	bne.n	80136cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80136c8:	2303      	movs	r3, #3
 80136ca:	e02f      	b.n	801372c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d00f      	beq.n	80136f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d009      	beq.n	80136f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136e8:	685b      	ldr	r3, [r3, #4]
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	6852      	ldr	r2, [r2, #4]
 80136ee:	b2d2      	uxtb	r2, r2
 80136f0:	4611      	mov	r1, r2
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136f6:	2340      	movs	r3, #64	; 0x40
 80136f8:	2200      	movs	r2, #0
 80136fa:	2100      	movs	r1, #0
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f7f1 fa5c 	bl	8004bba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2201      	movs	r2, #1
 8013706:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2240      	movs	r2, #64	; 0x40
 801370e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013712:	2340      	movs	r3, #64	; 0x40
 8013714:	2200      	movs	r2, #0
 8013716:	2180      	movs	r1, #128	; 0x80
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7f1 fa4e 	bl	8004bba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2201      	movs	r2, #1
 8013722:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2240      	movs	r2, #64	; 0x40
 8013728:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801372a:	2300      	movs	r3, #0
}
 801372c:	4618      	mov	r0, r3
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013734:	b480      	push	{r7}
 8013736:	b083      	sub	sp, #12
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	460b      	mov	r3, r1
 801373e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	78fa      	ldrb	r2, [r7, #3]
 8013744:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013746:	2300      	movs	r3, #0
}
 8013748:	4618      	mov	r0, r3
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr

08013754 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013762:	b2da      	uxtb	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2204      	movs	r2, #4
 801376e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr

08013780 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801378e:	b2db      	uxtb	r3, r3
 8013790:	2b04      	cmp	r3, #4
 8013792:	d106      	bne.n	80137a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801379a:	b2da      	uxtb	r2, r3
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d101      	bne.n	80137c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e012      	b.n	80137ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	2b03      	cmp	r3, #3
 80137d0:	d10b      	bne.n	80137ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137d8:	69db      	ldr	r3, [r3, #28]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d005      	beq.n	80137ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137e4:	69db      	ldr	r3, [r3, #28]
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80137ea:	2300      	movs	r3, #0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	460b      	mov	r3, r1
 80137fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 801380a:	2303      	movs	r3, #3
 801380c:	e014      	b.n	8013838 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b03      	cmp	r3, #3
 8013818:	d10d      	bne.n	8013836 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013820:	6a1b      	ldr	r3, [r3, #32]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d007      	beq.n	8013836 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801382c:	6a1b      	ldr	r3, [r3, #32]
 801382e:	78fa      	ldrb	r2, [r7, #3]
 8013830:	4611      	mov	r1, r2
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013836:	2300      	movs	r3, #0
}
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	460b      	mov	r3, r1
 801384a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013852:	2b00      	cmp	r3, #0
 8013854:	d101      	bne.n	801385a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8013856:	2303      	movs	r3, #3
 8013858:	e014      	b.n	8013884 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013860:	b2db      	uxtb	r3, r3
 8013862:	2b03      	cmp	r3, #3
 8013864:	d10d      	bne.n	8013882 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801386e:	2b00      	cmp	r3, #0
 8013870:	d007      	beq.n	8013882 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801387a:	78fa      	ldrb	r2, [r7, #3]
 801387c:	4611      	mov	r1, r2
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013882:	2300      	movs	r3, #0
}
 8013884:	4618      	mov	r0, r3
 8013886:	3708      	adds	r7, #8
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}

0801388c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801388c:	b480      	push	{r7}
 801388e:	b083      	sub	sp, #12
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	370c      	adds	r7, #12
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr

080138a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b082      	sub	sp, #8
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2201      	movs	r2, #1
 80138ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d009      	beq.n	80138d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	6852      	ldr	r2, [r2, #4]
 80138c8:	b2d2      	uxtb	r2, r2
 80138ca:	4611      	mov	r1, r2
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	4798      	blx	r3
  }

  return USBD_OK;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3708      	adds	r7, #8
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80138da:	b480      	push	{r7}
 80138dc:	b087      	sub	sp, #28
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	3301      	adds	r3, #1
 80138f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80138f8:	8a3b      	ldrh	r3, [r7, #16]
 80138fa:	021b      	lsls	r3, r3, #8
 80138fc:	b21a      	sxth	r2, r3
 80138fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013902:	4313      	orrs	r3, r2
 8013904:	b21b      	sxth	r3, r3
 8013906:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013908:	89fb      	ldrh	r3, [r7, #14]
}
 801390a:	4618      	mov	r0, r3
 801390c:	371c      	adds	r7, #28
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
	...

08013918 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013922:	2300      	movs	r3, #0
 8013924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801392e:	2b40      	cmp	r3, #64	; 0x40
 8013930:	d005      	beq.n	801393e <USBD_StdDevReq+0x26>
 8013932:	2b40      	cmp	r3, #64	; 0x40
 8013934:	d853      	bhi.n	80139de <USBD_StdDevReq+0xc6>
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00b      	beq.n	8013952 <USBD_StdDevReq+0x3a>
 801393a:	2b20      	cmp	r3, #32
 801393c:	d14f      	bne.n	80139de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013944:	689b      	ldr	r3, [r3, #8]
 8013946:	6839      	ldr	r1, [r7, #0]
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	4798      	blx	r3
 801394c:	4603      	mov	r3, r0
 801394e:	73fb      	strb	r3, [r7, #15]
      break;
 8013950:	e04a      	b.n	80139e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	785b      	ldrb	r3, [r3, #1]
 8013956:	2b09      	cmp	r3, #9
 8013958:	d83b      	bhi.n	80139d2 <USBD_StdDevReq+0xba>
 801395a:	a201      	add	r2, pc, #4	; (adr r2, 8013960 <USBD_StdDevReq+0x48>)
 801395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013960:	080139b5 	.word	0x080139b5
 8013964:	080139c9 	.word	0x080139c9
 8013968:	080139d3 	.word	0x080139d3
 801396c:	080139bf 	.word	0x080139bf
 8013970:	080139d3 	.word	0x080139d3
 8013974:	08013993 	.word	0x08013993
 8013978:	08013989 	.word	0x08013989
 801397c:	080139d3 	.word	0x080139d3
 8013980:	080139ab 	.word	0x080139ab
 8013984:	0801399d 	.word	0x0801399d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013988:	6839      	ldr	r1, [r7, #0]
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f000 f9de 	bl	8013d4c <USBD_GetDescriptor>
          break;
 8013990:	e024      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013992:	6839      	ldr	r1, [r7, #0]
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f000 fb43 	bl	8014020 <USBD_SetAddress>
          break;
 801399a:	e01f      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801399c:	6839      	ldr	r1, [r7, #0]
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 fb82 	bl	80140a8 <USBD_SetConfig>
 80139a4:	4603      	mov	r3, r0
 80139a6:	73fb      	strb	r3, [r7, #15]
          break;
 80139a8:	e018      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80139aa:	6839      	ldr	r1, [r7, #0]
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 fc21 	bl	80141f4 <USBD_GetConfig>
          break;
 80139b2:	e013      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80139b4:	6839      	ldr	r1, [r7, #0]
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 fc52 	bl	8014260 <USBD_GetStatus>
          break;
 80139bc:	e00e      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80139be:	6839      	ldr	r1, [r7, #0]
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fc81 	bl	80142c8 <USBD_SetFeature>
          break;
 80139c6:	e009      	b.n	80139dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80139c8:	6839      	ldr	r1, [r7, #0]
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f000 fc90 	bl	80142f0 <USBD_ClrFeature>
          break;
 80139d0:	e004      	b.n	80139dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80139d2:	6839      	ldr	r1, [r7, #0]
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f000 fce7 	bl	80143a8 <USBD_CtlError>
          break;
 80139da:	bf00      	nop
      }
      break;
 80139dc:	e004      	b.n	80139e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80139de:	6839      	ldr	r1, [r7, #0]
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f000 fce1 	bl	80143a8 <USBD_CtlError>
      break;
 80139e6:	bf00      	nop
  }

  return ret;
 80139e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3710      	adds	r7, #16
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop

080139f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b084      	sub	sp, #16
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139fe:	2300      	movs	r3, #0
 8013a00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a0a:	2b40      	cmp	r3, #64	; 0x40
 8013a0c:	d005      	beq.n	8013a1a <USBD_StdItfReq+0x26>
 8013a0e:	2b40      	cmp	r3, #64	; 0x40
 8013a10:	d82f      	bhi.n	8013a72 <USBD_StdItfReq+0x7e>
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d001      	beq.n	8013a1a <USBD_StdItfReq+0x26>
 8013a16:	2b20      	cmp	r3, #32
 8013a18:	d12b      	bne.n	8013a72 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	3b01      	subs	r3, #1
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	d81d      	bhi.n	8013a64 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	889b      	ldrh	r3, [r3, #4]
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d813      	bhi.n	8013a5a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	6839      	ldr	r1, [r7, #0]
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	4798      	blx	r3
 8013a40:	4603      	mov	r3, r0
 8013a42:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	88db      	ldrh	r3, [r3, #6]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d110      	bne.n	8013a6e <USBD_StdItfReq+0x7a>
 8013a4c:	7bfb      	ldrb	r3, [r7, #15]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10d      	bne.n	8013a6e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f000 fd73 	bl	801453e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013a58:	e009      	b.n	8013a6e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 fca3 	bl	80143a8 <USBD_CtlError>
          break;
 8013a62:	e004      	b.n	8013a6e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013a64:	6839      	ldr	r1, [r7, #0]
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fc9e 	bl	80143a8 <USBD_CtlError>
          break;
 8013a6c:	e000      	b.n	8013a70 <USBD_StdItfReq+0x7c>
          break;
 8013a6e:	bf00      	nop
      }
      break;
 8013a70:	e004      	b.n	8013a7c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013a72:	6839      	ldr	r1, [r7, #0]
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 fc97 	bl	80143a8 <USBD_CtlError>
      break;
 8013a7a:	bf00      	nop
  }

  return ret;
 8013a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b084      	sub	sp, #16
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a90:	2300      	movs	r3, #0
 8013a92:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	889b      	ldrh	r3, [r3, #4]
 8013a98:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013aa2:	2b40      	cmp	r3, #64	; 0x40
 8013aa4:	d007      	beq.n	8013ab6 <USBD_StdEPReq+0x30>
 8013aa6:	2b40      	cmp	r3, #64	; 0x40
 8013aa8:	f200 8145 	bhi.w	8013d36 <USBD_StdEPReq+0x2b0>
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00c      	beq.n	8013aca <USBD_StdEPReq+0x44>
 8013ab0:	2b20      	cmp	r3, #32
 8013ab2:	f040 8140 	bne.w	8013d36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013abc:	689b      	ldr	r3, [r3, #8]
 8013abe:	6839      	ldr	r1, [r7, #0]
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	4798      	blx	r3
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ac8:	e13a      	b.n	8013d40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	785b      	ldrb	r3, [r3, #1]
 8013ace:	2b03      	cmp	r3, #3
 8013ad0:	d007      	beq.n	8013ae2 <USBD_StdEPReq+0x5c>
 8013ad2:	2b03      	cmp	r3, #3
 8013ad4:	f300 8129 	bgt.w	8013d2a <USBD_StdEPReq+0x2a4>
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d07f      	beq.n	8013bdc <USBD_StdEPReq+0x156>
 8013adc:	2b01      	cmp	r3, #1
 8013ade:	d03c      	beq.n	8013b5a <USBD_StdEPReq+0xd4>
 8013ae0:	e123      	b.n	8013d2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	2b02      	cmp	r3, #2
 8013aec:	d002      	beq.n	8013af4 <USBD_StdEPReq+0x6e>
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d016      	beq.n	8013b20 <USBD_StdEPReq+0x9a>
 8013af2:	e02c      	b.n	8013b4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013af4:	7bbb      	ldrb	r3, [r7, #14]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d00d      	beq.n	8013b16 <USBD_StdEPReq+0x90>
 8013afa:	7bbb      	ldrb	r3, [r7, #14]
 8013afc:	2b80      	cmp	r3, #128	; 0x80
 8013afe:	d00a      	beq.n	8013b16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b00:	7bbb      	ldrb	r3, [r7, #14]
 8013b02:	4619      	mov	r1, r3
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f7f1 f89d 	bl	8004c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b0a:	2180      	movs	r1, #128	; 0x80
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7f1 f899 	bl	8004c44 <USBD_LL_StallEP>
 8013b12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b14:	e020      	b.n	8013b58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 fc45 	bl	80143a8 <USBD_CtlError>
              break;
 8013b1e:	e01b      	b.n	8013b58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	885b      	ldrh	r3, [r3, #2]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d10e      	bne.n	8013b46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013b28:	7bbb      	ldrb	r3, [r7, #14]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00b      	beq.n	8013b46 <USBD_StdEPReq+0xc0>
 8013b2e:	7bbb      	ldrb	r3, [r7, #14]
 8013b30:	2b80      	cmp	r3, #128	; 0x80
 8013b32:	d008      	beq.n	8013b46 <USBD_StdEPReq+0xc0>
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	88db      	ldrh	r3, [r3, #6]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d104      	bne.n	8013b46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b3c:	7bbb      	ldrb	r3, [r7, #14]
 8013b3e:	4619      	mov	r1, r3
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f7f1 f87f 	bl	8004c44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 fcf9 	bl	801453e <USBD_CtlSendStatus>

              break;
 8013b4c:	e004      	b.n	8013b58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013b4e:	6839      	ldr	r1, [r7, #0]
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 fc29 	bl	80143a8 <USBD_CtlError>
              break;
 8013b56:	bf00      	nop
          }
          break;
 8013b58:	e0ec      	b.n	8013d34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b60:	b2db      	uxtb	r3, r3
 8013b62:	2b02      	cmp	r3, #2
 8013b64:	d002      	beq.n	8013b6c <USBD_StdEPReq+0xe6>
 8013b66:	2b03      	cmp	r3, #3
 8013b68:	d016      	beq.n	8013b98 <USBD_StdEPReq+0x112>
 8013b6a:	e030      	b.n	8013bce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b6c:	7bbb      	ldrb	r3, [r7, #14]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00d      	beq.n	8013b8e <USBD_StdEPReq+0x108>
 8013b72:	7bbb      	ldrb	r3, [r7, #14]
 8013b74:	2b80      	cmp	r3, #128	; 0x80
 8013b76:	d00a      	beq.n	8013b8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b78:	7bbb      	ldrb	r3, [r7, #14]
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f7f1 f861 	bl	8004c44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b82:	2180      	movs	r1, #128	; 0x80
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7f1 f85d 	bl	8004c44 <USBD_LL_StallEP>
 8013b8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b8c:	e025      	b.n	8013bda <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013b8e:	6839      	ldr	r1, [r7, #0]
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f000 fc09 	bl	80143a8 <USBD_CtlError>
              break;
 8013b96:	e020      	b.n	8013bda <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	885b      	ldrh	r3, [r3, #2]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d11b      	bne.n	8013bd8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ba0:	7bbb      	ldrb	r3, [r7, #14]
 8013ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d004      	beq.n	8013bb4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013baa:	7bbb      	ldrb	r3, [r7, #14]
 8013bac:	4619      	mov	r1, r3
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7f1 f867 	bl	8004c82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 fcc2 	bl	801453e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bc0:	689b      	ldr	r3, [r3, #8]
 8013bc2:	6839      	ldr	r1, [r7, #0]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	4798      	blx	r3
 8013bc8:	4603      	mov	r3, r0
 8013bca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013bcc:	e004      	b.n	8013bd8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013bce:	6839      	ldr	r1, [r7, #0]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fbe9 	bl	80143a8 <USBD_CtlError>
              break;
 8013bd6:	e000      	b.n	8013bda <USBD_StdEPReq+0x154>
              break;
 8013bd8:	bf00      	nop
          }
          break;
 8013bda:	e0ab      	b.n	8013d34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	2b02      	cmp	r3, #2
 8013be6:	d002      	beq.n	8013bee <USBD_StdEPReq+0x168>
 8013be8:	2b03      	cmp	r3, #3
 8013bea:	d032      	beq.n	8013c52 <USBD_StdEPReq+0x1cc>
 8013bec:	e097      	b.n	8013d1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013bee:	7bbb      	ldrb	r3, [r7, #14]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d007      	beq.n	8013c04 <USBD_StdEPReq+0x17e>
 8013bf4:	7bbb      	ldrb	r3, [r7, #14]
 8013bf6:	2b80      	cmp	r3, #128	; 0x80
 8013bf8:	d004      	beq.n	8013c04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013bfa:	6839      	ldr	r1, [r7, #0]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 fbd3 	bl	80143a8 <USBD_CtlError>
                break;
 8013c02:	e091      	b.n	8013d28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	da0b      	bge.n	8013c24 <USBD_StdEPReq+0x19e>
 8013c0c:	7bbb      	ldrb	r3, [r7, #14]
 8013c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013c12:	4613      	mov	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4413      	add	r3, r2
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	3310      	adds	r3, #16
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	4413      	add	r3, r2
 8013c20:	3304      	adds	r3, #4
 8013c22:	e00b      	b.n	8013c3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c24:	7bbb      	ldrb	r3, [r7, #14]
 8013c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	4413      	add	r3, r2
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	4413      	add	r3, r2
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	2200      	movs	r2, #0
 8013c42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2202      	movs	r2, #2
 8013c48:	4619      	mov	r1, r3
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f000 fc1d 	bl	801448a <USBD_CtlSendData>
              break;
 8013c50:	e06a      	b.n	8013d28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	da11      	bge.n	8013c7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013c5a:	7bbb      	ldrb	r3, [r7, #14]
 8013c5c:	f003 020f 	and.w	r2, r3, #15
 8013c60:	6879      	ldr	r1, [r7, #4]
 8013c62:	4613      	mov	r3, r2
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	4413      	add	r3, r2
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	440b      	add	r3, r1
 8013c6c:	3324      	adds	r3, #36	; 0x24
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d117      	bne.n	8013ca4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013c74:	6839      	ldr	r1, [r7, #0]
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f000 fb96 	bl	80143a8 <USBD_CtlError>
                  break;
 8013c7c:	e054      	b.n	8013d28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013c7e:	7bbb      	ldrb	r3, [r7, #14]
 8013c80:	f003 020f 	and.w	r2, r3, #15
 8013c84:	6879      	ldr	r1, [r7, #4]
 8013c86:	4613      	mov	r3, r2
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	4413      	add	r3, r2
 8013c8c:	009b      	lsls	r3, r3, #2
 8013c8e:	440b      	add	r3, r1
 8013c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013c94:	881b      	ldrh	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d104      	bne.n	8013ca4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 fb83 	bl	80143a8 <USBD_CtlError>
                  break;
 8013ca2:	e041      	b.n	8013d28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	da0b      	bge.n	8013cc4 <USBD_StdEPReq+0x23e>
 8013cac:	7bbb      	ldrb	r3, [r7, #14]
 8013cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cb2:	4613      	mov	r3, r2
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	4413      	add	r3, r2
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	3310      	adds	r3, #16
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	e00b      	b.n	8013cdc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013cc4:	7bbb      	ldrb	r3, [r7, #14]
 8013cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013cca:	4613      	mov	r3, r2
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4413      	add	r3, r2
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	4413      	add	r3, r2
 8013cda:	3304      	adds	r3, #4
 8013cdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013cde:	7bbb      	ldrb	r3, [r7, #14]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d002      	beq.n	8013cea <USBD_StdEPReq+0x264>
 8013ce4:	7bbb      	ldrb	r3, [r7, #14]
 8013ce6:	2b80      	cmp	r3, #128	; 0x80
 8013ce8:	d103      	bne.n	8013cf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	2200      	movs	r2, #0
 8013cee:	601a      	str	r2, [r3, #0]
 8013cf0:	e00e      	b.n	8013d10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013cf2:	7bbb      	ldrb	r3, [r7, #14]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7f0 ffe2 	bl	8004cc0 <USBD_LL_IsStallEP>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d003      	beq.n	8013d0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	2201      	movs	r2, #1
 8013d06:	601a      	str	r2, [r3, #0]
 8013d08:	e002      	b.n	8013d10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2202      	movs	r2, #2
 8013d14:	4619      	mov	r1, r3
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 fbb7 	bl	801448a <USBD_CtlSendData>
              break;
 8013d1c:	e004      	b.n	8013d28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f000 fb41 	bl	80143a8 <USBD_CtlError>
              break;
 8013d26:	bf00      	nop
          }
          break;
 8013d28:	e004      	b.n	8013d34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013d2a:	6839      	ldr	r1, [r7, #0]
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f000 fb3b 	bl	80143a8 <USBD_CtlError>
          break;
 8013d32:	bf00      	nop
      }
      break;
 8013d34:	e004      	b.n	8013d40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013d36:	6839      	ldr	r1, [r7, #0]
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f000 fb35 	bl	80143a8 <USBD_CtlError>
      break;
 8013d3e:	bf00      	nop
  }

  return ret;
 8013d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3710      	adds	r7, #16
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
	...

08013d4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d56:	2300      	movs	r3, #0
 8013d58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	885b      	ldrh	r3, [r3, #2]
 8013d66:	0a1b      	lsrs	r3, r3, #8
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	3b01      	subs	r3, #1
 8013d6c:	2b06      	cmp	r3, #6
 8013d6e:	f200 8128 	bhi.w	8013fc2 <USBD_GetDescriptor+0x276>
 8013d72:	a201      	add	r2, pc, #4	; (adr r2, 8013d78 <USBD_GetDescriptor+0x2c>)
 8013d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d78:	08013d95 	.word	0x08013d95
 8013d7c:	08013dad 	.word	0x08013dad
 8013d80:	08013ded 	.word	0x08013ded
 8013d84:	08013fc3 	.word	0x08013fc3
 8013d88:	08013fc3 	.word	0x08013fc3
 8013d8c:	08013f63 	.word	0x08013f63
 8013d90:	08013f8f 	.word	0x08013f8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	7c12      	ldrb	r2, [r2, #16]
 8013da0:	f107 0108 	add.w	r1, r7, #8
 8013da4:	4610      	mov	r0, r2
 8013da6:	4798      	blx	r3
 8013da8:	60f8      	str	r0, [r7, #12]
      break;
 8013daa:	e112      	b.n	8013fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	7c1b      	ldrb	r3, [r3, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d10d      	bne.n	8013dd0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dbc:	f107 0208 	add.w	r2, r7, #8
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	4798      	blx	r3
 8013dc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	2202      	movs	r2, #2
 8013dcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013dce:	e100      	b.n	8013fd2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dd8:	f107 0208 	add.w	r2, r7, #8
 8013ddc:	4610      	mov	r0, r2
 8013dde:	4798      	blx	r3
 8013de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	3301      	adds	r3, #1
 8013de6:	2202      	movs	r2, #2
 8013de8:	701a      	strb	r2, [r3, #0]
      break;
 8013dea:	e0f2      	b.n	8013fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	885b      	ldrh	r3, [r3, #2]
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b05      	cmp	r3, #5
 8013df4:	f200 80ac 	bhi.w	8013f50 <USBD_GetDescriptor+0x204>
 8013df8:	a201      	add	r2, pc, #4	; (adr r2, 8013e00 <USBD_GetDescriptor+0xb4>)
 8013dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfe:	bf00      	nop
 8013e00:	08013e19 	.word	0x08013e19
 8013e04:	08013e4d 	.word	0x08013e4d
 8013e08:	08013e81 	.word	0x08013e81
 8013e0c:	08013eb5 	.word	0x08013eb5
 8013e10:	08013ee9 	.word	0x08013ee9
 8013e14:	08013f1d 	.word	0x08013f1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00b      	beq.n	8013e3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2a:	685b      	ldr	r3, [r3, #4]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	7c12      	ldrb	r2, [r2, #16]
 8013e30:	f107 0108 	add.w	r1, r7, #8
 8013e34:	4610      	mov	r0, r2
 8013e36:	4798      	blx	r3
 8013e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e3a:	e091      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013e3c:	6839      	ldr	r1, [r7, #0]
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 fab2 	bl	80143a8 <USBD_CtlError>
            err++;
 8013e44:	7afb      	ldrb	r3, [r7, #11]
 8013e46:	3301      	adds	r3, #1
 8013e48:	72fb      	strb	r3, [r7, #11]
          break;
 8013e4a:	e089      	b.n	8013f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00b      	beq.n	8013e70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e5e:	689b      	ldr	r3, [r3, #8]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	7c12      	ldrb	r2, [r2, #16]
 8013e64:	f107 0108 	add.w	r1, r7, #8
 8013e68:	4610      	mov	r0, r2
 8013e6a:	4798      	blx	r3
 8013e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e6e:	e077      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 fa98 	bl	80143a8 <USBD_CtlError>
            err++;
 8013e78:	7afb      	ldrb	r3, [r7, #11]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e7e:	e06f      	b.n	8013f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e86:	68db      	ldr	r3, [r3, #12]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00b      	beq.n	8013ea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	7c12      	ldrb	r2, [r2, #16]
 8013e98:	f107 0108 	add.w	r1, r7, #8
 8013e9c:	4610      	mov	r0, r2
 8013e9e:	4798      	blx	r3
 8013ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ea2:	e05d      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 fa7e 	bl	80143a8 <USBD_CtlError>
            err++;
 8013eac:	7afb      	ldrb	r3, [r7, #11]
 8013eae:	3301      	adds	r3, #1
 8013eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8013eb2:	e055      	b.n	8013f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eba:	691b      	ldr	r3, [r3, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00b      	beq.n	8013ed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	7c12      	ldrb	r2, [r2, #16]
 8013ecc:	f107 0108 	add.w	r1, r7, #8
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	4798      	blx	r3
 8013ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ed6:	e043      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fa64 	bl	80143a8 <USBD_CtlError>
            err++;
 8013ee0:	7afb      	ldrb	r3, [r7, #11]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8013ee6:	e03b      	b.n	8013f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eee:	695b      	ldr	r3, [r3, #20]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00b      	beq.n	8013f0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013efa:	695b      	ldr	r3, [r3, #20]
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	7c12      	ldrb	r2, [r2, #16]
 8013f00:	f107 0108 	add.w	r1, r7, #8
 8013f04:	4610      	mov	r0, r2
 8013f06:	4798      	blx	r3
 8013f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f0a:	e029      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013f0c:	6839      	ldr	r1, [r7, #0]
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f000 fa4a 	bl	80143a8 <USBD_CtlError>
            err++;
 8013f14:	7afb      	ldrb	r3, [r7, #11]
 8013f16:	3301      	adds	r3, #1
 8013f18:	72fb      	strb	r3, [r7, #11]
          break;
 8013f1a:	e021      	b.n	8013f60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f22:	699b      	ldr	r3, [r3, #24]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00b      	beq.n	8013f40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f2e:	699b      	ldr	r3, [r3, #24]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	7c12      	ldrb	r2, [r2, #16]
 8013f34:	f107 0108 	add.w	r1, r7, #8
 8013f38:	4610      	mov	r0, r2
 8013f3a:	4798      	blx	r3
 8013f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f3e:	e00f      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013f40:	6839      	ldr	r1, [r7, #0]
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f000 fa30 	bl	80143a8 <USBD_CtlError>
            err++;
 8013f48:	7afb      	ldrb	r3, [r7, #11]
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8013f4e:	e007      	b.n	8013f60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013f50:	6839      	ldr	r1, [r7, #0]
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f000 fa28 	bl	80143a8 <USBD_CtlError>
          err++;
 8013f58:	7afb      	ldrb	r3, [r7, #11]
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013f5e:	bf00      	nop
      }
      break;
 8013f60:	e037      	b.n	8013fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	7c1b      	ldrb	r3, [r3, #16]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d109      	bne.n	8013f7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f72:	f107 0208 	add.w	r2, r7, #8
 8013f76:	4610      	mov	r0, r2
 8013f78:	4798      	blx	r3
 8013f7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f7c:	e029      	b.n	8013fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013f7e:	6839      	ldr	r1, [r7, #0]
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f000 fa11 	bl	80143a8 <USBD_CtlError>
        err++;
 8013f86:	7afb      	ldrb	r3, [r7, #11]
 8013f88:	3301      	adds	r3, #1
 8013f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f8c:	e021      	b.n	8013fd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	7c1b      	ldrb	r3, [r3, #16]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10d      	bne.n	8013fb2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f9e:	f107 0208 	add.w	r2, r7, #8
 8013fa2:	4610      	mov	r0, r2
 8013fa4:	4798      	blx	r3
 8013fa6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	3301      	adds	r3, #1
 8013fac:	2207      	movs	r2, #7
 8013fae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013fb0:	e00f      	b.n	8013fd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f000 f9f7 	bl	80143a8 <USBD_CtlError>
        err++;
 8013fba:	7afb      	ldrb	r3, [r7, #11]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8013fc0:	e007      	b.n	8013fd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8013fc2:	6839      	ldr	r1, [r7, #0]
 8013fc4:	6878      	ldr	r0, [r7, #4]
 8013fc6:	f000 f9ef 	bl	80143a8 <USBD_CtlError>
      err++;
 8013fca:	7afb      	ldrb	r3, [r7, #11]
 8013fcc:	3301      	adds	r3, #1
 8013fce:	72fb      	strb	r3, [r7, #11]
      break;
 8013fd0:	bf00      	nop
  }

  if (err != 0U)
 8013fd2:	7afb      	ldrb	r3, [r7, #11]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d11e      	bne.n	8014016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	88db      	ldrh	r3, [r3, #6]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d016      	beq.n	801400e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8013fe0:	893b      	ldrh	r3, [r7, #8]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d00e      	beq.n	8014004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	88da      	ldrh	r2, [r3, #6]
 8013fea:	893b      	ldrh	r3, [r7, #8]
 8013fec:	4293      	cmp	r3, r2
 8013fee:	bf28      	it	cs
 8013ff0:	4613      	movcs	r3, r2
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013ff6:	893b      	ldrh	r3, [r7, #8]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	68f9      	ldr	r1, [r7, #12]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fa44 	bl	801448a <USBD_CtlSendData>
 8014002:	e009      	b.n	8014018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014004:	6839      	ldr	r1, [r7, #0]
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 f9ce 	bl	80143a8 <USBD_CtlError>
 801400c:	e004      	b.n	8014018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 fa95 	bl	801453e <USBD_CtlSendStatus>
 8014014:	e000      	b.n	8014018 <USBD_GetDescriptor+0x2cc>
    return;
 8014016:	bf00      	nop
  }
}
 8014018:	3710      	adds	r7, #16
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
 801401e:	bf00      	nop

08014020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	889b      	ldrh	r3, [r3, #4]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d131      	bne.n	8014096 <USBD_SetAddress+0x76>
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	88db      	ldrh	r3, [r3, #6]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d12d      	bne.n	8014096 <USBD_SetAddress+0x76>
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	885b      	ldrh	r3, [r3, #2]
 801403e:	2b7f      	cmp	r3, #127	; 0x7f
 8014040:	d829      	bhi.n	8014096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	885b      	ldrh	r3, [r3, #2]
 8014046:	b2db      	uxtb	r3, r3
 8014048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801404c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014054:	b2db      	uxtb	r3, r3
 8014056:	2b03      	cmp	r3, #3
 8014058:	d104      	bne.n	8014064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801405a:	6839      	ldr	r1, [r7, #0]
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f000 f9a3 	bl	80143a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014062:	e01d      	b.n	80140a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	7bfa      	ldrb	r2, [r7, #15]
 8014068:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801406c:	7bfb      	ldrb	r3, [r7, #15]
 801406e:	4619      	mov	r1, r3
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f7f0 fe51 	bl	8004d18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f000 fa61 	bl	801453e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801407c:	7bfb      	ldrb	r3, [r7, #15]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d004      	beq.n	801408c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2202      	movs	r2, #2
 8014086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801408a:	e009      	b.n	80140a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014094:	e004      	b.n	80140a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014096:	6839      	ldr	r1, [r7, #0]
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 f985 	bl	80143a8 <USBD_CtlError>
  }
}
 801409e:	bf00      	nop
 80140a0:	bf00      	nop
 80140a2:	3710      	adds	r7, #16
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140b2:	2300      	movs	r3, #0
 80140b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	885b      	ldrh	r3, [r3, #2]
 80140ba:	b2da      	uxtb	r2, r3
 80140bc:	4b4c      	ldr	r3, [pc, #304]	; (80141f0 <USBD_SetConfig+0x148>)
 80140be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80140c0:	4b4b      	ldr	r3, [pc, #300]	; (80141f0 <USBD_SetConfig+0x148>)
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d905      	bls.n	80140d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80140c8:	6839      	ldr	r1, [r7, #0]
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 f96c 	bl	80143a8 <USBD_CtlError>
    return USBD_FAIL;
 80140d0:	2303      	movs	r3, #3
 80140d2:	e088      	b.n	80141e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b02      	cmp	r3, #2
 80140de:	d002      	beq.n	80140e6 <USBD_SetConfig+0x3e>
 80140e0:	2b03      	cmp	r3, #3
 80140e2:	d025      	beq.n	8014130 <USBD_SetConfig+0x88>
 80140e4:	e071      	b.n	80141ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80140e6:	4b42      	ldr	r3, [pc, #264]	; (80141f0 <USBD_SetConfig+0x148>)
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d01c      	beq.n	8014128 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80140ee:	4b40      	ldr	r3, [pc, #256]	; (80141f0 <USBD_SetConfig+0x148>)
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	461a      	mov	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80140f8:	4b3d      	ldr	r3, [pc, #244]	; (80141f0 <USBD_SetConfig+0x148>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	4619      	mov	r1, r3
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f7ff f948 	bl	8013394 <USBD_SetClassConfig>
 8014104:	4603      	mov	r3, r0
 8014106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014108:	7bfb      	ldrb	r3, [r7, #15]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d004      	beq.n	8014118 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 f949 	bl	80143a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014116:	e065      	b.n	80141e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f000 fa10 	bl	801453e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2203      	movs	r2, #3
 8014122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014126:	e05d      	b.n	80141e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fa08 	bl	801453e <USBD_CtlSendStatus>
      break;
 801412e:	e059      	b.n	80141e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014130:	4b2f      	ldr	r3, [pc, #188]	; (80141f0 <USBD_SetConfig+0x148>)
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d112      	bne.n	801415e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2202      	movs	r2, #2
 801413c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014140:	4b2b      	ldr	r3, [pc, #172]	; (80141f0 <USBD_SetConfig+0x148>)
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	461a      	mov	r2, r3
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801414a:	4b29      	ldr	r3, [pc, #164]	; (80141f0 <USBD_SetConfig+0x148>)
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	4619      	mov	r1, r3
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7ff f93b 	bl	80133cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 f9f1 	bl	801453e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801415c:	e042      	b.n	80141e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801415e:	4b24      	ldr	r3, [pc, #144]	; (80141f0 <USBD_SetConfig+0x148>)
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	461a      	mov	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	429a      	cmp	r2, r3
 801416a:	d02a      	beq.n	80141c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	b2db      	uxtb	r3, r3
 8014172:	4619      	mov	r1, r3
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7ff f929 	bl	80133cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801417a:	4b1d      	ldr	r3, [pc, #116]	; (80141f0 <USBD_SetConfig+0x148>)
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	461a      	mov	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014184:	4b1a      	ldr	r3, [pc, #104]	; (80141f0 <USBD_SetConfig+0x148>)
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	4619      	mov	r1, r3
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f7ff f902 	bl	8013394 <USBD_SetClassConfig>
 8014190:	4603      	mov	r3, r0
 8014192:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014194:	7bfb      	ldrb	r3, [r7, #15]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d00f      	beq.n	80141ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801419a:	6839      	ldr	r1, [r7, #0]
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f000 f903 	bl	80143a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	685b      	ldr	r3, [r3, #4]
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	4619      	mov	r1, r3
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f7ff f90e 	bl	80133cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2202      	movs	r2, #2
 80141b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80141b8:	e014      	b.n	80141e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f000 f9bf 	bl	801453e <USBD_CtlSendStatus>
      break;
 80141c0:	e010      	b.n	80141e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f9bb 	bl	801453e <USBD_CtlSendStatus>
      break;
 80141c8:	e00c      	b.n	80141e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 f8eb 	bl	80143a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80141d2:	4b07      	ldr	r3, [pc, #28]	; (80141f0 <USBD_SetConfig+0x148>)
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	4619      	mov	r1, r3
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	f7ff f8f7 	bl	80133cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80141de:	2303      	movs	r3, #3
 80141e0:	73fb      	strb	r3, [r7, #15]
      break;
 80141e2:	bf00      	nop
  }

  return ret;
 80141e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3710      	adds	r7, #16
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	24005728 	.word	0x24005728

080141f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	88db      	ldrh	r3, [r3, #6]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d004      	beq.n	8014210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014206:	6839      	ldr	r1, [r7, #0]
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 f8cd 	bl	80143a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801420e:	e023      	b.n	8014258 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014216:	b2db      	uxtb	r3, r3
 8014218:	2b02      	cmp	r3, #2
 801421a:	dc02      	bgt.n	8014222 <USBD_GetConfig+0x2e>
 801421c:	2b00      	cmp	r3, #0
 801421e:	dc03      	bgt.n	8014228 <USBD_GetConfig+0x34>
 8014220:	e015      	b.n	801424e <USBD_GetConfig+0x5a>
 8014222:	2b03      	cmp	r3, #3
 8014224:	d00b      	beq.n	801423e <USBD_GetConfig+0x4a>
 8014226:	e012      	b.n	801424e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	3308      	adds	r3, #8
 8014232:	2201      	movs	r2, #1
 8014234:	4619      	mov	r1, r3
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 f927 	bl	801448a <USBD_CtlSendData>
        break;
 801423c:	e00c      	b.n	8014258 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	3304      	adds	r3, #4
 8014242:	2201      	movs	r2, #1
 8014244:	4619      	mov	r1, r3
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 f91f 	bl	801448a <USBD_CtlSendData>
        break;
 801424c:	e004      	b.n	8014258 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f8a9 	bl	80143a8 <USBD_CtlError>
        break;
 8014256:	bf00      	nop
}
 8014258:	bf00      	nop
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014270:	b2db      	uxtb	r3, r3
 8014272:	3b01      	subs	r3, #1
 8014274:	2b02      	cmp	r3, #2
 8014276:	d81e      	bhi.n	80142b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	88db      	ldrh	r3, [r3, #6]
 801427c:	2b02      	cmp	r3, #2
 801427e:	d004      	beq.n	801428a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014280:	6839      	ldr	r1, [r7, #0]
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f890 	bl	80143a8 <USBD_CtlError>
        break;
 8014288:	e01a      	b.n	80142c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2201      	movs	r2, #1
 801428e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014296:	2b00      	cmp	r3, #0
 8014298:	d005      	beq.n	80142a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	68db      	ldr	r3, [r3, #12]
 801429e:	f043 0202 	orr.w	r2, r3, #2
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	330c      	adds	r3, #12
 80142aa:	2202      	movs	r2, #2
 80142ac:	4619      	mov	r1, r3
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f000 f8eb 	bl	801448a <USBD_CtlSendData>
      break;
 80142b4:	e004      	b.n	80142c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80142b6:	6839      	ldr	r1, [r7, #0]
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f000 f875 	bl	80143a8 <USBD_CtlError>
      break;
 80142be:	bf00      	nop
  }
}
 80142c0:	bf00      	nop
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	885b      	ldrh	r3, [r3, #2]
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d106      	bne.n	80142e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2201      	movs	r2, #1
 80142de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 f92b 	bl	801453e <USBD_CtlSendStatus>
  }
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014300:	b2db      	uxtb	r3, r3
 8014302:	3b01      	subs	r3, #1
 8014304:	2b02      	cmp	r3, #2
 8014306:	d80b      	bhi.n	8014320 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	885b      	ldrh	r3, [r3, #2]
 801430c:	2b01      	cmp	r3, #1
 801430e:	d10c      	bne.n	801432a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2200      	movs	r2, #0
 8014314:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f000 f910 	bl	801453e <USBD_CtlSendStatus>
      }
      break;
 801431e:	e004      	b.n	801432a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014320:	6839      	ldr	r1, [r7, #0]
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 f840 	bl	80143a8 <USBD_CtlError>
      break;
 8014328:	e000      	b.n	801432c <USBD_ClrFeature+0x3c>
      break;
 801432a:	bf00      	nop
  }
}
 801432c:	bf00      	nop
 801432e:	3708      	adds	r7, #8
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}

08014334 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b084      	sub	sp, #16
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	781a      	ldrb	r2, [r3, #0]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	3301      	adds	r3, #1
 801434e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	781a      	ldrb	r2, [r3, #0]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	3301      	adds	r3, #1
 801435c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801435e:	68f8      	ldr	r0, [r7, #12]
 8014360:	f7ff fabb 	bl	80138da <SWAPBYTE>
 8014364:	4603      	mov	r3, r0
 8014366:	461a      	mov	r2, r3
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	3301      	adds	r3, #1
 8014370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	3301      	adds	r3, #1
 8014376:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014378:	68f8      	ldr	r0, [r7, #12]
 801437a:	f7ff faae 	bl	80138da <SWAPBYTE>
 801437e:	4603      	mov	r3, r0
 8014380:	461a      	mov	r2, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	3301      	adds	r3, #1
 801438a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	3301      	adds	r3, #1
 8014390:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f7ff faa1 	bl	80138da <SWAPBYTE>
 8014398:	4603      	mov	r3, r0
 801439a:	461a      	mov	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	80da      	strh	r2, [r3, #6]
}
 80143a0:	bf00      	nop
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80143b2:	2180      	movs	r1, #128	; 0x80
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7f0 fc45 	bl	8004c44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80143ba:	2100      	movs	r1, #0
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f7f0 fc41 	bl	8004c44 <USBD_LL_StallEP>
}
 80143c2:	bf00      	nop
 80143c4:	3708      	adds	r7, #8
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}

080143ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80143ca:	b580      	push	{r7, lr}
 80143cc:	b086      	sub	sp, #24
 80143ce:	af00      	add	r7, sp, #0
 80143d0:	60f8      	str	r0, [r7, #12]
 80143d2:	60b9      	str	r1, [r7, #8]
 80143d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80143d6:	2300      	movs	r3, #0
 80143d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d036      	beq.n	801444e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80143e4:	6938      	ldr	r0, [r7, #16]
 80143e6:	f000 f836 	bl	8014456 <USBD_GetLen>
 80143ea:	4603      	mov	r3, r0
 80143ec:	3301      	adds	r3, #1
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80143f8:	7dfb      	ldrb	r3, [r7, #23]
 80143fa:	68ba      	ldr	r2, [r7, #8]
 80143fc:	4413      	add	r3, r2
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	7812      	ldrb	r2, [r2, #0]
 8014402:	701a      	strb	r2, [r3, #0]
  idx++;
 8014404:	7dfb      	ldrb	r3, [r7, #23]
 8014406:	3301      	adds	r3, #1
 8014408:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801440a:	7dfb      	ldrb	r3, [r7, #23]
 801440c:	68ba      	ldr	r2, [r7, #8]
 801440e:	4413      	add	r3, r2
 8014410:	2203      	movs	r2, #3
 8014412:	701a      	strb	r2, [r3, #0]
  idx++;
 8014414:	7dfb      	ldrb	r3, [r7, #23]
 8014416:	3301      	adds	r3, #1
 8014418:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801441a:	e013      	b.n	8014444 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801441c:	7dfb      	ldrb	r3, [r7, #23]
 801441e:	68ba      	ldr	r2, [r7, #8]
 8014420:	4413      	add	r3, r2
 8014422:	693a      	ldr	r2, [r7, #16]
 8014424:	7812      	ldrb	r2, [r2, #0]
 8014426:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	3301      	adds	r3, #1
 801442c:	613b      	str	r3, [r7, #16]
    idx++;
 801442e:	7dfb      	ldrb	r3, [r7, #23]
 8014430:	3301      	adds	r3, #1
 8014432:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014434:	7dfb      	ldrb	r3, [r7, #23]
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	4413      	add	r3, r2
 801443a:	2200      	movs	r2, #0
 801443c:	701a      	strb	r2, [r3, #0]
    idx++;
 801443e:	7dfb      	ldrb	r3, [r7, #23]
 8014440:	3301      	adds	r3, #1
 8014442:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1e7      	bne.n	801441c <USBD_GetString+0x52>
 801444c:	e000      	b.n	8014450 <USBD_GetString+0x86>
    return;
 801444e:	bf00      	nop
  }
}
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014456:	b480      	push	{r7}
 8014458:	b085      	sub	sp, #20
 801445a:	af00      	add	r7, sp, #0
 801445c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801445e:	2300      	movs	r3, #0
 8014460:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014466:	e005      	b.n	8014474 <USBD_GetLen+0x1e>
  {
    len++;
 8014468:	7bfb      	ldrb	r3, [r7, #15]
 801446a:	3301      	adds	r3, #1
 801446c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	3301      	adds	r3, #1
 8014472:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	781b      	ldrb	r3, [r3, #0]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d1f5      	bne.n	8014468 <USBD_GetLen+0x12>
  }

  return len;
 801447c:	7bfb      	ldrb	r3, [r7, #15]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3714      	adds	r7, #20
 8014482:	46bd      	mov	sp, r7
 8014484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014488:	4770      	bx	lr

0801448a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801448a:	b580      	push	{r7, lr}
 801448c:	b084      	sub	sp, #16
 801448e:	af00      	add	r7, sp, #0
 8014490:	60f8      	str	r0, [r7, #12]
 8014492:	60b9      	str	r1, [r7, #8]
 8014494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2202      	movs	r2, #2
 801449a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	68ba      	ldr	r2, [r7, #8]
 80144ae:	2100      	movs	r1, #0
 80144b0:	68f8      	ldr	r0, [r7, #12]
 80144b2:	f7f0 fc50 	bl	8004d56 <USBD_LL_Transmit>

  return USBD_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3710      	adds	r7, #16
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	68ba      	ldr	r2, [r7, #8]
 80144d0:	2100      	movs	r1, #0
 80144d2:	68f8      	ldr	r0, [r7, #12]
 80144d4:	f7f0 fc3f 	bl	8004d56 <USBD_LL_Transmit>

  return USBD_OK;
 80144d8:	2300      	movs	r3, #0
}
 80144da:	4618      	mov	r0, r3
 80144dc:	3710      	adds	r7, #16
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b084      	sub	sp, #16
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	60f8      	str	r0, [r7, #12]
 80144ea:	60b9      	str	r1, [r7, #8]
 80144ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	2203      	movs	r2, #3
 80144f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	687a      	ldr	r2, [r7, #4]
 8014502:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	2100      	movs	r1, #0
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f7f0 fc43 	bl	8004d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014512:	2300      	movs	r3, #0
}
 8014514:	4618      	mov	r0, r3
 8014516:	3710      	adds	r7, #16
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	68ba      	ldr	r2, [r7, #8]
 801452c:	2100      	movs	r1, #0
 801452e:	68f8      	ldr	r0, [r7, #12]
 8014530:	f7f0 fc32 	bl	8004d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b082      	sub	sp, #8
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2204      	movs	r2, #4
 801454a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801454e:	2300      	movs	r3, #0
 8014550:	2200      	movs	r2, #0
 8014552:	2100      	movs	r1, #0
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f7f0 fbfe 	bl	8004d56 <USBD_LL_Transmit>

  return USBD_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2205      	movs	r2, #5
 8014570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014574:	2300      	movs	r3, #0
 8014576:	2200      	movs	r2, #0
 8014578:	2100      	movs	r1, #0
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7f0 fc0c 	bl	8004d98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3708      	adds	r7, #8
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
	...

0801458c <__assert_func>:
 801458c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801458e:	4614      	mov	r4, r2
 8014590:	461a      	mov	r2, r3
 8014592:	4b09      	ldr	r3, [pc, #36]	; (80145b8 <__assert_func+0x2c>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	4605      	mov	r5, r0
 8014598:	68d8      	ldr	r0, [r3, #12]
 801459a:	b14c      	cbz	r4, 80145b0 <__assert_func+0x24>
 801459c:	4b07      	ldr	r3, [pc, #28]	; (80145bc <__assert_func+0x30>)
 801459e:	9100      	str	r1, [sp, #0]
 80145a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145a4:	4906      	ldr	r1, [pc, #24]	; (80145c0 <__assert_func+0x34>)
 80145a6:	462b      	mov	r3, r5
 80145a8:	f000 f81c 	bl	80145e4 <fiprintf>
 80145ac:	f000 fcce 	bl	8014f4c <abort>
 80145b0:	4b04      	ldr	r3, [pc, #16]	; (80145c4 <__assert_func+0x38>)
 80145b2:	461c      	mov	r4, r3
 80145b4:	e7f3      	b.n	801459e <__assert_func+0x12>
 80145b6:	bf00      	nop
 80145b8:	240003bc 	.word	0x240003bc
 80145bc:	0802fe38 	.word	0x0802fe38
 80145c0:	0802fe45 	.word	0x0802fe45
 80145c4:	0802fe73 	.word	0x0802fe73

080145c8 <calloc>:
 80145c8:	4b02      	ldr	r3, [pc, #8]	; (80145d4 <calloc+0xc>)
 80145ca:	460a      	mov	r2, r1
 80145cc:	4601      	mov	r1, r0
 80145ce:	6818      	ldr	r0, [r3, #0]
 80145d0:	f000 b854 	b.w	801467c <_calloc_r>
 80145d4:	240003bc 	.word	0x240003bc

080145d8 <__errno>:
 80145d8:	4b01      	ldr	r3, [pc, #4]	; (80145e0 <__errno+0x8>)
 80145da:	6818      	ldr	r0, [r3, #0]
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop
 80145e0:	240003bc 	.word	0x240003bc

080145e4 <fiprintf>:
 80145e4:	b40e      	push	{r1, r2, r3}
 80145e6:	b503      	push	{r0, r1, lr}
 80145e8:	4601      	mov	r1, r0
 80145ea:	ab03      	add	r3, sp, #12
 80145ec:	4805      	ldr	r0, [pc, #20]	; (8014604 <fiprintf+0x20>)
 80145ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80145f2:	6800      	ldr	r0, [r0, #0]
 80145f4:	9301      	str	r3, [sp, #4]
 80145f6:	f000 f915 	bl	8014824 <_vfiprintf_r>
 80145fa:	b002      	add	sp, #8
 80145fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014600:	b003      	add	sp, #12
 8014602:	4770      	bx	lr
 8014604:	240003bc 	.word	0x240003bc

08014608 <__libc_init_array>:
 8014608:	b570      	push	{r4, r5, r6, lr}
 801460a:	4d0d      	ldr	r5, [pc, #52]	; (8014640 <__libc_init_array+0x38>)
 801460c:	4c0d      	ldr	r4, [pc, #52]	; (8014644 <__libc_init_array+0x3c>)
 801460e:	1b64      	subs	r4, r4, r5
 8014610:	10a4      	asrs	r4, r4, #2
 8014612:	2600      	movs	r6, #0
 8014614:	42a6      	cmp	r6, r4
 8014616:	d109      	bne.n	801462c <__libc_init_array+0x24>
 8014618:	4d0b      	ldr	r5, [pc, #44]	; (8014648 <__libc_init_array+0x40>)
 801461a:	4c0c      	ldr	r4, [pc, #48]	; (801464c <__libc_init_array+0x44>)
 801461c:	f001 f806 	bl	801562c <_init>
 8014620:	1b64      	subs	r4, r4, r5
 8014622:	10a4      	asrs	r4, r4, #2
 8014624:	2600      	movs	r6, #0
 8014626:	42a6      	cmp	r6, r4
 8014628:	d105      	bne.n	8014636 <__libc_init_array+0x2e>
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014630:	4798      	blx	r3
 8014632:	3601      	adds	r6, #1
 8014634:	e7ee      	b.n	8014614 <__libc_init_array+0xc>
 8014636:	f855 3b04 	ldr.w	r3, [r5], #4
 801463a:	4798      	blx	r3
 801463c:	3601      	adds	r6, #1
 801463e:	e7f2      	b.n	8014626 <__libc_init_array+0x1e>
 8014640:	0802ff14 	.word	0x0802ff14
 8014644:	0802ff14 	.word	0x0802ff14
 8014648:	0802ff14 	.word	0x0802ff14
 801464c:	0802ff18 	.word	0x0802ff18

08014650 <memcpy>:
 8014650:	440a      	add	r2, r1
 8014652:	4291      	cmp	r1, r2
 8014654:	f100 33ff 	add.w	r3, r0, #4294967295
 8014658:	d100      	bne.n	801465c <memcpy+0xc>
 801465a:	4770      	bx	lr
 801465c:	b510      	push	{r4, lr}
 801465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014666:	4291      	cmp	r1, r2
 8014668:	d1f9      	bne.n	801465e <memcpy+0xe>
 801466a:	bd10      	pop	{r4, pc}

0801466c <memset>:
 801466c:	4402      	add	r2, r0
 801466e:	4603      	mov	r3, r0
 8014670:	4293      	cmp	r3, r2
 8014672:	d100      	bne.n	8014676 <memset+0xa>
 8014674:	4770      	bx	lr
 8014676:	f803 1b01 	strb.w	r1, [r3], #1
 801467a:	e7f9      	b.n	8014670 <memset+0x4>

0801467c <_calloc_r>:
 801467c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801467e:	fba1 2402 	umull	r2, r4, r1, r2
 8014682:	b94c      	cbnz	r4, 8014698 <_calloc_r+0x1c>
 8014684:	4611      	mov	r1, r2
 8014686:	9201      	str	r2, [sp, #4]
 8014688:	f000 f82e 	bl	80146e8 <_malloc_r>
 801468c:	9a01      	ldr	r2, [sp, #4]
 801468e:	4605      	mov	r5, r0
 8014690:	b930      	cbnz	r0, 80146a0 <_calloc_r+0x24>
 8014692:	4628      	mov	r0, r5
 8014694:	b003      	add	sp, #12
 8014696:	bd30      	pop	{r4, r5, pc}
 8014698:	220c      	movs	r2, #12
 801469a:	6002      	str	r2, [r0, #0]
 801469c:	2500      	movs	r5, #0
 801469e:	e7f8      	b.n	8014692 <_calloc_r+0x16>
 80146a0:	4621      	mov	r1, r4
 80146a2:	f7ff ffe3 	bl	801466c <memset>
 80146a6:	e7f4      	b.n	8014692 <_calloc_r+0x16>

080146a8 <sbrk_aligned>:
 80146a8:	b570      	push	{r4, r5, r6, lr}
 80146aa:	4e0e      	ldr	r6, [pc, #56]	; (80146e4 <sbrk_aligned+0x3c>)
 80146ac:	460c      	mov	r4, r1
 80146ae:	6831      	ldr	r1, [r6, #0]
 80146b0:	4605      	mov	r5, r0
 80146b2:	b911      	cbnz	r1, 80146ba <sbrk_aligned+0x12>
 80146b4:	f000 fb7a 	bl	8014dac <_sbrk_r>
 80146b8:	6030      	str	r0, [r6, #0]
 80146ba:	4621      	mov	r1, r4
 80146bc:	4628      	mov	r0, r5
 80146be:	f000 fb75 	bl	8014dac <_sbrk_r>
 80146c2:	1c43      	adds	r3, r0, #1
 80146c4:	d00a      	beq.n	80146dc <sbrk_aligned+0x34>
 80146c6:	1cc4      	adds	r4, r0, #3
 80146c8:	f024 0403 	bic.w	r4, r4, #3
 80146cc:	42a0      	cmp	r0, r4
 80146ce:	d007      	beq.n	80146e0 <sbrk_aligned+0x38>
 80146d0:	1a21      	subs	r1, r4, r0
 80146d2:	4628      	mov	r0, r5
 80146d4:	f000 fb6a 	bl	8014dac <_sbrk_r>
 80146d8:	3001      	adds	r0, #1
 80146da:	d101      	bne.n	80146e0 <sbrk_aligned+0x38>
 80146dc:	f04f 34ff 	mov.w	r4, #4294967295
 80146e0:	4620      	mov	r0, r4
 80146e2:	bd70      	pop	{r4, r5, r6, pc}
 80146e4:	24005730 	.word	0x24005730

080146e8 <_malloc_r>:
 80146e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ec:	1ccd      	adds	r5, r1, #3
 80146ee:	f025 0503 	bic.w	r5, r5, #3
 80146f2:	3508      	adds	r5, #8
 80146f4:	2d0c      	cmp	r5, #12
 80146f6:	bf38      	it	cc
 80146f8:	250c      	movcc	r5, #12
 80146fa:	2d00      	cmp	r5, #0
 80146fc:	4607      	mov	r7, r0
 80146fe:	db01      	blt.n	8014704 <_malloc_r+0x1c>
 8014700:	42a9      	cmp	r1, r5
 8014702:	d905      	bls.n	8014710 <_malloc_r+0x28>
 8014704:	230c      	movs	r3, #12
 8014706:	603b      	str	r3, [r7, #0]
 8014708:	2600      	movs	r6, #0
 801470a:	4630      	mov	r0, r6
 801470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014710:	4e2e      	ldr	r6, [pc, #184]	; (80147cc <_malloc_r+0xe4>)
 8014712:	f000 fe43 	bl	801539c <__malloc_lock>
 8014716:	6833      	ldr	r3, [r6, #0]
 8014718:	461c      	mov	r4, r3
 801471a:	bb34      	cbnz	r4, 801476a <_malloc_r+0x82>
 801471c:	4629      	mov	r1, r5
 801471e:	4638      	mov	r0, r7
 8014720:	f7ff ffc2 	bl	80146a8 <sbrk_aligned>
 8014724:	1c43      	adds	r3, r0, #1
 8014726:	4604      	mov	r4, r0
 8014728:	d14d      	bne.n	80147c6 <_malloc_r+0xde>
 801472a:	6834      	ldr	r4, [r6, #0]
 801472c:	4626      	mov	r6, r4
 801472e:	2e00      	cmp	r6, #0
 8014730:	d140      	bne.n	80147b4 <_malloc_r+0xcc>
 8014732:	6823      	ldr	r3, [r4, #0]
 8014734:	4631      	mov	r1, r6
 8014736:	4638      	mov	r0, r7
 8014738:	eb04 0803 	add.w	r8, r4, r3
 801473c:	f000 fb36 	bl	8014dac <_sbrk_r>
 8014740:	4580      	cmp	r8, r0
 8014742:	d13a      	bne.n	80147ba <_malloc_r+0xd2>
 8014744:	6821      	ldr	r1, [r4, #0]
 8014746:	3503      	adds	r5, #3
 8014748:	1a6d      	subs	r5, r5, r1
 801474a:	f025 0503 	bic.w	r5, r5, #3
 801474e:	3508      	adds	r5, #8
 8014750:	2d0c      	cmp	r5, #12
 8014752:	bf38      	it	cc
 8014754:	250c      	movcc	r5, #12
 8014756:	4629      	mov	r1, r5
 8014758:	4638      	mov	r0, r7
 801475a:	f7ff ffa5 	bl	80146a8 <sbrk_aligned>
 801475e:	3001      	adds	r0, #1
 8014760:	d02b      	beq.n	80147ba <_malloc_r+0xd2>
 8014762:	6823      	ldr	r3, [r4, #0]
 8014764:	442b      	add	r3, r5
 8014766:	6023      	str	r3, [r4, #0]
 8014768:	e00e      	b.n	8014788 <_malloc_r+0xa0>
 801476a:	6822      	ldr	r2, [r4, #0]
 801476c:	1b52      	subs	r2, r2, r5
 801476e:	d41e      	bmi.n	80147ae <_malloc_r+0xc6>
 8014770:	2a0b      	cmp	r2, #11
 8014772:	d916      	bls.n	80147a2 <_malloc_r+0xba>
 8014774:	1961      	adds	r1, r4, r5
 8014776:	42a3      	cmp	r3, r4
 8014778:	6025      	str	r5, [r4, #0]
 801477a:	bf18      	it	ne
 801477c:	6059      	strne	r1, [r3, #4]
 801477e:	6863      	ldr	r3, [r4, #4]
 8014780:	bf08      	it	eq
 8014782:	6031      	streq	r1, [r6, #0]
 8014784:	5162      	str	r2, [r4, r5]
 8014786:	604b      	str	r3, [r1, #4]
 8014788:	4638      	mov	r0, r7
 801478a:	f104 060b 	add.w	r6, r4, #11
 801478e:	f000 fe0b 	bl	80153a8 <__malloc_unlock>
 8014792:	f026 0607 	bic.w	r6, r6, #7
 8014796:	1d23      	adds	r3, r4, #4
 8014798:	1af2      	subs	r2, r6, r3
 801479a:	d0b6      	beq.n	801470a <_malloc_r+0x22>
 801479c:	1b9b      	subs	r3, r3, r6
 801479e:	50a3      	str	r3, [r4, r2]
 80147a0:	e7b3      	b.n	801470a <_malloc_r+0x22>
 80147a2:	6862      	ldr	r2, [r4, #4]
 80147a4:	42a3      	cmp	r3, r4
 80147a6:	bf0c      	ite	eq
 80147a8:	6032      	streq	r2, [r6, #0]
 80147aa:	605a      	strne	r2, [r3, #4]
 80147ac:	e7ec      	b.n	8014788 <_malloc_r+0xa0>
 80147ae:	4623      	mov	r3, r4
 80147b0:	6864      	ldr	r4, [r4, #4]
 80147b2:	e7b2      	b.n	801471a <_malloc_r+0x32>
 80147b4:	4634      	mov	r4, r6
 80147b6:	6876      	ldr	r6, [r6, #4]
 80147b8:	e7b9      	b.n	801472e <_malloc_r+0x46>
 80147ba:	230c      	movs	r3, #12
 80147bc:	603b      	str	r3, [r7, #0]
 80147be:	4638      	mov	r0, r7
 80147c0:	f000 fdf2 	bl	80153a8 <__malloc_unlock>
 80147c4:	e7a1      	b.n	801470a <_malloc_r+0x22>
 80147c6:	6025      	str	r5, [r4, #0]
 80147c8:	e7de      	b.n	8014788 <_malloc_r+0xa0>
 80147ca:	bf00      	nop
 80147cc:	2400572c 	.word	0x2400572c

080147d0 <__sfputc_r>:
 80147d0:	6893      	ldr	r3, [r2, #8]
 80147d2:	3b01      	subs	r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	b410      	push	{r4}
 80147d8:	6093      	str	r3, [r2, #8]
 80147da:	da08      	bge.n	80147ee <__sfputc_r+0x1e>
 80147dc:	6994      	ldr	r4, [r2, #24]
 80147de:	42a3      	cmp	r3, r4
 80147e0:	db01      	blt.n	80147e6 <__sfputc_r+0x16>
 80147e2:	290a      	cmp	r1, #10
 80147e4:	d103      	bne.n	80147ee <__sfputc_r+0x1e>
 80147e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147ea:	f000 baef 	b.w	8014dcc <__swbuf_r>
 80147ee:	6813      	ldr	r3, [r2, #0]
 80147f0:	1c58      	adds	r0, r3, #1
 80147f2:	6010      	str	r0, [r2, #0]
 80147f4:	7019      	strb	r1, [r3, #0]
 80147f6:	4608      	mov	r0, r1
 80147f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147fc:	4770      	bx	lr

080147fe <__sfputs_r>:
 80147fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014800:	4606      	mov	r6, r0
 8014802:	460f      	mov	r7, r1
 8014804:	4614      	mov	r4, r2
 8014806:	18d5      	adds	r5, r2, r3
 8014808:	42ac      	cmp	r4, r5
 801480a:	d101      	bne.n	8014810 <__sfputs_r+0x12>
 801480c:	2000      	movs	r0, #0
 801480e:	e007      	b.n	8014820 <__sfputs_r+0x22>
 8014810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014814:	463a      	mov	r2, r7
 8014816:	4630      	mov	r0, r6
 8014818:	f7ff ffda 	bl	80147d0 <__sfputc_r>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d1f3      	bne.n	8014808 <__sfputs_r+0xa>
 8014820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014824 <_vfiprintf_r>:
 8014824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	460d      	mov	r5, r1
 801482a:	b09d      	sub	sp, #116	; 0x74
 801482c:	4614      	mov	r4, r2
 801482e:	4698      	mov	r8, r3
 8014830:	4606      	mov	r6, r0
 8014832:	b118      	cbz	r0, 801483c <_vfiprintf_r+0x18>
 8014834:	6983      	ldr	r3, [r0, #24]
 8014836:	b90b      	cbnz	r3, 801483c <_vfiprintf_r+0x18>
 8014838:	f000 fcaa 	bl	8015190 <__sinit>
 801483c:	4b89      	ldr	r3, [pc, #548]	; (8014a64 <_vfiprintf_r+0x240>)
 801483e:	429d      	cmp	r5, r3
 8014840:	d11b      	bne.n	801487a <_vfiprintf_r+0x56>
 8014842:	6875      	ldr	r5, [r6, #4]
 8014844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014846:	07d9      	lsls	r1, r3, #31
 8014848:	d405      	bmi.n	8014856 <_vfiprintf_r+0x32>
 801484a:	89ab      	ldrh	r3, [r5, #12]
 801484c:	059a      	lsls	r2, r3, #22
 801484e:	d402      	bmi.n	8014856 <_vfiprintf_r+0x32>
 8014850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014852:	f000 fd3b 	bl	80152cc <__retarget_lock_acquire_recursive>
 8014856:	89ab      	ldrh	r3, [r5, #12]
 8014858:	071b      	lsls	r3, r3, #28
 801485a:	d501      	bpl.n	8014860 <_vfiprintf_r+0x3c>
 801485c:	692b      	ldr	r3, [r5, #16]
 801485e:	b9eb      	cbnz	r3, 801489c <_vfiprintf_r+0x78>
 8014860:	4629      	mov	r1, r5
 8014862:	4630      	mov	r0, r6
 8014864:	f000 fb04 	bl	8014e70 <__swsetup_r>
 8014868:	b1c0      	cbz	r0, 801489c <_vfiprintf_r+0x78>
 801486a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801486c:	07dc      	lsls	r4, r3, #31
 801486e:	d50e      	bpl.n	801488e <_vfiprintf_r+0x6a>
 8014870:	f04f 30ff 	mov.w	r0, #4294967295
 8014874:	b01d      	add	sp, #116	; 0x74
 8014876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801487a:	4b7b      	ldr	r3, [pc, #492]	; (8014a68 <_vfiprintf_r+0x244>)
 801487c:	429d      	cmp	r5, r3
 801487e:	d101      	bne.n	8014884 <_vfiprintf_r+0x60>
 8014880:	68b5      	ldr	r5, [r6, #8]
 8014882:	e7df      	b.n	8014844 <_vfiprintf_r+0x20>
 8014884:	4b79      	ldr	r3, [pc, #484]	; (8014a6c <_vfiprintf_r+0x248>)
 8014886:	429d      	cmp	r5, r3
 8014888:	bf08      	it	eq
 801488a:	68f5      	ldreq	r5, [r6, #12]
 801488c:	e7da      	b.n	8014844 <_vfiprintf_r+0x20>
 801488e:	89ab      	ldrh	r3, [r5, #12]
 8014890:	0598      	lsls	r0, r3, #22
 8014892:	d4ed      	bmi.n	8014870 <_vfiprintf_r+0x4c>
 8014894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014896:	f000 fd1a 	bl	80152ce <__retarget_lock_release_recursive>
 801489a:	e7e9      	b.n	8014870 <_vfiprintf_r+0x4c>
 801489c:	2300      	movs	r3, #0
 801489e:	9309      	str	r3, [sp, #36]	; 0x24
 80148a0:	2320      	movs	r3, #32
 80148a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80148aa:	2330      	movs	r3, #48	; 0x30
 80148ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a70 <_vfiprintf_r+0x24c>
 80148b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148b4:	f04f 0901 	mov.w	r9, #1
 80148b8:	4623      	mov	r3, r4
 80148ba:	469a      	mov	sl, r3
 80148bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80148c0:	b10a      	cbz	r2, 80148c6 <_vfiprintf_r+0xa2>
 80148c2:	2a25      	cmp	r2, #37	; 0x25
 80148c4:	d1f9      	bne.n	80148ba <_vfiprintf_r+0x96>
 80148c6:	ebba 0b04 	subs.w	fp, sl, r4
 80148ca:	d00b      	beq.n	80148e4 <_vfiprintf_r+0xc0>
 80148cc:	465b      	mov	r3, fp
 80148ce:	4622      	mov	r2, r4
 80148d0:	4629      	mov	r1, r5
 80148d2:	4630      	mov	r0, r6
 80148d4:	f7ff ff93 	bl	80147fe <__sfputs_r>
 80148d8:	3001      	adds	r0, #1
 80148da:	f000 80aa 	beq.w	8014a32 <_vfiprintf_r+0x20e>
 80148de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148e0:	445a      	add	r2, fp
 80148e2:	9209      	str	r2, [sp, #36]	; 0x24
 80148e4:	f89a 3000 	ldrb.w	r3, [sl]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 80a2 	beq.w	8014a32 <_vfiprintf_r+0x20e>
 80148ee:	2300      	movs	r3, #0
 80148f0:	f04f 32ff 	mov.w	r2, #4294967295
 80148f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148f8:	f10a 0a01 	add.w	sl, sl, #1
 80148fc:	9304      	str	r3, [sp, #16]
 80148fe:	9307      	str	r3, [sp, #28]
 8014900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014904:	931a      	str	r3, [sp, #104]	; 0x68
 8014906:	4654      	mov	r4, sl
 8014908:	2205      	movs	r2, #5
 801490a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801490e:	4858      	ldr	r0, [pc, #352]	; (8014a70 <_vfiprintf_r+0x24c>)
 8014910:	f7eb fce6 	bl	80002e0 <memchr>
 8014914:	9a04      	ldr	r2, [sp, #16]
 8014916:	b9d8      	cbnz	r0, 8014950 <_vfiprintf_r+0x12c>
 8014918:	06d1      	lsls	r1, r2, #27
 801491a:	bf44      	itt	mi
 801491c:	2320      	movmi	r3, #32
 801491e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014922:	0713      	lsls	r3, r2, #28
 8014924:	bf44      	itt	mi
 8014926:	232b      	movmi	r3, #43	; 0x2b
 8014928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801492c:	f89a 3000 	ldrb.w	r3, [sl]
 8014930:	2b2a      	cmp	r3, #42	; 0x2a
 8014932:	d015      	beq.n	8014960 <_vfiprintf_r+0x13c>
 8014934:	9a07      	ldr	r2, [sp, #28]
 8014936:	4654      	mov	r4, sl
 8014938:	2000      	movs	r0, #0
 801493a:	f04f 0c0a 	mov.w	ip, #10
 801493e:	4621      	mov	r1, r4
 8014940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014944:	3b30      	subs	r3, #48	; 0x30
 8014946:	2b09      	cmp	r3, #9
 8014948:	d94e      	bls.n	80149e8 <_vfiprintf_r+0x1c4>
 801494a:	b1b0      	cbz	r0, 801497a <_vfiprintf_r+0x156>
 801494c:	9207      	str	r2, [sp, #28]
 801494e:	e014      	b.n	801497a <_vfiprintf_r+0x156>
 8014950:	eba0 0308 	sub.w	r3, r0, r8
 8014954:	fa09 f303 	lsl.w	r3, r9, r3
 8014958:	4313      	orrs	r3, r2
 801495a:	9304      	str	r3, [sp, #16]
 801495c:	46a2      	mov	sl, r4
 801495e:	e7d2      	b.n	8014906 <_vfiprintf_r+0xe2>
 8014960:	9b03      	ldr	r3, [sp, #12]
 8014962:	1d19      	adds	r1, r3, #4
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	9103      	str	r1, [sp, #12]
 8014968:	2b00      	cmp	r3, #0
 801496a:	bfbb      	ittet	lt
 801496c:	425b      	neglt	r3, r3
 801496e:	f042 0202 	orrlt.w	r2, r2, #2
 8014972:	9307      	strge	r3, [sp, #28]
 8014974:	9307      	strlt	r3, [sp, #28]
 8014976:	bfb8      	it	lt
 8014978:	9204      	strlt	r2, [sp, #16]
 801497a:	7823      	ldrb	r3, [r4, #0]
 801497c:	2b2e      	cmp	r3, #46	; 0x2e
 801497e:	d10c      	bne.n	801499a <_vfiprintf_r+0x176>
 8014980:	7863      	ldrb	r3, [r4, #1]
 8014982:	2b2a      	cmp	r3, #42	; 0x2a
 8014984:	d135      	bne.n	80149f2 <_vfiprintf_r+0x1ce>
 8014986:	9b03      	ldr	r3, [sp, #12]
 8014988:	1d1a      	adds	r2, r3, #4
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	9203      	str	r2, [sp, #12]
 801498e:	2b00      	cmp	r3, #0
 8014990:	bfb8      	it	lt
 8014992:	f04f 33ff 	movlt.w	r3, #4294967295
 8014996:	3402      	adds	r4, #2
 8014998:	9305      	str	r3, [sp, #20]
 801499a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a80 <_vfiprintf_r+0x25c>
 801499e:	7821      	ldrb	r1, [r4, #0]
 80149a0:	2203      	movs	r2, #3
 80149a2:	4650      	mov	r0, sl
 80149a4:	f7eb fc9c 	bl	80002e0 <memchr>
 80149a8:	b140      	cbz	r0, 80149bc <_vfiprintf_r+0x198>
 80149aa:	2340      	movs	r3, #64	; 0x40
 80149ac:	eba0 000a 	sub.w	r0, r0, sl
 80149b0:	fa03 f000 	lsl.w	r0, r3, r0
 80149b4:	9b04      	ldr	r3, [sp, #16]
 80149b6:	4303      	orrs	r3, r0
 80149b8:	3401      	adds	r4, #1
 80149ba:	9304      	str	r3, [sp, #16]
 80149bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149c0:	482c      	ldr	r0, [pc, #176]	; (8014a74 <_vfiprintf_r+0x250>)
 80149c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80149c6:	2206      	movs	r2, #6
 80149c8:	f7eb fc8a 	bl	80002e0 <memchr>
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d03f      	beq.n	8014a50 <_vfiprintf_r+0x22c>
 80149d0:	4b29      	ldr	r3, [pc, #164]	; (8014a78 <_vfiprintf_r+0x254>)
 80149d2:	bb1b      	cbnz	r3, 8014a1c <_vfiprintf_r+0x1f8>
 80149d4:	9b03      	ldr	r3, [sp, #12]
 80149d6:	3307      	adds	r3, #7
 80149d8:	f023 0307 	bic.w	r3, r3, #7
 80149dc:	3308      	adds	r3, #8
 80149de:	9303      	str	r3, [sp, #12]
 80149e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e2:	443b      	add	r3, r7
 80149e4:	9309      	str	r3, [sp, #36]	; 0x24
 80149e6:	e767      	b.n	80148b8 <_vfiprintf_r+0x94>
 80149e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80149ec:	460c      	mov	r4, r1
 80149ee:	2001      	movs	r0, #1
 80149f0:	e7a5      	b.n	801493e <_vfiprintf_r+0x11a>
 80149f2:	2300      	movs	r3, #0
 80149f4:	3401      	adds	r4, #1
 80149f6:	9305      	str	r3, [sp, #20]
 80149f8:	4619      	mov	r1, r3
 80149fa:	f04f 0c0a 	mov.w	ip, #10
 80149fe:	4620      	mov	r0, r4
 8014a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a04:	3a30      	subs	r2, #48	; 0x30
 8014a06:	2a09      	cmp	r2, #9
 8014a08:	d903      	bls.n	8014a12 <_vfiprintf_r+0x1ee>
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d0c5      	beq.n	801499a <_vfiprintf_r+0x176>
 8014a0e:	9105      	str	r1, [sp, #20]
 8014a10:	e7c3      	b.n	801499a <_vfiprintf_r+0x176>
 8014a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a16:	4604      	mov	r4, r0
 8014a18:	2301      	movs	r3, #1
 8014a1a:	e7f0      	b.n	80149fe <_vfiprintf_r+0x1da>
 8014a1c:	ab03      	add	r3, sp, #12
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	462a      	mov	r2, r5
 8014a22:	4b16      	ldr	r3, [pc, #88]	; (8014a7c <_vfiprintf_r+0x258>)
 8014a24:	a904      	add	r1, sp, #16
 8014a26:	4630      	mov	r0, r6
 8014a28:	f3af 8000 	nop.w
 8014a2c:	4607      	mov	r7, r0
 8014a2e:	1c78      	adds	r0, r7, #1
 8014a30:	d1d6      	bne.n	80149e0 <_vfiprintf_r+0x1bc>
 8014a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a34:	07d9      	lsls	r1, r3, #31
 8014a36:	d405      	bmi.n	8014a44 <_vfiprintf_r+0x220>
 8014a38:	89ab      	ldrh	r3, [r5, #12]
 8014a3a:	059a      	lsls	r2, r3, #22
 8014a3c:	d402      	bmi.n	8014a44 <_vfiprintf_r+0x220>
 8014a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a40:	f000 fc45 	bl	80152ce <__retarget_lock_release_recursive>
 8014a44:	89ab      	ldrh	r3, [r5, #12]
 8014a46:	065b      	lsls	r3, r3, #25
 8014a48:	f53f af12 	bmi.w	8014870 <_vfiprintf_r+0x4c>
 8014a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a4e:	e711      	b.n	8014874 <_vfiprintf_r+0x50>
 8014a50:	ab03      	add	r3, sp, #12
 8014a52:	9300      	str	r3, [sp, #0]
 8014a54:	462a      	mov	r2, r5
 8014a56:	4b09      	ldr	r3, [pc, #36]	; (8014a7c <_vfiprintf_r+0x258>)
 8014a58:	a904      	add	r1, sp, #16
 8014a5a:	4630      	mov	r0, r6
 8014a5c:	f000 f880 	bl	8014b60 <_printf_i>
 8014a60:	e7e4      	b.n	8014a2c <_vfiprintf_r+0x208>
 8014a62:	bf00      	nop
 8014a64:	0802fecc 	.word	0x0802fecc
 8014a68:	0802feec 	.word	0x0802feec
 8014a6c:	0802feac 	.word	0x0802feac
 8014a70:	0802fe78 	.word	0x0802fe78
 8014a74:	0802fe82 	.word	0x0802fe82
 8014a78:	00000000 	.word	0x00000000
 8014a7c:	080147ff 	.word	0x080147ff
 8014a80:	0802fe7e 	.word	0x0802fe7e

08014a84 <_printf_common>:
 8014a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a88:	4616      	mov	r6, r2
 8014a8a:	4699      	mov	r9, r3
 8014a8c:	688a      	ldr	r2, [r1, #8]
 8014a8e:	690b      	ldr	r3, [r1, #16]
 8014a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a94:	4293      	cmp	r3, r2
 8014a96:	bfb8      	it	lt
 8014a98:	4613      	movlt	r3, r2
 8014a9a:	6033      	str	r3, [r6, #0]
 8014a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014aa0:	4607      	mov	r7, r0
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	b10a      	cbz	r2, 8014aaa <_printf_common+0x26>
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	6033      	str	r3, [r6, #0]
 8014aaa:	6823      	ldr	r3, [r4, #0]
 8014aac:	0699      	lsls	r1, r3, #26
 8014aae:	bf42      	ittt	mi
 8014ab0:	6833      	ldrmi	r3, [r6, #0]
 8014ab2:	3302      	addmi	r3, #2
 8014ab4:	6033      	strmi	r3, [r6, #0]
 8014ab6:	6825      	ldr	r5, [r4, #0]
 8014ab8:	f015 0506 	ands.w	r5, r5, #6
 8014abc:	d106      	bne.n	8014acc <_printf_common+0x48>
 8014abe:	f104 0a19 	add.w	sl, r4, #25
 8014ac2:	68e3      	ldr	r3, [r4, #12]
 8014ac4:	6832      	ldr	r2, [r6, #0]
 8014ac6:	1a9b      	subs	r3, r3, r2
 8014ac8:	42ab      	cmp	r3, r5
 8014aca:	dc26      	bgt.n	8014b1a <_printf_common+0x96>
 8014acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ad0:	1e13      	subs	r3, r2, #0
 8014ad2:	6822      	ldr	r2, [r4, #0]
 8014ad4:	bf18      	it	ne
 8014ad6:	2301      	movne	r3, #1
 8014ad8:	0692      	lsls	r2, r2, #26
 8014ada:	d42b      	bmi.n	8014b34 <_printf_common+0xb0>
 8014adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ae0:	4649      	mov	r1, r9
 8014ae2:	4638      	mov	r0, r7
 8014ae4:	47c0      	blx	r8
 8014ae6:	3001      	adds	r0, #1
 8014ae8:	d01e      	beq.n	8014b28 <_printf_common+0xa4>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	68e5      	ldr	r5, [r4, #12]
 8014aee:	6832      	ldr	r2, [r6, #0]
 8014af0:	f003 0306 	and.w	r3, r3, #6
 8014af4:	2b04      	cmp	r3, #4
 8014af6:	bf08      	it	eq
 8014af8:	1aad      	subeq	r5, r5, r2
 8014afa:	68a3      	ldr	r3, [r4, #8]
 8014afc:	6922      	ldr	r2, [r4, #16]
 8014afe:	bf0c      	ite	eq
 8014b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b04:	2500      	movne	r5, #0
 8014b06:	4293      	cmp	r3, r2
 8014b08:	bfc4      	itt	gt
 8014b0a:	1a9b      	subgt	r3, r3, r2
 8014b0c:	18ed      	addgt	r5, r5, r3
 8014b0e:	2600      	movs	r6, #0
 8014b10:	341a      	adds	r4, #26
 8014b12:	42b5      	cmp	r5, r6
 8014b14:	d11a      	bne.n	8014b4c <_printf_common+0xc8>
 8014b16:	2000      	movs	r0, #0
 8014b18:	e008      	b.n	8014b2c <_printf_common+0xa8>
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	4652      	mov	r2, sl
 8014b1e:	4649      	mov	r1, r9
 8014b20:	4638      	mov	r0, r7
 8014b22:	47c0      	blx	r8
 8014b24:	3001      	adds	r0, #1
 8014b26:	d103      	bne.n	8014b30 <_printf_common+0xac>
 8014b28:	f04f 30ff 	mov.w	r0, #4294967295
 8014b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b30:	3501      	adds	r5, #1
 8014b32:	e7c6      	b.n	8014ac2 <_printf_common+0x3e>
 8014b34:	18e1      	adds	r1, r4, r3
 8014b36:	1c5a      	adds	r2, r3, #1
 8014b38:	2030      	movs	r0, #48	; 0x30
 8014b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b3e:	4422      	add	r2, r4
 8014b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b48:	3302      	adds	r3, #2
 8014b4a:	e7c7      	b.n	8014adc <_printf_common+0x58>
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	4622      	mov	r2, r4
 8014b50:	4649      	mov	r1, r9
 8014b52:	4638      	mov	r0, r7
 8014b54:	47c0      	blx	r8
 8014b56:	3001      	adds	r0, #1
 8014b58:	d0e6      	beq.n	8014b28 <_printf_common+0xa4>
 8014b5a:	3601      	adds	r6, #1
 8014b5c:	e7d9      	b.n	8014b12 <_printf_common+0x8e>
	...

08014b60 <_printf_i>:
 8014b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b64:	7e0f      	ldrb	r7, [r1, #24]
 8014b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014b68:	2f78      	cmp	r7, #120	; 0x78
 8014b6a:	4691      	mov	r9, r2
 8014b6c:	4680      	mov	r8, r0
 8014b6e:	460c      	mov	r4, r1
 8014b70:	469a      	mov	sl, r3
 8014b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014b76:	d807      	bhi.n	8014b88 <_printf_i+0x28>
 8014b78:	2f62      	cmp	r7, #98	; 0x62
 8014b7a:	d80a      	bhi.n	8014b92 <_printf_i+0x32>
 8014b7c:	2f00      	cmp	r7, #0
 8014b7e:	f000 80d8 	beq.w	8014d32 <_printf_i+0x1d2>
 8014b82:	2f58      	cmp	r7, #88	; 0x58
 8014b84:	f000 80a3 	beq.w	8014cce <_printf_i+0x16e>
 8014b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b90:	e03a      	b.n	8014c08 <_printf_i+0xa8>
 8014b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b96:	2b15      	cmp	r3, #21
 8014b98:	d8f6      	bhi.n	8014b88 <_printf_i+0x28>
 8014b9a:	a101      	add	r1, pc, #4	; (adr r1, 8014ba0 <_printf_i+0x40>)
 8014b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014ba0:	08014bf9 	.word	0x08014bf9
 8014ba4:	08014c0d 	.word	0x08014c0d
 8014ba8:	08014b89 	.word	0x08014b89
 8014bac:	08014b89 	.word	0x08014b89
 8014bb0:	08014b89 	.word	0x08014b89
 8014bb4:	08014b89 	.word	0x08014b89
 8014bb8:	08014c0d 	.word	0x08014c0d
 8014bbc:	08014b89 	.word	0x08014b89
 8014bc0:	08014b89 	.word	0x08014b89
 8014bc4:	08014b89 	.word	0x08014b89
 8014bc8:	08014b89 	.word	0x08014b89
 8014bcc:	08014d19 	.word	0x08014d19
 8014bd0:	08014c3d 	.word	0x08014c3d
 8014bd4:	08014cfb 	.word	0x08014cfb
 8014bd8:	08014b89 	.word	0x08014b89
 8014bdc:	08014b89 	.word	0x08014b89
 8014be0:	08014d3b 	.word	0x08014d3b
 8014be4:	08014b89 	.word	0x08014b89
 8014be8:	08014c3d 	.word	0x08014c3d
 8014bec:	08014b89 	.word	0x08014b89
 8014bf0:	08014b89 	.word	0x08014b89
 8014bf4:	08014d03 	.word	0x08014d03
 8014bf8:	682b      	ldr	r3, [r5, #0]
 8014bfa:	1d1a      	adds	r2, r3, #4
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	602a      	str	r2, [r5, #0]
 8014c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c08:	2301      	movs	r3, #1
 8014c0a:	e0a3      	b.n	8014d54 <_printf_i+0x1f4>
 8014c0c:	6820      	ldr	r0, [r4, #0]
 8014c0e:	6829      	ldr	r1, [r5, #0]
 8014c10:	0606      	lsls	r6, r0, #24
 8014c12:	f101 0304 	add.w	r3, r1, #4
 8014c16:	d50a      	bpl.n	8014c2e <_printf_i+0xce>
 8014c18:	680e      	ldr	r6, [r1, #0]
 8014c1a:	602b      	str	r3, [r5, #0]
 8014c1c:	2e00      	cmp	r6, #0
 8014c1e:	da03      	bge.n	8014c28 <_printf_i+0xc8>
 8014c20:	232d      	movs	r3, #45	; 0x2d
 8014c22:	4276      	negs	r6, r6
 8014c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c28:	485e      	ldr	r0, [pc, #376]	; (8014da4 <_printf_i+0x244>)
 8014c2a:	230a      	movs	r3, #10
 8014c2c:	e019      	b.n	8014c62 <_printf_i+0x102>
 8014c2e:	680e      	ldr	r6, [r1, #0]
 8014c30:	602b      	str	r3, [r5, #0]
 8014c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014c36:	bf18      	it	ne
 8014c38:	b236      	sxthne	r6, r6
 8014c3a:	e7ef      	b.n	8014c1c <_printf_i+0xbc>
 8014c3c:	682b      	ldr	r3, [r5, #0]
 8014c3e:	6820      	ldr	r0, [r4, #0]
 8014c40:	1d19      	adds	r1, r3, #4
 8014c42:	6029      	str	r1, [r5, #0]
 8014c44:	0601      	lsls	r1, r0, #24
 8014c46:	d501      	bpl.n	8014c4c <_printf_i+0xec>
 8014c48:	681e      	ldr	r6, [r3, #0]
 8014c4a:	e002      	b.n	8014c52 <_printf_i+0xf2>
 8014c4c:	0646      	lsls	r6, r0, #25
 8014c4e:	d5fb      	bpl.n	8014c48 <_printf_i+0xe8>
 8014c50:	881e      	ldrh	r6, [r3, #0]
 8014c52:	4854      	ldr	r0, [pc, #336]	; (8014da4 <_printf_i+0x244>)
 8014c54:	2f6f      	cmp	r7, #111	; 0x6f
 8014c56:	bf0c      	ite	eq
 8014c58:	2308      	moveq	r3, #8
 8014c5a:	230a      	movne	r3, #10
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c62:	6865      	ldr	r5, [r4, #4]
 8014c64:	60a5      	str	r5, [r4, #8]
 8014c66:	2d00      	cmp	r5, #0
 8014c68:	bfa2      	ittt	ge
 8014c6a:	6821      	ldrge	r1, [r4, #0]
 8014c6c:	f021 0104 	bicge.w	r1, r1, #4
 8014c70:	6021      	strge	r1, [r4, #0]
 8014c72:	b90e      	cbnz	r6, 8014c78 <_printf_i+0x118>
 8014c74:	2d00      	cmp	r5, #0
 8014c76:	d04d      	beq.n	8014d14 <_printf_i+0x1b4>
 8014c78:	4615      	mov	r5, r2
 8014c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8014c82:	5dc7      	ldrb	r7, [r0, r7]
 8014c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014c88:	4637      	mov	r7, r6
 8014c8a:	42bb      	cmp	r3, r7
 8014c8c:	460e      	mov	r6, r1
 8014c8e:	d9f4      	bls.n	8014c7a <_printf_i+0x11a>
 8014c90:	2b08      	cmp	r3, #8
 8014c92:	d10b      	bne.n	8014cac <_printf_i+0x14c>
 8014c94:	6823      	ldr	r3, [r4, #0]
 8014c96:	07de      	lsls	r6, r3, #31
 8014c98:	d508      	bpl.n	8014cac <_printf_i+0x14c>
 8014c9a:	6923      	ldr	r3, [r4, #16]
 8014c9c:	6861      	ldr	r1, [r4, #4]
 8014c9e:	4299      	cmp	r1, r3
 8014ca0:	bfde      	ittt	le
 8014ca2:	2330      	movle	r3, #48	; 0x30
 8014ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014cac:	1b52      	subs	r2, r2, r5
 8014cae:	6122      	str	r2, [r4, #16]
 8014cb0:	f8cd a000 	str.w	sl, [sp]
 8014cb4:	464b      	mov	r3, r9
 8014cb6:	aa03      	add	r2, sp, #12
 8014cb8:	4621      	mov	r1, r4
 8014cba:	4640      	mov	r0, r8
 8014cbc:	f7ff fee2 	bl	8014a84 <_printf_common>
 8014cc0:	3001      	adds	r0, #1
 8014cc2:	d14c      	bne.n	8014d5e <_printf_i+0x1fe>
 8014cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc8:	b004      	add	sp, #16
 8014cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cce:	4835      	ldr	r0, [pc, #212]	; (8014da4 <_printf_i+0x244>)
 8014cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014cd4:	6829      	ldr	r1, [r5, #0]
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014cdc:	6029      	str	r1, [r5, #0]
 8014cde:	061d      	lsls	r5, r3, #24
 8014ce0:	d514      	bpl.n	8014d0c <_printf_i+0x1ac>
 8014ce2:	07df      	lsls	r7, r3, #31
 8014ce4:	bf44      	itt	mi
 8014ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8014cea:	6023      	strmi	r3, [r4, #0]
 8014cec:	b91e      	cbnz	r6, 8014cf6 <_printf_i+0x196>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	f023 0320 	bic.w	r3, r3, #32
 8014cf4:	6023      	str	r3, [r4, #0]
 8014cf6:	2310      	movs	r3, #16
 8014cf8:	e7b0      	b.n	8014c5c <_printf_i+0xfc>
 8014cfa:	6823      	ldr	r3, [r4, #0]
 8014cfc:	f043 0320 	orr.w	r3, r3, #32
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	2378      	movs	r3, #120	; 0x78
 8014d04:	4828      	ldr	r0, [pc, #160]	; (8014da8 <_printf_i+0x248>)
 8014d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d0a:	e7e3      	b.n	8014cd4 <_printf_i+0x174>
 8014d0c:	0659      	lsls	r1, r3, #25
 8014d0e:	bf48      	it	mi
 8014d10:	b2b6      	uxthmi	r6, r6
 8014d12:	e7e6      	b.n	8014ce2 <_printf_i+0x182>
 8014d14:	4615      	mov	r5, r2
 8014d16:	e7bb      	b.n	8014c90 <_printf_i+0x130>
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	6826      	ldr	r6, [r4, #0]
 8014d1c:	6961      	ldr	r1, [r4, #20]
 8014d1e:	1d18      	adds	r0, r3, #4
 8014d20:	6028      	str	r0, [r5, #0]
 8014d22:	0635      	lsls	r5, r6, #24
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	d501      	bpl.n	8014d2c <_printf_i+0x1cc>
 8014d28:	6019      	str	r1, [r3, #0]
 8014d2a:	e002      	b.n	8014d32 <_printf_i+0x1d2>
 8014d2c:	0670      	lsls	r0, r6, #25
 8014d2e:	d5fb      	bpl.n	8014d28 <_printf_i+0x1c8>
 8014d30:	8019      	strh	r1, [r3, #0]
 8014d32:	2300      	movs	r3, #0
 8014d34:	6123      	str	r3, [r4, #16]
 8014d36:	4615      	mov	r5, r2
 8014d38:	e7ba      	b.n	8014cb0 <_printf_i+0x150>
 8014d3a:	682b      	ldr	r3, [r5, #0]
 8014d3c:	1d1a      	adds	r2, r3, #4
 8014d3e:	602a      	str	r2, [r5, #0]
 8014d40:	681d      	ldr	r5, [r3, #0]
 8014d42:	6862      	ldr	r2, [r4, #4]
 8014d44:	2100      	movs	r1, #0
 8014d46:	4628      	mov	r0, r5
 8014d48:	f7eb faca 	bl	80002e0 <memchr>
 8014d4c:	b108      	cbz	r0, 8014d52 <_printf_i+0x1f2>
 8014d4e:	1b40      	subs	r0, r0, r5
 8014d50:	6060      	str	r0, [r4, #4]
 8014d52:	6863      	ldr	r3, [r4, #4]
 8014d54:	6123      	str	r3, [r4, #16]
 8014d56:	2300      	movs	r3, #0
 8014d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d5c:	e7a8      	b.n	8014cb0 <_printf_i+0x150>
 8014d5e:	6923      	ldr	r3, [r4, #16]
 8014d60:	462a      	mov	r2, r5
 8014d62:	4649      	mov	r1, r9
 8014d64:	4640      	mov	r0, r8
 8014d66:	47d0      	blx	sl
 8014d68:	3001      	adds	r0, #1
 8014d6a:	d0ab      	beq.n	8014cc4 <_printf_i+0x164>
 8014d6c:	6823      	ldr	r3, [r4, #0]
 8014d6e:	079b      	lsls	r3, r3, #30
 8014d70:	d413      	bmi.n	8014d9a <_printf_i+0x23a>
 8014d72:	68e0      	ldr	r0, [r4, #12]
 8014d74:	9b03      	ldr	r3, [sp, #12]
 8014d76:	4298      	cmp	r0, r3
 8014d78:	bfb8      	it	lt
 8014d7a:	4618      	movlt	r0, r3
 8014d7c:	e7a4      	b.n	8014cc8 <_printf_i+0x168>
 8014d7e:	2301      	movs	r3, #1
 8014d80:	4632      	mov	r2, r6
 8014d82:	4649      	mov	r1, r9
 8014d84:	4640      	mov	r0, r8
 8014d86:	47d0      	blx	sl
 8014d88:	3001      	adds	r0, #1
 8014d8a:	d09b      	beq.n	8014cc4 <_printf_i+0x164>
 8014d8c:	3501      	adds	r5, #1
 8014d8e:	68e3      	ldr	r3, [r4, #12]
 8014d90:	9903      	ldr	r1, [sp, #12]
 8014d92:	1a5b      	subs	r3, r3, r1
 8014d94:	42ab      	cmp	r3, r5
 8014d96:	dcf2      	bgt.n	8014d7e <_printf_i+0x21e>
 8014d98:	e7eb      	b.n	8014d72 <_printf_i+0x212>
 8014d9a:	2500      	movs	r5, #0
 8014d9c:	f104 0619 	add.w	r6, r4, #25
 8014da0:	e7f5      	b.n	8014d8e <_printf_i+0x22e>
 8014da2:	bf00      	nop
 8014da4:	0802fe89 	.word	0x0802fe89
 8014da8:	0802fe9a 	.word	0x0802fe9a

08014dac <_sbrk_r>:
 8014dac:	b538      	push	{r3, r4, r5, lr}
 8014dae:	4d06      	ldr	r5, [pc, #24]	; (8014dc8 <_sbrk_r+0x1c>)
 8014db0:	2300      	movs	r3, #0
 8014db2:	4604      	mov	r4, r0
 8014db4:	4608      	mov	r0, r1
 8014db6:	602b      	str	r3, [r5, #0]
 8014db8:	f7ee fe60 	bl	8003a7c <_sbrk>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_sbrk_r+0x1a>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_sbrk_r+0x1a>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	24005738 	.word	0x24005738

08014dcc <__swbuf_r>:
 8014dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dce:	460e      	mov	r6, r1
 8014dd0:	4614      	mov	r4, r2
 8014dd2:	4605      	mov	r5, r0
 8014dd4:	b118      	cbz	r0, 8014dde <__swbuf_r+0x12>
 8014dd6:	6983      	ldr	r3, [r0, #24]
 8014dd8:	b90b      	cbnz	r3, 8014dde <__swbuf_r+0x12>
 8014dda:	f000 f9d9 	bl	8015190 <__sinit>
 8014dde:	4b21      	ldr	r3, [pc, #132]	; (8014e64 <__swbuf_r+0x98>)
 8014de0:	429c      	cmp	r4, r3
 8014de2:	d12b      	bne.n	8014e3c <__swbuf_r+0x70>
 8014de4:	686c      	ldr	r4, [r5, #4]
 8014de6:	69a3      	ldr	r3, [r4, #24]
 8014de8:	60a3      	str	r3, [r4, #8]
 8014dea:	89a3      	ldrh	r3, [r4, #12]
 8014dec:	071a      	lsls	r2, r3, #28
 8014dee:	d52f      	bpl.n	8014e50 <__swbuf_r+0x84>
 8014df0:	6923      	ldr	r3, [r4, #16]
 8014df2:	b36b      	cbz	r3, 8014e50 <__swbuf_r+0x84>
 8014df4:	6923      	ldr	r3, [r4, #16]
 8014df6:	6820      	ldr	r0, [r4, #0]
 8014df8:	1ac0      	subs	r0, r0, r3
 8014dfa:	6963      	ldr	r3, [r4, #20]
 8014dfc:	b2f6      	uxtb	r6, r6
 8014dfe:	4283      	cmp	r3, r0
 8014e00:	4637      	mov	r7, r6
 8014e02:	dc04      	bgt.n	8014e0e <__swbuf_r+0x42>
 8014e04:	4621      	mov	r1, r4
 8014e06:	4628      	mov	r0, r5
 8014e08:	f000 f92e 	bl	8015068 <_fflush_r>
 8014e0c:	bb30      	cbnz	r0, 8014e5c <__swbuf_r+0x90>
 8014e0e:	68a3      	ldr	r3, [r4, #8]
 8014e10:	3b01      	subs	r3, #1
 8014e12:	60a3      	str	r3, [r4, #8]
 8014e14:	6823      	ldr	r3, [r4, #0]
 8014e16:	1c5a      	adds	r2, r3, #1
 8014e18:	6022      	str	r2, [r4, #0]
 8014e1a:	701e      	strb	r6, [r3, #0]
 8014e1c:	6963      	ldr	r3, [r4, #20]
 8014e1e:	3001      	adds	r0, #1
 8014e20:	4283      	cmp	r3, r0
 8014e22:	d004      	beq.n	8014e2e <__swbuf_r+0x62>
 8014e24:	89a3      	ldrh	r3, [r4, #12]
 8014e26:	07db      	lsls	r3, r3, #31
 8014e28:	d506      	bpl.n	8014e38 <__swbuf_r+0x6c>
 8014e2a:	2e0a      	cmp	r6, #10
 8014e2c:	d104      	bne.n	8014e38 <__swbuf_r+0x6c>
 8014e2e:	4621      	mov	r1, r4
 8014e30:	4628      	mov	r0, r5
 8014e32:	f000 f919 	bl	8015068 <_fflush_r>
 8014e36:	b988      	cbnz	r0, 8014e5c <__swbuf_r+0x90>
 8014e38:	4638      	mov	r0, r7
 8014e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e3c:	4b0a      	ldr	r3, [pc, #40]	; (8014e68 <__swbuf_r+0x9c>)
 8014e3e:	429c      	cmp	r4, r3
 8014e40:	d101      	bne.n	8014e46 <__swbuf_r+0x7a>
 8014e42:	68ac      	ldr	r4, [r5, #8]
 8014e44:	e7cf      	b.n	8014de6 <__swbuf_r+0x1a>
 8014e46:	4b09      	ldr	r3, [pc, #36]	; (8014e6c <__swbuf_r+0xa0>)
 8014e48:	429c      	cmp	r4, r3
 8014e4a:	bf08      	it	eq
 8014e4c:	68ec      	ldreq	r4, [r5, #12]
 8014e4e:	e7ca      	b.n	8014de6 <__swbuf_r+0x1a>
 8014e50:	4621      	mov	r1, r4
 8014e52:	4628      	mov	r0, r5
 8014e54:	f000 f80c 	bl	8014e70 <__swsetup_r>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d0cb      	beq.n	8014df4 <__swbuf_r+0x28>
 8014e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8014e60:	e7ea      	b.n	8014e38 <__swbuf_r+0x6c>
 8014e62:	bf00      	nop
 8014e64:	0802fecc 	.word	0x0802fecc
 8014e68:	0802feec 	.word	0x0802feec
 8014e6c:	0802feac 	.word	0x0802feac

08014e70 <__swsetup_r>:
 8014e70:	4b32      	ldr	r3, [pc, #200]	; (8014f3c <__swsetup_r+0xcc>)
 8014e72:	b570      	push	{r4, r5, r6, lr}
 8014e74:	681d      	ldr	r5, [r3, #0]
 8014e76:	4606      	mov	r6, r0
 8014e78:	460c      	mov	r4, r1
 8014e7a:	b125      	cbz	r5, 8014e86 <__swsetup_r+0x16>
 8014e7c:	69ab      	ldr	r3, [r5, #24]
 8014e7e:	b913      	cbnz	r3, 8014e86 <__swsetup_r+0x16>
 8014e80:	4628      	mov	r0, r5
 8014e82:	f000 f985 	bl	8015190 <__sinit>
 8014e86:	4b2e      	ldr	r3, [pc, #184]	; (8014f40 <__swsetup_r+0xd0>)
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	d10f      	bne.n	8014eac <__swsetup_r+0x3c>
 8014e8c:	686c      	ldr	r4, [r5, #4]
 8014e8e:	89a3      	ldrh	r3, [r4, #12]
 8014e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e94:	0719      	lsls	r1, r3, #28
 8014e96:	d42c      	bmi.n	8014ef2 <__swsetup_r+0x82>
 8014e98:	06dd      	lsls	r5, r3, #27
 8014e9a:	d411      	bmi.n	8014ec0 <__swsetup_r+0x50>
 8014e9c:	2309      	movs	r3, #9
 8014e9e:	6033      	str	r3, [r6, #0]
 8014ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ea4:	81a3      	strh	r3, [r4, #12]
 8014ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eaa:	e03e      	b.n	8014f2a <__swsetup_r+0xba>
 8014eac:	4b25      	ldr	r3, [pc, #148]	; (8014f44 <__swsetup_r+0xd4>)
 8014eae:	429c      	cmp	r4, r3
 8014eb0:	d101      	bne.n	8014eb6 <__swsetup_r+0x46>
 8014eb2:	68ac      	ldr	r4, [r5, #8]
 8014eb4:	e7eb      	b.n	8014e8e <__swsetup_r+0x1e>
 8014eb6:	4b24      	ldr	r3, [pc, #144]	; (8014f48 <__swsetup_r+0xd8>)
 8014eb8:	429c      	cmp	r4, r3
 8014eba:	bf08      	it	eq
 8014ebc:	68ec      	ldreq	r4, [r5, #12]
 8014ebe:	e7e6      	b.n	8014e8e <__swsetup_r+0x1e>
 8014ec0:	0758      	lsls	r0, r3, #29
 8014ec2:	d512      	bpl.n	8014eea <__swsetup_r+0x7a>
 8014ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec6:	b141      	cbz	r1, 8014eda <__swsetup_r+0x6a>
 8014ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ecc:	4299      	cmp	r1, r3
 8014ece:	d002      	beq.n	8014ed6 <__swsetup_r+0x66>
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f000 fa6f 	bl	80153b4 <_free_r>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ee0:	81a3      	strh	r3, [r4, #12]
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	6063      	str	r3, [r4, #4]
 8014ee6:	6923      	ldr	r3, [r4, #16]
 8014ee8:	6023      	str	r3, [r4, #0]
 8014eea:	89a3      	ldrh	r3, [r4, #12]
 8014eec:	f043 0308 	orr.w	r3, r3, #8
 8014ef0:	81a3      	strh	r3, [r4, #12]
 8014ef2:	6923      	ldr	r3, [r4, #16]
 8014ef4:	b94b      	cbnz	r3, 8014f0a <__swsetup_r+0x9a>
 8014ef6:	89a3      	ldrh	r3, [r4, #12]
 8014ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f00:	d003      	beq.n	8014f0a <__swsetup_r+0x9a>
 8014f02:	4621      	mov	r1, r4
 8014f04:	4630      	mov	r0, r6
 8014f06:	f000 fa09 	bl	801531c <__smakebuf_r>
 8014f0a:	89a0      	ldrh	r0, [r4, #12]
 8014f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f10:	f010 0301 	ands.w	r3, r0, #1
 8014f14:	d00a      	beq.n	8014f2c <__swsetup_r+0xbc>
 8014f16:	2300      	movs	r3, #0
 8014f18:	60a3      	str	r3, [r4, #8]
 8014f1a:	6963      	ldr	r3, [r4, #20]
 8014f1c:	425b      	negs	r3, r3
 8014f1e:	61a3      	str	r3, [r4, #24]
 8014f20:	6923      	ldr	r3, [r4, #16]
 8014f22:	b943      	cbnz	r3, 8014f36 <__swsetup_r+0xc6>
 8014f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f28:	d1ba      	bne.n	8014ea0 <__swsetup_r+0x30>
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	0781      	lsls	r1, r0, #30
 8014f2e:	bf58      	it	pl
 8014f30:	6963      	ldrpl	r3, [r4, #20]
 8014f32:	60a3      	str	r3, [r4, #8]
 8014f34:	e7f4      	b.n	8014f20 <__swsetup_r+0xb0>
 8014f36:	2000      	movs	r0, #0
 8014f38:	e7f7      	b.n	8014f2a <__swsetup_r+0xba>
 8014f3a:	bf00      	nop
 8014f3c:	240003bc 	.word	0x240003bc
 8014f40:	0802fecc 	.word	0x0802fecc
 8014f44:	0802feec 	.word	0x0802feec
 8014f48:	0802feac 	.word	0x0802feac

08014f4c <abort>:
 8014f4c:	b508      	push	{r3, lr}
 8014f4e:	2006      	movs	r0, #6
 8014f50:	f000 faa4 	bl	801549c <raise>
 8014f54:	2001      	movs	r0, #1
 8014f56:	f7ee fd19 	bl	800398c <_exit>
	...

08014f5c <__sflush_r>:
 8014f5c:	898a      	ldrh	r2, [r1, #12]
 8014f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f62:	4605      	mov	r5, r0
 8014f64:	0710      	lsls	r0, r2, #28
 8014f66:	460c      	mov	r4, r1
 8014f68:	d458      	bmi.n	801501c <__sflush_r+0xc0>
 8014f6a:	684b      	ldr	r3, [r1, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	dc05      	bgt.n	8014f7c <__sflush_r+0x20>
 8014f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	dc02      	bgt.n	8014f7c <__sflush_r+0x20>
 8014f76:	2000      	movs	r0, #0
 8014f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f7e:	2e00      	cmp	r6, #0
 8014f80:	d0f9      	beq.n	8014f76 <__sflush_r+0x1a>
 8014f82:	2300      	movs	r3, #0
 8014f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f88:	682f      	ldr	r7, [r5, #0]
 8014f8a:	602b      	str	r3, [r5, #0]
 8014f8c:	d032      	beq.n	8014ff4 <__sflush_r+0x98>
 8014f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f90:	89a3      	ldrh	r3, [r4, #12]
 8014f92:	075a      	lsls	r2, r3, #29
 8014f94:	d505      	bpl.n	8014fa2 <__sflush_r+0x46>
 8014f96:	6863      	ldr	r3, [r4, #4]
 8014f98:	1ac0      	subs	r0, r0, r3
 8014f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f9c:	b10b      	cbz	r3, 8014fa2 <__sflush_r+0x46>
 8014f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014fa0:	1ac0      	subs	r0, r0, r3
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fa8:	6a21      	ldr	r1, [r4, #32]
 8014faa:	4628      	mov	r0, r5
 8014fac:	47b0      	blx	r6
 8014fae:	1c43      	adds	r3, r0, #1
 8014fb0:	89a3      	ldrh	r3, [r4, #12]
 8014fb2:	d106      	bne.n	8014fc2 <__sflush_r+0x66>
 8014fb4:	6829      	ldr	r1, [r5, #0]
 8014fb6:	291d      	cmp	r1, #29
 8014fb8:	d82c      	bhi.n	8015014 <__sflush_r+0xb8>
 8014fba:	4a2a      	ldr	r2, [pc, #168]	; (8015064 <__sflush_r+0x108>)
 8014fbc:	40ca      	lsrs	r2, r1
 8014fbe:	07d6      	lsls	r6, r2, #31
 8014fc0:	d528      	bpl.n	8015014 <__sflush_r+0xb8>
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	6062      	str	r2, [r4, #4]
 8014fc6:	04d9      	lsls	r1, r3, #19
 8014fc8:	6922      	ldr	r2, [r4, #16]
 8014fca:	6022      	str	r2, [r4, #0]
 8014fcc:	d504      	bpl.n	8014fd8 <__sflush_r+0x7c>
 8014fce:	1c42      	adds	r2, r0, #1
 8014fd0:	d101      	bne.n	8014fd6 <__sflush_r+0x7a>
 8014fd2:	682b      	ldr	r3, [r5, #0]
 8014fd4:	b903      	cbnz	r3, 8014fd8 <__sflush_r+0x7c>
 8014fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8014fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fda:	602f      	str	r7, [r5, #0]
 8014fdc:	2900      	cmp	r1, #0
 8014fde:	d0ca      	beq.n	8014f76 <__sflush_r+0x1a>
 8014fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fe4:	4299      	cmp	r1, r3
 8014fe6:	d002      	beq.n	8014fee <__sflush_r+0x92>
 8014fe8:	4628      	mov	r0, r5
 8014fea:	f000 f9e3 	bl	80153b4 <_free_r>
 8014fee:	2000      	movs	r0, #0
 8014ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8014ff2:	e7c1      	b.n	8014f78 <__sflush_r+0x1c>
 8014ff4:	6a21      	ldr	r1, [r4, #32]
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	47b0      	blx	r6
 8014ffc:	1c41      	adds	r1, r0, #1
 8014ffe:	d1c7      	bne.n	8014f90 <__sflush_r+0x34>
 8015000:	682b      	ldr	r3, [r5, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d0c4      	beq.n	8014f90 <__sflush_r+0x34>
 8015006:	2b1d      	cmp	r3, #29
 8015008:	d001      	beq.n	801500e <__sflush_r+0xb2>
 801500a:	2b16      	cmp	r3, #22
 801500c:	d101      	bne.n	8015012 <__sflush_r+0xb6>
 801500e:	602f      	str	r7, [r5, #0]
 8015010:	e7b1      	b.n	8014f76 <__sflush_r+0x1a>
 8015012:	89a3      	ldrh	r3, [r4, #12]
 8015014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015018:	81a3      	strh	r3, [r4, #12]
 801501a:	e7ad      	b.n	8014f78 <__sflush_r+0x1c>
 801501c:	690f      	ldr	r7, [r1, #16]
 801501e:	2f00      	cmp	r7, #0
 8015020:	d0a9      	beq.n	8014f76 <__sflush_r+0x1a>
 8015022:	0793      	lsls	r3, r2, #30
 8015024:	680e      	ldr	r6, [r1, #0]
 8015026:	bf08      	it	eq
 8015028:	694b      	ldreq	r3, [r1, #20]
 801502a:	600f      	str	r7, [r1, #0]
 801502c:	bf18      	it	ne
 801502e:	2300      	movne	r3, #0
 8015030:	eba6 0807 	sub.w	r8, r6, r7
 8015034:	608b      	str	r3, [r1, #8]
 8015036:	f1b8 0f00 	cmp.w	r8, #0
 801503a:	dd9c      	ble.n	8014f76 <__sflush_r+0x1a>
 801503c:	6a21      	ldr	r1, [r4, #32]
 801503e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015040:	4643      	mov	r3, r8
 8015042:	463a      	mov	r2, r7
 8015044:	4628      	mov	r0, r5
 8015046:	47b0      	blx	r6
 8015048:	2800      	cmp	r0, #0
 801504a:	dc06      	bgt.n	801505a <__sflush_r+0xfe>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015052:	81a3      	strh	r3, [r4, #12]
 8015054:	f04f 30ff 	mov.w	r0, #4294967295
 8015058:	e78e      	b.n	8014f78 <__sflush_r+0x1c>
 801505a:	4407      	add	r7, r0
 801505c:	eba8 0800 	sub.w	r8, r8, r0
 8015060:	e7e9      	b.n	8015036 <__sflush_r+0xda>
 8015062:	bf00      	nop
 8015064:	20400001 	.word	0x20400001

08015068 <_fflush_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	690b      	ldr	r3, [r1, #16]
 801506c:	4605      	mov	r5, r0
 801506e:	460c      	mov	r4, r1
 8015070:	b913      	cbnz	r3, 8015078 <_fflush_r+0x10>
 8015072:	2500      	movs	r5, #0
 8015074:	4628      	mov	r0, r5
 8015076:	bd38      	pop	{r3, r4, r5, pc}
 8015078:	b118      	cbz	r0, 8015082 <_fflush_r+0x1a>
 801507a:	6983      	ldr	r3, [r0, #24]
 801507c:	b90b      	cbnz	r3, 8015082 <_fflush_r+0x1a>
 801507e:	f000 f887 	bl	8015190 <__sinit>
 8015082:	4b14      	ldr	r3, [pc, #80]	; (80150d4 <_fflush_r+0x6c>)
 8015084:	429c      	cmp	r4, r3
 8015086:	d11b      	bne.n	80150c0 <_fflush_r+0x58>
 8015088:	686c      	ldr	r4, [r5, #4]
 801508a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d0ef      	beq.n	8015072 <_fflush_r+0xa>
 8015092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015094:	07d0      	lsls	r0, r2, #31
 8015096:	d404      	bmi.n	80150a2 <_fflush_r+0x3a>
 8015098:	0599      	lsls	r1, r3, #22
 801509a:	d402      	bmi.n	80150a2 <_fflush_r+0x3a>
 801509c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801509e:	f000 f915 	bl	80152cc <__retarget_lock_acquire_recursive>
 80150a2:	4628      	mov	r0, r5
 80150a4:	4621      	mov	r1, r4
 80150a6:	f7ff ff59 	bl	8014f5c <__sflush_r>
 80150aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150ac:	07da      	lsls	r2, r3, #31
 80150ae:	4605      	mov	r5, r0
 80150b0:	d4e0      	bmi.n	8015074 <_fflush_r+0xc>
 80150b2:	89a3      	ldrh	r3, [r4, #12]
 80150b4:	059b      	lsls	r3, r3, #22
 80150b6:	d4dd      	bmi.n	8015074 <_fflush_r+0xc>
 80150b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ba:	f000 f908 	bl	80152ce <__retarget_lock_release_recursive>
 80150be:	e7d9      	b.n	8015074 <_fflush_r+0xc>
 80150c0:	4b05      	ldr	r3, [pc, #20]	; (80150d8 <_fflush_r+0x70>)
 80150c2:	429c      	cmp	r4, r3
 80150c4:	d101      	bne.n	80150ca <_fflush_r+0x62>
 80150c6:	68ac      	ldr	r4, [r5, #8]
 80150c8:	e7df      	b.n	801508a <_fflush_r+0x22>
 80150ca:	4b04      	ldr	r3, [pc, #16]	; (80150dc <_fflush_r+0x74>)
 80150cc:	429c      	cmp	r4, r3
 80150ce:	bf08      	it	eq
 80150d0:	68ec      	ldreq	r4, [r5, #12]
 80150d2:	e7da      	b.n	801508a <_fflush_r+0x22>
 80150d4:	0802fecc 	.word	0x0802fecc
 80150d8:	0802feec 	.word	0x0802feec
 80150dc:	0802feac 	.word	0x0802feac

080150e0 <std>:
 80150e0:	2300      	movs	r3, #0
 80150e2:	b510      	push	{r4, lr}
 80150e4:	4604      	mov	r4, r0
 80150e6:	e9c0 3300 	strd	r3, r3, [r0]
 80150ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150ee:	6083      	str	r3, [r0, #8]
 80150f0:	8181      	strh	r1, [r0, #12]
 80150f2:	6643      	str	r3, [r0, #100]	; 0x64
 80150f4:	81c2      	strh	r2, [r0, #14]
 80150f6:	6183      	str	r3, [r0, #24]
 80150f8:	4619      	mov	r1, r3
 80150fa:	2208      	movs	r2, #8
 80150fc:	305c      	adds	r0, #92	; 0x5c
 80150fe:	f7ff fab5 	bl	801466c <memset>
 8015102:	4b05      	ldr	r3, [pc, #20]	; (8015118 <std+0x38>)
 8015104:	6263      	str	r3, [r4, #36]	; 0x24
 8015106:	4b05      	ldr	r3, [pc, #20]	; (801511c <std+0x3c>)
 8015108:	62a3      	str	r3, [r4, #40]	; 0x28
 801510a:	4b05      	ldr	r3, [pc, #20]	; (8015120 <std+0x40>)
 801510c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801510e:	4b05      	ldr	r3, [pc, #20]	; (8015124 <std+0x44>)
 8015110:	6224      	str	r4, [r4, #32]
 8015112:	6323      	str	r3, [r4, #48]	; 0x30
 8015114:	bd10      	pop	{r4, pc}
 8015116:	bf00      	nop
 8015118:	080154d5 	.word	0x080154d5
 801511c:	080154f7 	.word	0x080154f7
 8015120:	0801552f 	.word	0x0801552f
 8015124:	08015553 	.word	0x08015553

08015128 <_cleanup_r>:
 8015128:	4901      	ldr	r1, [pc, #4]	; (8015130 <_cleanup_r+0x8>)
 801512a:	f000 b8af 	b.w	801528c <_fwalk_reent>
 801512e:	bf00      	nop
 8015130:	08015069 	.word	0x08015069

08015134 <__sfmoreglue>:
 8015134:	b570      	push	{r4, r5, r6, lr}
 8015136:	2268      	movs	r2, #104	; 0x68
 8015138:	1e4d      	subs	r5, r1, #1
 801513a:	4355      	muls	r5, r2
 801513c:	460e      	mov	r6, r1
 801513e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015142:	f7ff fad1 	bl	80146e8 <_malloc_r>
 8015146:	4604      	mov	r4, r0
 8015148:	b140      	cbz	r0, 801515c <__sfmoreglue+0x28>
 801514a:	2100      	movs	r1, #0
 801514c:	e9c0 1600 	strd	r1, r6, [r0]
 8015150:	300c      	adds	r0, #12
 8015152:	60a0      	str	r0, [r4, #8]
 8015154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015158:	f7ff fa88 	bl	801466c <memset>
 801515c:	4620      	mov	r0, r4
 801515e:	bd70      	pop	{r4, r5, r6, pc}

08015160 <__sfp_lock_acquire>:
 8015160:	4801      	ldr	r0, [pc, #4]	; (8015168 <__sfp_lock_acquire+0x8>)
 8015162:	f000 b8b3 	b.w	80152cc <__retarget_lock_acquire_recursive>
 8015166:	bf00      	nop
 8015168:	24005735 	.word	0x24005735

0801516c <__sfp_lock_release>:
 801516c:	4801      	ldr	r0, [pc, #4]	; (8015174 <__sfp_lock_release+0x8>)
 801516e:	f000 b8ae 	b.w	80152ce <__retarget_lock_release_recursive>
 8015172:	bf00      	nop
 8015174:	24005735 	.word	0x24005735

08015178 <__sinit_lock_acquire>:
 8015178:	4801      	ldr	r0, [pc, #4]	; (8015180 <__sinit_lock_acquire+0x8>)
 801517a:	f000 b8a7 	b.w	80152cc <__retarget_lock_acquire_recursive>
 801517e:	bf00      	nop
 8015180:	24005736 	.word	0x24005736

08015184 <__sinit_lock_release>:
 8015184:	4801      	ldr	r0, [pc, #4]	; (801518c <__sinit_lock_release+0x8>)
 8015186:	f000 b8a2 	b.w	80152ce <__retarget_lock_release_recursive>
 801518a:	bf00      	nop
 801518c:	24005736 	.word	0x24005736

08015190 <__sinit>:
 8015190:	b510      	push	{r4, lr}
 8015192:	4604      	mov	r4, r0
 8015194:	f7ff fff0 	bl	8015178 <__sinit_lock_acquire>
 8015198:	69a3      	ldr	r3, [r4, #24]
 801519a:	b11b      	cbz	r3, 80151a4 <__sinit+0x14>
 801519c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151a0:	f7ff bff0 	b.w	8015184 <__sinit_lock_release>
 80151a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80151a8:	6523      	str	r3, [r4, #80]	; 0x50
 80151aa:	4b13      	ldr	r3, [pc, #76]	; (80151f8 <__sinit+0x68>)
 80151ac:	4a13      	ldr	r2, [pc, #76]	; (80151fc <__sinit+0x6c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80151b2:	42a3      	cmp	r3, r4
 80151b4:	bf04      	itt	eq
 80151b6:	2301      	moveq	r3, #1
 80151b8:	61a3      	streq	r3, [r4, #24]
 80151ba:	4620      	mov	r0, r4
 80151bc:	f000 f820 	bl	8015200 <__sfp>
 80151c0:	6060      	str	r0, [r4, #4]
 80151c2:	4620      	mov	r0, r4
 80151c4:	f000 f81c 	bl	8015200 <__sfp>
 80151c8:	60a0      	str	r0, [r4, #8]
 80151ca:	4620      	mov	r0, r4
 80151cc:	f000 f818 	bl	8015200 <__sfp>
 80151d0:	2200      	movs	r2, #0
 80151d2:	60e0      	str	r0, [r4, #12]
 80151d4:	2104      	movs	r1, #4
 80151d6:	6860      	ldr	r0, [r4, #4]
 80151d8:	f7ff ff82 	bl	80150e0 <std>
 80151dc:	68a0      	ldr	r0, [r4, #8]
 80151de:	2201      	movs	r2, #1
 80151e0:	2109      	movs	r1, #9
 80151e2:	f7ff ff7d 	bl	80150e0 <std>
 80151e6:	68e0      	ldr	r0, [r4, #12]
 80151e8:	2202      	movs	r2, #2
 80151ea:	2112      	movs	r1, #18
 80151ec:	f7ff ff78 	bl	80150e0 <std>
 80151f0:	2301      	movs	r3, #1
 80151f2:	61a3      	str	r3, [r4, #24]
 80151f4:	e7d2      	b.n	801519c <__sinit+0xc>
 80151f6:	bf00      	nop
 80151f8:	0802fe74 	.word	0x0802fe74
 80151fc:	08015129 	.word	0x08015129

08015200 <__sfp>:
 8015200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015202:	4607      	mov	r7, r0
 8015204:	f7ff ffac 	bl	8015160 <__sfp_lock_acquire>
 8015208:	4b1e      	ldr	r3, [pc, #120]	; (8015284 <__sfp+0x84>)
 801520a:	681e      	ldr	r6, [r3, #0]
 801520c:	69b3      	ldr	r3, [r6, #24]
 801520e:	b913      	cbnz	r3, 8015216 <__sfp+0x16>
 8015210:	4630      	mov	r0, r6
 8015212:	f7ff ffbd 	bl	8015190 <__sinit>
 8015216:	3648      	adds	r6, #72	; 0x48
 8015218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801521c:	3b01      	subs	r3, #1
 801521e:	d503      	bpl.n	8015228 <__sfp+0x28>
 8015220:	6833      	ldr	r3, [r6, #0]
 8015222:	b30b      	cbz	r3, 8015268 <__sfp+0x68>
 8015224:	6836      	ldr	r6, [r6, #0]
 8015226:	e7f7      	b.n	8015218 <__sfp+0x18>
 8015228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801522c:	b9d5      	cbnz	r5, 8015264 <__sfp+0x64>
 801522e:	4b16      	ldr	r3, [pc, #88]	; (8015288 <__sfp+0x88>)
 8015230:	60e3      	str	r3, [r4, #12]
 8015232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015236:	6665      	str	r5, [r4, #100]	; 0x64
 8015238:	f000 f847 	bl	80152ca <__retarget_lock_init_recursive>
 801523c:	f7ff ff96 	bl	801516c <__sfp_lock_release>
 8015240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015248:	6025      	str	r5, [r4, #0]
 801524a:	61a5      	str	r5, [r4, #24]
 801524c:	2208      	movs	r2, #8
 801524e:	4629      	mov	r1, r5
 8015250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015254:	f7ff fa0a 	bl	801466c <memset>
 8015258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801525c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015260:	4620      	mov	r0, r4
 8015262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015264:	3468      	adds	r4, #104	; 0x68
 8015266:	e7d9      	b.n	801521c <__sfp+0x1c>
 8015268:	2104      	movs	r1, #4
 801526a:	4638      	mov	r0, r7
 801526c:	f7ff ff62 	bl	8015134 <__sfmoreglue>
 8015270:	4604      	mov	r4, r0
 8015272:	6030      	str	r0, [r6, #0]
 8015274:	2800      	cmp	r0, #0
 8015276:	d1d5      	bne.n	8015224 <__sfp+0x24>
 8015278:	f7ff ff78 	bl	801516c <__sfp_lock_release>
 801527c:	230c      	movs	r3, #12
 801527e:	603b      	str	r3, [r7, #0]
 8015280:	e7ee      	b.n	8015260 <__sfp+0x60>
 8015282:	bf00      	nop
 8015284:	0802fe74 	.word	0x0802fe74
 8015288:	ffff0001 	.word	0xffff0001

0801528c <_fwalk_reent>:
 801528c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015290:	4606      	mov	r6, r0
 8015292:	4688      	mov	r8, r1
 8015294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015298:	2700      	movs	r7, #0
 801529a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801529e:	f1b9 0901 	subs.w	r9, r9, #1
 80152a2:	d505      	bpl.n	80152b0 <_fwalk_reent+0x24>
 80152a4:	6824      	ldr	r4, [r4, #0]
 80152a6:	2c00      	cmp	r4, #0
 80152a8:	d1f7      	bne.n	801529a <_fwalk_reent+0xe>
 80152aa:	4638      	mov	r0, r7
 80152ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152b0:	89ab      	ldrh	r3, [r5, #12]
 80152b2:	2b01      	cmp	r3, #1
 80152b4:	d907      	bls.n	80152c6 <_fwalk_reent+0x3a>
 80152b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152ba:	3301      	adds	r3, #1
 80152bc:	d003      	beq.n	80152c6 <_fwalk_reent+0x3a>
 80152be:	4629      	mov	r1, r5
 80152c0:	4630      	mov	r0, r6
 80152c2:	47c0      	blx	r8
 80152c4:	4307      	orrs	r7, r0
 80152c6:	3568      	adds	r5, #104	; 0x68
 80152c8:	e7e9      	b.n	801529e <_fwalk_reent+0x12>

080152ca <__retarget_lock_init_recursive>:
 80152ca:	4770      	bx	lr

080152cc <__retarget_lock_acquire_recursive>:
 80152cc:	4770      	bx	lr

080152ce <__retarget_lock_release_recursive>:
 80152ce:	4770      	bx	lr

080152d0 <__swhatbuf_r>:
 80152d0:	b570      	push	{r4, r5, r6, lr}
 80152d2:	460e      	mov	r6, r1
 80152d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d8:	2900      	cmp	r1, #0
 80152da:	b096      	sub	sp, #88	; 0x58
 80152dc:	4614      	mov	r4, r2
 80152de:	461d      	mov	r5, r3
 80152e0:	da08      	bge.n	80152f4 <__swhatbuf_r+0x24>
 80152e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80152e6:	2200      	movs	r2, #0
 80152e8:	602a      	str	r2, [r5, #0]
 80152ea:	061a      	lsls	r2, r3, #24
 80152ec:	d410      	bmi.n	8015310 <__swhatbuf_r+0x40>
 80152ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152f2:	e00e      	b.n	8015312 <__swhatbuf_r+0x42>
 80152f4:	466a      	mov	r2, sp
 80152f6:	f000 f953 	bl	80155a0 <_fstat_r>
 80152fa:	2800      	cmp	r0, #0
 80152fc:	dbf1      	blt.n	80152e2 <__swhatbuf_r+0x12>
 80152fe:	9a01      	ldr	r2, [sp, #4]
 8015300:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015304:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015308:	425a      	negs	r2, r3
 801530a:	415a      	adcs	r2, r3
 801530c:	602a      	str	r2, [r5, #0]
 801530e:	e7ee      	b.n	80152ee <__swhatbuf_r+0x1e>
 8015310:	2340      	movs	r3, #64	; 0x40
 8015312:	2000      	movs	r0, #0
 8015314:	6023      	str	r3, [r4, #0]
 8015316:	b016      	add	sp, #88	; 0x58
 8015318:	bd70      	pop	{r4, r5, r6, pc}
	...

0801531c <__smakebuf_r>:
 801531c:	898b      	ldrh	r3, [r1, #12]
 801531e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015320:	079d      	lsls	r5, r3, #30
 8015322:	4606      	mov	r6, r0
 8015324:	460c      	mov	r4, r1
 8015326:	d507      	bpl.n	8015338 <__smakebuf_r+0x1c>
 8015328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	6123      	str	r3, [r4, #16]
 8015330:	2301      	movs	r3, #1
 8015332:	6163      	str	r3, [r4, #20]
 8015334:	b002      	add	sp, #8
 8015336:	bd70      	pop	{r4, r5, r6, pc}
 8015338:	ab01      	add	r3, sp, #4
 801533a:	466a      	mov	r2, sp
 801533c:	f7ff ffc8 	bl	80152d0 <__swhatbuf_r>
 8015340:	9900      	ldr	r1, [sp, #0]
 8015342:	4605      	mov	r5, r0
 8015344:	4630      	mov	r0, r6
 8015346:	f7ff f9cf 	bl	80146e8 <_malloc_r>
 801534a:	b948      	cbnz	r0, 8015360 <__smakebuf_r+0x44>
 801534c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015350:	059a      	lsls	r2, r3, #22
 8015352:	d4ef      	bmi.n	8015334 <__smakebuf_r+0x18>
 8015354:	f023 0303 	bic.w	r3, r3, #3
 8015358:	f043 0302 	orr.w	r3, r3, #2
 801535c:	81a3      	strh	r3, [r4, #12]
 801535e:	e7e3      	b.n	8015328 <__smakebuf_r+0xc>
 8015360:	4b0d      	ldr	r3, [pc, #52]	; (8015398 <__smakebuf_r+0x7c>)
 8015362:	62b3      	str	r3, [r6, #40]	; 0x28
 8015364:	89a3      	ldrh	r3, [r4, #12]
 8015366:	6020      	str	r0, [r4, #0]
 8015368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801536c:	81a3      	strh	r3, [r4, #12]
 801536e:	9b00      	ldr	r3, [sp, #0]
 8015370:	6163      	str	r3, [r4, #20]
 8015372:	9b01      	ldr	r3, [sp, #4]
 8015374:	6120      	str	r0, [r4, #16]
 8015376:	b15b      	cbz	r3, 8015390 <__smakebuf_r+0x74>
 8015378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801537c:	4630      	mov	r0, r6
 801537e:	f000 f921 	bl	80155c4 <_isatty_r>
 8015382:	b128      	cbz	r0, 8015390 <__smakebuf_r+0x74>
 8015384:	89a3      	ldrh	r3, [r4, #12]
 8015386:	f023 0303 	bic.w	r3, r3, #3
 801538a:	f043 0301 	orr.w	r3, r3, #1
 801538e:	81a3      	strh	r3, [r4, #12]
 8015390:	89a0      	ldrh	r0, [r4, #12]
 8015392:	4305      	orrs	r5, r0
 8015394:	81a5      	strh	r5, [r4, #12]
 8015396:	e7cd      	b.n	8015334 <__smakebuf_r+0x18>
 8015398:	08015129 	.word	0x08015129

0801539c <__malloc_lock>:
 801539c:	4801      	ldr	r0, [pc, #4]	; (80153a4 <__malloc_lock+0x8>)
 801539e:	f7ff bf95 	b.w	80152cc <__retarget_lock_acquire_recursive>
 80153a2:	bf00      	nop
 80153a4:	24005734 	.word	0x24005734

080153a8 <__malloc_unlock>:
 80153a8:	4801      	ldr	r0, [pc, #4]	; (80153b0 <__malloc_unlock+0x8>)
 80153aa:	f7ff bf90 	b.w	80152ce <__retarget_lock_release_recursive>
 80153ae:	bf00      	nop
 80153b0:	24005734 	.word	0x24005734

080153b4 <_free_r>:
 80153b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153b6:	2900      	cmp	r1, #0
 80153b8:	d044      	beq.n	8015444 <_free_r+0x90>
 80153ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153be:	9001      	str	r0, [sp, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	f1a1 0404 	sub.w	r4, r1, #4
 80153c6:	bfb8      	it	lt
 80153c8:	18e4      	addlt	r4, r4, r3
 80153ca:	f7ff ffe7 	bl	801539c <__malloc_lock>
 80153ce:	4a1e      	ldr	r2, [pc, #120]	; (8015448 <_free_r+0x94>)
 80153d0:	9801      	ldr	r0, [sp, #4]
 80153d2:	6813      	ldr	r3, [r2, #0]
 80153d4:	b933      	cbnz	r3, 80153e4 <_free_r+0x30>
 80153d6:	6063      	str	r3, [r4, #4]
 80153d8:	6014      	str	r4, [r2, #0]
 80153da:	b003      	add	sp, #12
 80153dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153e0:	f7ff bfe2 	b.w	80153a8 <__malloc_unlock>
 80153e4:	42a3      	cmp	r3, r4
 80153e6:	d908      	bls.n	80153fa <_free_r+0x46>
 80153e8:	6825      	ldr	r5, [r4, #0]
 80153ea:	1961      	adds	r1, r4, r5
 80153ec:	428b      	cmp	r3, r1
 80153ee:	bf01      	itttt	eq
 80153f0:	6819      	ldreq	r1, [r3, #0]
 80153f2:	685b      	ldreq	r3, [r3, #4]
 80153f4:	1949      	addeq	r1, r1, r5
 80153f6:	6021      	streq	r1, [r4, #0]
 80153f8:	e7ed      	b.n	80153d6 <_free_r+0x22>
 80153fa:	461a      	mov	r2, r3
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	b10b      	cbz	r3, 8015404 <_free_r+0x50>
 8015400:	42a3      	cmp	r3, r4
 8015402:	d9fa      	bls.n	80153fa <_free_r+0x46>
 8015404:	6811      	ldr	r1, [r2, #0]
 8015406:	1855      	adds	r5, r2, r1
 8015408:	42a5      	cmp	r5, r4
 801540a:	d10b      	bne.n	8015424 <_free_r+0x70>
 801540c:	6824      	ldr	r4, [r4, #0]
 801540e:	4421      	add	r1, r4
 8015410:	1854      	adds	r4, r2, r1
 8015412:	42a3      	cmp	r3, r4
 8015414:	6011      	str	r1, [r2, #0]
 8015416:	d1e0      	bne.n	80153da <_free_r+0x26>
 8015418:	681c      	ldr	r4, [r3, #0]
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	6053      	str	r3, [r2, #4]
 801541e:	4421      	add	r1, r4
 8015420:	6011      	str	r1, [r2, #0]
 8015422:	e7da      	b.n	80153da <_free_r+0x26>
 8015424:	d902      	bls.n	801542c <_free_r+0x78>
 8015426:	230c      	movs	r3, #12
 8015428:	6003      	str	r3, [r0, #0]
 801542a:	e7d6      	b.n	80153da <_free_r+0x26>
 801542c:	6825      	ldr	r5, [r4, #0]
 801542e:	1961      	adds	r1, r4, r5
 8015430:	428b      	cmp	r3, r1
 8015432:	bf04      	itt	eq
 8015434:	6819      	ldreq	r1, [r3, #0]
 8015436:	685b      	ldreq	r3, [r3, #4]
 8015438:	6063      	str	r3, [r4, #4]
 801543a:	bf04      	itt	eq
 801543c:	1949      	addeq	r1, r1, r5
 801543e:	6021      	streq	r1, [r4, #0]
 8015440:	6054      	str	r4, [r2, #4]
 8015442:	e7ca      	b.n	80153da <_free_r+0x26>
 8015444:	b003      	add	sp, #12
 8015446:	bd30      	pop	{r4, r5, pc}
 8015448:	2400572c 	.word	0x2400572c

0801544c <_raise_r>:
 801544c:	291f      	cmp	r1, #31
 801544e:	b538      	push	{r3, r4, r5, lr}
 8015450:	4604      	mov	r4, r0
 8015452:	460d      	mov	r5, r1
 8015454:	d904      	bls.n	8015460 <_raise_r+0x14>
 8015456:	2316      	movs	r3, #22
 8015458:	6003      	str	r3, [r0, #0]
 801545a:	f04f 30ff 	mov.w	r0, #4294967295
 801545e:	bd38      	pop	{r3, r4, r5, pc}
 8015460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015462:	b112      	cbz	r2, 801546a <_raise_r+0x1e>
 8015464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015468:	b94b      	cbnz	r3, 801547e <_raise_r+0x32>
 801546a:	4620      	mov	r0, r4
 801546c:	f000 f830 	bl	80154d0 <_getpid_r>
 8015470:	462a      	mov	r2, r5
 8015472:	4601      	mov	r1, r0
 8015474:	4620      	mov	r0, r4
 8015476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801547a:	f000 b817 	b.w	80154ac <_kill_r>
 801547e:	2b01      	cmp	r3, #1
 8015480:	d00a      	beq.n	8015498 <_raise_r+0x4c>
 8015482:	1c59      	adds	r1, r3, #1
 8015484:	d103      	bne.n	801548e <_raise_r+0x42>
 8015486:	2316      	movs	r3, #22
 8015488:	6003      	str	r3, [r0, #0]
 801548a:	2001      	movs	r0, #1
 801548c:	e7e7      	b.n	801545e <_raise_r+0x12>
 801548e:	2400      	movs	r4, #0
 8015490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015494:	4628      	mov	r0, r5
 8015496:	4798      	blx	r3
 8015498:	2000      	movs	r0, #0
 801549a:	e7e0      	b.n	801545e <_raise_r+0x12>

0801549c <raise>:
 801549c:	4b02      	ldr	r3, [pc, #8]	; (80154a8 <raise+0xc>)
 801549e:	4601      	mov	r1, r0
 80154a0:	6818      	ldr	r0, [r3, #0]
 80154a2:	f7ff bfd3 	b.w	801544c <_raise_r>
 80154a6:	bf00      	nop
 80154a8:	240003bc 	.word	0x240003bc

080154ac <_kill_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	4d07      	ldr	r5, [pc, #28]	; (80154cc <_kill_r+0x20>)
 80154b0:	2300      	movs	r3, #0
 80154b2:	4604      	mov	r4, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	4611      	mov	r1, r2
 80154b8:	602b      	str	r3, [r5, #0]
 80154ba:	f7ee fa57 	bl	800396c <_kill>
 80154be:	1c43      	adds	r3, r0, #1
 80154c0:	d102      	bne.n	80154c8 <_kill_r+0x1c>
 80154c2:	682b      	ldr	r3, [r5, #0]
 80154c4:	b103      	cbz	r3, 80154c8 <_kill_r+0x1c>
 80154c6:	6023      	str	r3, [r4, #0]
 80154c8:	bd38      	pop	{r3, r4, r5, pc}
 80154ca:	bf00      	nop
 80154cc:	24005738 	.word	0x24005738

080154d0 <_getpid_r>:
 80154d0:	f7ee ba44 	b.w	800395c <_getpid>

080154d4 <__sread>:
 80154d4:	b510      	push	{r4, lr}
 80154d6:	460c      	mov	r4, r1
 80154d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154dc:	f000 f894 	bl	8015608 <_read_r>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	bfab      	itete	ge
 80154e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154e6:	89a3      	ldrhlt	r3, [r4, #12]
 80154e8:	181b      	addge	r3, r3, r0
 80154ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154ee:	bfac      	ite	ge
 80154f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80154f2:	81a3      	strhlt	r3, [r4, #12]
 80154f4:	bd10      	pop	{r4, pc}

080154f6 <__swrite>:
 80154f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fa:	461f      	mov	r7, r3
 80154fc:	898b      	ldrh	r3, [r1, #12]
 80154fe:	05db      	lsls	r3, r3, #23
 8015500:	4605      	mov	r5, r0
 8015502:	460c      	mov	r4, r1
 8015504:	4616      	mov	r6, r2
 8015506:	d505      	bpl.n	8015514 <__swrite+0x1e>
 8015508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801550c:	2302      	movs	r3, #2
 801550e:	2200      	movs	r2, #0
 8015510:	f000 f868 	bl	80155e4 <_lseek_r>
 8015514:	89a3      	ldrh	r3, [r4, #12]
 8015516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801551a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801551e:	81a3      	strh	r3, [r4, #12]
 8015520:	4632      	mov	r2, r6
 8015522:	463b      	mov	r3, r7
 8015524:	4628      	mov	r0, r5
 8015526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801552a:	f000 b817 	b.w	801555c <_write_r>

0801552e <__sseek>:
 801552e:	b510      	push	{r4, lr}
 8015530:	460c      	mov	r4, r1
 8015532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015536:	f000 f855 	bl	80155e4 <_lseek_r>
 801553a:	1c43      	adds	r3, r0, #1
 801553c:	89a3      	ldrh	r3, [r4, #12]
 801553e:	bf15      	itete	ne
 8015540:	6560      	strne	r0, [r4, #84]	; 0x54
 8015542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801554a:	81a3      	strheq	r3, [r4, #12]
 801554c:	bf18      	it	ne
 801554e:	81a3      	strhne	r3, [r4, #12]
 8015550:	bd10      	pop	{r4, pc}

08015552 <__sclose>:
 8015552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015556:	f000 b813 	b.w	8015580 <_close_r>
	...

0801555c <_write_r>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	4d07      	ldr	r5, [pc, #28]	; (801557c <_write_r+0x20>)
 8015560:	4604      	mov	r4, r0
 8015562:	4608      	mov	r0, r1
 8015564:	4611      	mov	r1, r2
 8015566:	2200      	movs	r2, #0
 8015568:	602a      	str	r2, [r5, #0]
 801556a:	461a      	mov	r2, r3
 801556c:	f7ee fa35 	bl	80039da <_write>
 8015570:	1c43      	adds	r3, r0, #1
 8015572:	d102      	bne.n	801557a <_write_r+0x1e>
 8015574:	682b      	ldr	r3, [r5, #0]
 8015576:	b103      	cbz	r3, 801557a <_write_r+0x1e>
 8015578:	6023      	str	r3, [r4, #0]
 801557a:	bd38      	pop	{r3, r4, r5, pc}
 801557c:	24005738 	.word	0x24005738

08015580 <_close_r>:
 8015580:	b538      	push	{r3, r4, r5, lr}
 8015582:	4d06      	ldr	r5, [pc, #24]	; (801559c <_close_r+0x1c>)
 8015584:	2300      	movs	r3, #0
 8015586:	4604      	mov	r4, r0
 8015588:	4608      	mov	r0, r1
 801558a:	602b      	str	r3, [r5, #0]
 801558c:	f7ee fa41 	bl	8003a12 <_close>
 8015590:	1c43      	adds	r3, r0, #1
 8015592:	d102      	bne.n	801559a <_close_r+0x1a>
 8015594:	682b      	ldr	r3, [r5, #0]
 8015596:	b103      	cbz	r3, 801559a <_close_r+0x1a>
 8015598:	6023      	str	r3, [r4, #0]
 801559a:	bd38      	pop	{r3, r4, r5, pc}
 801559c:	24005738 	.word	0x24005738

080155a0 <_fstat_r>:
 80155a0:	b538      	push	{r3, r4, r5, lr}
 80155a2:	4d07      	ldr	r5, [pc, #28]	; (80155c0 <_fstat_r+0x20>)
 80155a4:	2300      	movs	r3, #0
 80155a6:	4604      	mov	r4, r0
 80155a8:	4608      	mov	r0, r1
 80155aa:	4611      	mov	r1, r2
 80155ac:	602b      	str	r3, [r5, #0]
 80155ae:	f7ee fa3c 	bl	8003a2a <_fstat>
 80155b2:	1c43      	adds	r3, r0, #1
 80155b4:	d102      	bne.n	80155bc <_fstat_r+0x1c>
 80155b6:	682b      	ldr	r3, [r5, #0]
 80155b8:	b103      	cbz	r3, 80155bc <_fstat_r+0x1c>
 80155ba:	6023      	str	r3, [r4, #0]
 80155bc:	bd38      	pop	{r3, r4, r5, pc}
 80155be:	bf00      	nop
 80155c0:	24005738 	.word	0x24005738

080155c4 <_isatty_r>:
 80155c4:	b538      	push	{r3, r4, r5, lr}
 80155c6:	4d06      	ldr	r5, [pc, #24]	; (80155e0 <_isatty_r+0x1c>)
 80155c8:	2300      	movs	r3, #0
 80155ca:	4604      	mov	r4, r0
 80155cc:	4608      	mov	r0, r1
 80155ce:	602b      	str	r3, [r5, #0]
 80155d0:	f7ee fa3b 	bl	8003a4a <_isatty>
 80155d4:	1c43      	adds	r3, r0, #1
 80155d6:	d102      	bne.n	80155de <_isatty_r+0x1a>
 80155d8:	682b      	ldr	r3, [r5, #0]
 80155da:	b103      	cbz	r3, 80155de <_isatty_r+0x1a>
 80155dc:	6023      	str	r3, [r4, #0]
 80155de:	bd38      	pop	{r3, r4, r5, pc}
 80155e0:	24005738 	.word	0x24005738

080155e4 <_lseek_r>:
 80155e4:	b538      	push	{r3, r4, r5, lr}
 80155e6:	4d07      	ldr	r5, [pc, #28]	; (8015604 <_lseek_r+0x20>)
 80155e8:	4604      	mov	r4, r0
 80155ea:	4608      	mov	r0, r1
 80155ec:	4611      	mov	r1, r2
 80155ee:	2200      	movs	r2, #0
 80155f0:	602a      	str	r2, [r5, #0]
 80155f2:	461a      	mov	r2, r3
 80155f4:	f7ee fa34 	bl	8003a60 <_lseek>
 80155f8:	1c43      	adds	r3, r0, #1
 80155fa:	d102      	bne.n	8015602 <_lseek_r+0x1e>
 80155fc:	682b      	ldr	r3, [r5, #0]
 80155fe:	b103      	cbz	r3, 8015602 <_lseek_r+0x1e>
 8015600:	6023      	str	r3, [r4, #0]
 8015602:	bd38      	pop	{r3, r4, r5, pc}
 8015604:	24005738 	.word	0x24005738

08015608 <_read_r>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	4d07      	ldr	r5, [pc, #28]	; (8015628 <_read_r+0x20>)
 801560c:	4604      	mov	r4, r0
 801560e:	4608      	mov	r0, r1
 8015610:	4611      	mov	r1, r2
 8015612:	2200      	movs	r2, #0
 8015614:	602a      	str	r2, [r5, #0]
 8015616:	461a      	mov	r2, r3
 8015618:	f7ee f9c2 	bl	80039a0 <_read>
 801561c:	1c43      	adds	r3, r0, #1
 801561e:	d102      	bne.n	8015626 <_read_r+0x1e>
 8015620:	682b      	ldr	r3, [r5, #0]
 8015622:	b103      	cbz	r3, 8015626 <_read_r+0x1e>
 8015624:	6023      	str	r3, [r4, #0]
 8015626:	bd38      	pop	{r3, r4, r5, pc}
 8015628:	24005738 	.word	0x24005738

0801562c <_init>:
 801562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801562e:	bf00      	nop
 8015630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015632:	bc08      	pop	{r3}
 8015634:	469e      	mov	lr, r3
 8015636:	4770      	bx	lr

08015638 <_fini>:
 8015638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563a:	bf00      	nop
 801563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801563e:	bc08      	pop	{r3}
 8015640:	469e      	mov	lr, r3
 8015642:	4770      	bx	lr
